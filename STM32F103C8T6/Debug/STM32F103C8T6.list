
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003700  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800380c  0800380c  0000480c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038c8  080038c8  000050a0  2**0
                  CONTENTS
  4 .ARM          00000008  080038c8  080038c8  000048c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038d0  080038d0  000050a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d0  080038d0  000048d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038d4  080038d4  000048d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  080038d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200000a0  08003978  000050a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08003978  00005378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a949  00000000  00000000  000050c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001faa  00000000  00000000  0000fa12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  000119c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000939  00000000  00000000  000125c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180a1  00000000  00000000  00012f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d867  00000000  00000000  0002afa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089f27  00000000  00000000  00038809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2730  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003628  00000000  00000000  000c2774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000c5d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	080037f4 	.word	0x080037f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	080037f4 	.word	0x080037f4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <KeyPad_Scan>:
    /* Set all rows to high */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
}

/* Scan the 4x5 keypad and return the pressed key value */
uint8_t KeyPad_Scan(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
    uint32_t currentMillis = HAL_GetTick();
 8000162:	f001 f96d 	bl	8001440 <HAL_GetTick>
 8000166:	6038      	str	r0, [r7, #0]

    if (currentMillis - lastDebounceTime < DEBOUNCE_DELAY) {
 8000168:	4b24      	ldr	r3, [pc, #144]	@ (80001fc <KeyPad_Scan+0xa0>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	683a      	ldr	r2, [r7, #0]
 800016e:	1ad3      	subs	r3, r2, r3
 8000170:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000174:	d201      	bcs.n	800017a <KeyPad_Scan+0x1e>
        return 0xFF;
 8000176:	23ff      	movs	r3, #255	@ 0xff
 8000178:	e03b      	b.n	80001f2 <KeyPad_Scan+0x96>
    }

    for (uint8_t row = 0; row < 4; row++) {
 800017a:	2300      	movs	r3, #0
 800017c:	71fb      	strb	r3, [r7, #7]
 800017e:	e034      	b.n	80001ea <KeyPad_Scan+0x8e>
        /* Set all rows low */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000186:	481e      	ldr	r0, [pc, #120]	@ (8000200 <KeyPad_Scan+0xa4>)
 8000188:	f001 fc0d 	bl	80019a6 <HAL_GPIO_WritePin>

        /* Set the current row high */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 << row, GPIO_PIN_SET);
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	2240      	movs	r2, #64	@ 0x40
 8000190:	fa02 f303 	lsl.w	r3, r2, r3
 8000194:	b29b      	uxth	r3, r3
 8000196:	2201      	movs	r2, #1
 8000198:	4619      	mov	r1, r3
 800019a:	4819      	ldr	r0, [pc, #100]	@ (8000200 <KeyPad_Scan+0xa4>)
 800019c:	f001 fc03 	bl	80019a6 <HAL_GPIO_WritePin>

        /* Read each column */
        for (uint8_t col = 0; col < 5; col++) {
 80001a0:	2300      	movs	r3, #0
 80001a2:	71bb      	strb	r3, [r7, #6]
 80001a4:	e01b      	b.n	80001de <KeyPad_Scan+0x82>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 << col) == GPIO_PIN_SET) {
 80001a6:	79bb      	ldrb	r3, [r7, #6]
 80001a8:	2201      	movs	r2, #1
 80001aa:	fa02 f303 	lsl.w	r3, r2, r3
 80001ae:	b29b      	uxth	r3, r3
 80001b0:	4619      	mov	r1, r3
 80001b2:	4813      	ldr	r0, [pc, #76]	@ (8000200 <KeyPad_Scan+0xa4>)
 80001b4:	f001 fbe0 	bl	8001978 <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b01      	cmp	r3, #1
 80001bc:	d10c      	bne.n	80001d8 <KeyPad_Scan+0x7c>
                lastDebounceTime = currentMillis;
 80001be:	4a0f      	ldr	r2, [pc, #60]	@ (80001fc <KeyPad_Scan+0xa0>)
 80001c0:	683b      	ldr	r3, [r7, #0]
 80001c2:	6013      	str	r3, [r2, #0]
                return keyMap[row][col];
 80001c4:	79fa      	ldrb	r2, [r7, #7]
 80001c6:	79b9      	ldrb	r1, [r7, #6]
 80001c8:	480e      	ldr	r0, [pc, #56]	@ (8000204 <KeyPad_Scan+0xa8>)
 80001ca:	4613      	mov	r3, r2
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	4413      	add	r3, r2
 80001d0:	4403      	add	r3, r0
 80001d2:	440b      	add	r3, r1
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	e00c      	b.n	80001f2 <KeyPad_Scan+0x96>
        for (uint8_t col = 0; col < 5; col++) {
 80001d8:	79bb      	ldrb	r3, [r7, #6]
 80001da:	3301      	adds	r3, #1
 80001dc:	71bb      	strb	r3, [r7, #6]
 80001de:	79bb      	ldrb	r3, [r7, #6]
 80001e0:	2b04      	cmp	r3, #4
 80001e2:	d9e0      	bls.n	80001a6 <KeyPad_Scan+0x4a>
    for (uint8_t row = 0; row < 4; row++) {
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	3301      	adds	r3, #1
 80001e8:	71fb      	strb	r3, [r7, #7]
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2b03      	cmp	r3, #3
 80001ee:	d9c7      	bls.n	8000180 <KeyPad_Scan+0x24>
            }
        }
    }

    return 0xFF;
 80001f0:	23ff      	movs	r3, #255	@ 0xff
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	200000bc 	.word	0x200000bc
 8000200:	40010c00 	.word	0x40010c00
 8000204:	0800385c 	.word	0x0800385c

08000208 <formatTotalLiters>:
// T + L pressed show total from beginning
void formatTotalLiters(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	60b9      	str	r1, [r7, #8]
 8000212:	607a      	str	r2, [r7, #4]
	if (total < 100000000) {
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	4a1b      	ldr	r2, [pc, #108]	@ (8000284 <formatTotalLiters+0x7c>)
 8000218:	4293      	cmp	r3, r2
 800021a:	d815      	bhi.n	8000248 <formatTotalLiters+0x40>
		* buffer1 = total / 1000000;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	4a1a      	ldr	r2, [pc, #104]	@ (8000288 <formatTotalLiters+0x80>)
 8000220:	fba2 2303 	umull	r2, r3, r2, r3
 8000224:	0c9a      	lsrs	r2, r3, #18
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	4b16      	ldr	r3, [pc, #88]	@ (8000288 <formatTotalLiters+0x80>)
 800022e:	fba3 1302 	umull	r1, r3, r3, r2
 8000232:	0c9b      	lsrs	r3, r3, #18
 8000234:	4915      	ldr	r1, [pc, #84]	@ (800028c <formatTotalLiters+0x84>)
 8000236:	fb01 f303 	mul.w	r3, r1, r3
 800023a:	1ad3      	subs	r3, r2, r3
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 8000240:	4b13      	ldr	r3, [pc, #76]	@ (8000290 <formatTotalLiters+0x88>)
 8000242:	2203      	movs	r2, #3
 8000244:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 = total / 100000000;
		* buffer2 = (total % 100000000 ) /100;
		LEDPointFlag = 1;
	}
}
 8000246:	e018      	b.n	800027a <formatTotalLiters+0x72>
		* buffer1 = total / 100000000;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	4a12      	ldr	r2, [pc, #72]	@ (8000294 <formatTotalLiters+0x8c>)
 800024c:	fba2 2303 	umull	r2, r3, r2, r3
 8000250:	0e5a      	lsrs	r2, r3, #25
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	601a      	str	r2, [r3, #0]
		* buffer2 = (total % 100000000 ) /100;
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4b0e      	ldr	r3, [pc, #56]	@ (8000294 <formatTotalLiters+0x8c>)
 800025a:	fba3 1302 	umull	r1, r3, r3, r2
 800025e:	0e5b      	lsrs	r3, r3, #25
 8000260:	490d      	ldr	r1, [pc, #52]	@ (8000298 <formatTotalLiters+0x90>)
 8000262:	fb01 f303 	mul.w	r3, r1, r3
 8000266:	1ad3      	subs	r3, r2, r3
 8000268:	4a0c      	ldr	r2, [pc, #48]	@ (800029c <formatTotalLiters+0x94>)
 800026a:	fba2 2303 	umull	r2, r3, r2, r3
 800026e:	095a      	lsrs	r2, r3, #5
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	601a      	str	r2, [r3, #0]
		LEDPointFlag = 1;
 8000274:	4b06      	ldr	r3, [pc, #24]	@ (8000290 <formatTotalLiters+0x88>)
 8000276:	2201      	movs	r2, #1
 8000278:	601a      	str	r2, [r3, #0]
}
 800027a:	bf00      	nop
 800027c:	3714      	adds	r7, #20
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	05f5e0ff 	.word	0x05f5e0ff
 8000288:	431bde83 	.word	0x431bde83
 800028c:	000f4240 	.word	0x000f4240
 8000290:	20000040 	.word	0x20000040
 8000294:	55e63b89 	.word	0x55e63b89
 8000298:	05f5e100 	.word	0x05f5e100
 800029c:	51eb851f 	.word	0x51eb851f

080002a0 <formatTotalLitersShift>:
// T + $ pressed show total per shift
void formatTotalLitersShift(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
	if (total < 1000000000) {
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	4a14      	ldr	r2, [pc, #80]	@ (8000300 <formatTotalLitersShift+0x60>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d815      	bhi.n	80002e0 <formatTotalLitersShift+0x40>

		* buffer1 = total / 1000000;
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4a13      	ldr	r2, [pc, #76]	@ (8000304 <formatTotalLitersShift+0x64>)
 80002b8:	fba2 2303 	umull	r2, r3, r2, r3
 80002bc:	0c9a      	lsrs	r2, r3, #18
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <formatTotalLitersShift+0x64>)
 80002c6:	fba3 1302 	umull	r1, r3, r3, r2
 80002ca:	0c9b      	lsrs	r3, r3, #18
 80002cc:	490e      	ldr	r1, [pc, #56]	@ (8000308 <formatTotalLitersShift+0x68>)
 80002ce:	fb01 f303 	mul.w	r3, r1, r3
 80002d2:	1ad3      	subs	r3, r2, r3
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	@ (800030c <formatTotalLitersShift+0x6c>)
 80002da:	2203      	movs	r2, #3
 80002dc:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 =0;
		* buffer2 = 0;
		LEDPointFlag = -11;
	}
}
 80002de:	e009      	b.n	80002f4 <formatTotalLitersShift+0x54>
		* buffer1 =0;
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
		* buffer2 = 0;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
		LEDPointFlag = -11;
 80002ec:	4b07      	ldr	r3, [pc, #28]	@ (800030c <formatTotalLitersShift+0x6c>)
 80002ee:	f06f 020a 	mvn.w	r2, #10
 80002f2:	601a      	str	r2, [r3, #0]
}
 80002f4:	bf00      	nop
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	3b9ac9ff 	.word	0x3b9ac9ff
 8000304:	431bde83 	.word	0x431bde83
 8000308:	000f4240 	.word	0x000f4240
 800030c:	20000040 	.word	0x20000040

08000310 <KeyLogic>:

void KeyLogic() {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	keyPressed = KeyPad_Scan();
 8000314:	f7ff ff22 	bl	800015c <KeyPad_Scan>
 8000318:	4603      	mov	r3, r0
 800031a:	461a      	mov	r2, r3
 800031c:	4bac      	ldr	r3, [pc, #688]	@ (80005d0 <KeyLogic+0x2c0>)
 800031e:	701a      	strb	r2, [r3, #0]
	if (keyPressed != 0xFF) {
 8000320:	4bab      	ldr	r3, [pc, #684]	@ (80005d0 <KeyLogic+0x2c0>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2bff      	cmp	r3, #255	@ 0xff
 8000326:	f000 81ae 	beq.w	8000686 <KeyLogic+0x376>
		switch (keyPressed) {
 800032a:	4ba9      	ldr	r3, [pc, #676]	@ (80005d0 <KeyLogic+0x2c0>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	3b24      	subs	r3, #36	@ 0x24
 8000330:	2b30      	cmp	r3, #48	@ 0x30
 8000332:	f200 8163 	bhi.w	80005fc <KeyLogic+0x2ec>
 8000336:	a201      	add	r2, pc, #4	@ (adr r2, 800033c <KeyLogic+0x2c>)
 8000338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800033c:	08000541 	.word	0x08000541
 8000340:	080005fd 	.word	0x080005fd
 8000344:	080005fd 	.word	0x080005fd
 8000348:	080005fd 	.word	0x080005fd
 800034c:	080005fd 	.word	0x080005fd
 8000350:	080005fd 	.word	0x080005fd
 8000354:	080005fd 	.word	0x080005fd
 8000358:	080005fd 	.word	0x080005fd
 800035c:	080005fd 	.word	0x080005fd
 8000360:	080005fd 	.word	0x080005fd
 8000364:	080005fd 	.word	0x080005fd
 8000368:	080005fd 	.word	0x080005fd
 800036c:	080005fd 	.word	0x080005fd
 8000370:	080005fd 	.word	0x080005fd
 8000374:	080005fd 	.word	0x080005fd
 8000378:	080005fd 	.word	0x080005fd
 800037c:	080005fd 	.word	0x080005fd
 8000380:	080005fd 	.word	0x080005fd
 8000384:	080005fd 	.word	0x080005fd
 8000388:	080005fd 	.word	0x080005fd
 800038c:	080005fd 	.word	0x080005fd
 8000390:	080005fd 	.word	0x080005fd
 8000394:	080005fd 	.word	0x080005fd
 8000398:	080005fd 	.word	0x080005fd
 800039c:	080005fd 	.word	0x080005fd
 80003a0:	080005fd 	.word	0x080005fd
 80003a4:	080005fd 	.word	0x080005fd
 80003a8:	080005fd 	.word	0x080005fd
 80003ac:	080005fd 	.word	0x080005fd
 80003b0:	08000401 	.word	0x08000401
 80003b4:	08000429 	.word	0x08000429
 80003b8:	0800044f 	.word	0x0800044f
 80003bc:	08000589 	.word	0x08000589
 80003c0:	08000475 	.word	0x08000475
 80003c4:	080005ad 	.word	0x080005ad
 80003c8:	080005fd 	.word	0x080005fd
 80003cc:	080005fd 	.word	0x080005fd
 80003d0:	080005fd 	.word	0x080005fd
 80003d4:	080005fd 	.word	0x080005fd
 80003d8:	080005fd 	.word	0x080005fd
 80003dc:	08000565 	.word	0x08000565
 80003e0:	080005fd 	.word	0x080005fd
 80003e4:	080005fd 	.word	0x080005fd
 80003e8:	080005fd 	.word	0x080005fd
 80003ec:	080004f9 	.word	0x080004f9
 80003f0:	080005fd 	.word	0x080005fd
 80003f4:	080005fd 	.word	0x080005fd
 80003f8:	080005fd 	.word	0x080005fd
 80003fc:	0800051d 	.word	0x0800051d
			case 'A':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000400:	2300      	movs	r3, #0
 8000402:	4a74      	ldr	r2, [pc, #464]	@ (80005d4 <KeyLogic+0x2c4>)
 8000404:	2107      	movs	r1, #7
 8000406:	4874      	ldr	r0, [pc, #464]	@ (80005d8 <KeyLogic+0x2c8>)
 8000408:	f002 fd30 	bl	8002e6c <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 10000);
 800040c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000410:	4a70      	ldr	r2, [pc, #448]	@ (80005d4 <KeyLogic+0x2c4>)
 8000412:	2107      	movs	r1, #7
 8000414:	4871      	ldr	r0, [pc, #452]	@ (80005dc <KeyLogic+0x2cc>)
 8000416:	f002 fd29 	bl	8002e6c <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 800041a:	2300      	movs	r3, #0
 800041c:	4a6d      	ldr	r2, [pc, #436]	@ (80005d4 <KeyLogic+0x2c4>)
 800041e:	2107      	movs	r1, #7
 8000420:	486f      	ldr	r0, [pc, #444]	@ (80005e0 <KeyLogic+0x2d0>)
 8000422:	f002 fd23 	bl	8002e6c <sniprintf>
				break;
 8000426:	e12e      	b.n	8000686 <KeyLogic+0x376>
			case 'B':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000428:	2300      	movs	r3, #0
 800042a:	4a6a      	ldr	r2, [pc, #424]	@ (80005d4 <KeyLogic+0x2c4>)
 800042c:	2107      	movs	r1, #7
 800042e:	486a      	ldr	r0, [pc, #424]	@ (80005d8 <KeyLogic+0x2c8>)
 8000430:	f002 fd1c 	bl	8002e6c <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 100000);
 8000434:	4b6b      	ldr	r3, [pc, #428]	@ (80005e4 <KeyLogic+0x2d4>)
 8000436:	4a67      	ldr	r2, [pc, #412]	@ (80005d4 <KeyLogic+0x2c4>)
 8000438:	2107      	movs	r1, #7
 800043a:	4868      	ldr	r0, [pc, #416]	@ (80005dc <KeyLogic+0x2cc>)
 800043c:	f002 fd16 	bl	8002e6c <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000440:	2300      	movs	r3, #0
 8000442:	4a64      	ldr	r2, [pc, #400]	@ (80005d4 <KeyLogic+0x2c4>)
 8000444:	2107      	movs	r1, #7
 8000446:	4866      	ldr	r0, [pc, #408]	@ (80005e0 <KeyLogic+0x2d0>)
 8000448:	f002 fd10 	bl	8002e6c <sniprintf>
				break;
 800044c:	e11b      	b.n	8000686 <KeyLogic+0x376>
			case 'C':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 800044e:	2300      	movs	r3, #0
 8000450:	4a60      	ldr	r2, [pc, #384]	@ (80005d4 <KeyLogic+0x2c4>)
 8000452:	2107      	movs	r1, #7
 8000454:	4860      	ldr	r0, [pc, #384]	@ (80005d8 <KeyLogic+0x2c8>)
 8000456:	f002 fd09 	bl	8002e6c <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800045a:	2300      	movs	r3, #0
 800045c:	4a5d      	ldr	r2, [pc, #372]	@ (80005d4 <KeyLogic+0x2c4>)
 800045e:	2107      	movs	r1, #7
 8000460:	485e      	ldr	r0, [pc, #376]	@ (80005dc <KeyLogic+0x2cc>)
 8000462:	f002 fd03 	bl	8002e6c <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 1);
 8000466:	2301      	movs	r3, #1
 8000468:	4a5a      	ldr	r2, [pc, #360]	@ (80005d4 <KeyLogic+0x2c4>)
 800046a:	2107      	movs	r1, #7
 800046c:	485c      	ldr	r0, [pc, #368]	@ (80005e0 <KeyLogic+0x2d0>)
 800046e:	f002 fcfd 	bl	8002e6c <sniprintf>
				break;
 8000472:	e108      	b.n	8000686 <KeyLogic+0x376>
			case 'E':
				if(seqState == SEQ_IDLE){
 8000474:	4b5c      	ldr	r3, [pc, #368]	@ (80005e8 <KeyLogic+0x2d8>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d103      	bne.n	8000484 <KeyLogic+0x174>
					seqState = SEQ_DISP_PRICE;
 800047c:	4b5a      	ldr	r3, [pc, #360]	@ (80005e8 <KeyLogic+0x2d8>)
 800047e:	2201      	movs	r2, #1
 8000480:	701a      	strb	r2, [r3, #0]
				else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000482:	e100      	b.n	8000686 <KeyLogic+0x376>
				else if (seqState == SEQ_PRESSED_P_NUM) {
 8000484:	4b58      	ldr	r3, [pc, #352]	@ (80005e8 <KeyLogic+0x2d8>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b03      	cmp	r3, #3
 800048a:	d119      	bne.n	80004c0 <KeyLogic+0x1b0>
					if(accumulatedNumber==password){
 800048c:	4b57      	ldr	r3, [pc, #348]	@ (80005ec <KeyLogic+0x2dc>)
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	4b57      	ldr	r3, [pc, #348]	@ (80005f0 <KeyLogic+0x2e0>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	429a      	cmp	r2, r3
 8000496:	d109      	bne.n	80004ac <KeyLogic+0x19c>
						seqState = SEQ_PRESSED_P_PSWRD_SETPRICE;
 8000498:	4b53      	ldr	r3, [pc, #332]	@ (80005e8 <KeyLogic+0x2d8>)
 800049a:	2204      	movs	r2, #4
 800049c:	701a      	strb	r2, [r3, #0]
						numberOfDigits = 0;
 800049e:	4b55      	ldr	r3, [pc, #340]	@ (80005f4 <KeyLogic+0x2e4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = 0;
 80004a4:	4b51      	ldr	r3, [pc, #324]	@ (80005ec <KeyLogic+0x2dc>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
				break;
 80004aa:	e0ec      	b.n	8000686 <KeyLogic+0x376>
						seqState = SEQ_IDLE;
 80004ac:	4b4e      	ldr	r3, [pc, #312]	@ (80005e8 <KeyLogic+0x2d8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	701a      	strb	r2, [r3, #0]
						numberOfDigits = 0;
 80004b2:	4b50      	ldr	r3, [pc, #320]	@ (80005f4 <KeyLogic+0x2e4>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = 0;
 80004b8:	4b4c      	ldr	r3, [pc, #304]	@ (80005ec <KeyLogic+0x2dc>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
				break;
 80004be:	e0e2      	b.n	8000686 <KeyLogic+0x376>
				else if(seqState == SEQ_PRESSED_P_PSWRD_SETPRICE){
 80004c0:	4b49      	ldr	r3, [pc, #292]	@ (80005e8 <KeyLogic+0x2d8>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b04      	cmp	r3, #4
 80004c6:	d10d      	bne.n	80004e4 <KeyLogic+0x1d4>
					currPrice = accumulatedNumber;
 80004c8:	4b48      	ldr	r3, [pc, #288]	@ (80005ec <KeyLogic+0x2dc>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a4a      	ldr	r2, [pc, #296]	@ (80005f8 <KeyLogic+0x2e8>)
 80004ce:	6013      	str	r3, [r2, #0]
					seqState = SEQ_IDLE;
 80004d0:	4b45      	ldr	r3, [pc, #276]	@ (80005e8 <KeyLogic+0x2d8>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80004d6:	4b47      	ldr	r3, [pc, #284]	@ (80005f4 <KeyLogic+0x2e4>)
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80004dc:	4b43      	ldr	r3, [pc, #268]	@ (80005ec <KeyLogic+0x2dc>)
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
				break;
 80004e2:	e0d0      	b.n	8000686 <KeyLogic+0x376>
					seqState = SEQ_IDLE;
 80004e4:	4b40      	ldr	r3, [pc, #256]	@ (80005e8 <KeyLogic+0x2d8>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80004ea:	4b42      	ldr	r3, [pc, #264]	@ (80005f4 <KeyLogic+0x2e4>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80004f0:	4b3e      	ldr	r3, [pc, #248]	@ (80005ec <KeyLogic+0x2dc>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
				break;
 80004f6:	e0c6      	b.n	8000686 <KeyLogic+0x376>
			case 'P':
				if (seqState == SEQ_IDLE) {
 80004f8:	4b3b      	ldr	r3, [pc, #236]	@ (80005e8 <KeyLogic+0x2d8>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d103      	bne.n	8000508 <KeyLogic+0x1f8>
					seqState = SEQ_PRESSED_P;
 8000500:	4b39      	ldr	r3, [pc, #228]	@ (80005e8 <KeyLogic+0x2d8>)
 8000502:	2202      	movs	r2, #2
 8000504:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000506:	e0be      	b.n	8000686 <KeyLogic+0x376>
					seqState = SEQ_IDLE;
 8000508:	4b37      	ldr	r3, [pc, #220]	@ (80005e8 <KeyLogic+0x2d8>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800050e:	4b39      	ldr	r3, [pc, #228]	@ (80005f4 <KeyLogic+0x2e4>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000514:	4b35      	ldr	r3, [pc, #212]	@ (80005ec <KeyLogic+0x2dc>)
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
				break;
 800051a:	e0b4      	b.n	8000686 <KeyLogic+0x376>
			case 'T':
				if (seqState == SEQ_IDLE) {
 800051c:	4b32      	ldr	r3, [pc, #200]	@ (80005e8 <KeyLogic+0x2d8>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d103      	bne.n	800052c <KeyLogic+0x21c>
					seqState = SEQ_PRESSED_T;
 8000524:	4b30      	ldr	r3, [pc, #192]	@ (80005e8 <KeyLogic+0x2d8>)
 8000526:	2205      	movs	r2, #5
 8000528:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 800052a:	e0ac      	b.n	8000686 <KeyLogic+0x376>
					seqState = SEQ_IDLE;
 800052c:	4b2e      	ldr	r3, [pc, #184]	@ (80005e8 <KeyLogic+0x2d8>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000532:	4b30      	ldr	r3, [pc, #192]	@ (80005f4 <KeyLogic+0x2e4>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000538:	4b2c      	ldr	r3, [pc, #176]	@ (80005ec <KeyLogic+0x2dc>)
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
				break;
 800053e:	e0a2      	b.n	8000686 <KeyLogic+0x376>
			case '$':
				if (seqState == SEQ_PRESSED_T) {
 8000540:	4b29      	ldr	r3, [pc, #164]	@ (80005e8 <KeyLogic+0x2d8>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b05      	cmp	r3, #5
 8000546:	d103      	bne.n	8000550 <KeyLogic+0x240>
					seqState = SEQ_PRESSED_T_$;
 8000548:	4b27      	ldr	r3, [pc, #156]	@ (80005e8 <KeyLogic+0x2d8>)
 800054a:	2207      	movs	r2, #7
 800054c:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 800054e:	e09a      	b.n	8000686 <KeyLogic+0x376>
					seqState = SEQ_IDLE;
 8000550:	4b25      	ldr	r3, [pc, #148]	@ (80005e8 <KeyLogic+0x2d8>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000556:	4b27      	ldr	r3, [pc, #156]	@ (80005f4 <KeyLogic+0x2e4>)
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800055c:	4b23      	ldr	r3, [pc, #140]	@ (80005ec <KeyLogic+0x2dc>)
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
				break;
 8000562:	e090      	b.n	8000686 <KeyLogic+0x376>
			case 'L':
				if (seqState == SEQ_PRESSED_T) {
 8000564:	4b20      	ldr	r3, [pc, #128]	@ (80005e8 <KeyLogic+0x2d8>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b05      	cmp	r3, #5
 800056a:	d103      	bne.n	8000574 <KeyLogic+0x264>
					seqState = SEQ_PRESSED_T_L;
 800056c:	4b1e      	ldr	r3, [pc, #120]	@ (80005e8 <KeyLogic+0x2d8>)
 800056e:	2206      	movs	r2, #6
 8000570:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000572:	e088      	b.n	8000686 <KeyLogic+0x376>
					seqState = SEQ_IDLE;
 8000574:	4b1c      	ldr	r3, [pc, #112]	@ (80005e8 <KeyLogic+0x2d8>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800057a:	4b1e      	ldr	r3, [pc, #120]	@ (80005f4 <KeyLogic+0x2e4>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000580:	4b1a      	ldr	r3, [pc, #104]	@ (80005ec <KeyLogic+0x2dc>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
				break;
 8000586:	e07e      	b.n	8000686 <KeyLogic+0x376>
			case 'D':
				if (seqState == SEQ_PRESSED_T) {
 8000588:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <KeyLogic+0x2d8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b05      	cmp	r3, #5
 800058e:	d103      	bne.n	8000598 <KeyLogic+0x288>
					seqState = SEQ_PRESSED_T_F3;
 8000590:	4b15      	ldr	r3, [pc, #84]	@ (80005e8 <KeyLogic+0x2d8>)
 8000592:	2208      	movs	r2, #8
 8000594:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000596:	e076      	b.n	8000686 <KeyLogic+0x376>
					seqState = SEQ_IDLE;
 8000598:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <KeyLogic+0x2d8>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800059e:	4b15      	ldr	r3, [pc, #84]	@ (80005f4 <KeyLogic+0x2e4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80005a4:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <KeyLogic+0x2dc>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
				break;
 80005aa:	e06c      	b.n	8000686 <KeyLogic+0x376>
			case 'F':
				if (seqState == SEQ_PRESSED_T) {
 80005ac:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <KeyLogic+0x2d8>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b05      	cmp	r3, #5
 80005b2:	d103      	bne.n	80005bc <KeyLogic+0x2ac>
					seqState = SEQ_PRESSED_T_F4;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <KeyLogic+0x2d8>)
 80005b6:	2209      	movs	r2, #9
 80005b8:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 80005ba:	e064      	b.n	8000686 <KeyLogic+0x376>
					seqState = SEQ_IDLE;
 80005bc:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <KeyLogic+0x2d8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80005c2:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <KeyLogic+0x2e4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80005c8:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <KeyLogic+0x2dc>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
				break;
 80005ce:	e05a      	b.n	8000686 <KeyLogic+0x376>
 80005d0:	2000002d 	.word	0x2000002d
 80005d4:	0800380c 	.word	0x0800380c
 80005d8:	20000018 	.word	0x20000018
 80005dc:	2000001f 	.word	0x2000001f
 80005e0:	20000026 	.word	0x20000026
 80005e4:	000186a0 	.word	0x000186a0
 80005e8:	200000d0 	.word	0x200000d0
 80005ec:	200000c0 	.word	0x200000c0
 80005f0:	20000030 	.word	0x20000030
 80005f4:	200000c4 	.word	0x200000c4
 80005f8:	2000003c 	.word	0x2000003c
			default:
				if(keyPressed >= '0' && keyPressed <= '9') {
 80005fc:	4b24      	ldr	r3, [pc, #144]	@ (8000690 <KeyLogic+0x380>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b2f      	cmp	r3, #47	@ 0x2f
 8000602:	d934      	bls.n	800066e <KeyLogic+0x35e>
 8000604:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <KeyLogic+0x380>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b39      	cmp	r3, #57	@ 0x39
 800060a:	d830      	bhi.n	800066e <KeyLogic+0x35e>
					if(seqState==SEQ_PRESSED_P){
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <KeyLogic+0x384>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b02      	cmp	r3, #2
 8000612:	d10c      	bne.n	800062e <KeyLogic+0x31e>
						seqState=SEQ_PRESSED_P_NUM;
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <KeyLogic+0x384>)
 8000616:	2203      	movs	r2, #3
 8000618:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 800061a:	4b1d      	ldr	r3, [pc, #116]	@ (8000690 <KeyLogic+0x380>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	3b30      	subs	r3, #48	@ 0x30
 8000620:	461a      	mov	r2, r3
 8000622:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <KeyLogic+0x388>)
 8000624:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 8000626:	4b1d      	ldr	r3, [pc, #116]	@ (800069c <KeyLogic+0x38c>)
 8000628:	2201      	movs	r2, #1
 800062a:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 800062c:	e029      	b.n	8000682 <KeyLogic+0x372>
					}else if (seqState == SEQ_PRESSED_P_NUM || seqState == SEQ_PRESSED_P_PSWRD_SETPRICE) {
 800062e:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <KeyLogic+0x384>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b03      	cmp	r3, #3
 8000634:	d003      	beq.n	800063e <KeyLogic+0x32e>
 8000636:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <KeyLogic+0x384>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b04      	cmp	r3, #4
 800063c:	d121      	bne.n	8000682 <KeyLogic+0x372>
						if (numberOfDigits < 6) {
 800063e:	4b17      	ldr	r3, [pc, #92]	@ (800069c <KeyLogic+0x38c>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b05      	cmp	r3, #5
 8000644:	d81d      	bhi.n	8000682 <KeyLogic+0x372>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <KeyLogic+0x388>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	4613      	mov	r3, r2
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	4413      	add	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	461a      	mov	r2, r3
 8000654:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <KeyLogic+0x380>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4413      	add	r3, r2
 800065a:	3b30      	subs	r3, #48	@ 0x30
 800065c:	4a0e      	ldr	r2, [pc, #56]	@ (8000698 <KeyLogic+0x388>)
 800065e:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 8000660:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <KeyLogic+0x38c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	b2da      	uxtb	r2, r3
 8000668:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <KeyLogic+0x38c>)
 800066a:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 800066c:	e009      	b.n	8000682 <KeyLogic+0x372>
						}
					}
				}else{
					seqState = SEQ_IDLE;
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <KeyLogic+0x384>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000674:	4b09      	ldr	r3, [pc, #36]	@ (800069c <KeyLogic+0x38c>)
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800067a:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <KeyLogic+0x388>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
				}
				break;
 8000680:	e000      	b.n	8000684 <KeyLogic+0x374>
					if(seqState==SEQ_PRESSED_P){
 8000682:	bf00      	nop
				break;
 8000684:	bf00      	nop
		}
	}
	keyPressed = 0xFF;
 8000686:	4b02      	ldr	r3, [pc, #8]	@ (8000690 <KeyLogic+0x380>)
 8000688:	22ff      	movs	r2, #255	@ 0xff
 800068a:	701a      	strb	r2, [r3, #0]
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000002d 	.word	0x2000002d
 8000694:	200000d0 	.word	0x200000d0
 8000698:	200000c0 	.word	0x200000c0
 800069c:	200000c4 	.word	0x200000c4

080006a0 <KeyLogic_Action>:


void KeyLogic_Action() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08c      	sub	sp, #48	@ 0x30
 80006a4:	af00      	add	r7, sp, #0
    char buffer[7];
    switch (seqState) {
 80006a6:	4ba7      	ldr	r3, [pc, #668]	@ (8000944 <KeyLogic_Action+0x2a4>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b0a      	cmp	r3, #10
 80006ac:	f200 8198 	bhi.w	80009e0 <KeyLogic_Action+0x340>
 80006b0:	a201      	add	r2, pc, #4	@ (adr r2, 80006b8 <KeyLogic_Action+0x18>)
 80006b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b6:	bf00      	nop
 80006b8:	080006e5 	.word	0x080006e5
 80006bc:	0800070b 	.word	0x0800070b
 80006c0:	0800072f 	.word	0x0800072f
 80006c4:	08000753 	.word	0x08000753
 80006c8:	08000777 	.word	0x08000777
 80006cc:	0800079b 	.word	0x0800079b
 80006d0:	0800085f 	.word	0x0800085f
 80006d4:	080007c1 	.word	0x080007c1
 80006d8:	080008f7 	.word	0x080008f7
 80006dc:	0800091d 	.word	0x0800091d
 80006e0:	080009a1 	.word	0x080009a1
        case SEQ_IDLE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 80006e4:	2300      	movs	r3, #0
 80006e6:	4a98      	ldr	r2, [pc, #608]	@ (8000948 <KeyLogic_Action+0x2a8>)
 80006e8:	2107      	movs	r1, #7
 80006ea:	4898      	ldr	r0, [pc, #608]	@ (800094c <KeyLogic_Action+0x2ac>)
 80006ec:	f002 fbbe 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80006f0:	2300      	movs	r3, #0
 80006f2:	4a95      	ldr	r2, [pc, #596]	@ (8000948 <KeyLogic_Action+0x2a8>)
 80006f4:	2107      	movs	r1, #7
 80006f6:	4896      	ldr	r0, [pc, #600]	@ (8000950 <KeyLogic_Action+0x2b0>)
 80006f8:	f002 fbb8 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80006fc:	2300      	movs	r3, #0
 80006fe:	4a92      	ldr	r2, [pc, #584]	@ (8000948 <KeyLogic_Action+0x2a8>)
 8000700:	2107      	movs	r1, #7
 8000702:	4894      	ldr	r0, [pc, #592]	@ (8000954 <KeyLogic_Action+0x2b4>)
 8000704:	f002 fbb2 	bl	8002e6c <sniprintf>
            break;
 8000708:	e17d      	b.n	8000a06 <KeyLogic_Action+0x366>
        case SEQ_DISP_PRICE:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "GIA   ");
 800070a:	4a93      	ldr	r2, [pc, #588]	@ (8000958 <KeyLogic_Action+0x2b8>)
 800070c:	2107      	movs	r1, #7
 800070e:	488f      	ldr	r0, [pc, #572]	@ (800094c <KeyLogic_Action+0x2ac>)
 8000710:	f002 fbac 	bl	8002e6c <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", currPrice);
 8000714:	4b91      	ldr	r3, [pc, #580]	@ (800095c <KeyLogic_Action+0x2bc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a8b      	ldr	r2, [pc, #556]	@ (8000948 <KeyLogic_Action+0x2a8>)
 800071a:	2107      	movs	r1, #7
 800071c:	488c      	ldr	r0, [pc, #560]	@ (8000950 <KeyLogic_Action+0x2b0>)
 800071e:	f002 fba5 	bl	8002e6c <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000722:	2300      	movs	r3, #0
 8000724:	4a88      	ldr	r2, [pc, #544]	@ (8000948 <KeyLogic_Action+0x2a8>)
 8000726:	2107      	movs	r1, #7
 8000728:	488a      	ldr	r0, [pc, #552]	@ (8000954 <KeyLogic_Action+0x2b4>)
 800072a:	f002 fb9f 	bl	8002e6c <sniprintf>
        case SEQ_PRESSED_P:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", accumulatedNumber);
 800072e:	4b8c      	ldr	r3, [pc, #560]	@ (8000960 <KeyLogic_Action+0x2c0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a85      	ldr	r2, [pc, #532]	@ (8000948 <KeyLogic_Action+0x2a8>)
 8000734:	2107      	movs	r1, #7
 8000736:	4885      	ldr	r0, [pc, #532]	@ (800094c <KeyLogic_Action+0x2ac>)
 8000738:	f002 fb98 	bl	8002e6c <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800073c:	2300      	movs	r3, #0
 800073e:	4a82      	ldr	r2, [pc, #520]	@ (8000948 <KeyLogic_Action+0x2a8>)
 8000740:	2107      	movs	r1, #7
 8000742:	4883      	ldr	r0, [pc, #524]	@ (8000950 <KeyLogic_Action+0x2b0>)
 8000744:	f002 fb92 	bl	8002e6c <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P     ");
 8000748:	4a86      	ldr	r2, [pc, #536]	@ (8000964 <KeyLogic_Action+0x2c4>)
 800074a:	2107      	movs	r1, #7
 800074c:	4881      	ldr	r0, [pc, #516]	@ (8000954 <KeyLogic_Action+0x2b4>)
 800074e:	f002 fb8d 	bl	8002e6c <sniprintf>
        case SEQ_PRESSED_P_NUM:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", accumulatedNumber);
 8000752:	4b83      	ldr	r3, [pc, #524]	@ (8000960 <KeyLogic_Action+0x2c0>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a7c      	ldr	r2, [pc, #496]	@ (8000948 <KeyLogic_Action+0x2a8>)
 8000758:	2107      	movs	r1, #7
 800075a:	487c      	ldr	r0, [pc, #496]	@ (800094c <KeyLogic_Action+0x2ac>)
 800075c:	f002 fb86 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000760:	2300      	movs	r3, #0
 8000762:	4a79      	ldr	r2, [pc, #484]	@ (8000948 <KeyLogic_Action+0x2a8>)
 8000764:	2107      	movs	r1, #7
 8000766:	487a      	ldr	r0, [pc, #488]	@ (8000950 <KeyLogic_Action+0x2b0>)
 8000768:	f002 fb80 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P88888");
 800076c:	4a7e      	ldr	r2, [pc, #504]	@ (8000968 <KeyLogic_Action+0x2c8>)
 800076e:	2107      	movs	r1, #7
 8000770:	4878      	ldr	r0, [pc, #480]	@ (8000954 <KeyLogic_Action+0x2b4>)
 8000772:	f002 fb7b 	bl	8002e6c <sniprintf>
        case SEQ_PRESSED_P_PSWRD_SETPRICE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", accumulatedNumber);
 8000776:	4b7a      	ldr	r3, [pc, #488]	@ (8000960 <KeyLogic_Action+0x2c0>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a73      	ldr	r2, [pc, #460]	@ (8000948 <KeyLogic_Action+0x2a8>)
 800077c:	2107      	movs	r1, #7
 800077e:	4873      	ldr	r0, [pc, #460]	@ (800094c <KeyLogic_Action+0x2ac>)
 8000780:	f002 fb74 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000784:	2300      	movs	r3, #0
 8000786:	4a70      	ldr	r2, [pc, #448]	@ (8000948 <KeyLogic_Action+0x2a8>)
 8000788:	2107      	movs	r1, #7
 800078a:	4871      	ldr	r0, [pc, #452]	@ (8000950 <KeyLogic_Action+0x2b0>)
 800078c:	f002 fb6e 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "GIA   ");
 8000790:	4a71      	ldr	r2, [pc, #452]	@ (8000958 <KeyLogic_Action+0x2b8>)
 8000792:	2107      	movs	r1, #7
 8000794:	486f      	ldr	r0, [pc, #444]	@ (8000954 <KeyLogic_Action+0x2b4>)
 8000796:	f002 fb69 	bl	8002e6c <sniprintf>
        case SEQ_PRESSED_T:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 800079a:	2300      	movs	r3, #0
 800079c:	4a6a      	ldr	r2, [pc, #424]	@ (8000948 <KeyLogic_Action+0x2a8>)
 800079e:	2107      	movs	r1, #7
 80007a0:	486a      	ldr	r0, [pc, #424]	@ (800094c <KeyLogic_Action+0x2ac>)
 80007a2:	f002 fb63 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80007a6:	2300      	movs	r3, #0
 80007a8:	4a67      	ldr	r2, [pc, #412]	@ (8000948 <KeyLogic_Action+0x2a8>)
 80007aa:	2107      	movs	r1, #7
 80007ac:	4868      	ldr	r0, [pc, #416]	@ (8000950 <KeyLogic_Action+0x2b0>)
 80007ae:	f002 fb5d 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 999999);
 80007b2:	4b6e      	ldr	r3, [pc, #440]	@ (800096c <KeyLogic_Action+0x2cc>)
 80007b4:	4a64      	ldr	r2, [pc, #400]	@ (8000948 <KeyLogic_Action+0x2a8>)
 80007b6:	2107      	movs	r1, #7
 80007b8:	4866      	ldr	r0, [pc, #408]	@ (8000954 <KeyLogic_Action+0x2b4>)
 80007ba:	f002 fb57 	bl	8002e6c <sniprintf>
            break;
 80007be:	e122      	b.n	8000a06 <KeyLogic_Action+0x366>
        case SEQ_PRESSED_T_$:
        	// Format the total liters into two parts
			formatTotalLitersShift(totalLitersShift, &row1, &row2);
 80007c0:	4b6b      	ldr	r3, [pc, #428]	@ (8000970 <KeyLogic_Action+0x2d0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a6b      	ldr	r2, [pc, #428]	@ (8000974 <KeyLogic_Action+0x2d4>)
 80007c6:	496c      	ldr	r1, [pc, #432]	@ (8000978 <KeyLogic_Action+0x2d8>)
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd69 	bl	80002a0 <formatTotalLitersShift>

			// Ensure the combined string fits into the buffer
			char row1StrShift[7]; // Buffer to hold formatted row1 string
			snprintf(row1StrShift, sizeof(row1StrShift), "%06ld", row1);
 80007ce:	4b6a      	ldr	r3, [pc, #424]	@ (8000978 <KeyLogic_Action+0x2d8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f107 0018 	add.w	r0, r7, #24
 80007d6:	4a69      	ldr	r2, [pc, #420]	@ (800097c <KeyLogic_Action+0x2dc>)
 80007d8:	2107      	movs	r1, #7
 80007da:	f002 fb47 	bl	8002e6c <sniprintf>

			// Combine "L.. " with the last two digits of row1
			char combinedStrShift[8]; // Buffer to hold combined string "L.. " and last two digits of row1
			snprintf(combinedStrShift, sizeof(combinedStrShift), "SH.%04ld", row1 % 10000); // Extract last two digits of row1
 80007de:	4b66      	ldr	r3, [pc, #408]	@ (8000978 <KeyLogic_Action+0x2d8>)
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	4b67      	ldr	r3, [pc, #412]	@ (8000980 <KeyLogic_Action+0x2e0>)
 80007e4:	fba3 1302 	umull	r1, r3, r3, r2
 80007e8:	0b5b      	lsrs	r3, r3, #13
 80007ea:	f242 7110 	movw	r1, #10000	@ 0x2710
 80007ee:	fb01 f303 	mul.w	r3, r1, r3
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	f107 0010 	add.w	r0, r7, #16
 80007f8:	4a62      	ldr	r2, [pc, #392]	@ (8000984 <KeyLogic_Action+0x2e4>)
 80007fa:	2108      	movs	r1, #8
 80007fc:	f002 fb36 	bl	8002e6c <sniprintf>

			// Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
			for (int i = 0; i < 6; ++i) {
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000804:	e01b      	b.n	800083e <KeyLogic_Action+0x19e>
				if (i < strlen(combinedStrShift)) {
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fc9e 	bl	800014c <strlen>
 8000810:	4602      	mov	r2, r0
 8000812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000814:	429a      	cmp	r2, r3
 8000816:	d90a      	bls.n	800082e <KeyLogic_Action+0x18e>
					SevenSegBuffer[0][i] = combinedStrShift[i];
 8000818:	f107 0210 	add.w	r2, r7, #16
 800081c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800081e:	4413      	add	r3, r2
 8000820:	7819      	ldrb	r1, [r3, #0]
 8000822:	4a4a      	ldr	r2, [pc, #296]	@ (800094c <KeyLogic_Action+0x2ac>)
 8000824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000826:	4413      	add	r3, r2
 8000828:	460a      	mov	r2, r1
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	e004      	b.n	8000838 <KeyLogic_Action+0x198>
				} else {
					SevenSegBuffer[0][i] = ' '; // Pad with spaces
 800082e:	4a47      	ldr	r2, [pc, #284]	@ (800094c <KeyLogic_Action+0x2ac>)
 8000830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000832:	4413      	add	r3, r2
 8000834:	2220      	movs	r2, #32
 8000836:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; ++i) {
 8000838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800083a:	3301      	adds	r3, #1
 800083c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800083e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000840:	2b05      	cmp	r3, #5
 8000842:	dde0      	ble.n	8000806 <KeyLogic_Action+0x166>
				}
			}
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8000844:	4b4b      	ldr	r3, [pc, #300]	@ (8000974 <KeyLogic_Action+0x2d4>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a4c      	ldr	r2, [pc, #304]	@ (800097c <KeyLogic_Action+0x2dc>)
 800084a:	2107      	movs	r1, #7
 800084c:	4840      	ldr	r0, [pc, #256]	@ (8000950 <KeyLogic_Action+0x2b0>)
 800084e:	f002 fb0d 	bl	8002e6c <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SHIFT ");
 8000852:	4a4d      	ldr	r2, [pc, #308]	@ (8000988 <KeyLogic_Action+0x2e8>)
 8000854:	2107      	movs	r1, #7
 8000856:	483f      	ldr	r0, [pc, #252]	@ (8000954 <KeyLogic_Action+0x2b4>)
 8000858:	f002 fb08 	bl	8002e6c <sniprintf>

            break;
 800085c:	e0d3      	b.n	8000a06 <KeyLogic_Action+0x366>
        case SEQ_PRESSED_T_L:
            // Format the total liters into two parts
            formatTotalLiters(totalLiters, &row1, &row2);
 800085e:	4b4b      	ldr	r3, [pc, #300]	@ (800098c <KeyLogic_Action+0x2ec>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a44      	ldr	r2, [pc, #272]	@ (8000974 <KeyLogic_Action+0x2d4>)
 8000864:	4944      	ldr	r1, [pc, #272]	@ (8000978 <KeyLogic_Action+0x2d8>)
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fcce 	bl	8000208 <formatTotalLiters>

            // Ensure the combined string fits into the buffer
            char row1Str[7]; // Buffer to hold formatted row1 string
            snprintf(row1Str, sizeof(row1Str), "%06ld", row1);
 800086c:	4b42      	ldr	r3, [pc, #264]	@ (8000978 <KeyLogic_Action+0x2d8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f107 0008 	add.w	r0, r7, #8
 8000874:	4a41      	ldr	r2, [pc, #260]	@ (800097c <KeyLogic_Action+0x2dc>)
 8000876:	2107      	movs	r1, #7
 8000878:	f002 faf8 	bl	8002e6c <sniprintf>

            // Combine "L.. " with the last two digits of row1
            char combinedStr[8]; // Buffer to hold combined string "L.. " and last two digits of row1
            snprintf(combinedStr, sizeof(combinedStr), "L.%04ld", row1 % 10000); // Extract last two digits of row1
 800087c:	4b3e      	ldr	r3, [pc, #248]	@ (8000978 <KeyLogic_Action+0x2d8>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b3f      	ldr	r3, [pc, #252]	@ (8000980 <KeyLogic_Action+0x2e0>)
 8000882:	fba3 1302 	umull	r1, r3, r3, r2
 8000886:	0b5b      	lsrs	r3, r3, #13
 8000888:	f242 7110 	movw	r1, #10000	@ 0x2710
 800088c:	fb01 f303 	mul.w	r3, r1, r3
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	4638      	mov	r0, r7
 8000894:	4a3e      	ldr	r2, [pc, #248]	@ (8000990 <KeyLogic_Action+0x2f0>)
 8000896:	2108      	movs	r1, #8
 8000898:	f002 fae8 	bl	8002e6c <sniprintf>

            // Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
            for (int i = 0; i < 6; ++i) {
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008a0:	e019      	b.n	80008d6 <KeyLogic_Action+0x236>
                if (i < strlen(combinedStr)) {
 80008a2:	463b      	mov	r3, r7
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fc51 	bl	800014c <strlen>
 80008aa:	4602      	mov	r2, r0
 80008ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d909      	bls.n	80008c6 <KeyLogic_Action+0x226>
                    SevenSegBuffer[0][i] = combinedStr[i];
 80008b2:	463a      	mov	r2, r7
 80008b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b6:	4413      	add	r3, r2
 80008b8:	7819      	ldrb	r1, [r3, #0]
 80008ba:	4a24      	ldr	r2, [pc, #144]	@ (800094c <KeyLogic_Action+0x2ac>)
 80008bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008be:	4413      	add	r3, r2
 80008c0:	460a      	mov	r2, r1
 80008c2:	701a      	strb	r2, [r3, #0]
 80008c4:	e004      	b.n	80008d0 <KeyLogic_Action+0x230>
                } else {
                    SevenSegBuffer[0][i] = ' '; // Pad with spaces
 80008c6:	4a21      	ldr	r2, [pc, #132]	@ (800094c <KeyLogic_Action+0x2ac>)
 80008c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008ca:	4413      	add	r3, r2
 80008cc:	2220      	movs	r2, #32
 80008ce:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; ++i) {
 80008d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008d2:	3301      	adds	r3, #1
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008d8:	2b05      	cmp	r3, #5
 80008da:	dde2      	ble.n	80008a2 <KeyLogic_Action+0x202>
                }
            }


            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 80008dc:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <KeyLogic_Action+0x2d4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a26      	ldr	r2, [pc, #152]	@ (800097c <KeyLogic_Action+0x2dc>)
 80008e2:	2107      	movs	r1, #7
 80008e4:	481a      	ldr	r0, [pc, #104]	@ (8000950 <KeyLogic_Action+0x2b0>)
 80008e6:	f002 fac1 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "TOTAL ");
 80008ea:	4a2a      	ldr	r2, [pc, #168]	@ (8000994 <KeyLogic_Action+0x2f4>)
 80008ec:	2107      	movs	r1, #7
 80008ee:	4819      	ldr	r0, [pc, #100]	@ (8000954 <KeyLogic_Action+0x2b4>)
 80008f0:	f002 fabc 	bl	8002e6c <sniprintf>


            break;
 80008f4:	e087      	b.n	8000a06 <KeyLogic_Action+0x366>
        case SEQ_PRESSED_T_F3:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 333333);
 80008f6:	4b28      	ldr	r3, [pc, #160]	@ (8000998 <KeyLogic_Action+0x2f8>)
 80008f8:	4a13      	ldr	r2, [pc, #76]	@ (8000948 <KeyLogic_Action+0x2a8>)
 80008fa:	2107      	movs	r1, #7
 80008fc:	4813      	ldr	r0, [pc, #76]	@ (800094c <KeyLogic_Action+0x2ac>)
 80008fe:	f002 fab5 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000902:	2300      	movs	r3, #0
 8000904:	4a10      	ldr	r2, [pc, #64]	@ (8000948 <KeyLogic_Action+0x2a8>)
 8000906:	2107      	movs	r1, #7
 8000908:	4811      	ldr	r0, [pc, #68]	@ (8000950 <KeyLogic_Action+0x2b0>)
 800090a:	f002 faaf 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 800090e:	2300      	movs	r3, #0
 8000910:	4a0d      	ldr	r2, [pc, #52]	@ (8000948 <KeyLogic_Action+0x2a8>)
 8000912:	2107      	movs	r1, #7
 8000914:	480f      	ldr	r0, [pc, #60]	@ (8000954 <KeyLogic_Action+0x2b4>)
 8000916:	f002 faa9 	bl	8002e6c <sniprintf>
            break;
 800091a:	e074      	b.n	8000a06 <KeyLogic_Action+0x366>
        case SEQ_PRESSED_T_F4:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 444444);
 800091c:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <KeyLogic_Action+0x2fc>)
 800091e:	4a0a      	ldr	r2, [pc, #40]	@ (8000948 <KeyLogic_Action+0x2a8>)
 8000920:	2107      	movs	r1, #7
 8000922:	480a      	ldr	r0, [pc, #40]	@ (800094c <KeyLogic_Action+0x2ac>)
 8000924:	f002 faa2 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000928:	2300      	movs	r3, #0
 800092a:	4a07      	ldr	r2, [pc, #28]	@ (8000948 <KeyLogic_Action+0x2a8>)
 800092c:	2107      	movs	r1, #7
 800092e:	4808      	ldr	r0, [pc, #32]	@ (8000950 <KeyLogic_Action+0x2b0>)
 8000930:	f002 fa9c 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000934:	2300      	movs	r3, #0
 8000936:	4a04      	ldr	r2, [pc, #16]	@ (8000948 <KeyLogic_Action+0x2a8>)
 8000938:	2107      	movs	r1, #7
 800093a:	4806      	ldr	r0, [pc, #24]	@ (8000954 <KeyLogic_Action+0x2b4>)
 800093c:	f002 fa96 	bl	8002e6c <sniprintf>
            break;
 8000940:	e061      	b.n	8000a06 <KeyLogic_Action+0x366>
 8000942:	bf00      	nop
 8000944:	200000d0 	.word	0x200000d0
 8000948:	0800380c 	.word	0x0800380c
 800094c:	20000018 	.word	0x20000018
 8000950:	2000001f 	.word	0x2000001f
 8000954:	20000026 	.word	0x20000026
 8000958:	08003814 	.word	0x08003814
 800095c:	2000003c 	.word	0x2000003c
 8000960:	200000c0 	.word	0x200000c0
 8000964:	0800381c 	.word	0x0800381c
 8000968:	08003824 	.word	0x08003824
 800096c:	000f423f 	.word	0x000f423f
 8000970:	20000038 	.word	0x20000038
 8000974:	200000cc 	.word	0x200000cc
 8000978:	200000c8 	.word	0x200000c8
 800097c:	0800382c 	.word	0x0800382c
 8000980:	d1b71759 	.word	0xd1b71759
 8000984:	08003834 	.word	0x08003834
 8000988:	08003840 	.word	0x08003840
 800098c:	20000034 	.word	0x20000034
 8000990:	08003848 	.word	0x08003848
 8000994:	08003850 	.word	0x08003850
 8000998:	00051615 	.word	0x00051615
 800099c:	0006c81c 	.word	0x0006c81c
        case SEQ_NUMBER:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <KeyLogic_Action+0x370>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f107 0020 	add.w	r0, r7, #32
 80009a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a14 <KeyLogic_Action+0x374>)
 80009aa:	2107      	movs	r1, #7
 80009ac:	f002 fa5e 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 80009b0:	f107 0320 	add.w	r3, r7, #32
 80009b4:	4a18      	ldr	r2, [pc, #96]	@ (8000a18 <KeyLogic_Action+0x378>)
 80009b6:	2107      	movs	r1, #7
 80009b8:	4818      	ldr	r0, [pc, #96]	@ (8000a1c <KeyLogic_Action+0x37c>)
 80009ba:	f002 fa57 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80009be:	2300      	movs	r3, #0
 80009c0:	4a17      	ldr	r2, [pc, #92]	@ (8000a20 <KeyLogic_Action+0x380>)
 80009c2:	2107      	movs	r1, #7
 80009c4:	4817      	ldr	r0, [pc, #92]	@ (8000a24 <KeyLogic_Action+0x384>)
 80009c6:	f002 fa51 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80009ca:	2300      	movs	r3, #0
 80009cc:	4a14      	ldr	r2, [pc, #80]	@ (8000a20 <KeyLogic_Action+0x380>)
 80009ce:	2107      	movs	r1, #7
 80009d0:	4815      	ldr	r0, [pc, #84]	@ (8000a28 <KeyLogic_Action+0x388>)
 80009d2:	f002 fa4b 	bl	8002e6c <sniprintf>
            LEDPointFlag = -1;
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <KeyLogic_Action+0x38c>)
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295
 80009dc:	601a      	str	r2, [r3, #0]
            break;
 80009de:	e012      	b.n	8000a06 <KeyLogic_Action+0x366>
        default:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 80009e0:	2300      	movs	r3, #0
 80009e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a20 <KeyLogic_Action+0x380>)
 80009e4:	2107      	movs	r1, #7
 80009e6:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <KeyLogic_Action+0x37c>)
 80009e8:	f002 fa40 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80009ec:	2300      	movs	r3, #0
 80009ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000a20 <KeyLogic_Action+0x380>)
 80009f0:	2107      	movs	r1, #7
 80009f2:	480c      	ldr	r0, [pc, #48]	@ (8000a24 <KeyLogic_Action+0x384>)
 80009f4:	f002 fa3a 	bl	8002e6c <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80009f8:	2300      	movs	r3, #0
 80009fa:	4a09      	ldr	r2, [pc, #36]	@ (8000a20 <KeyLogic_Action+0x380>)
 80009fc:	2107      	movs	r1, #7
 80009fe:	480a      	ldr	r0, [pc, #40]	@ (8000a28 <KeyLogic_Action+0x388>)
 8000a00:	f002 fa34 	bl	8002e6c <sniprintf>
            break;
 8000a04:	bf00      	nop
    }
}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	@ 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000c0 	.word	0x200000c0
 8000a14:	0800382c 	.word	0x0800382c
 8000a18:	08003858 	.word	0x08003858
 8000a1c:	20000018 	.word	0x20000018
 8000a20:	0800380c 	.word	0x0800380c
 8000a24:	2000001f 	.word	0x2000001f
 8000a28:	20000026 	.word	0x20000026
 8000a2c:	20000040 	.word	0x20000040

08000a30 <CharToSegment>:
//uint32_t SevenSegBuffer[3]={123456, 654321, 987654};
char SevenSegBuffer[3][7] = {"123456", "654321", "987654"};
uint8_t displayBuffer[5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;

uint8_t CharToSegment(char c) {
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a3e:	d907      	bls.n	8000a50 <CharToSegment+0x20>
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	2b39      	cmp	r3, #57	@ 0x39
 8000a44:	d804      	bhi.n	8000a50 <CharToSegment+0x20>
        return digitMapWithOutDP[c - '0'];
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	3b30      	subs	r3, #48	@ 0x30
 8000a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac8 <CharToSegment+0x98>)
 8000a4c:	5cd3      	ldrb	r3, [r2, r3]
 8000a4e:	e036      	b.n	8000abe <CharToSegment+0x8e>
    } else if (c == 'L') {
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	2b4c      	cmp	r3, #76	@ 0x4c
 8000a54:	d102      	bne.n	8000a5c <CharToSegment+0x2c>
        return specialCharMap[0];
 8000a56:	4b1d      	ldr	r3, [pc, #116]	@ (8000acc <CharToSegment+0x9c>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	e030      	b.n	8000abe <CharToSegment+0x8e>
    } else if (c == '.') {
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a60:	d102      	bne.n	8000a68 <CharToSegment+0x38>
        return specialCharMap[1];
 8000a62:	4b1a      	ldr	r3, [pc, #104]	@ (8000acc <CharToSegment+0x9c>)
 8000a64:	785b      	ldrb	r3, [r3, #1]
 8000a66:	e02a      	b.n	8000abe <CharToSegment+0x8e>
    } else if (c == 'T') {
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	2b54      	cmp	r3, #84	@ 0x54
 8000a6c:	d102      	bne.n	8000a74 <CharToSegment+0x44>
		return specialCharMap[2];
 8000a6e:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <CharToSegment+0x9c>)
 8000a70:	789b      	ldrb	r3, [r3, #2]
 8000a72:	e024      	b.n	8000abe <CharToSegment+0x8e>
    } else if (c == 'O') {
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	2b4f      	cmp	r3, #79	@ 0x4f
 8000a78:	d102      	bne.n	8000a80 <CharToSegment+0x50>
		return specialCharMap[3];
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <CharToSegment+0x9c>)
 8000a7c:	78db      	ldrb	r3, [r3, #3]
 8000a7e:	e01e      	b.n	8000abe <CharToSegment+0x8e>
    } else if (c == 'A') {
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	2b41      	cmp	r3, #65	@ 0x41
 8000a84:	d102      	bne.n	8000a8c <CharToSegment+0x5c>
		return specialCharMap[4];
 8000a86:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <CharToSegment+0x9c>)
 8000a88:	791b      	ldrb	r3, [r3, #4]
 8000a8a:	e018      	b.n	8000abe <CharToSegment+0x8e>
    } else if (c == 'S') {
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b53      	cmp	r3, #83	@ 0x53
 8000a90:	d102      	bne.n	8000a98 <CharToSegment+0x68>
        return specialCharMap[5];
 8000a92:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <CharToSegment+0x9c>)
 8000a94:	795b      	ldrb	r3, [r3, #5]
 8000a96:	e012      	b.n	8000abe <CharToSegment+0x8e>
    } else if (c == 'H') {
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2b48      	cmp	r3, #72	@ 0x48
 8000a9c:	d102      	bne.n	8000aa4 <CharToSegment+0x74>
        return specialCharMap[6];
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <CharToSegment+0x9c>)
 8000aa0:	799b      	ldrb	r3, [r3, #6]
 8000aa2:	e00c      	b.n	8000abe <CharToSegment+0x8e>
    } else if (c == 'I') {
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b49      	cmp	r3, #73	@ 0x49
 8000aa8:	d102      	bne.n	8000ab0 <CharToSegment+0x80>
        return specialCharMap[7];
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <CharToSegment+0x9c>)
 8000aac:	79db      	ldrb	r3, [r3, #7]
 8000aae:	e006      	b.n	8000abe <CharToSegment+0x8e>
    } else if (c == 'F') {
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b46      	cmp	r3, #70	@ 0x46
 8000ab4:	d102      	bne.n	8000abc <CharToSegment+0x8c>
        return specialCharMap[8];
 8000ab6:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <CharToSegment+0x9c>)
 8000ab8:	7a1b      	ldrb	r3, [r3, #8]
 8000aba:	e000      	b.n	8000abe <CharToSegment+0x8e>
    } else {
        return 0b11111111; // Blank
 8000abc:	23ff      	movs	r3, #255	@ 0xff
    }
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	2000000c 	.word	0x2000000c

08000ad0 <SevenSegLEDsHandler>:

uint8_t* SevenSegLEDsHandler(char buffer[3][7], uint8_t scan_state) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    for (int i = 0; i < 3; i++) {
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	e035      	b.n	8000b4e <SevenSegLEDsHandler+0x7e>
        int len = strlen(buffer[i]);
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	1a9b      	subs	r3, r3, r2
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fb2c 	bl	800014c <strlen>
 8000af4:	4603      	mov	r3, r0
 8000af6:	60bb      	str	r3, [r7, #8]
        if (scan_state < 6) {
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	2b05      	cmp	r3, #5
 8000afc:	d81f      	bhi.n	8000b3e <SevenSegLEDsHandler+0x6e>
            if (scan_state < len) {
 8000afe:	78fb      	ldrb	r3, [r7, #3]
 8000b00:	68ba      	ldr	r2, [r7, #8]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	dd15      	ble.n	8000b32 <SevenSegLEDsHandler+0x62>
                output[i] = CharToSegment(buffer[i][len - 1 - scan_state]);
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	1a9b      	subs	r3, r3, r2
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	441a      	add	r2, r3
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1e59      	subs	r1, r3, #1
 8000b16:	78fb      	ldrb	r3, [r7, #3]
 8000b18:	1acb      	subs	r3, r1, r3
 8000b1a:	5cd3      	ldrb	r3, [r2, r3]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff87 	bl	8000a30 <CharToSegment>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4619      	mov	r1, r3
 8000b26:	4a0e      	ldr	r2, [pc, #56]	@ (8000b60 <SevenSegLEDsHandler+0x90>)
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	460a      	mov	r2, r1
 8000b2e:	701a      	strb	r2, [r3, #0]
 8000b30:	e00a      	b.n	8000b48 <SevenSegLEDsHandler+0x78>
            } else {
                output[i] = 0b11111111; // Blank
 8000b32:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <SevenSegLEDsHandler+0x90>)
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4413      	add	r3, r2
 8000b38:	22ff      	movs	r2, #255	@ 0xff
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e004      	b.n	8000b48 <SevenSegLEDsHandler+0x78>
            }
        } else {
            output[i] = 0b11111111; // Blank
 8000b3e:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <SevenSegLEDsHandler+0x90>)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	22ff      	movs	r2, #255	@ 0xff
 8000b46:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	ddc6      	ble.n	8000ae2 <SevenSegLEDsHandler+0x12>
        }
    }
    return output;
 8000b54:	4b02      	ldr	r3, [pc, #8]	@ (8000b60 <SevenSegLEDsHandler+0x90>)
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000dc 	.word	0x200000dc

08000b64 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(char buffer[3][7], uint8_t scan_state) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	70fb      	strb	r3, [r7, #3]
	uint8_t* curr_digit=SevenSegLEDsHandler(buffer,scan_state);
 8000b70:	78fb      	ldrb	r3, [r7, #3]
 8000b72:	4619      	mov	r1, r3
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ffab 	bl	8000ad0 <SevenSegLEDsHandler>
 8000b7a:	60b8      	str	r0, [r7, #8]
	uint8_t curr_scan;
	switch (scan_state) {
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	2b05      	cmp	r3, #5
 8000b80:	d820      	bhi.n	8000bc4 <UpdateDisplayBuffer+0x60>
 8000b82:	a201      	add	r2, pc, #4	@ (adr r2, 8000b88 <UpdateDisplayBuffer+0x24>)
 8000b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b88:	08000ba1 	.word	0x08000ba1
 8000b8c:	08000ba7 	.word	0x08000ba7
 8000b90:	08000bad 	.word	0x08000bad
 8000b94:	08000bb3 	.word	0x08000bb3
 8000b98:	08000bb9 	.word	0x08000bb9
 8000b9c:	08000bbf 	.word	0x08000bbf
		case 0:
			curr_scan=0b00100000;
 8000ba0:	2320      	movs	r3, #32
 8000ba2:	73fb      	strb	r3, [r7, #15]
			break;
 8000ba4:	e011      	b.n	8000bca <UpdateDisplayBuffer+0x66>
		case 1:
			curr_scan=0b00010000;
 8000ba6:	2310      	movs	r3, #16
 8000ba8:	73fb      	strb	r3, [r7, #15]
			break;
 8000baa:	e00e      	b.n	8000bca <UpdateDisplayBuffer+0x66>
		case 2:
			curr_scan=0b00001000;
 8000bac:	2308      	movs	r3, #8
 8000bae:	73fb      	strb	r3, [r7, #15]
			break;
 8000bb0:	e00b      	b.n	8000bca <UpdateDisplayBuffer+0x66>
		case 3:
			curr_scan=0b00000100;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	73fb      	strb	r3, [r7, #15]
			break;
 8000bb6:	e008      	b.n	8000bca <UpdateDisplayBuffer+0x66>
		case 4:
			curr_scan=0b00000010;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	73fb      	strb	r3, [r7, #15]
			break;
 8000bbc:	e005      	b.n	8000bca <UpdateDisplayBuffer+0x66>
		case 5:
			curr_scan=0b00000001;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
			break;
 8000bc2:	e002      	b.n	8000bca <UpdateDisplayBuffer+0x66>
		default:
			curr_scan=0b00000001;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	73fb      	strb	r3, [r7, #15]
			break;
 8000bc8:	bf00      	nop
	}
	if(LEDPointFlag >=0 && LEDPointFlag <=5){
 8000bca:	4b22      	ldr	r3, [pc, #136]	@ (8000c54 <UpdateDisplayBuffer+0xf0>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db2c      	blt.n	8000c2c <UpdateDisplayBuffer+0xc8>
 8000bd2:	4b20      	ldr	r3, [pc, #128]	@ (8000c54 <UpdateDisplayBuffer+0xf0>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b05      	cmp	r3, #5
 8000bd8:	dc28      	bgt.n	8000c2c <UpdateDisplayBuffer+0xc8>
	    	if (scan_state == LEDPointFlag){
 8000bda:	78fa      	ldrb	r2, [r7, #3]
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c54 <UpdateDisplayBuffer+0xf0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d113      	bne.n	8000c0c <UpdateDisplayBuffer+0xa8>
				displayBuffer[0] = curr_scan;
 8000be4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c58 <UpdateDisplayBuffer+0xf4>)
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	7013      	strb	r3, [r2, #0]
				displayBuffer[1] = curr_digit[2];
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	789a      	ldrb	r2, [r3, #2]
 8000bee:	4b1a      	ldr	r3, [pc, #104]	@ (8000c58 <UpdateDisplayBuffer+0xf4>)
 8000bf0:	705a      	strb	r2, [r3, #1]
				displayBuffer[2] = curr_digit[1] & 0b01111111; //Add point to second row
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b16      	ldr	r3, [pc, #88]	@ (8000c58 <UpdateDisplayBuffer+0xf4>)
 8000c00:	709a      	strb	r2, [r3, #2]
				displayBuffer[3] = curr_digit[0];
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <UpdateDisplayBuffer+0xf4>)
 8000c08:	70da      	strb	r2, [r3, #3]
	    	if (scan_state == LEDPointFlag){
 8000c0a:	e01f      	b.n	8000c4c <UpdateDisplayBuffer+0xe8>
	    	}
	    	else
	    	{
	    		displayBuffer[0] = curr_scan;
 8000c0c:	4a12      	ldr	r2, [pc, #72]	@ (8000c58 <UpdateDisplayBuffer+0xf4>)
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	7013      	strb	r3, [r2, #0]
	    		displayBuffer[1] = curr_digit[2];
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	789a      	ldrb	r2, [r3, #2]
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <UpdateDisplayBuffer+0xf4>)
 8000c18:	705a      	strb	r2, [r3, #1]
	    		displayBuffer[2] = curr_digit[1];
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	785a      	ldrb	r2, [r3, #1]
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <UpdateDisplayBuffer+0xf4>)
 8000c20:	709a      	strb	r2, [r3, #2]
	    		displayBuffer[3] = curr_digit[0];
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <UpdateDisplayBuffer+0xf4>)
 8000c28:	70da      	strb	r2, [r3, #3]
	    	if (scan_state == LEDPointFlag){
 8000c2a:	e00f      	b.n	8000c4c <UpdateDisplayBuffer+0xe8>
	    	}
	    }
	    else
	    {
			displayBuffer[0] = curr_scan;
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <UpdateDisplayBuffer+0xf4>)
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	7013      	strb	r3, [r2, #0]
			displayBuffer[1] = curr_digit[2];
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	789a      	ldrb	r2, [r3, #2]
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <UpdateDisplayBuffer+0xf4>)
 8000c38:	705a      	strb	r2, [r3, #1]
			displayBuffer[2] = curr_digit[1];
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	785a      	ldrb	r2, [r3, #1]
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <UpdateDisplayBuffer+0xf4>)
 8000c40:	709a      	strb	r2, [r3, #2]
			displayBuffer[3] = curr_digit[0];
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	4b04      	ldr	r3, [pc, #16]	@ (8000c58 <UpdateDisplayBuffer+0xf4>)
 8000c48:	70da      	strb	r2, [r3, #3]
	    }
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000040 	.word	0x20000040
 8000c58:	200000d4 	.word	0x200000d4

08000c5c <SevenSegLEDsScan>:

//
void SevenSegLEDsScan(){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
//	uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
	UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState);
 8000c60:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <SevenSegLEDsScan+0x40>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	4619      	mov	r1, r3
 8000c68:	480d      	ldr	r0, [pc, #52]	@ (8000ca0 <SevenSegLEDsScan+0x44>)
 8000c6a:	f7ff ff7b 	bl	8000b64 <UpdateDisplayBuffer>
	ShiftOut_SPI(displayBuffer, 4);
 8000c6e:	2104      	movs	r1, #4
 8000c70:	480c      	ldr	r0, [pc, #48]	@ (8000ca4 <SevenSegLEDsScan+0x48>)
 8000c72:	f000 f81b 	bl	8000cac <ShiftOut_SPI>
//    currentBufferIndex = bufferIndex;  // Swap buffers
    SevenSegScanState = (SevenSegScanState + 1) % 6;
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <SevenSegLEDsScan+0x40>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <SevenSegLEDsScan+0x4c>)
 8000c80:	fb83 3102 	smull	r3, r1, r3, r2
 8000c84:	17d3      	asrs	r3, r2, #31
 8000c86:	1ac9      	subs	r1, r1, r3
 8000c88:	460b      	mov	r3, r1
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	440b      	add	r3, r1
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	1ad1      	subs	r1, r2, r3
 8000c92:	b2ca      	uxtb	r2, r1
 8000c94:	4b01      	ldr	r3, [pc, #4]	@ (8000c9c <SevenSegLEDsScan+0x40>)
 8000c96:	701a      	strb	r2, [r3, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200000d1 	.word	0x200000d1
 8000ca0:	20000018 	.word	0x20000018
 8000ca4:	200000d4 	.word	0x200000d4
 8000ca8:	2aaaaaab 	.word	0x2aaaaaab

08000cac <ShiftOut_SPI>:
 *      Author: clong
 */
#include "SPI_shift.h"

void ShiftOut_SPI(uint8_t *data, size_t size)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Pull STCP (Latch) low
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cbc:	480a      	ldr	r0, [pc, #40]	@ (8000ce8 <ShiftOut_SPI+0x3c>)
 8000cbe:	f000 fe72 	bl	80019a6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, 300); // Transmit data
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	4807      	ldr	r0, [pc, #28]	@ (8000cec <ShiftOut_SPI+0x40>)
 8000cce:	f001 fae5 	bl	800229c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Pull STCP (Latch) high
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cd8:	4803      	ldr	r0, [pc, #12]	@ (8000ce8 <ShiftOut_SPI+0x3c>)
 8000cda:	f000 fe64 	bl	80019a6 <HAL_GPIO_WritePin>

}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40010c00 	.word	0x40010c00
 8000cec:	20000138 	.word	0x20000138

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf4:	f000 fb4c 	bl	8001390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf8:	f000 f832 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfc:	f000 f924 	bl	8000f48 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000d00:	f000 f8a0 	bl	8000e44 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000d04:	f000 f8d4 	bl	8000eb0 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000d08:	f000 f866 	bl	8000dd8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d0c:	4812      	ldr	r0, [pc, #72]	@ (8000d58 <main+0x68>)
 8000d0e:	f001 fcff 	bl	8002710 <HAL_TIM_Base_Start_IT>
  setTimer(0,100);
 8000d12:	2164      	movs	r1, #100	@ 0x64
 8000d14:	2000      	movs	r0, #0
 8000d16:	f000 facd 	bl	80012b4 <setTimer>
  setTimer(1,100);
 8000d1a:	2164      	movs	r1, #100	@ 0x64
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f000 fac9 	bl	80012b4 <setTimer>
  setTimer(2,100);
 8000d22:	2164      	movs	r1, #100	@ 0x64
 8000d24:	2002      	movs	r0, #2
 8000d26:	f000 fac5 	bl	80012b4 <setTimer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {
	  // TIMER 0 /////////////////////////////////////
	  if(timer_flag[0]==1){
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <main+0x6c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d105      	bne.n	8000d3e <main+0x4e>

		  SevenSegLEDsScan();
 8000d32:	f7ff ff93 	bl	8000c5c <SevenSegLEDsScan>
		  setTimer(0,5);
 8000d36:	2105      	movs	r1, #5
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f000 fabb 	bl	80012b4 <setTimer>
	  }

	  // TIMER 1 /////////////////////////////////////
	  if(timer_flag[1]==1){
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <main+0x6c>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d1f1      	bne.n	8000d2a <main+0x3a>
		  KeyLogic();
 8000d46:	f7ff fae3 	bl	8000310 <KeyLogic>
		  KeyLogic_Action();
 8000d4a:	f7ff fca9 	bl	80006a0 <KeyLogic_Action>
		  setTimer(1,10);
 8000d4e:	210a      	movs	r1, #10
 8000d50:	2001      	movs	r0, #1
 8000d52:	f000 faaf 	bl	80012b4 <setTimer>
	  if(timer_flag[0]==1){
 8000d56:	e7e8      	b.n	8000d2a <main+0x3a>
 8000d58:	20000190 	.word	0x20000190
 8000d5c:	20000204 	.word	0x20000204

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b090      	sub	sp, #64	@ 0x40
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0318 	add.w	r3, r7, #24
 8000d6a:	2228      	movs	r2, #40	@ 0x28
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 f8b0 	bl	8002ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d86:	2301      	movs	r3, #1
 8000d88:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d92:	f107 0318 	add.w	r3, r7, #24
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fe1e 	bl	80019d8 <HAL_RCC_OscConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000da2:	f000 f94b 	bl	800103c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da6:	230f      	movs	r3, #15
 8000da8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 f88c 	bl	8001edc <HAL_RCC_ClockConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dca:	f000 f937 	bl	800103c <Error_Handler>
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3740      	adds	r7, #64	@ 0x40
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ddc:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <MX_SPI1_Init+0x64>)
 8000dde:	4a18      	ldr	r2, [pc, #96]	@ (8000e40 <MX_SPI1_Init+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000de2:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <MX_SPI1_Init+0x64>)
 8000de4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000de8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dea:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <MX_SPI1_Init+0x64>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <MX_SPI1_Init+0x64>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <MX_SPI1_Init+0x64>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <MX_SPI1_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <MX_SPI1_Init+0x64>)
 8000e04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <MX_SPI1_Init+0x64>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <MX_SPI1_Init+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <MX_SPI1_Init+0x64>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <MX_SPI1_Init+0x64>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <MX_SPI1_Init+0x64>)
 8000e24:	220a      	movs	r2, #10
 8000e26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e28:	4804      	ldr	r0, [pc, #16]	@ (8000e3c <MX_SPI1_Init+0x64>)
 8000e2a:	f001 f9b3 	bl	8002194 <HAL_SPI_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e34:	f000 f902 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200000e0 	.word	0x200000e0
 8000e40:	40013000 	.word	0x40013000

08000e44 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e48:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <MX_SPI2_Init+0x64>)
 8000e4a:	4a18      	ldr	r2, [pc, #96]	@ (8000eac <MX_SPI2_Init+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <MX_SPI2_Init+0x64>)
 8000e50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e56:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <MX_SPI2_Init+0x64>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <MX_SPI2_Init+0x64>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <MX_SPI2_Init+0x64>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <MX_SPI2_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <MX_SPI2_Init+0x64>)
 8000e70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e74:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <MX_SPI2_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <MX_SPI2_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <MX_SPI2_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e88:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <MX_SPI2_Init+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <MX_SPI2_Init+0x64>)
 8000e90:	220a      	movs	r2, #10
 8000e92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e94:	4804      	ldr	r0, [pc, #16]	@ (8000ea8 <MX_SPI2_Init+0x64>)
 8000e96:	f001 f97d 	bl	8002194 <HAL_SPI_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ea0:	f000 f8cc 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000138 	.word	0x20000138
 8000eac:	40003800 	.word	0x40003800

08000eb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000ece:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ed2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000ed6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000eda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000edc:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000ee4:	2209      	movs	r2, #9
 8000ee6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ef4:	4813      	ldr	r0, [pc, #76]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000ef6:	f001 fbbb 	bl	8002670 <HAL_TIM_Base_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f00:	f000 f89c 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480c      	ldr	r0, [pc, #48]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000f12:	f001 fd57 	bl	80029c4 <HAL_TIM_ConfigClockSource>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f1c:	f000 f88e 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000f2e:	f001 ff2d 	bl	8002d8c <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f38:	f000 f880 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000190 	.word	0x20000190

08000f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800101c <MX_GPIO_Init+0xd4>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a2e      	ldr	r2, [pc, #184]	@ (800101c <MX_GPIO_Init+0xd4>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b2c      	ldr	r3, [pc, #176]	@ (800101c <MX_GPIO_Init+0xd4>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f74:	4b29      	ldr	r3, [pc, #164]	@ (800101c <MX_GPIO_Init+0xd4>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a28      	ldr	r2, [pc, #160]	@ (800101c <MX_GPIO_Init+0xd4>)
 8000f7a:	f043 0308 	orr.w	r3, r3, #8
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b26      	ldr	r3, [pc, #152]	@ (800101c <MX_GPIO_Init+0xd4>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0308 	and.w	r3, r3, #8
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2140      	movs	r1, #64	@ 0x40
 8000f90:	4823      	ldr	r0, [pc, #140]	@ (8001020 <MX_GPIO_Init+0xd8>)
 8000f92:	f000 fd08 	bl	80019a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8000f96:	2200      	movs	r2, #0
 8000f98:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8000f9c:	4821      	ldr	r0, [pc, #132]	@ (8001024 <MX_GPIO_Init+0xdc>)
 8000f9e:	f000 fd02 	bl	80019a6 <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Latch_SPI1_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin;
 8000fa2:	2340      	movs	r3, #64	@ 0x40
 8000fa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI1_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4819      	ldr	r0, [pc, #100]	@ (8001020 <MX_GPIO_Init+0xd8>)
 8000fba:	f000 fb59 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8000fbe:	231f      	movs	r3, #31
 8000fc0:	60bb      	str	r3, [r7, #8]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4814      	ldr	r0, [pc, #80]	@ (8001024 <MX_GPIO_Init+0xdc>)
 8000fd2:	f000 fb4d 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : Latch_SPI_Pin */
  GPIO_InitStruct.Pin = Latch_SPI_Pin;
 8000fd6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	4619      	mov	r1, r3
 8000fee:	480d      	ldr	r0, [pc, #52]	@ (8001024 <MX_GPIO_Init+0xdc>)
 8000ff0:	f000 fb3e 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin OUT2_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin;
 8000ff4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000ff8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2302      	movs	r3, #2
 8001004:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	@ (8001024 <MX_GPIO_Init+0xdc>)
 800100e:	f000 fb2f 	bl	8001670 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000
 8001020:	40010800 	.word	0x40010800
 8001024:	40010c00 	.word	0x40010c00

08001028 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001030:	f000 f958 	bl	80012e4 <timerRun>

}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
}
 8001042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <Error_Handler+0x8>

08001048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <HAL_MspInit+0x5c>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	4a14      	ldr	r2, [pc, #80]	@ (80010a4 <HAL_MspInit+0x5c>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6193      	str	r3, [r2, #24]
 800105a:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <HAL_MspInit+0x5c>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <HAL_MspInit+0x5c>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	4a0e      	ldr	r2, [pc, #56]	@ (80010a4 <HAL_MspInit+0x5c>)
 800106c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001070:	61d3      	str	r3, [r2, #28]
 8001072:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <HAL_MspInit+0x5c>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_MspInit+0x60>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	4a04      	ldr	r2, [pc, #16]	@ (80010a8 <HAL_MspInit+0x60>)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40010000 	.word	0x40010000

080010ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0318 	add.w	r3, r7, #24
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a2b      	ldr	r2, [pc, #172]	@ (8001174 <HAL_SPI_MspInit+0xc8>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d124      	bne.n	8001116 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001178 <HAL_SPI_MspInit+0xcc>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a29      	ldr	r2, [pc, #164]	@ (8001178 <HAL_SPI_MspInit+0xcc>)
 80010d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b27      	ldr	r3, [pc, #156]	@ (8001178 <HAL_SPI_MspInit+0xcc>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <HAL_SPI_MspInit+0xcc>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a23      	ldr	r2, [pc, #140]	@ (8001178 <HAL_SPI_MspInit+0xcc>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b21      	ldr	r3, [pc, #132]	@ (8001178 <HAL_SPI_MspInit+0xcc>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010fc:	23a0      	movs	r3, #160	@ 0xa0
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 0318 	add.w	r3, r7, #24
 800110c:	4619      	mov	r1, r3
 800110e:	481b      	ldr	r0, [pc, #108]	@ (800117c <HAL_SPI_MspInit+0xd0>)
 8001110:	f000 faae 	bl	8001670 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001114:	e029      	b.n	800116a <HAL_SPI_MspInit+0xbe>
  else if(hspi->Instance==SPI2)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a19      	ldr	r2, [pc, #100]	@ (8001180 <HAL_SPI_MspInit+0xd4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d124      	bne.n	800116a <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001120:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <HAL_SPI_MspInit+0xcc>)
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	4a14      	ldr	r2, [pc, #80]	@ (8001178 <HAL_SPI_MspInit+0xcc>)
 8001126:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800112a:	61d3      	str	r3, [r2, #28]
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <HAL_SPI_MspInit+0xcc>)
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <HAL_SPI_MspInit+0xcc>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a0e      	ldr	r2, [pc, #56]	@ (8001178 <HAL_SPI_MspInit+0xcc>)
 800113e:	f043 0308 	orr.w	r3, r3, #8
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <HAL_SPI_MspInit+0xcc>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001150:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115e:	f107 0318 	add.w	r3, r7, #24
 8001162:	4619      	mov	r1, r3
 8001164:	4807      	ldr	r0, [pc, #28]	@ (8001184 <HAL_SPI_MspInit+0xd8>)
 8001166:	f000 fa83 	bl	8001670 <HAL_GPIO_Init>
}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	@ 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40013000 	.word	0x40013000
 8001178:	40021000 	.word	0x40021000
 800117c:	40010800 	.word	0x40010800
 8001180:	40003800 	.word	0x40003800
 8001184:	40010c00 	.word	0x40010c00

08001188 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001198:	d113      	bne.n	80011c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <HAL_TIM_Base_MspInit+0x44>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a0b      	ldr	r2, [pc, #44]	@ (80011cc <HAL_TIM_Base_MspInit+0x44>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <HAL_TIM_Base_MspInit+0x44>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2101      	movs	r1, #1
 80011b6:	201c      	movs	r0, #28
 80011b8:	f000 fa23 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011bc:	201c      	movs	r0, #28
 80011be:	f000 fa3c 	bl	800163a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <NMI_Handler+0x4>

080011d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <MemManage_Handler+0x4>

080011e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001220:	f000 f8fc 	bl	800141c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800122c:	4802      	ldr	r0, [pc, #8]	@ (8001238 <TIM2_IRQHandler+0x10>)
 800122e:	f001 fac1 	bl	80027b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000190 	.word	0x20000190

0800123c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001244:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <_sbrk+0x5c>)
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <_sbrk+0x60>)
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <_sbrk+0x64>)
 800125a:	4a12      	ldr	r2, [pc, #72]	@ (80012a4 <_sbrk+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	429a      	cmp	r2, r3
 800126a:	d207      	bcs.n	800127c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800126c:	f001 fe3a 	bl	8002ee4 <__errno>
 8001270:	4603      	mov	r3, r0
 8001272:	220c      	movs	r2, #12
 8001274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	e009      	b.n	8001290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001282:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a05      	ldr	r2, [pc, #20]	@ (80012a0 <_sbrk+0x64>)
 800128c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20005000 	.word	0x20005000
 800129c:	00000400 	.word	0x00000400
 80012a0:	200001d8 	.word	0x200001d8
 80012a4:	20000378 	.word	0x20000378

080012a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <setTimer>:

#define TIMERNUM 10
int timer_counter[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};
int timer_flag[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};

void setTimer(int INDEX,int duration){
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
	timer_counter[INDEX]=duration;
 80012be:	4907      	ldr	r1, [pc, #28]	@ (80012dc <setTimer+0x28>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[INDEX]=0;
 80012c8:	4a05      	ldr	r2, [pc, #20]	@ (80012e0 <setTimer+0x2c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2100      	movs	r1, #0
 80012ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	200001dc 	.word	0x200001dc
 80012e0:	20000204 	.word	0x20000204

080012e4 <timerRun>:

void timerRun(){
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
	for(int i=0;i<TIMERNUM;i++){
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	e01c      	b.n	800132a <timerRun+0x46>
		if(timer_counter[i] > 0){
 80012f0:	4a12      	ldr	r2, [pc, #72]	@ (800133c <timerRun+0x58>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	dd13      	ble.n	8001324 <timerRun+0x40>
			timer_counter[i]--;
 80012fc:	4a0f      	ldr	r2, [pc, #60]	@ (800133c <timerRun+0x58>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001304:	1e5a      	subs	r2, r3, #1
 8001306:	490d      	ldr	r1, [pc, #52]	@ (800133c <timerRun+0x58>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <=0){
 800130e:	4a0b      	ldr	r2, [pc, #44]	@ (800133c <timerRun+0x58>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	2b00      	cmp	r3, #0
 8001318:	dc04      	bgt.n	8001324 <timerRun+0x40>
				timer_flag[i]=1;
 800131a:	4a09      	ldr	r2, [pc, #36]	@ (8001340 <timerRun+0x5c>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2101      	movs	r1, #1
 8001320:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<TIMERNUM;i++){
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3301      	adds	r3, #1
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b09      	cmp	r3, #9
 800132e:	dddf      	ble.n	80012f0 <timerRun+0xc>
			}
		}
	}
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	200001dc 	.word	0x200001dc
 8001340:	20000204 	.word	0x20000204

08001344 <Reset_Handler>:
 8001344:	f7ff ffb0 	bl	80012a8 <SystemInit>
 8001348:	480b      	ldr	r0, [pc, #44]	@ (8001378 <LoopFillZerobss+0xe>)
 800134a:	490c      	ldr	r1, [pc, #48]	@ (800137c <LoopFillZerobss+0x12>)
 800134c:	4a0c      	ldr	r2, [pc, #48]	@ (8001380 <LoopFillZerobss+0x16>)
 800134e:	2300      	movs	r3, #0
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:
 8001352:	58d4      	ldr	r4, [r2, r3]
 8001354:	50c4      	str	r4, [r0, r3]
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:
 8001358:	18c4      	adds	r4, r0, r3
 800135a:	428c      	cmp	r4, r1
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
 800135e:	4a09      	ldr	r2, [pc, #36]	@ (8001384 <LoopFillZerobss+0x1a>)
 8001360:	4c09      	ldr	r4, [pc, #36]	@ (8001388 <LoopFillZerobss+0x1e>)
 8001362:	2300      	movs	r3, #0
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:
 800136a:	42a2      	cmp	r2, r4
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>
 800136e:	f001 fdbf 	bl	8002ef0 <__libc_init_array>
 8001372:	f7ff fcbd 	bl	8000cf0 <main>
 8001376:	4770      	bx	lr
 8001378:	20000000 	.word	0x20000000
 800137c:	200000a0 	.word	0x200000a0
 8001380:	080038d8 	.word	0x080038d8
 8001384:	200000a0 	.word	0x200000a0
 8001388:	20000378 	.word	0x20000378

0800138c <ADC1_2_IRQHandler>:
 800138c:	e7fe      	b.n	800138c <ADC1_2_IRQHandler>
	...

08001390 <HAL_Init>:
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
 8001394:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <HAL_Init+0x28>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a07      	ldr	r2, [pc, #28]	@ (80013b8 <HAL_Init+0x28>)
 800139a:	f043 0310 	orr.w	r3, r3, #16
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	2003      	movs	r0, #3
 80013a2:	f000 f923 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>
 80013a6:	200f      	movs	r0, #15
 80013a8:	f000 f808 	bl	80013bc <HAL_InitTick>
 80013ac:	f7ff fe4c 	bl	8001048 <HAL_MspInit>
 80013b0:	2300      	movs	r3, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40022000 	.word	0x40022000

080013bc <HAL_InitTick>:
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <HAL_InitTick+0x54>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_InitTick+0x58>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f93b 	bl	8001656 <HAL_SYSTICK_Config>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_InitTick+0x2e>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00e      	b.n	8001408 <HAL_InitTick+0x4c>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d80a      	bhi.n	8001406 <HAL_InitTick+0x4a>
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f000 f903 	bl	8001602 <HAL_NVIC_SetPriority>
 80013fc:	4a06      	ldr	r2, [pc, #24]	@ (8001418 <HAL_InitTick+0x5c>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	2300      	movs	r3, #0
 8001404:	e000      	b.n	8001408 <HAL_InitTick+0x4c>
 8001406:	2301      	movs	r3, #1
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000044 	.word	0x20000044
 8001414:	2000004c 	.word	0x2000004c
 8001418:	20000048 	.word	0x20000048

0800141c <HAL_IncTick>:
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <HAL_IncTick+0x1c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b05      	ldr	r3, [pc, #20]	@ (800143c <HAL_IncTick+0x20>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4413      	add	r3, r2
 800142c:	4a03      	ldr	r2, [pc, #12]	@ (800143c <HAL_IncTick+0x20>)
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	2000004c 	.word	0x2000004c
 800143c:	2000022c 	.word	0x2000022c

08001440 <HAL_GetTick>:
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
 8001444:	4b02      	ldr	r3, [pc, #8]	@ (8001450 <HAL_GetTick+0x10>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	2000022c 	.word	0x2000022c

08001454 <__NVIC_SetPriorityGrouping>:
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001470:	4013      	ands	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	021a      	lsls	r2, r3, #8
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4313      	orrs	r3, r2
 800147c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	4a04      	ldr	r2, [pc, #16]	@ (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	60d3      	str	r3, [r2, #12]
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_GetPriorityGrouping>:
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <__NVIC_GetPriorityGrouping+0x18>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_EnableIRQ>:
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db0b      	blt.n	80014e2 <__NVIC_EnableIRQ+0x2a>
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f003 021f 	and.w	r2, r3, #31
 80014d0:	4906      	ldr	r1, [pc, #24]	@ (80014ec <__NVIC_EnableIRQ+0x34>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	2001      	movs	r0, #1
 80014da:	fa00 f202 	lsl.w	r2, r0, r2
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	e000e100 	.word	0xe000e100

080014f0 <__NVIC_SetPriority>:
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	db0a      	blt.n	800151a <__NVIC_SetPriority+0x2a>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	490c      	ldr	r1, [pc, #48]	@ (800153c <__NVIC_SetPriority+0x4c>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	440b      	add	r3, r1
 8001514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001518:	e00a      	b.n	8001530 <__NVIC_SetPriority+0x40>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4908      	ldr	r1, [pc, #32]	@ (8001540 <__NVIC_SetPriority+0x50>)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	3b04      	subs	r3, #4
 8001528:	0112      	lsls	r2, r2, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	440b      	add	r3, r1
 800152e:	761a      	strb	r2, [r3, #24]
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e100 	.word	0xe000e100
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <NVIC_EncodePriority>:
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	@ 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f1c3 0307 	rsb	r3, r3, #7
 800155e:	2b04      	cmp	r3, #4
 8001560:	bf28      	it	cs
 8001562:	2304      	movcs	r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3304      	adds	r3, #4
 800156a:	2b06      	cmp	r3, #6
 800156c:	d902      	bls.n	8001574 <NVIC_EncodePriority+0x30>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3b03      	subs	r3, #3
 8001572:	e000      	b.n	8001576 <NVIC_EncodePriority+0x32>
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	f04f 32ff 	mov.w	r2, #4294967295
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	401a      	ands	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	409a      	lsls	r2, r3
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43d9      	mvns	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	400b      	ands	r3, r1
 800159c:	4313      	orrs	r3, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	3724      	adds	r7, #36	@ 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Config>:
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015b8:	d301      	bcc.n	80015be <SysTick_Config+0x16>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <SysTick_Config+0x36>
 80015be:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <SysTick_Config+0x40>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
 80015c6:	210f      	movs	r1, #15
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f7ff ff90 	bl	80014f0 <__NVIC_SetPriority>
 80015d0:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <SysTick_Config+0x40>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <SysTick_Config+0x40>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	2300      	movs	r3, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriorityGrouping>:
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff2d 	bl	8001454 <__NVIC_SetPriorityGrouping>
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	f7ff ff42 	bl	800149c <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff90 	bl	8001544 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff5f 	bl	80014f0 <__NVIC_SetPriority>
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_EnableIRQ>:
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	71fb      	strb	r3, [r7, #7]
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff35 	bl	80014b8 <__NVIC_EnableIRQ>
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_SYSTICK_Config>:
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffa2 	bl	80015a8 <SysTick_Config>
 8001664:	4603      	mov	r3, r0
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_GPIO_Init>:
 8001670:	b480      	push	{r7}
 8001672:	b08b      	sub	sp, #44	@ 0x2c
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
 8001682:	e169      	b.n	8001958 <HAL_GPIO_Init+0x2e8>
 8001684:	2201      	movs	r2, #1
 8001686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	429a      	cmp	r2, r3
 800169e:	f040 8158 	bne.w	8001952 <HAL_GPIO_Init+0x2e2>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4a9a      	ldr	r2, [pc, #616]	@ (8001910 <HAL_GPIO_Init+0x2a0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d05e      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016ac:	4a98      	ldr	r2, [pc, #608]	@ (8001910 <HAL_GPIO_Init+0x2a0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d875      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016b2:	4a98      	ldr	r2, [pc, #608]	@ (8001914 <HAL_GPIO_Init+0x2a4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d058      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016b8:	4a96      	ldr	r2, [pc, #600]	@ (8001914 <HAL_GPIO_Init+0x2a4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d86f      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016be:	4a96      	ldr	r2, [pc, #600]	@ (8001918 <HAL_GPIO_Init+0x2a8>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d052      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016c4:	4a94      	ldr	r2, [pc, #592]	@ (8001918 <HAL_GPIO_Init+0x2a8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d869      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016ca:	4a94      	ldr	r2, [pc, #592]	@ (800191c <HAL_GPIO_Init+0x2ac>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d04c      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016d0:	4a92      	ldr	r2, [pc, #584]	@ (800191c <HAL_GPIO_Init+0x2ac>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d863      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016d6:	4a92      	ldr	r2, [pc, #584]	@ (8001920 <HAL_GPIO_Init+0x2b0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d046      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 80016dc:	4a90      	ldr	r2, [pc, #576]	@ (8001920 <HAL_GPIO_Init+0x2b0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d85d      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016e2:	2b12      	cmp	r3, #18
 80016e4:	d82a      	bhi.n	800173c <HAL_GPIO_Init+0xcc>
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d859      	bhi.n	800179e <HAL_GPIO_Init+0x12e>
 80016ea:	a201      	add	r2, pc, #4	@ (adr r2, 80016f0 <HAL_GPIO_Init+0x80>)
 80016ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f0:	0800176b 	.word	0x0800176b
 80016f4:	08001745 	.word	0x08001745
 80016f8:	08001757 	.word	0x08001757
 80016fc:	08001799 	.word	0x08001799
 8001700:	0800179f 	.word	0x0800179f
 8001704:	0800179f 	.word	0x0800179f
 8001708:	0800179f 	.word	0x0800179f
 800170c:	0800179f 	.word	0x0800179f
 8001710:	0800179f 	.word	0x0800179f
 8001714:	0800179f 	.word	0x0800179f
 8001718:	0800179f 	.word	0x0800179f
 800171c:	0800179f 	.word	0x0800179f
 8001720:	0800179f 	.word	0x0800179f
 8001724:	0800179f 	.word	0x0800179f
 8001728:	0800179f 	.word	0x0800179f
 800172c:	0800179f 	.word	0x0800179f
 8001730:	0800179f 	.word	0x0800179f
 8001734:	0800174d 	.word	0x0800174d
 8001738:	08001761 	.word	0x08001761
 800173c:	4a79      	ldr	r2, [pc, #484]	@ (8001924 <HAL_GPIO_Init+0x2b4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d013      	beq.n	800176a <HAL_GPIO_Init+0xfa>
 8001742:	e02c      	b.n	800179e <HAL_GPIO_Init+0x12e>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	623b      	str	r3, [r7, #32]
 800174a:	e029      	b.n	80017a0 <HAL_GPIO_Init+0x130>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	3304      	adds	r3, #4
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	e024      	b.n	80017a0 <HAL_GPIO_Init+0x130>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	3308      	adds	r3, #8
 800175c:	623b      	str	r3, [r7, #32]
 800175e:	e01f      	b.n	80017a0 <HAL_GPIO_Init+0x130>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	330c      	adds	r3, #12
 8001766:	623b      	str	r3, [r7, #32]
 8001768:	e01a      	b.n	80017a0 <HAL_GPIO_Init+0x130>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <HAL_GPIO_Init+0x108>
 8001772:	2304      	movs	r3, #4
 8001774:	623b      	str	r3, [r7, #32]
 8001776:	e013      	b.n	80017a0 <HAL_GPIO_Init+0x130>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d105      	bne.n	800178c <HAL_GPIO_Init+0x11c>
 8001780:	2308      	movs	r3, #8
 8001782:	623b      	str	r3, [r7, #32]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	611a      	str	r2, [r3, #16]
 800178a:	e009      	b.n	80017a0 <HAL_GPIO_Init+0x130>
 800178c:	2308      	movs	r3, #8
 800178e:	623b      	str	r3, [r7, #32]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	615a      	str	r2, [r3, #20]
 8001796:	e003      	b.n	80017a0 <HAL_GPIO_Init+0x130>
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
 800179c:	e000      	b.n	80017a0 <HAL_GPIO_Init+0x130>
 800179e:	bf00      	nop
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2bff      	cmp	r3, #255	@ 0xff
 80017a4:	d801      	bhi.n	80017aa <HAL_GPIO_Init+0x13a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	e001      	b.n	80017ae <HAL_GPIO_Init+0x13e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3304      	adds	r3, #4
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2bff      	cmp	r3, #255	@ 0xff
 80017b4:	d802      	bhi.n	80017bc <HAL_GPIO_Init+0x14c>
 80017b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	e002      	b.n	80017c2 <HAL_GPIO_Init+0x152>
 80017bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017be:	3b08      	subs	r3, #8
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	210f      	movs	r1, #15
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	401a      	ands	r2, r3
 80017d4:	6a39      	ldr	r1, [r7, #32]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	431a      	orrs	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 80b1 	beq.w	8001952 <HAL_GPIO_Init+0x2e2>
 80017f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001928 <HAL_GPIO_Init+0x2b8>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001928 <HAL_GPIO_Init+0x2b8>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001928 <HAL_GPIO_Init+0x2b8>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	4a48      	ldr	r2, [pc, #288]	@ (800192c <HAL_GPIO_Init+0x2bc>)
 800180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3302      	adds	r3, #2
 8001810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a40      	ldr	r2, [pc, #256]	@ (8001930 <HAL_GPIO_Init+0x2c0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d013      	beq.n	800185c <HAL_GPIO_Init+0x1ec>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a3f      	ldr	r2, [pc, #252]	@ (8001934 <HAL_GPIO_Init+0x2c4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00d      	beq.n	8001858 <HAL_GPIO_Init+0x1e8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a3e      	ldr	r2, [pc, #248]	@ (8001938 <HAL_GPIO_Init+0x2c8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d007      	beq.n	8001854 <HAL_GPIO_Init+0x1e4>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a3d      	ldr	r2, [pc, #244]	@ (800193c <HAL_GPIO_Init+0x2cc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d101      	bne.n	8001850 <HAL_GPIO_Init+0x1e0>
 800184c:	2303      	movs	r3, #3
 800184e:	e006      	b.n	800185e <HAL_GPIO_Init+0x1ee>
 8001850:	2304      	movs	r3, #4
 8001852:	e004      	b.n	800185e <HAL_GPIO_Init+0x1ee>
 8001854:	2302      	movs	r3, #2
 8001856:	e002      	b.n	800185e <HAL_GPIO_Init+0x1ee>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_GPIO_Init+0x1ee>
 800185c:	2300      	movs	r3, #0
 800185e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001860:	f002 0203 	and.w	r2, r2, #3
 8001864:	0092      	lsls	r2, r2, #2
 8001866:	4093      	lsls	r3, r2
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	492f      	ldr	r1, [pc, #188]	@ (800192c <HAL_GPIO_Init+0x2bc>)
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3302      	adds	r3, #2
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d006      	beq.n	8001896 <HAL_GPIO_Init+0x226>
 8001888:	4b2d      	ldr	r3, [pc, #180]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	492c      	ldr	r1, [pc, #176]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	608b      	str	r3, [r1, #8]
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x234>
 8001896:	4b2a      	ldr	r3, [pc, #168]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	43db      	mvns	r3, r3
 800189e:	4928      	ldr	r1, [pc, #160]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <HAL_GPIO_Init+0x24e>
 80018b0:	4b23      	ldr	r3, [pc, #140]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	4922      	ldr	r1, [pc, #136]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	60cb      	str	r3, [r1, #12]
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x25c>
 80018be:	4b20      	ldr	r3, [pc, #128]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	491e      	ldr	r1, [pc, #120]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	60cb      	str	r3, [r1, #12]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <HAL_GPIO_Init+0x276>
 80018d8:	4b19      	ldr	r3, [pc, #100]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	4918      	ldr	r1, [pc, #96]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x284>
 80018e6:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4914      	ldr	r1, [pc, #80]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d021      	beq.n	8001944 <HAL_GPIO_Init+0x2d4>
 8001900:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	490e      	ldr	r1, [pc, #56]	@ (8001940 <HAL_GPIO_Init+0x2d0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	600b      	str	r3, [r1, #0]
 800190c:	e021      	b.n	8001952 <HAL_GPIO_Init+0x2e2>
 800190e:	bf00      	nop
 8001910:	10320000 	.word	0x10320000
 8001914:	10310000 	.word	0x10310000
 8001918:	10220000 	.word	0x10220000
 800191c:	10210000 	.word	0x10210000
 8001920:	10120000 	.word	0x10120000
 8001924:	10110000 	.word	0x10110000
 8001928:	40021000 	.word	0x40021000
 800192c:	40010000 	.word	0x40010000
 8001930:	40010800 	.word	0x40010800
 8001934:	40010c00 	.word	0x40010c00
 8001938:	40011000 	.word	0x40011000
 800193c:	40011400 	.word	0x40011400
 8001940:	40010400 	.word	0x40010400
 8001944:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <HAL_GPIO_Init+0x304>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	43db      	mvns	r3, r3
 800194c:	4909      	ldr	r1, [pc, #36]	@ (8001974 <HAL_GPIO_Init+0x304>)
 800194e:	4013      	ands	r3, r2
 8001950:	600b      	str	r3, [r1, #0]
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	3301      	adds	r3, #1
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195e:	fa22 f303 	lsr.w	r3, r2, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	f47f ae8e 	bne.w	8001684 <HAL_GPIO_Init+0x14>
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	372c      	adds	r7, #44	@ 0x2c
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	40010400 	.word	0x40010400

08001978 <HAL_GPIO_ReadPin>:
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <HAL_GPIO_ReadPin+0x1e>
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e001      	b.n	800199a <HAL_GPIO_ReadPin+0x22>
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <HAL_GPIO_WritePin>:
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	807b      	strh	r3, [r7, #2]
 80019b2:	4613      	mov	r3, r2
 80019b4:	707b      	strb	r3, [r7, #1]
 80019b6:	787b      	ldrb	r3, [r7, #1]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_WritePin+0x1e>
 80019bc:	887a      	ldrh	r2, [r7, #2]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	611a      	str	r2, [r3, #16]
 80019c2:	e003      	b.n	80019cc <HAL_GPIO_WritePin+0x26>
 80019c4:	887b      	ldrh	r3, [r7, #2]
 80019c6:	041a      	lsls	r2, r3, #16
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	611a      	str	r2, [r3, #16]
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_RCC_OscConfig>:
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_OscConfig+0x12>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e272      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 8087 	beq.w	8001b06 <HAL_RCC_OscConfig+0x12e>
 80019f8:	4b92      	ldr	r3, [pc, #584]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d00c      	beq.n	8001a1e <HAL_RCC_OscConfig+0x46>
 8001a04:	4b8f      	ldr	r3, [pc, #572]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d112      	bne.n	8001a36 <HAL_RCC_OscConfig+0x5e>
 8001a10:	4b8c      	ldr	r3, [pc, #560]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a1c:	d10b      	bne.n	8001a36 <HAL_RCC_OscConfig+0x5e>
 8001a1e:	4b89      	ldr	r3, [pc, #548]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d06c      	beq.n	8001b04 <HAL_RCC_OscConfig+0x12c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d168      	bne.n	8001b04 <HAL_RCC_OscConfig+0x12c>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e24c      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x76>
 8001a40:	4b80      	ldr	r3, [pc, #512]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a7f      	ldr	r2, [pc, #508]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	e02e      	b.n	8001aac <HAL_RCC_OscConfig+0xd4>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x98>
 8001a56:	4b7b      	ldr	r3, [pc, #492]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a7a      	ldr	r2, [pc, #488]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4b78      	ldr	r3, [pc, #480]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a77      	ldr	r2, [pc, #476]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	e01d      	b.n	8001aac <HAL_RCC_OscConfig+0xd4>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0xbc>
 8001a7a:	4b72      	ldr	r3, [pc, #456]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a71      	ldr	r2, [pc, #452]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b6f      	ldr	r3, [pc, #444]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a6e      	ldr	r2, [pc, #440]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e00b      	b.n	8001aac <HAL_RCC_OscConfig+0xd4>
 8001a94:	4b6b      	ldr	r3, [pc, #428]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a6a      	ldr	r2, [pc, #424]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b68      	ldr	r3, [pc, #416]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a67      	ldr	r2, [pc, #412]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d013      	beq.n	8001adc <HAL_RCC_OscConfig+0x104>
 8001ab4:	f7ff fcc4 	bl	8001440 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0xf6>
 8001abc:	f7ff fcc0 	bl	8001440 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	@ 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0xf6>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e200      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001ace:	4b5d      	ldr	r3, [pc, #372]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0xe4>
 8001ada:	e014      	b.n	8001b06 <HAL_RCC_OscConfig+0x12e>
 8001adc:	f7ff fcb0 	bl	8001440 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x11e>
 8001ae4:	f7ff fcac 	bl	8001440 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	@ 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x11e>
 8001af2:	2303      	movs	r3, #3
 8001af4:	e1ec      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001af6:	4b53      	ldr	r3, [pc, #332]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x10c>
 8001b02:	e000      	b.n	8001b06 <HAL_RCC_OscConfig+0x12e>
 8001b04:	bf00      	nop
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d063      	beq.n	8001bda <HAL_RCC_OscConfig+0x202>
 8001b12:	4b4c      	ldr	r3, [pc, #304]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <HAL_RCC_OscConfig+0x15e>
 8001b1e:	4b49      	ldr	r3, [pc, #292]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d11c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x18c>
 8001b2a:	4b46      	ldr	r3, [pc, #280]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d116      	bne.n	8001b64 <HAL_RCC_OscConfig+0x18c>
 8001b36:	4b43      	ldr	r3, [pc, #268]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <HAL_RCC_OscConfig+0x176>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_OscConfig+0x176>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e1c0      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001b4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4939      	ldr	r1, [pc, #228]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
 8001b62:	e03a      	b.n	8001bda <HAL_RCC_OscConfig+0x202>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d020      	beq.n	8001bae <HAL_RCC_OscConfig+0x1d6>
 8001b6c:	4b36      	ldr	r3, [pc, #216]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	f7ff fc65 	bl	8001440 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x1b4>
 8001b7a:	f7ff fc61 	bl	8001440 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x1b4>
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1a1      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1a2>
 8001b98:	4b2a      	ldr	r3, [pc, #168]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4927      	ldr	r1, [pc, #156]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
 8001bac:	e015      	b.n	8001bda <HAL_RCC_OscConfig+0x202>
 8001bae:	4b26      	ldr	r3, [pc, #152]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	f7ff fc44 	bl	8001440 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x1f6>
 8001bbc:	f7ff fc40 	bl	8001440 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x1f6>
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e180      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001bce:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x1e4>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d03a      	beq.n	8001c5c <HAL_RCC_OscConfig+0x284>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d019      	beq.n	8001c22 <HAL_RCC_OscConfig+0x24a>
 8001bee:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	f7ff fc24 	bl	8001440 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x236>
 8001bfc:	f7ff fc20 	bl	8001440 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x236>
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e160      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x224>
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f000 fa9c 	bl	8002158 <RCC_Delay>
 8001c20:	e01c      	b.n	8001c5c <HAL_RCC_OscConfig+0x284>
 8001c22:	4b0a      	ldr	r3, [pc, #40]	@ (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	f7ff fc0a 	bl	8001440 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]
 8001c2e:	e00f      	b.n	8001c50 <HAL_RCC_OscConfig+0x278>
 8001c30:	f7ff fc06 	bl	8001440 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d908      	bls.n	8001c50 <HAL_RCC_OscConfig+0x278>
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e146      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	42420000 	.word	0x42420000
 8001c4c:	42420480 	.word	0x42420480
 8001c50:	4b92      	ldr	r3, [pc, #584]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1e9      	bne.n	8001c30 <HAL_RCC_OscConfig+0x258>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80a6 	beq.w	8001db6 <HAL_RCC_OscConfig+0x3de>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	75fb      	strb	r3, [r7, #23]
 8001c6e:	4b8b      	ldr	r3, [pc, #556]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10d      	bne.n	8001c96 <HAL_RCC_OscConfig+0x2be>
 8001c7a:	4b88      	ldr	r3, [pc, #544]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4a87      	ldr	r2, [pc, #540]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c84:	61d3      	str	r3, [r2, #28]
 8001c86:	4b85      	ldr	r3, [pc, #532]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2301      	movs	r3, #1
 8001c94:	75fb      	strb	r3, [r7, #23]
 8001c96:	4b82      	ldr	r3, [pc, #520]	@ (8001ea0 <HAL_RCC_OscConfig+0x4c8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d118      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x2fc>
 8001ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ea0 <HAL_RCC_OscConfig+0x4c8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ea0 <HAL_RCC_OscConfig+0x4c8>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	f7ff fbc7 	bl	8001440 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x2f0>
 8001cb6:	f7ff fbc3 	bl	8001440 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b64      	cmp	r3, #100	@ 0x64
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x2f0>
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e103      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001cc8:	4b75      	ldr	r3, [pc, #468]	@ (8001ea0 <HAL_RCC_OscConfig+0x4c8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x2de>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x312>
 8001cdc:	4b6f      	ldr	r3, [pc, #444]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4a6e      	ldr	r2, [pc, #440]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6213      	str	r3, [r2, #32]
 8001ce8:	e02d      	b.n	8001d46 <HAL_RCC_OscConfig+0x36e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x334>
 8001cf2:	4b6a      	ldr	r3, [pc, #424]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4a69      	ldr	r2, [pc, #420]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	6213      	str	r3, [r2, #32]
 8001cfe:	4b67      	ldr	r3, [pc, #412]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4a66      	ldr	r2, [pc, #408]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	6213      	str	r3, [r2, #32]
 8001d0a:	e01c      	b.n	8001d46 <HAL_RCC_OscConfig+0x36e>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d10c      	bne.n	8001d2e <HAL_RCC_OscConfig+0x356>
 8001d14:	4b61      	ldr	r3, [pc, #388]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4a60      	ldr	r2, [pc, #384]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6213      	str	r3, [r2, #32]
 8001d20:	4b5e      	ldr	r3, [pc, #376]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4a5d      	ldr	r2, [pc, #372]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6213      	str	r3, [r2, #32]
 8001d2c:	e00b      	b.n	8001d46 <HAL_RCC_OscConfig+0x36e>
 8001d2e:	4b5b      	ldr	r3, [pc, #364]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4a5a      	ldr	r2, [pc, #360]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	6213      	str	r3, [r2, #32]
 8001d3a:	4b58      	ldr	r3, [pc, #352]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4a57      	ldr	r2, [pc, #348]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	f023 0304 	bic.w	r3, r3, #4
 8001d44:	6213      	str	r3, [r2, #32]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d015      	beq.n	8001d7a <HAL_RCC_OscConfig+0x3a2>
 8001d4e:	f7ff fb77 	bl	8001440 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_OscConfig+0x394>
 8001d56:	f7ff fb73 	bl	8001440 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x394>
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e0b1      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001d6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0ee      	beq.n	8001d56 <HAL_RCC_OscConfig+0x37e>
 8001d78:	e014      	b.n	8001da4 <HAL_RCC_OscConfig+0x3cc>
 8001d7a:	f7ff fb61 	bl	8001440 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]
 8001d80:	e00a      	b.n	8001d98 <HAL_RCC_OscConfig+0x3c0>
 8001d82:	f7ff fb5d 	bl	8001440 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x3c0>
 8001d94:	2303      	movs	r3, #3
 8001d96:	e09b      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001d98:	4b40      	ldr	r3, [pc, #256]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1ee      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3aa>
 8001da4:	7dfb      	ldrb	r3, [r7, #23]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d105      	bne.n	8001db6 <HAL_RCC_OscConfig+0x3de>
 8001daa:	4b3c      	ldr	r3, [pc, #240]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a3b      	ldr	r2, [pc, #236]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	61d3      	str	r3, [r2, #28]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 8087 	beq.w	8001ece <HAL_RCC_OscConfig+0x4f6>
 8001dc0:	4b36      	ldr	r3, [pc, #216]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d061      	beq.n	8001e90 <HAL_RCC_OscConfig+0x4b8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d146      	bne.n	8001e62 <HAL_RCC_OscConfig+0x48a>
 8001dd4:	4b33      	ldr	r3, [pc, #204]	@ (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	f7ff fb31 	bl	8001440 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x41c>
 8001de2:	f7ff fb2d 	bl	8001440 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x41c>
 8001df0:	2303      	movs	r3, #3
 8001df2:	e06d      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001df4:	4b29      	ldr	r3, [pc, #164]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f0      	bne.n	8001de2 <HAL_RCC_OscConfig+0x40a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e08:	d108      	bne.n	8001e1c <HAL_RCC_OscConfig+0x444>
 8001e0a:	4b24      	ldr	r3, [pc, #144]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	4921      	ldr	r1, [pc, #132]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a19      	ldr	r1, [r3, #32]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	491b      	ldr	r1, [pc, #108]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
 8001e34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	f7ff fb01 	bl	8001440 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x47c>
 8001e42:	f7ff fafd 	bl	8001440 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x47c>
 8001e50:	2303      	movs	r3, #3
 8001e52:	e03d      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001e54:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x46a>
 8001e60:	e035      	b.n	8001ece <HAL_RCC_OscConfig+0x4f6>
 8001e62:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	f7ff faea 	bl	8001440 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x4aa>
 8001e70:	f7ff fae6 	bl	8001440 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x4aa>
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e026      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x498>
 8001e8e:	e01e      	b.n	8001ece <HAL_RCC_OscConfig+0x4f6>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d107      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x4d0>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e019      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40007000 	.word	0x40007000
 8001ea4:	42420060 	.word	0x42420060
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <HAL_RCC_OscConfig+0x500>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x4f2>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_OscConfig+0x4f6>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000

08001edc <HAL_RCC_ClockConfig>:
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x14>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0d0      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
 8001ef0:	4b6a      	ldr	r3, [pc, #424]	@ (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d910      	bls.n	8001f20 <HAL_RCC_ClockConfig+0x44>
 8001efe:	4b67      	ldr	r3, [pc, #412]	@ (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 0207 	bic.w	r2, r3, #7
 8001f06:	4965      	ldr	r1, [pc, #404]	@ (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]
 8001f0e:	4b63      	ldr	r3, [pc, #396]	@ (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x44>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0b8      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d020      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x92>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x68>
 8001f38:	4b59      	ldr	r3, [pc, #356]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4a58      	ldr	r2, [pc, #352]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f42:	6053      	str	r3, [r2, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x80>
 8001f50:	4b53      	ldr	r3, [pc, #332]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4a52      	ldr	r2, [pc, #328]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f5a:	6053      	str	r3, [r2, #4]
 8001f5c:	4b50      	ldr	r3, [pc, #320]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	494d      	ldr	r1, [pc, #308]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d040      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x120>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xb6>
 8001f82:	4b47      	ldr	r3, [pc, #284]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d115      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e07f      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xce>
 8001f9a:	4b41      	ldr	r3, [pc, #260]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e073      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
 8001faa:	4b3d      	ldr	r3, [pc, #244]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e06b      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
 8001fba:	4b39      	ldr	r3, [pc, #228]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f023 0203 	bic.w	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4936      	ldr	r1, [pc, #216]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
 8001fcc:	f7ff fa38 	bl	8001440 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_ClockConfig+0x10e>
 8001fd4:	f7ff fa34 	bl	8001440 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x10e>
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e053      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
 8001fea:	4b2d      	ldr	r3, [pc, #180]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 020c 	and.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d1eb      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xf8>
 8001ffc:	4b27      	ldr	r3, [pc, #156]	@ (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d210      	bcs.n	800202c <HAL_RCC_ClockConfig+0x150>
 800200a:	4b24      	ldr	r3, [pc, #144]	@ (800209c <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 0207 	bic.w	r2, r3, #7
 8002012:	4922      	ldr	r1, [pc, #136]	@ (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]
 800201a:	4b20      	ldr	r3, [pc, #128]	@ (800209c <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x150>
 8002028:	2301      	movs	r3, #1
 800202a:	e032      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_RCC_ClockConfig+0x16e>
 8002038:	4b19      	ldr	r3, [pc, #100]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4916      	ldr	r1, [pc, #88]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <HAL_RCC_ClockConfig+0x18e>
 8002056:	4b12      	ldr	r3, [pc, #72]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	490e      	ldr	r1, [pc, #56]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]
 800206a:	f000 f821 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 800206e:	4602      	mov	r2, r0
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	490a      	ldr	r1, [pc, #40]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 800207c:	5ccb      	ldrb	r3, [r1, r3]
 800207e:	fa22 f303 	lsr.w	r3, r2, r3
 8002082:	4a09      	ldr	r2, [pc, #36]	@ (80020a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <HAL_RCC_ClockConfig+0x1d0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff f996 	bl	80013bc <HAL_InitTick>
 8002090:	2300      	movs	r3, #0
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40022000 	.word	0x40022000
 80020a0:	40021000 	.word	0x40021000
 80020a4:	08003870 	.word	0x08003870
 80020a8:	20000044 	.word	0x20000044
 80020ac:	20000048 	.word	0x20000048

080020b0 <HAL_RCC_GetSysClockFreq>:
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x94>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d002      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x30>
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d003      	beq.n	80020e6 <HAL_RCC_GetSysClockFreq+0x36>
 80020de:	e027      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x80>
 80020e0:	4b19      	ldr	r3, [pc, #100]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x98>)
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	e027      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x86>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	0c9b      	lsrs	r3, r3, #18
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	4a17      	ldr	r2, [pc, #92]	@ (800214c <HAL_RCC_GetSysClockFreq+0x9c>)
 80020f0:	5cd3      	ldrb	r3, [r2, r3]
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d010      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x70>
 80020fe:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x94>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	0c5b      	lsrs	r3, r3, #17
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	4a11      	ldr	r2, [pc, #68]	@ (8002150 <HAL_RCC_GetSysClockFreq+0xa0>)
 800210a:	5cd3      	ldrb	r3, [r2, r3]
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a0d      	ldr	r2, [pc, #52]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x98>)
 8002112:	fb03 f202 	mul.w	r2, r3, r2
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	fbb2 f3f3 	udiv	r3, r2, r3
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	e004      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x7a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a0c      	ldr	r2, [pc, #48]	@ (8002154 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002124:	fb02 f303 	mul.w	r3, r2, r3
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	e002      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x86>
 8002130:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x98>)
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	bf00      	nop
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4618      	mov	r0, r3
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	007a1200 	.word	0x007a1200
 800214c:	08003880 	.word	0x08003880
 8002150:	08003890 	.word	0x08003890
 8002154:	003d0900 	.word	0x003d0900

08002158 <RCC_Delay>:
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <RCC_Delay+0x34>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <RCC_Delay+0x38>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0a5b      	lsrs	r3, r3, #9
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	fb02 f303 	mul.w	r3, r2, r3
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	bf00      	nop
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1e5a      	subs	r2, r3, #1
 800217a:	60fa      	str	r2, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f9      	bne.n	8002174 <RCC_Delay+0x1c>
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	20000044 	.word	0x20000044
 8002190:	10624dd3 	.word	0x10624dd3

08002194 <HAL_SPI_Init>:
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_SPI_Init+0x12>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e076      	b.n	8002294 <HAL_SPI_Init+0x100>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d108      	bne.n	80021c0 <HAL_SPI_Init+0x2c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021b6:	d009      	beq.n	80021cc <HAL_SPI_Init+0x38>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
 80021be:	e005      	b.n	80021cc <HAL_SPI_Init+0x38>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	615a      	str	r2, [r3, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d106      	bne.n	80021ec <HAL_SPI_Init+0x58>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7fe ff60 	bl	80010ac <HAL_SPI_MspInit>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002250:	ea42 0103 	orr.w	r1, r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002258:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	0c1a      	lsrs	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f002 0204 	and.w	r2, r2, #4
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002282:	61da      	str	r2, [r3, #28]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	655a      	str	r2, [r3, #84]	@ 0x54
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002292:	2300      	movs	r3, #0
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_SPI_Transmit>:
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	4613      	mov	r3, r2
 80022aa:	80fb      	strh	r3, [r7, #6]
 80022ac:	2300      	movs	r3, #0
 80022ae:	77fb      	strb	r3, [r7, #31]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_SPI_Transmit+0x22>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e12d      	b.n	800251a <HAL_SPI_Transmit+0x27e>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80022c6:	f7ff f8bb 	bl	8001440 <HAL_GetTick>
 80022ca:	61b8      	str	r0, [r7, #24]
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	82fb      	strh	r3, [r7, #22]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d002      	beq.n	80022e2 <HAL_SPI_Transmit+0x46>
 80022dc:	2302      	movs	r3, #2
 80022de:	77fb      	strb	r3, [r7, #31]
 80022e0:	e116      	b.n	8002510 <HAL_SPI_Transmit+0x274>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_SPI_Transmit+0x52>
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <HAL_SPI_Transmit+0x58>
 80022ee:	2301      	movs	r3, #1
 80022f0:	77fb      	strb	r3, [r7, #31]
 80022f2:	e10d      	b.n	8002510 <HAL_SPI_Transmit+0x274>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2203      	movs	r2, #3
 80022f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	655a      	str	r2, [r3, #84]	@ 0x54
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	631a      	str	r2, [r3, #48]	@ 0x30
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	88fa      	ldrh	r2, [r7, #6]
 800230c:	869a      	strh	r2, [r3, #52]	@ 0x34
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	88fa      	ldrh	r2, [r7, #6]
 8002312:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	639a      	str	r2, [r3, #56]	@ 0x38
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	645a      	str	r2, [r3, #68]	@ 0x44
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	641a      	str	r2, [r3, #64]	@ 0x40
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800233a:	d10f      	bne.n	800235c <HAL_SPI_Transmit+0xc0>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002366:	2b40      	cmp	r3, #64	@ 0x40
 8002368:	d007      	beq.n	800237a <HAL_SPI_Transmit+0xde>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002382:	d14f      	bne.n	8002424 <HAL_SPI_Transmit+0x188>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <HAL_SPI_Transmit+0xf6>
 800238c:	8afb      	ldrh	r3, [r7, #22]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d142      	bne.n	8002418 <HAL_SPI_Transmit+0x17c>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	881a      	ldrh	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	1c9a      	adds	r2, r3, #2
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80023b6:	e02f      	b.n	8002418 <HAL_SPI_Transmit+0x17c>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d112      	bne.n	80023ec <HAL_SPI_Transmit+0x150>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	881a      	ldrh	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	1c9a      	adds	r2, r3, #2
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	631a      	str	r2, [r3, #48]	@ 0x30
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80023ea:	e015      	b.n	8002418 <HAL_SPI_Transmit+0x17c>
 80023ec:	f7ff f828 	bl	8001440 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d803      	bhi.n	8002404 <HAL_SPI_Transmit+0x168>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002402:	d102      	bne.n	800240a <HAL_SPI_Transmit+0x16e>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_SPI_Transmit+0x17c>
 800240a:	2303      	movs	r3, #3
 800240c:	77fb      	strb	r3, [r7, #31]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002416:	e07b      	b.n	8002510 <HAL_SPI_Transmit+0x274>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1ca      	bne.n	80023b8 <HAL_SPI_Transmit+0x11c>
 8002422:	e050      	b.n	80024c6 <HAL_SPI_Transmit+0x22a>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <HAL_SPI_Transmit+0x196>
 800242c:	8afb      	ldrh	r3, [r7, #22]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d144      	bne.n	80024bc <HAL_SPI_Transmit+0x220>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	330c      	adds	r3, #12
 800243c:	7812      	ldrb	r2, [r2, #0]
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	631a      	str	r2, [r3, #48]	@ 0x30
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800244e:	b29b      	uxth	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002458:	e030      	b.n	80024bc <HAL_SPI_Transmit+0x220>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b02      	cmp	r3, #2
 8002466:	d113      	bne.n	8002490 <HAL_SPI_Transmit+0x1f4>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	330c      	adds	r3, #12
 8002472:	7812      	ldrb	r2, [r2, #0]
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800248e:	e015      	b.n	80024bc <HAL_SPI_Transmit+0x220>
 8002490:	f7fe ffd6 	bl	8001440 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d803      	bhi.n	80024a8 <HAL_SPI_Transmit+0x20c>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a6:	d102      	bne.n	80024ae <HAL_SPI_Transmit+0x212>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_SPI_Transmit+0x220>
 80024ae:	2303      	movs	r3, #3
 80024b0:	77fb      	strb	r3, [r7, #31]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80024ba:	e029      	b.n	8002510 <HAL_SPI_Transmit+0x274>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1c9      	bne.n	800245a <HAL_SPI_Transmit+0x1be>
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	6839      	ldr	r1, [r7, #0]
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f8b2 	bl	8002634 <SPI_EndRxTxTransaction>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <HAL_SPI_Transmit+0x240>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2220      	movs	r2, #32
 80024da:	655a      	str	r2, [r3, #84]	@ 0x54
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10a      	bne.n	80024fa <HAL_SPI_Transmit+0x25e>
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <HAL_SPI_Transmit+0x26c>
 8002502:	2301      	movs	r3, #1
 8002504:	77fb      	strb	r3, [r7, #31]
 8002506:	e003      	b.n	8002510 <HAL_SPI_Transmit+0x274>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002518:	7ffb      	ldrb	r3, [r7, #31]
 800251a:	4618      	mov	r0, r3
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <SPI_WaitFlagStateUntilTimeout>:
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	71fb      	strb	r3, [r7, #7]
 8002534:	f7fe ff84 	bl	8001440 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	4413      	add	r3, r2
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	f7fe ff7c 	bl	8001440 <HAL_GetTick>
 8002548:	61b8      	str	r0, [r7, #24]
 800254a:	4b39      	ldr	r3, [pc, #228]	@ (8002630 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	015b      	lsls	r3, r3, #5
 8002550:	0d1b      	lsrs	r3, r3, #20
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e054      	b.n	8002606 <SPI_WaitFlagStateUntilTimeout+0xe2>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002562:	d050      	beq.n	8002606 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8002564:	f7fe ff6c 	bl	8001440 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	429a      	cmp	r2, r3
 8002572:	d902      	bls.n	800257a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d13d      	bne.n	80025f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002592:	d111      	bne.n	80025b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800259c:	d004      	beq.n	80025a8 <SPI_WaitFlagStateUntilTimeout+0x84>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025a6:	d107      	bne.n	80025b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025c0:	d10f      	bne.n	80025e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80025f2:	2303      	movs	r3, #3
 80025f4:	e017      	b.n	8002626 <SPI_WaitFlagStateUntilTimeout+0x102>
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <SPI_WaitFlagStateUntilTimeout+0xdc>
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	3b01      	subs	r3, #1
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	4013      	ands	r3, r2
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	429a      	cmp	r2, r3
 8002614:	bf0c      	ite	eq
 8002616:	2301      	moveq	r3, #1
 8002618:	2300      	movne	r3, #0
 800261a:	b2db      	uxtb	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	429a      	cmp	r2, r3
 8002622:	d19b      	bne.n	800255c <SPI_WaitFlagStateUntilTimeout+0x38>
 8002624:	2300      	movs	r3, #0
 8002626:	4618      	mov	r0, r3
 8002628:	3720      	adds	r7, #32
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000044 	.word	0x20000044

08002634 <SPI_EndRxTxTransaction>:
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2200      	movs	r2, #0
 8002648:	2180      	movs	r1, #128	@ 0x80
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f7ff ff6a 	bl	8002524 <SPI_WaitFlagStateUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <SPI_EndRxTxTransaction+0x32>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265a:	f043 0220 	orr.w	r2, r3, #32
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	655a      	str	r2, [r3, #84]	@ 0x54
 8002662:	2303      	movs	r3, #3
 8002664:	e000      	b.n	8002668 <SPI_EndRxTxTransaction+0x34>
 8002666:	2300      	movs	r3, #0
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_TIM_Base_Init>:
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_TIM_Base_Init+0x12>
 800267e:	2301      	movs	r3, #1
 8002680:	e041      	b.n	8002706 <HAL_TIM_Base_Init+0x96>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_TIM_Base_Init+0x2c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe fd76 	bl	8001188 <HAL_TIM_Base_MspInit>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3304      	adds	r3, #4
 80026ac:	4619      	mov	r1, r3
 80026ae:	4610      	mov	r0, r2
 80026b0:	f000 fa74 	bl	8002b9c <TIM_Base_SetConfig>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002704:	2300      	movs	r3, #0
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <HAL_TIM_Base_Start_IT>:
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d001      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x18>
 8002724:	2301      	movs	r3, #1
 8002726:	e03a      	b.n	800279e <HAL_TIM_Base_Start_IT+0x8e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	60da      	str	r2, [r3, #12]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a18      	ldr	r2, [pc, #96]	@ (80027a8 <HAL_TIM_Base_Start_IT+0x98>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00e      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x58>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002752:	d009      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x58>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a14      	ldr	r2, [pc, #80]	@ (80027ac <HAL_TIM_Base_Start_IT+0x9c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d004      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x58>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a13      	ldr	r2, [pc, #76]	@ (80027b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d111      	bne.n	800278c <HAL_TIM_Base_Start_IT+0x7c>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b06      	cmp	r3, #6
 8002778:	d010      	beq.n	800279c <HAL_TIM_Base_Start_IT+0x8c>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0201 	orr.w	r2, r2, #1
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	e007      	b.n	800279c <HAL_TIM_Base_Start_IT+0x8c>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	2300      	movs	r3, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	40012c00 	.word	0x40012c00
 80027ac:	40000400 	.word	0x40000400
 80027b0:	40000800 	.word	0x40000800

080027b4 <HAL_TIM_IRQHandler>:
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d122      	bne.n	8002810 <HAL_TIM_IRQHandler+0x5c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d11b      	bne.n	8002810 <HAL_TIM_IRQHandler+0x5c>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0202 	mvn.w	r2, #2
 80027e0:	611a      	str	r2, [r3, #16]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	771a      	strb	r2, [r3, #28]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_TIM_IRQHandler+0x4a>
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f9b4 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 80027fc:	e005      	b.n	800280a <HAL_TIM_IRQHandler+0x56>
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f9a7 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f9b6 	bl	8002b76 <HAL_TIM_PWM_PulseFinishedCallback>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	771a      	strb	r2, [r3, #28]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b04      	cmp	r3, #4
 800281c:	d122      	bne.n	8002864 <HAL_TIM_IRQHandler+0xb0>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b04      	cmp	r3, #4
 800282a:	d11b      	bne.n	8002864 <HAL_TIM_IRQHandler+0xb0>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0204 	mvn.w	r2, #4
 8002834:	611a      	str	r2, [r3, #16]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2202      	movs	r2, #2
 800283a:	771a      	strb	r2, [r3, #28]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_TIM_IRQHandler+0x9e>
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f98a 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 8002850:	e005      	b.n	800285e <HAL_TIM_IRQHandler+0xaa>
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f97d 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f98c 	bl	8002b76 <HAL_TIM_PWM_PulseFinishedCallback>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	771a      	strb	r2, [r3, #28]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b08      	cmp	r3, #8
 8002870:	d122      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x104>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b08      	cmp	r3, #8
 800287e:	d11b      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x104>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0208 	mvn.w	r2, #8
 8002888:	611a      	str	r2, [r3, #16]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2204      	movs	r2, #4
 800288e:	771a      	strb	r2, [r3, #28]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_TIM_IRQHandler+0xf2>
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f960 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 80028a4:	e005      	b.n	80028b2 <HAL_TIM_IRQHandler+0xfe>
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f953 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f962 	bl	8002b76 <HAL_TIM_PWM_PulseFinishedCallback>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	771a      	strb	r2, [r3, #28]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d122      	bne.n	800290c <HAL_TIM_IRQHandler+0x158>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b10      	cmp	r3, #16
 80028d2:	d11b      	bne.n	800290c <HAL_TIM_IRQHandler+0x158>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0210 	mvn.w	r2, #16
 80028dc:	611a      	str	r2, [r3, #16]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2208      	movs	r2, #8
 80028e2:	771a      	strb	r2, [r3, #28]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_TIM_IRQHandler+0x146>
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f936 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 80028f8:	e005      	b.n	8002906 <HAL_TIM_IRQHandler+0x152>
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f929 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f938 	bl	8002b76 <HAL_TIM_PWM_PulseFinishedCallback>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	771a      	strb	r2, [r3, #28]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b01      	cmp	r3, #1
 8002918:	d10e      	bne.n	8002938 <HAL_TIM_IRQHandler+0x184>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b01      	cmp	r3, #1
 8002926:	d107      	bne.n	8002938 <HAL_TIM_IRQHandler+0x184>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0201 	mvn.w	r2, #1
 8002930:	611a      	str	r2, [r3, #16]
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fe fb78 	bl	8001028 <HAL_TIM_PeriodElapsedCallback>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002942:	2b80      	cmp	r3, #128	@ 0x80
 8002944:	d10e      	bne.n	8002964 <HAL_TIM_IRQHandler+0x1b0>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002950:	2b80      	cmp	r3, #128	@ 0x80
 8002952:	d107      	bne.n	8002964 <HAL_TIM_IRQHandler+0x1b0>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800295c:	611a      	str	r2, [r3, #16]
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fa7b 	bl	8002e5a <HAL_TIMEx_BreakCallback>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296e:	2b40      	cmp	r3, #64	@ 0x40
 8002970:	d10e      	bne.n	8002990 <HAL_TIM_IRQHandler+0x1dc>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800297c:	2b40      	cmp	r3, #64	@ 0x40
 800297e:	d107      	bne.n	8002990 <HAL_TIM_IRQHandler+0x1dc>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002988:	611a      	str	r2, [r3, #16]
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8fc 	bl	8002b88 <HAL_TIM_TriggerCallback>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0320 	and.w	r3, r3, #32
 800299a:	2b20      	cmp	r3, #32
 800299c:	d10e      	bne.n	80029bc <HAL_TIM_IRQHandler+0x208>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d107      	bne.n	80029bc <HAL_TIM_IRQHandler+0x208>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0220 	mvn.w	r2, #32
 80029b4:	611a      	str	r2, [r3, #16]
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fa46 	bl	8002e48 <HAL_TIMEx_CommutCallback>
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_TIM_ConfigClockSource>:
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	2300      	movs	r3, #0
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_TIM_ConfigClockSource+0x1c>
 80029dc:	2302      	movs	r3, #2
 80029de:	e0b4      	b.n	8002b4a <HAL_TIM_ConfigClockSource+0x186>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a18:	d03e      	beq.n	8002a98 <HAL_TIM_ConfigClockSource+0xd4>
 8002a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a1e:	f200 8087 	bhi.w	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
 8002a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a26:	f000 8086 	beq.w	8002b36 <HAL_TIM_ConfigClockSource+0x172>
 8002a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a2e:	d87f      	bhi.n	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
 8002a30:	2b70      	cmp	r3, #112	@ 0x70
 8002a32:	d01a      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0xa6>
 8002a34:	2b70      	cmp	r3, #112	@ 0x70
 8002a36:	d87b      	bhi.n	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
 8002a38:	2b60      	cmp	r3, #96	@ 0x60
 8002a3a:	d050      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x11a>
 8002a3c:	2b60      	cmp	r3, #96	@ 0x60
 8002a3e:	d877      	bhi.n	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
 8002a40:	2b50      	cmp	r3, #80	@ 0x50
 8002a42:	d03c      	beq.n	8002abe <HAL_TIM_ConfigClockSource+0xfa>
 8002a44:	2b50      	cmp	r3, #80	@ 0x50
 8002a46:	d873      	bhi.n	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
 8002a48:	2b40      	cmp	r3, #64	@ 0x40
 8002a4a:	d058      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0x13a>
 8002a4c:	2b40      	cmp	r3, #64	@ 0x40
 8002a4e:	d86f      	bhi.n	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
 8002a50:	2b30      	cmp	r3, #48	@ 0x30
 8002a52:	d064      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0x15a>
 8002a54:	2b30      	cmp	r3, #48	@ 0x30
 8002a56:	d86b      	bhi.n	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d060      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0x15a>
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d867      	bhi.n	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d05c      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0x15a>
 8002a64:	2b10      	cmp	r3, #16
 8002a66:	d05a      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0x15a>
 8002a68:	e062      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6899      	ldr	r1, [r3, #8]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f000 f968 	bl	8002d4e <TIM_ETR_SetConfig>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	e04f      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x174>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	6899      	ldr	r1, [r3, #8]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f000 f951 	bl	8002d4e <TIM_ETR_SetConfig>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	e03c      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x174>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6859      	ldr	r1, [r3, #4]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	461a      	mov	r2, r3
 8002acc:	f000 f8c8 	bl	8002c60 <TIM_TI1_ConfigInputStage>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2150      	movs	r1, #80	@ 0x50
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f91f 	bl	8002d1a <TIM_ITRx_SetConfig>
 8002adc:	e02c      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x174>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6859      	ldr	r1, [r3, #4]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	461a      	mov	r2, r3
 8002aec:	f000 f8e6 	bl	8002cbc <TIM_TI2_ConfigInputStage>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2160      	movs	r1, #96	@ 0x60
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f90f 	bl	8002d1a <TIM_ITRx_SetConfig>
 8002afc:	e01c      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x174>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f000 f8a8 	bl	8002c60 <TIM_TI1_ConfigInputStage>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2140      	movs	r1, #64	@ 0x40
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f8ff 	bl	8002d1a <TIM_ITRx_SetConfig>
 8002b1c:	e00c      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x174>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4619      	mov	r1, r3
 8002b28:	4610      	mov	r0, r2
 8002b2a:	f000 f8f6 	bl	8002d1a <TIM_ITRx_SetConfig>
 8002b2e:	e003      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x174>
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	e000      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x174>
 8002b36:	bf00      	nop
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_TIM_OC_DelayElapsedCallback>:
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIM_IC_CaptureCallback>:
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <HAL_TIM_TriggerCallback>:
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
	...

08002b9c <TIM_Base_SetConfig>:
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a29      	ldr	r2, [pc, #164]	@ (8002c54 <TIM_Base_SetConfig+0xb8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00b      	beq.n	8002bcc <TIM_Base_SetConfig+0x30>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bba:	d007      	beq.n	8002bcc <TIM_Base_SetConfig+0x30>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a26      	ldr	r2, [pc, #152]	@ (8002c58 <TIM_Base_SetConfig+0xbc>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <TIM_Base_SetConfig+0x30>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a25      	ldr	r2, [pc, #148]	@ (8002c5c <TIM_Base_SetConfig+0xc0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d108      	bne.n	8002bde <TIM_Base_SetConfig+0x42>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c54 <TIM_Base_SetConfig+0xb8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00b      	beq.n	8002bfe <TIM_Base_SetConfig+0x62>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bec:	d007      	beq.n	8002bfe <TIM_Base_SetConfig+0x62>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a19      	ldr	r2, [pc, #100]	@ (8002c58 <TIM_Base_SetConfig+0xbc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d003      	beq.n	8002bfe <TIM_Base_SetConfig+0x62>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a18      	ldr	r2, [pc, #96]	@ (8002c5c <TIM_Base_SetConfig+0xc0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d108      	bne.n	8002c10 <TIM_Base_SetConfig+0x74>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a07      	ldr	r2, [pc, #28]	@ (8002c54 <TIM_Base_SetConfig+0xb8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d103      	bne.n	8002c44 <TIM_Base_SetConfig+0xa8>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	615a      	str	r2, [r3, #20]
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	40012c00 	.word	0x40012c00
 8002c58:	40000400 	.word	0x40000400
 8002c5c:	40000800 	.word	0x40000800

08002c60 <TIM_TI1_ConfigInputStage>:
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	f023 0201 	bic.w	r2, r3, #1
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	621a      	str	r2, [r3, #32]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f023 030a 	bic.w	r3, r3, #10
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	619a      	str	r2, [r3, #24]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	621a      	str	r2, [r3, #32]
 8002cb2:	bf00      	nop
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <TIM_TI2_ConfigInputStage>:
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	f023 0210 	bic.w	r2, r3, #16
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	621a      	str	r2, [r3, #32]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	031b      	lsls	r3, r3, #12
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	619a      	str	r2, [r3, #24]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	621a      	str	r2, [r3, #32]
 8002d10:	bf00      	nop
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <TIM_ITRx_SetConfig>:
 8002d1a:	b480      	push	{r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f043 0307 	orr.w	r3, r3, #7
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <TIM_ETR_SetConfig>:
 8002d4e:	b480      	push	{r7}
 8002d50:	b087      	sub	sp, #28
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	021a      	lsls	r2, r3, #8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	609a      	str	r2, [r3, #8]
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIMEx_MasterConfigSynchronization>:
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e046      	b.n	8002e32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a16      	ldr	r2, [pc, #88]	@ (8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00e      	beq.n	8002e06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df0:	d009      	beq.n	8002e06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a12      	ldr	r2, [pc, #72]	@ (8002e40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d004      	beq.n	8002e06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a10      	ldr	r2, [pc, #64]	@ (8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10c      	bne.n	8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002e30:	2300      	movs	r3, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	40000400 	.word	0x40000400
 8002e44:	40000800 	.word	0x40000800

08002e48 <HAL_TIMEx_CommutCallback>:
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr

08002e5a <HAL_TIMEx_BreakCallback>:
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <sniprintf>:
 8002e6c:	b40c      	push	{r2, r3}
 8002e6e:	b530      	push	{r4, r5, lr}
 8002e70:	4b17      	ldr	r3, [pc, #92]	@ (8002ed0 <sniprintf+0x64>)
 8002e72:	1e0c      	subs	r4, r1, #0
 8002e74:	681d      	ldr	r5, [r3, #0]
 8002e76:	b09d      	sub	sp, #116	@ 0x74
 8002e78:	da08      	bge.n	8002e8c <sniprintf+0x20>
 8002e7a:	238b      	movs	r3, #139	@ 0x8b
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e80:	602b      	str	r3, [r5, #0]
 8002e82:	b01d      	add	sp, #116	@ 0x74
 8002e84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e88:	b002      	add	sp, #8
 8002e8a:	4770      	bx	lr
 8002e8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002e90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002e94:	bf0c      	ite	eq
 8002e96:	4623      	moveq	r3, r4
 8002e98:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002e9c:	9304      	str	r3, [sp, #16]
 8002e9e:	9307      	str	r3, [sp, #28]
 8002ea0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ea4:	9002      	str	r0, [sp, #8]
 8002ea6:	9006      	str	r0, [sp, #24]
 8002ea8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002eac:	4628      	mov	r0, r5
 8002eae:	ab21      	add	r3, sp, #132	@ 0x84
 8002eb0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002eb2:	a902      	add	r1, sp, #8
 8002eb4:	9301      	str	r3, [sp, #4]
 8002eb6:	f000 f993 	bl	80031e0 <_svfiprintf_r>
 8002eba:	1c43      	adds	r3, r0, #1
 8002ebc:	bfbc      	itt	lt
 8002ebe:	238b      	movlt	r3, #139	@ 0x8b
 8002ec0:	602b      	strlt	r3, [r5, #0]
 8002ec2:	2c00      	cmp	r4, #0
 8002ec4:	d0dd      	beq.n	8002e82 <sniprintf+0x16>
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	9b02      	ldr	r3, [sp, #8]
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	e7d9      	b.n	8002e82 <sniprintf+0x16>
 8002ece:	bf00      	nop
 8002ed0:	20000050 	.word	0x20000050

08002ed4 <memset>:
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4402      	add	r2, r0
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d100      	bne.n	8002ede <memset+0xa>
 8002edc:	4770      	bx	lr
 8002ede:	f803 1b01 	strb.w	r1, [r3], #1
 8002ee2:	e7f9      	b.n	8002ed8 <memset+0x4>

08002ee4 <__errno>:
 8002ee4:	4b01      	ldr	r3, [pc, #4]	@ (8002eec <__errno+0x8>)
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000050 	.word	0x20000050

08002ef0 <__libc_init_array>:
 8002ef0:	b570      	push	{r4, r5, r6, lr}
 8002ef2:	2600      	movs	r6, #0
 8002ef4:	4d0c      	ldr	r5, [pc, #48]	@ (8002f28 <__libc_init_array+0x38>)
 8002ef6:	4c0d      	ldr	r4, [pc, #52]	@ (8002f2c <__libc_init_array+0x3c>)
 8002ef8:	1b64      	subs	r4, r4, r5
 8002efa:	10a4      	asrs	r4, r4, #2
 8002efc:	42a6      	cmp	r6, r4
 8002efe:	d109      	bne.n	8002f14 <__libc_init_array+0x24>
 8002f00:	f000 fc78 	bl	80037f4 <_init>
 8002f04:	2600      	movs	r6, #0
 8002f06:	4d0a      	ldr	r5, [pc, #40]	@ (8002f30 <__libc_init_array+0x40>)
 8002f08:	4c0a      	ldr	r4, [pc, #40]	@ (8002f34 <__libc_init_array+0x44>)
 8002f0a:	1b64      	subs	r4, r4, r5
 8002f0c:	10a4      	asrs	r4, r4, #2
 8002f0e:	42a6      	cmp	r6, r4
 8002f10:	d105      	bne.n	8002f1e <__libc_init_array+0x2e>
 8002f12:	bd70      	pop	{r4, r5, r6, pc}
 8002f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f18:	4798      	blx	r3
 8002f1a:	3601      	adds	r6, #1
 8002f1c:	e7ee      	b.n	8002efc <__libc_init_array+0xc>
 8002f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f22:	4798      	blx	r3
 8002f24:	3601      	adds	r6, #1
 8002f26:	e7f2      	b.n	8002f0e <__libc_init_array+0x1e>
 8002f28:	080038d0 	.word	0x080038d0
 8002f2c:	080038d0 	.word	0x080038d0
 8002f30:	080038d0 	.word	0x080038d0
 8002f34:	080038d4 	.word	0x080038d4

08002f38 <__retarget_lock_acquire_recursive>:
 8002f38:	4770      	bx	lr

08002f3a <__retarget_lock_release_recursive>:
 8002f3a:	4770      	bx	lr

08002f3c <_free_r>:
 8002f3c:	b538      	push	{r3, r4, r5, lr}
 8002f3e:	4605      	mov	r5, r0
 8002f40:	2900      	cmp	r1, #0
 8002f42:	d040      	beq.n	8002fc6 <_free_r+0x8a>
 8002f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f48:	1f0c      	subs	r4, r1, #4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	bfb8      	it	lt
 8002f4e:	18e4      	addlt	r4, r4, r3
 8002f50:	f000 f8de 	bl	8003110 <__malloc_lock>
 8002f54:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc8 <_free_r+0x8c>)
 8002f56:	6813      	ldr	r3, [r2, #0]
 8002f58:	b933      	cbnz	r3, 8002f68 <_free_r+0x2c>
 8002f5a:	6063      	str	r3, [r4, #4]
 8002f5c:	6014      	str	r4, [r2, #0]
 8002f5e:	4628      	mov	r0, r5
 8002f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f64:	f000 b8da 	b.w	800311c <__malloc_unlock>
 8002f68:	42a3      	cmp	r3, r4
 8002f6a:	d908      	bls.n	8002f7e <_free_r+0x42>
 8002f6c:	6820      	ldr	r0, [r4, #0]
 8002f6e:	1821      	adds	r1, r4, r0
 8002f70:	428b      	cmp	r3, r1
 8002f72:	bf01      	itttt	eq
 8002f74:	6819      	ldreq	r1, [r3, #0]
 8002f76:	685b      	ldreq	r3, [r3, #4]
 8002f78:	1809      	addeq	r1, r1, r0
 8002f7a:	6021      	streq	r1, [r4, #0]
 8002f7c:	e7ed      	b.n	8002f5a <_free_r+0x1e>
 8002f7e:	461a      	mov	r2, r3
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	b10b      	cbz	r3, 8002f88 <_free_r+0x4c>
 8002f84:	42a3      	cmp	r3, r4
 8002f86:	d9fa      	bls.n	8002f7e <_free_r+0x42>
 8002f88:	6811      	ldr	r1, [r2, #0]
 8002f8a:	1850      	adds	r0, r2, r1
 8002f8c:	42a0      	cmp	r0, r4
 8002f8e:	d10b      	bne.n	8002fa8 <_free_r+0x6c>
 8002f90:	6820      	ldr	r0, [r4, #0]
 8002f92:	4401      	add	r1, r0
 8002f94:	1850      	adds	r0, r2, r1
 8002f96:	4283      	cmp	r3, r0
 8002f98:	6011      	str	r1, [r2, #0]
 8002f9a:	d1e0      	bne.n	8002f5e <_free_r+0x22>
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4408      	add	r0, r1
 8002fa2:	6010      	str	r0, [r2, #0]
 8002fa4:	6053      	str	r3, [r2, #4]
 8002fa6:	e7da      	b.n	8002f5e <_free_r+0x22>
 8002fa8:	d902      	bls.n	8002fb0 <_free_r+0x74>
 8002faa:	230c      	movs	r3, #12
 8002fac:	602b      	str	r3, [r5, #0]
 8002fae:	e7d6      	b.n	8002f5e <_free_r+0x22>
 8002fb0:	6820      	ldr	r0, [r4, #0]
 8002fb2:	1821      	adds	r1, r4, r0
 8002fb4:	428b      	cmp	r3, r1
 8002fb6:	bf01      	itttt	eq
 8002fb8:	6819      	ldreq	r1, [r3, #0]
 8002fba:	685b      	ldreq	r3, [r3, #4]
 8002fbc:	1809      	addeq	r1, r1, r0
 8002fbe:	6021      	streq	r1, [r4, #0]
 8002fc0:	6063      	str	r3, [r4, #4]
 8002fc2:	6054      	str	r4, [r2, #4]
 8002fc4:	e7cb      	b.n	8002f5e <_free_r+0x22>
 8002fc6:	bd38      	pop	{r3, r4, r5, pc}
 8002fc8:	20000374 	.word	0x20000374

08002fcc <sbrk_aligned>:
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	4e0f      	ldr	r6, [pc, #60]	@ (800300c <sbrk_aligned+0x40>)
 8002fd0:	460c      	mov	r4, r1
 8002fd2:	6831      	ldr	r1, [r6, #0]
 8002fd4:	4605      	mov	r5, r0
 8002fd6:	b911      	cbnz	r1, 8002fde <sbrk_aligned+0x12>
 8002fd8:	f000 fbaa 	bl	8003730 <_sbrk_r>
 8002fdc:	6030      	str	r0, [r6, #0]
 8002fde:	4621      	mov	r1, r4
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	f000 fba5 	bl	8003730 <_sbrk_r>
 8002fe6:	1c43      	adds	r3, r0, #1
 8002fe8:	d103      	bne.n	8002ff2 <sbrk_aligned+0x26>
 8002fea:	f04f 34ff 	mov.w	r4, #4294967295
 8002fee:	4620      	mov	r0, r4
 8002ff0:	bd70      	pop	{r4, r5, r6, pc}
 8002ff2:	1cc4      	adds	r4, r0, #3
 8002ff4:	f024 0403 	bic.w	r4, r4, #3
 8002ff8:	42a0      	cmp	r0, r4
 8002ffa:	d0f8      	beq.n	8002fee <sbrk_aligned+0x22>
 8002ffc:	1a21      	subs	r1, r4, r0
 8002ffe:	4628      	mov	r0, r5
 8003000:	f000 fb96 	bl	8003730 <_sbrk_r>
 8003004:	3001      	adds	r0, #1
 8003006:	d1f2      	bne.n	8002fee <sbrk_aligned+0x22>
 8003008:	e7ef      	b.n	8002fea <sbrk_aligned+0x1e>
 800300a:	bf00      	nop
 800300c:	20000370 	.word	0x20000370

08003010 <_malloc_r>:
 8003010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003014:	1ccd      	adds	r5, r1, #3
 8003016:	f025 0503 	bic.w	r5, r5, #3
 800301a:	3508      	adds	r5, #8
 800301c:	2d0c      	cmp	r5, #12
 800301e:	bf38      	it	cc
 8003020:	250c      	movcc	r5, #12
 8003022:	2d00      	cmp	r5, #0
 8003024:	4606      	mov	r6, r0
 8003026:	db01      	blt.n	800302c <_malloc_r+0x1c>
 8003028:	42a9      	cmp	r1, r5
 800302a:	d904      	bls.n	8003036 <_malloc_r+0x26>
 800302c:	230c      	movs	r3, #12
 800302e:	6033      	str	r3, [r6, #0]
 8003030:	2000      	movs	r0, #0
 8003032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003036:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800310c <_malloc_r+0xfc>
 800303a:	f000 f869 	bl	8003110 <__malloc_lock>
 800303e:	f8d8 3000 	ldr.w	r3, [r8]
 8003042:	461c      	mov	r4, r3
 8003044:	bb44      	cbnz	r4, 8003098 <_malloc_r+0x88>
 8003046:	4629      	mov	r1, r5
 8003048:	4630      	mov	r0, r6
 800304a:	f7ff ffbf 	bl	8002fcc <sbrk_aligned>
 800304e:	1c43      	adds	r3, r0, #1
 8003050:	4604      	mov	r4, r0
 8003052:	d158      	bne.n	8003106 <_malloc_r+0xf6>
 8003054:	f8d8 4000 	ldr.w	r4, [r8]
 8003058:	4627      	mov	r7, r4
 800305a:	2f00      	cmp	r7, #0
 800305c:	d143      	bne.n	80030e6 <_malloc_r+0xd6>
 800305e:	2c00      	cmp	r4, #0
 8003060:	d04b      	beq.n	80030fa <_malloc_r+0xea>
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	4639      	mov	r1, r7
 8003066:	4630      	mov	r0, r6
 8003068:	eb04 0903 	add.w	r9, r4, r3
 800306c:	f000 fb60 	bl	8003730 <_sbrk_r>
 8003070:	4581      	cmp	r9, r0
 8003072:	d142      	bne.n	80030fa <_malloc_r+0xea>
 8003074:	6821      	ldr	r1, [r4, #0]
 8003076:	4630      	mov	r0, r6
 8003078:	1a6d      	subs	r5, r5, r1
 800307a:	4629      	mov	r1, r5
 800307c:	f7ff ffa6 	bl	8002fcc <sbrk_aligned>
 8003080:	3001      	adds	r0, #1
 8003082:	d03a      	beq.n	80030fa <_malloc_r+0xea>
 8003084:	6823      	ldr	r3, [r4, #0]
 8003086:	442b      	add	r3, r5
 8003088:	6023      	str	r3, [r4, #0]
 800308a:	f8d8 3000 	ldr.w	r3, [r8]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	bb62      	cbnz	r2, 80030ec <_malloc_r+0xdc>
 8003092:	f8c8 7000 	str.w	r7, [r8]
 8003096:	e00f      	b.n	80030b8 <_malloc_r+0xa8>
 8003098:	6822      	ldr	r2, [r4, #0]
 800309a:	1b52      	subs	r2, r2, r5
 800309c:	d420      	bmi.n	80030e0 <_malloc_r+0xd0>
 800309e:	2a0b      	cmp	r2, #11
 80030a0:	d917      	bls.n	80030d2 <_malloc_r+0xc2>
 80030a2:	1961      	adds	r1, r4, r5
 80030a4:	42a3      	cmp	r3, r4
 80030a6:	6025      	str	r5, [r4, #0]
 80030a8:	bf18      	it	ne
 80030aa:	6059      	strne	r1, [r3, #4]
 80030ac:	6863      	ldr	r3, [r4, #4]
 80030ae:	bf08      	it	eq
 80030b0:	f8c8 1000 	streq.w	r1, [r8]
 80030b4:	5162      	str	r2, [r4, r5]
 80030b6:	604b      	str	r3, [r1, #4]
 80030b8:	4630      	mov	r0, r6
 80030ba:	f000 f82f 	bl	800311c <__malloc_unlock>
 80030be:	f104 000b 	add.w	r0, r4, #11
 80030c2:	1d23      	adds	r3, r4, #4
 80030c4:	f020 0007 	bic.w	r0, r0, #7
 80030c8:	1ac2      	subs	r2, r0, r3
 80030ca:	bf1c      	itt	ne
 80030cc:	1a1b      	subne	r3, r3, r0
 80030ce:	50a3      	strne	r3, [r4, r2]
 80030d0:	e7af      	b.n	8003032 <_malloc_r+0x22>
 80030d2:	6862      	ldr	r2, [r4, #4]
 80030d4:	42a3      	cmp	r3, r4
 80030d6:	bf0c      	ite	eq
 80030d8:	f8c8 2000 	streq.w	r2, [r8]
 80030dc:	605a      	strne	r2, [r3, #4]
 80030de:	e7eb      	b.n	80030b8 <_malloc_r+0xa8>
 80030e0:	4623      	mov	r3, r4
 80030e2:	6864      	ldr	r4, [r4, #4]
 80030e4:	e7ae      	b.n	8003044 <_malloc_r+0x34>
 80030e6:	463c      	mov	r4, r7
 80030e8:	687f      	ldr	r7, [r7, #4]
 80030ea:	e7b6      	b.n	800305a <_malloc_r+0x4a>
 80030ec:	461a      	mov	r2, r3
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	42a3      	cmp	r3, r4
 80030f2:	d1fb      	bne.n	80030ec <_malloc_r+0xdc>
 80030f4:	2300      	movs	r3, #0
 80030f6:	6053      	str	r3, [r2, #4]
 80030f8:	e7de      	b.n	80030b8 <_malloc_r+0xa8>
 80030fa:	230c      	movs	r3, #12
 80030fc:	4630      	mov	r0, r6
 80030fe:	6033      	str	r3, [r6, #0]
 8003100:	f000 f80c 	bl	800311c <__malloc_unlock>
 8003104:	e794      	b.n	8003030 <_malloc_r+0x20>
 8003106:	6005      	str	r5, [r0, #0]
 8003108:	e7d6      	b.n	80030b8 <_malloc_r+0xa8>
 800310a:	bf00      	nop
 800310c:	20000374 	.word	0x20000374

08003110 <__malloc_lock>:
 8003110:	4801      	ldr	r0, [pc, #4]	@ (8003118 <__malloc_lock+0x8>)
 8003112:	f7ff bf11 	b.w	8002f38 <__retarget_lock_acquire_recursive>
 8003116:	bf00      	nop
 8003118:	2000036c 	.word	0x2000036c

0800311c <__malloc_unlock>:
 800311c:	4801      	ldr	r0, [pc, #4]	@ (8003124 <__malloc_unlock+0x8>)
 800311e:	f7ff bf0c 	b.w	8002f3a <__retarget_lock_release_recursive>
 8003122:	bf00      	nop
 8003124:	2000036c 	.word	0x2000036c

08003128 <__ssputs_r>:
 8003128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800312c:	461f      	mov	r7, r3
 800312e:	688e      	ldr	r6, [r1, #8]
 8003130:	4682      	mov	sl, r0
 8003132:	42be      	cmp	r6, r7
 8003134:	460c      	mov	r4, r1
 8003136:	4690      	mov	r8, r2
 8003138:	680b      	ldr	r3, [r1, #0]
 800313a:	d82d      	bhi.n	8003198 <__ssputs_r+0x70>
 800313c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003140:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003144:	d026      	beq.n	8003194 <__ssputs_r+0x6c>
 8003146:	6965      	ldr	r5, [r4, #20]
 8003148:	6909      	ldr	r1, [r1, #16]
 800314a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800314e:	eba3 0901 	sub.w	r9, r3, r1
 8003152:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003156:	1c7b      	adds	r3, r7, #1
 8003158:	444b      	add	r3, r9
 800315a:	106d      	asrs	r5, r5, #1
 800315c:	429d      	cmp	r5, r3
 800315e:	bf38      	it	cc
 8003160:	461d      	movcc	r5, r3
 8003162:	0553      	lsls	r3, r2, #21
 8003164:	d527      	bpl.n	80031b6 <__ssputs_r+0x8e>
 8003166:	4629      	mov	r1, r5
 8003168:	f7ff ff52 	bl	8003010 <_malloc_r>
 800316c:	4606      	mov	r6, r0
 800316e:	b360      	cbz	r0, 80031ca <__ssputs_r+0xa2>
 8003170:	464a      	mov	r2, r9
 8003172:	6921      	ldr	r1, [r4, #16]
 8003174:	f000 fafa 	bl	800376c <memcpy>
 8003178:	89a3      	ldrh	r3, [r4, #12]
 800317a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800317e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003182:	81a3      	strh	r3, [r4, #12]
 8003184:	6126      	str	r6, [r4, #16]
 8003186:	444e      	add	r6, r9
 8003188:	6026      	str	r6, [r4, #0]
 800318a:	463e      	mov	r6, r7
 800318c:	6165      	str	r5, [r4, #20]
 800318e:	eba5 0509 	sub.w	r5, r5, r9
 8003192:	60a5      	str	r5, [r4, #8]
 8003194:	42be      	cmp	r6, r7
 8003196:	d900      	bls.n	800319a <__ssputs_r+0x72>
 8003198:	463e      	mov	r6, r7
 800319a:	4632      	mov	r2, r6
 800319c:	4641      	mov	r1, r8
 800319e:	6820      	ldr	r0, [r4, #0]
 80031a0:	f000 faac 	bl	80036fc <memmove>
 80031a4:	2000      	movs	r0, #0
 80031a6:	68a3      	ldr	r3, [r4, #8]
 80031a8:	1b9b      	subs	r3, r3, r6
 80031aa:	60a3      	str	r3, [r4, #8]
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	4433      	add	r3, r6
 80031b0:	6023      	str	r3, [r4, #0]
 80031b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031b6:	462a      	mov	r2, r5
 80031b8:	f000 fae6 	bl	8003788 <_realloc_r>
 80031bc:	4606      	mov	r6, r0
 80031be:	2800      	cmp	r0, #0
 80031c0:	d1e0      	bne.n	8003184 <__ssputs_r+0x5c>
 80031c2:	4650      	mov	r0, sl
 80031c4:	6921      	ldr	r1, [r4, #16]
 80031c6:	f7ff feb9 	bl	8002f3c <_free_r>
 80031ca:	230c      	movs	r3, #12
 80031cc:	f8ca 3000 	str.w	r3, [sl]
 80031d0:	89a3      	ldrh	r3, [r4, #12]
 80031d2:	f04f 30ff 	mov.w	r0, #4294967295
 80031d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031da:	81a3      	strh	r3, [r4, #12]
 80031dc:	e7e9      	b.n	80031b2 <__ssputs_r+0x8a>
	...

080031e0 <_svfiprintf_r>:
 80031e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e4:	4698      	mov	r8, r3
 80031e6:	898b      	ldrh	r3, [r1, #12]
 80031e8:	4607      	mov	r7, r0
 80031ea:	061b      	lsls	r3, r3, #24
 80031ec:	460d      	mov	r5, r1
 80031ee:	4614      	mov	r4, r2
 80031f0:	b09d      	sub	sp, #116	@ 0x74
 80031f2:	d510      	bpl.n	8003216 <_svfiprintf_r+0x36>
 80031f4:	690b      	ldr	r3, [r1, #16]
 80031f6:	b973      	cbnz	r3, 8003216 <_svfiprintf_r+0x36>
 80031f8:	2140      	movs	r1, #64	@ 0x40
 80031fa:	f7ff ff09 	bl	8003010 <_malloc_r>
 80031fe:	6028      	str	r0, [r5, #0]
 8003200:	6128      	str	r0, [r5, #16]
 8003202:	b930      	cbnz	r0, 8003212 <_svfiprintf_r+0x32>
 8003204:	230c      	movs	r3, #12
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	f04f 30ff 	mov.w	r0, #4294967295
 800320c:	b01d      	add	sp, #116	@ 0x74
 800320e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003212:	2340      	movs	r3, #64	@ 0x40
 8003214:	616b      	str	r3, [r5, #20]
 8003216:	2300      	movs	r3, #0
 8003218:	9309      	str	r3, [sp, #36]	@ 0x24
 800321a:	2320      	movs	r3, #32
 800321c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003220:	2330      	movs	r3, #48	@ 0x30
 8003222:	f04f 0901 	mov.w	r9, #1
 8003226:	f8cd 800c 	str.w	r8, [sp, #12]
 800322a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80033c4 <_svfiprintf_r+0x1e4>
 800322e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003232:	4623      	mov	r3, r4
 8003234:	469a      	mov	sl, r3
 8003236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800323a:	b10a      	cbz	r2, 8003240 <_svfiprintf_r+0x60>
 800323c:	2a25      	cmp	r2, #37	@ 0x25
 800323e:	d1f9      	bne.n	8003234 <_svfiprintf_r+0x54>
 8003240:	ebba 0b04 	subs.w	fp, sl, r4
 8003244:	d00b      	beq.n	800325e <_svfiprintf_r+0x7e>
 8003246:	465b      	mov	r3, fp
 8003248:	4622      	mov	r2, r4
 800324a:	4629      	mov	r1, r5
 800324c:	4638      	mov	r0, r7
 800324e:	f7ff ff6b 	bl	8003128 <__ssputs_r>
 8003252:	3001      	adds	r0, #1
 8003254:	f000 80a7 	beq.w	80033a6 <_svfiprintf_r+0x1c6>
 8003258:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800325a:	445a      	add	r2, fp
 800325c:	9209      	str	r2, [sp, #36]	@ 0x24
 800325e:	f89a 3000 	ldrb.w	r3, [sl]
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 809f 	beq.w	80033a6 <_svfiprintf_r+0x1c6>
 8003268:	2300      	movs	r3, #0
 800326a:	f04f 32ff 	mov.w	r2, #4294967295
 800326e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003272:	f10a 0a01 	add.w	sl, sl, #1
 8003276:	9304      	str	r3, [sp, #16]
 8003278:	9307      	str	r3, [sp, #28]
 800327a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800327e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003280:	4654      	mov	r4, sl
 8003282:	2205      	movs	r2, #5
 8003284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003288:	484e      	ldr	r0, [pc, #312]	@ (80033c4 <_svfiprintf_r+0x1e4>)
 800328a:	f000 fa61 	bl	8003750 <memchr>
 800328e:	9a04      	ldr	r2, [sp, #16]
 8003290:	b9d8      	cbnz	r0, 80032ca <_svfiprintf_r+0xea>
 8003292:	06d0      	lsls	r0, r2, #27
 8003294:	bf44      	itt	mi
 8003296:	2320      	movmi	r3, #32
 8003298:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800329c:	0711      	lsls	r1, r2, #28
 800329e:	bf44      	itt	mi
 80032a0:	232b      	movmi	r3, #43	@ 0x2b
 80032a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032a6:	f89a 3000 	ldrb.w	r3, [sl]
 80032aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80032ac:	d015      	beq.n	80032da <_svfiprintf_r+0xfa>
 80032ae:	4654      	mov	r4, sl
 80032b0:	2000      	movs	r0, #0
 80032b2:	f04f 0c0a 	mov.w	ip, #10
 80032b6:	9a07      	ldr	r2, [sp, #28]
 80032b8:	4621      	mov	r1, r4
 80032ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032be:	3b30      	subs	r3, #48	@ 0x30
 80032c0:	2b09      	cmp	r3, #9
 80032c2:	d94b      	bls.n	800335c <_svfiprintf_r+0x17c>
 80032c4:	b1b0      	cbz	r0, 80032f4 <_svfiprintf_r+0x114>
 80032c6:	9207      	str	r2, [sp, #28]
 80032c8:	e014      	b.n	80032f4 <_svfiprintf_r+0x114>
 80032ca:	eba0 0308 	sub.w	r3, r0, r8
 80032ce:	fa09 f303 	lsl.w	r3, r9, r3
 80032d2:	4313      	orrs	r3, r2
 80032d4:	46a2      	mov	sl, r4
 80032d6:	9304      	str	r3, [sp, #16]
 80032d8:	e7d2      	b.n	8003280 <_svfiprintf_r+0xa0>
 80032da:	9b03      	ldr	r3, [sp, #12]
 80032dc:	1d19      	adds	r1, r3, #4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	9103      	str	r1, [sp, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	bfbb      	ittet	lt
 80032e6:	425b      	neglt	r3, r3
 80032e8:	f042 0202 	orrlt.w	r2, r2, #2
 80032ec:	9307      	strge	r3, [sp, #28]
 80032ee:	9307      	strlt	r3, [sp, #28]
 80032f0:	bfb8      	it	lt
 80032f2:	9204      	strlt	r2, [sp, #16]
 80032f4:	7823      	ldrb	r3, [r4, #0]
 80032f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80032f8:	d10a      	bne.n	8003310 <_svfiprintf_r+0x130>
 80032fa:	7863      	ldrb	r3, [r4, #1]
 80032fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80032fe:	d132      	bne.n	8003366 <_svfiprintf_r+0x186>
 8003300:	9b03      	ldr	r3, [sp, #12]
 8003302:	3402      	adds	r4, #2
 8003304:	1d1a      	adds	r2, r3, #4
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	9203      	str	r2, [sp, #12]
 800330a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800330e:	9305      	str	r3, [sp, #20]
 8003310:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80033c8 <_svfiprintf_r+0x1e8>
 8003314:	2203      	movs	r2, #3
 8003316:	4650      	mov	r0, sl
 8003318:	7821      	ldrb	r1, [r4, #0]
 800331a:	f000 fa19 	bl	8003750 <memchr>
 800331e:	b138      	cbz	r0, 8003330 <_svfiprintf_r+0x150>
 8003320:	2240      	movs	r2, #64	@ 0x40
 8003322:	9b04      	ldr	r3, [sp, #16]
 8003324:	eba0 000a 	sub.w	r0, r0, sl
 8003328:	4082      	lsls	r2, r0
 800332a:	4313      	orrs	r3, r2
 800332c:	3401      	adds	r4, #1
 800332e:	9304      	str	r3, [sp, #16]
 8003330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003334:	2206      	movs	r2, #6
 8003336:	4825      	ldr	r0, [pc, #148]	@ (80033cc <_svfiprintf_r+0x1ec>)
 8003338:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800333c:	f000 fa08 	bl	8003750 <memchr>
 8003340:	2800      	cmp	r0, #0
 8003342:	d036      	beq.n	80033b2 <_svfiprintf_r+0x1d2>
 8003344:	4b22      	ldr	r3, [pc, #136]	@ (80033d0 <_svfiprintf_r+0x1f0>)
 8003346:	bb1b      	cbnz	r3, 8003390 <_svfiprintf_r+0x1b0>
 8003348:	9b03      	ldr	r3, [sp, #12]
 800334a:	3307      	adds	r3, #7
 800334c:	f023 0307 	bic.w	r3, r3, #7
 8003350:	3308      	adds	r3, #8
 8003352:	9303      	str	r3, [sp, #12]
 8003354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003356:	4433      	add	r3, r6
 8003358:	9309      	str	r3, [sp, #36]	@ 0x24
 800335a:	e76a      	b.n	8003232 <_svfiprintf_r+0x52>
 800335c:	460c      	mov	r4, r1
 800335e:	2001      	movs	r0, #1
 8003360:	fb0c 3202 	mla	r2, ip, r2, r3
 8003364:	e7a8      	b.n	80032b8 <_svfiprintf_r+0xd8>
 8003366:	2300      	movs	r3, #0
 8003368:	f04f 0c0a 	mov.w	ip, #10
 800336c:	4619      	mov	r1, r3
 800336e:	3401      	adds	r4, #1
 8003370:	9305      	str	r3, [sp, #20]
 8003372:	4620      	mov	r0, r4
 8003374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003378:	3a30      	subs	r2, #48	@ 0x30
 800337a:	2a09      	cmp	r2, #9
 800337c:	d903      	bls.n	8003386 <_svfiprintf_r+0x1a6>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0c6      	beq.n	8003310 <_svfiprintf_r+0x130>
 8003382:	9105      	str	r1, [sp, #20]
 8003384:	e7c4      	b.n	8003310 <_svfiprintf_r+0x130>
 8003386:	4604      	mov	r4, r0
 8003388:	2301      	movs	r3, #1
 800338a:	fb0c 2101 	mla	r1, ip, r1, r2
 800338e:	e7f0      	b.n	8003372 <_svfiprintf_r+0x192>
 8003390:	ab03      	add	r3, sp, #12
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	462a      	mov	r2, r5
 8003396:	4638      	mov	r0, r7
 8003398:	4b0e      	ldr	r3, [pc, #56]	@ (80033d4 <_svfiprintf_r+0x1f4>)
 800339a:	a904      	add	r1, sp, #16
 800339c:	f3af 8000 	nop.w
 80033a0:	1c42      	adds	r2, r0, #1
 80033a2:	4606      	mov	r6, r0
 80033a4:	d1d6      	bne.n	8003354 <_svfiprintf_r+0x174>
 80033a6:	89ab      	ldrh	r3, [r5, #12]
 80033a8:	065b      	lsls	r3, r3, #25
 80033aa:	f53f af2d 	bmi.w	8003208 <_svfiprintf_r+0x28>
 80033ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80033b0:	e72c      	b.n	800320c <_svfiprintf_r+0x2c>
 80033b2:	ab03      	add	r3, sp, #12
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	462a      	mov	r2, r5
 80033b8:	4638      	mov	r0, r7
 80033ba:	4b06      	ldr	r3, [pc, #24]	@ (80033d4 <_svfiprintf_r+0x1f4>)
 80033bc:	a904      	add	r1, sp, #16
 80033be:	f000 f87d 	bl	80034bc <_printf_i>
 80033c2:	e7ed      	b.n	80033a0 <_svfiprintf_r+0x1c0>
 80033c4:	08003892 	.word	0x08003892
 80033c8:	08003898 	.word	0x08003898
 80033cc:	0800389c 	.word	0x0800389c
 80033d0:	00000000 	.word	0x00000000
 80033d4:	08003129 	.word	0x08003129

080033d8 <_printf_common>:
 80033d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033dc:	4616      	mov	r6, r2
 80033de:	4698      	mov	r8, r3
 80033e0:	688a      	ldr	r2, [r1, #8]
 80033e2:	690b      	ldr	r3, [r1, #16]
 80033e4:	4607      	mov	r7, r0
 80033e6:	4293      	cmp	r3, r2
 80033e8:	bfb8      	it	lt
 80033ea:	4613      	movlt	r3, r2
 80033ec:	6033      	str	r3, [r6, #0]
 80033ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033f2:	460c      	mov	r4, r1
 80033f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033f8:	b10a      	cbz	r2, 80033fe <_printf_common+0x26>
 80033fa:	3301      	adds	r3, #1
 80033fc:	6033      	str	r3, [r6, #0]
 80033fe:	6823      	ldr	r3, [r4, #0]
 8003400:	0699      	lsls	r1, r3, #26
 8003402:	bf42      	ittt	mi
 8003404:	6833      	ldrmi	r3, [r6, #0]
 8003406:	3302      	addmi	r3, #2
 8003408:	6033      	strmi	r3, [r6, #0]
 800340a:	6825      	ldr	r5, [r4, #0]
 800340c:	f015 0506 	ands.w	r5, r5, #6
 8003410:	d106      	bne.n	8003420 <_printf_common+0x48>
 8003412:	f104 0a19 	add.w	sl, r4, #25
 8003416:	68e3      	ldr	r3, [r4, #12]
 8003418:	6832      	ldr	r2, [r6, #0]
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	42ab      	cmp	r3, r5
 800341e:	dc2b      	bgt.n	8003478 <_printf_common+0xa0>
 8003420:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003424:	6822      	ldr	r2, [r4, #0]
 8003426:	3b00      	subs	r3, #0
 8003428:	bf18      	it	ne
 800342a:	2301      	movne	r3, #1
 800342c:	0692      	lsls	r2, r2, #26
 800342e:	d430      	bmi.n	8003492 <_printf_common+0xba>
 8003430:	4641      	mov	r1, r8
 8003432:	4638      	mov	r0, r7
 8003434:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003438:	47c8      	blx	r9
 800343a:	3001      	adds	r0, #1
 800343c:	d023      	beq.n	8003486 <_printf_common+0xae>
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	6922      	ldr	r2, [r4, #16]
 8003442:	f003 0306 	and.w	r3, r3, #6
 8003446:	2b04      	cmp	r3, #4
 8003448:	bf14      	ite	ne
 800344a:	2500      	movne	r5, #0
 800344c:	6833      	ldreq	r3, [r6, #0]
 800344e:	f04f 0600 	mov.w	r6, #0
 8003452:	bf08      	it	eq
 8003454:	68e5      	ldreq	r5, [r4, #12]
 8003456:	f104 041a 	add.w	r4, r4, #26
 800345a:	bf08      	it	eq
 800345c:	1aed      	subeq	r5, r5, r3
 800345e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003462:	bf08      	it	eq
 8003464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003468:	4293      	cmp	r3, r2
 800346a:	bfc4      	itt	gt
 800346c:	1a9b      	subgt	r3, r3, r2
 800346e:	18ed      	addgt	r5, r5, r3
 8003470:	42b5      	cmp	r5, r6
 8003472:	d11a      	bne.n	80034aa <_printf_common+0xd2>
 8003474:	2000      	movs	r0, #0
 8003476:	e008      	b.n	800348a <_printf_common+0xb2>
 8003478:	2301      	movs	r3, #1
 800347a:	4652      	mov	r2, sl
 800347c:	4641      	mov	r1, r8
 800347e:	4638      	mov	r0, r7
 8003480:	47c8      	blx	r9
 8003482:	3001      	adds	r0, #1
 8003484:	d103      	bne.n	800348e <_printf_common+0xb6>
 8003486:	f04f 30ff 	mov.w	r0, #4294967295
 800348a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800348e:	3501      	adds	r5, #1
 8003490:	e7c1      	b.n	8003416 <_printf_common+0x3e>
 8003492:	2030      	movs	r0, #48	@ 0x30
 8003494:	18e1      	adds	r1, r4, r3
 8003496:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034a0:	4422      	add	r2, r4
 80034a2:	3302      	adds	r3, #2
 80034a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034a8:	e7c2      	b.n	8003430 <_printf_common+0x58>
 80034aa:	2301      	movs	r3, #1
 80034ac:	4622      	mov	r2, r4
 80034ae:	4641      	mov	r1, r8
 80034b0:	4638      	mov	r0, r7
 80034b2:	47c8      	blx	r9
 80034b4:	3001      	adds	r0, #1
 80034b6:	d0e6      	beq.n	8003486 <_printf_common+0xae>
 80034b8:	3601      	adds	r6, #1
 80034ba:	e7d9      	b.n	8003470 <_printf_common+0x98>

080034bc <_printf_i>:
 80034bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034c0:	7e0f      	ldrb	r7, [r1, #24]
 80034c2:	4691      	mov	r9, r2
 80034c4:	2f78      	cmp	r7, #120	@ 0x78
 80034c6:	4680      	mov	r8, r0
 80034c8:	460c      	mov	r4, r1
 80034ca:	469a      	mov	sl, r3
 80034cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80034ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80034d2:	d807      	bhi.n	80034e4 <_printf_i+0x28>
 80034d4:	2f62      	cmp	r7, #98	@ 0x62
 80034d6:	d80a      	bhi.n	80034ee <_printf_i+0x32>
 80034d8:	2f00      	cmp	r7, #0
 80034da:	f000 80d3 	beq.w	8003684 <_printf_i+0x1c8>
 80034de:	2f58      	cmp	r7, #88	@ 0x58
 80034e0:	f000 80ba 	beq.w	8003658 <_printf_i+0x19c>
 80034e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80034ec:	e03a      	b.n	8003564 <_printf_i+0xa8>
 80034ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80034f2:	2b15      	cmp	r3, #21
 80034f4:	d8f6      	bhi.n	80034e4 <_printf_i+0x28>
 80034f6:	a101      	add	r1, pc, #4	@ (adr r1, 80034fc <_printf_i+0x40>)
 80034f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034fc:	08003555 	.word	0x08003555
 8003500:	08003569 	.word	0x08003569
 8003504:	080034e5 	.word	0x080034e5
 8003508:	080034e5 	.word	0x080034e5
 800350c:	080034e5 	.word	0x080034e5
 8003510:	080034e5 	.word	0x080034e5
 8003514:	08003569 	.word	0x08003569
 8003518:	080034e5 	.word	0x080034e5
 800351c:	080034e5 	.word	0x080034e5
 8003520:	080034e5 	.word	0x080034e5
 8003524:	080034e5 	.word	0x080034e5
 8003528:	0800366b 	.word	0x0800366b
 800352c:	08003593 	.word	0x08003593
 8003530:	08003625 	.word	0x08003625
 8003534:	080034e5 	.word	0x080034e5
 8003538:	080034e5 	.word	0x080034e5
 800353c:	0800368d 	.word	0x0800368d
 8003540:	080034e5 	.word	0x080034e5
 8003544:	08003593 	.word	0x08003593
 8003548:	080034e5 	.word	0x080034e5
 800354c:	080034e5 	.word	0x080034e5
 8003550:	0800362d 	.word	0x0800362d
 8003554:	6833      	ldr	r3, [r6, #0]
 8003556:	1d1a      	adds	r2, r3, #4
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6032      	str	r2, [r6, #0]
 800355c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003560:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003564:	2301      	movs	r3, #1
 8003566:	e09e      	b.n	80036a6 <_printf_i+0x1ea>
 8003568:	6833      	ldr	r3, [r6, #0]
 800356a:	6820      	ldr	r0, [r4, #0]
 800356c:	1d19      	adds	r1, r3, #4
 800356e:	6031      	str	r1, [r6, #0]
 8003570:	0606      	lsls	r6, r0, #24
 8003572:	d501      	bpl.n	8003578 <_printf_i+0xbc>
 8003574:	681d      	ldr	r5, [r3, #0]
 8003576:	e003      	b.n	8003580 <_printf_i+0xc4>
 8003578:	0645      	lsls	r5, r0, #25
 800357a:	d5fb      	bpl.n	8003574 <_printf_i+0xb8>
 800357c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003580:	2d00      	cmp	r5, #0
 8003582:	da03      	bge.n	800358c <_printf_i+0xd0>
 8003584:	232d      	movs	r3, #45	@ 0x2d
 8003586:	426d      	negs	r5, r5
 8003588:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800358c:	230a      	movs	r3, #10
 800358e:	4859      	ldr	r0, [pc, #356]	@ (80036f4 <_printf_i+0x238>)
 8003590:	e011      	b.n	80035b6 <_printf_i+0xfa>
 8003592:	6821      	ldr	r1, [r4, #0]
 8003594:	6833      	ldr	r3, [r6, #0]
 8003596:	0608      	lsls	r0, r1, #24
 8003598:	f853 5b04 	ldr.w	r5, [r3], #4
 800359c:	d402      	bmi.n	80035a4 <_printf_i+0xe8>
 800359e:	0649      	lsls	r1, r1, #25
 80035a0:	bf48      	it	mi
 80035a2:	b2ad      	uxthmi	r5, r5
 80035a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80035a6:	6033      	str	r3, [r6, #0]
 80035a8:	bf14      	ite	ne
 80035aa:	230a      	movne	r3, #10
 80035ac:	2308      	moveq	r3, #8
 80035ae:	4851      	ldr	r0, [pc, #324]	@ (80036f4 <_printf_i+0x238>)
 80035b0:	2100      	movs	r1, #0
 80035b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80035b6:	6866      	ldr	r6, [r4, #4]
 80035b8:	2e00      	cmp	r6, #0
 80035ba:	bfa8      	it	ge
 80035bc:	6821      	ldrge	r1, [r4, #0]
 80035be:	60a6      	str	r6, [r4, #8]
 80035c0:	bfa4      	itt	ge
 80035c2:	f021 0104 	bicge.w	r1, r1, #4
 80035c6:	6021      	strge	r1, [r4, #0]
 80035c8:	b90d      	cbnz	r5, 80035ce <_printf_i+0x112>
 80035ca:	2e00      	cmp	r6, #0
 80035cc:	d04b      	beq.n	8003666 <_printf_i+0x1aa>
 80035ce:	4616      	mov	r6, r2
 80035d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80035d4:	fb03 5711 	mls	r7, r3, r1, r5
 80035d8:	5dc7      	ldrb	r7, [r0, r7]
 80035da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035de:	462f      	mov	r7, r5
 80035e0:	42bb      	cmp	r3, r7
 80035e2:	460d      	mov	r5, r1
 80035e4:	d9f4      	bls.n	80035d0 <_printf_i+0x114>
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d10b      	bne.n	8003602 <_printf_i+0x146>
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	07df      	lsls	r7, r3, #31
 80035ee:	d508      	bpl.n	8003602 <_printf_i+0x146>
 80035f0:	6923      	ldr	r3, [r4, #16]
 80035f2:	6861      	ldr	r1, [r4, #4]
 80035f4:	4299      	cmp	r1, r3
 80035f6:	bfde      	ittt	le
 80035f8:	2330      	movle	r3, #48	@ 0x30
 80035fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003602:	1b92      	subs	r2, r2, r6
 8003604:	6122      	str	r2, [r4, #16]
 8003606:	464b      	mov	r3, r9
 8003608:	4621      	mov	r1, r4
 800360a:	4640      	mov	r0, r8
 800360c:	f8cd a000 	str.w	sl, [sp]
 8003610:	aa03      	add	r2, sp, #12
 8003612:	f7ff fee1 	bl	80033d8 <_printf_common>
 8003616:	3001      	adds	r0, #1
 8003618:	d14a      	bne.n	80036b0 <_printf_i+0x1f4>
 800361a:	f04f 30ff 	mov.w	r0, #4294967295
 800361e:	b004      	add	sp, #16
 8003620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	f043 0320 	orr.w	r3, r3, #32
 800362a:	6023      	str	r3, [r4, #0]
 800362c:	2778      	movs	r7, #120	@ 0x78
 800362e:	4832      	ldr	r0, [pc, #200]	@ (80036f8 <_printf_i+0x23c>)
 8003630:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	6831      	ldr	r1, [r6, #0]
 8003638:	061f      	lsls	r7, r3, #24
 800363a:	f851 5b04 	ldr.w	r5, [r1], #4
 800363e:	d402      	bmi.n	8003646 <_printf_i+0x18a>
 8003640:	065f      	lsls	r7, r3, #25
 8003642:	bf48      	it	mi
 8003644:	b2ad      	uxthmi	r5, r5
 8003646:	6031      	str	r1, [r6, #0]
 8003648:	07d9      	lsls	r1, r3, #31
 800364a:	bf44      	itt	mi
 800364c:	f043 0320 	orrmi.w	r3, r3, #32
 8003650:	6023      	strmi	r3, [r4, #0]
 8003652:	b11d      	cbz	r5, 800365c <_printf_i+0x1a0>
 8003654:	2310      	movs	r3, #16
 8003656:	e7ab      	b.n	80035b0 <_printf_i+0xf4>
 8003658:	4826      	ldr	r0, [pc, #152]	@ (80036f4 <_printf_i+0x238>)
 800365a:	e7e9      	b.n	8003630 <_printf_i+0x174>
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	f023 0320 	bic.w	r3, r3, #32
 8003662:	6023      	str	r3, [r4, #0]
 8003664:	e7f6      	b.n	8003654 <_printf_i+0x198>
 8003666:	4616      	mov	r6, r2
 8003668:	e7bd      	b.n	80035e6 <_printf_i+0x12a>
 800366a:	6833      	ldr	r3, [r6, #0]
 800366c:	6825      	ldr	r5, [r4, #0]
 800366e:	1d18      	adds	r0, r3, #4
 8003670:	6961      	ldr	r1, [r4, #20]
 8003672:	6030      	str	r0, [r6, #0]
 8003674:	062e      	lsls	r6, r5, #24
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	d501      	bpl.n	800367e <_printf_i+0x1c2>
 800367a:	6019      	str	r1, [r3, #0]
 800367c:	e002      	b.n	8003684 <_printf_i+0x1c8>
 800367e:	0668      	lsls	r0, r5, #25
 8003680:	d5fb      	bpl.n	800367a <_printf_i+0x1be>
 8003682:	8019      	strh	r1, [r3, #0]
 8003684:	2300      	movs	r3, #0
 8003686:	4616      	mov	r6, r2
 8003688:	6123      	str	r3, [r4, #16]
 800368a:	e7bc      	b.n	8003606 <_printf_i+0x14a>
 800368c:	6833      	ldr	r3, [r6, #0]
 800368e:	2100      	movs	r1, #0
 8003690:	1d1a      	adds	r2, r3, #4
 8003692:	6032      	str	r2, [r6, #0]
 8003694:	681e      	ldr	r6, [r3, #0]
 8003696:	6862      	ldr	r2, [r4, #4]
 8003698:	4630      	mov	r0, r6
 800369a:	f000 f859 	bl	8003750 <memchr>
 800369e:	b108      	cbz	r0, 80036a4 <_printf_i+0x1e8>
 80036a0:	1b80      	subs	r0, r0, r6
 80036a2:	6060      	str	r0, [r4, #4]
 80036a4:	6863      	ldr	r3, [r4, #4]
 80036a6:	6123      	str	r3, [r4, #16]
 80036a8:	2300      	movs	r3, #0
 80036aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036ae:	e7aa      	b.n	8003606 <_printf_i+0x14a>
 80036b0:	4632      	mov	r2, r6
 80036b2:	4649      	mov	r1, r9
 80036b4:	4640      	mov	r0, r8
 80036b6:	6923      	ldr	r3, [r4, #16]
 80036b8:	47d0      	blx	sl
 80036ba:	3001      	adds	r0, #1
 80036bc:	d0ad      	beq.n	800361a <_printf_i+0x15e>
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	079b      	lsls	r3, r3, #30
 80036c2:	d413      	bmi.n	80036ec <_printf_i+0x230>
 80036c4:	68e0      	ldr	r0, [r4, #12]
 80036c6:	9b03      	ldr	r3, [sp, #12]
 80036c8:	4298      	cmp	r0, r3
 80036ca:	bfb8      	it	lt
 80036cc:	4618      	movlt	r0, r3
 80036ce:	e7a6      	b.n	800361e <_printf_i+0x162>
 80036d0:	2301      	movs	r3, #1
 80036d2:	4632      	mov	r2, r6
 80036d4:	4649      	mov	r1, r9
 80036d6:	4640      	mov	r0, r8
 80036d8:	47d0      	blx	sl
 80036da:	3001      	adds	r0, #1
 80036dc:	d09d      	beq.n	800361a <_printf_i+0x15e>
 80036de:	3501      	adds	r5, #1
 80036e0:	68e3      	ldr	r3, [r4, #12]
 80036e2:	9903      	ldr	r1, [sp, #12]
 80036e4:	1a5b      	subs	r3, r3, r1
 80036e6:	42ab      	cmp	r3, r5
 80036e8:	dcf2      	bgt.n	80036d0 <_printf_i+0x214>
 80036ea:	e7eb      	b.n	80036c4 <_printf_i+0x208>
 80036ec:	2500      	movs	r5, #0
 80036ee:	f104 0619 	add.w	r6, r4, #25
 80036f2:	e7f5      	b.n	80036e0 <_printf_i+0x224>
 80036f4:	080038a3 	.word	0x080038a3
 80036f8:	080038b4 	.word	0x080038b4

080036fc <memmove>:
 80036fc:	4288      	cmp	r0, r1
 80036fe:	b510      	push	{r4, lr}
 8003700:	eb01 0402 	add.w	r4, r1, r2
 8003704:	d902      	bls.n	800370c <memmove+0x10>
 8003706:	4284      	cmp	r4, r0
 8003708:	4623      	mov	r3, r4
 800370a:	d807      	bhi.n	800371c <memmove+0x20>
 800370c:	1e43      	subs	r3, r0, #1
 800370e:	42a1      	cmp	r1, r4
 8003710:	d008      	beq.n	8003724 <memmove+0x28>
 8003712:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003716:	f803 2f01 	strb.w	r2, [r3, #1]!
 800371a:	e7f8      	b.n	800370e <memmove+0x12>
 800371c:	4601      	mov	r1, r0
 800371e:	4402      	add	r2, r0
 8003720:	428a      	cmp	r2, r1
 8003722:	d100      	bne.n	8003726 <memmove+0x2a>
 8003724:	bd10      	pop	{r4, pc}
 8003726:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800372a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800372e:	e7f7      	b.n	8003720 <memmove+0x24>

08003730 <_sbrk_r>:
 8003730:	b538      	push	{r3, r4, r5, lr}
 8003732:	2300      	movs	r3, #0
 8003734:	4d05      	ldr	r5, [pc, #20]	@ (800374c <_sbrk_r+0x1c>)
 8003736:	4604      	mov	r4, r0
 8003738:	4608      	mov	r0, r1
 800373a:	602b      	str	r3, [r5, #0]
 800373c:	f7fd fd7e 	bl	800123c <_sbrk>
 8003740:	1c43      	adds	r3, r0, #1
 8003742:	d102      	bne.n	800374a <_sbrk_r+0x1a>
 8003744:	682b      	ldr	r3, [r5, #0]
 8003746:	b103      	cbz	r3, 800374a <_sbrk_r+0x1a>
 8003748:	6023      	str	r3, [r4, #0]
 800374a:	bd38      	pop	{r3, r4, r5, pc}
 800374c:	20000368 	.word	0x20000368

08003750 <memchr>:
 8003750:	4603      	mov	r3, r0
 8003752:	b510      	push	{r4, lr}
 8003754:	b2c9      	uxtb	r1, r1
 8003756:	4402      	add	r2, r0
 8003758:	4293      	cmp	r3, r2
 800375a:	4618      	mov	r0, r3
 800375c:	d101      	bne.n	8003762 <memchr+0x12>
 800375e:	2000      	movs	r0, #0
 8003760:	e003      	b.n	800376a <memchr+0x1a>
 8003762:	7804      	ldrb	r4, [r0, #0]
 8003764:	3301      	adds	r3, #1
 8003766:	428c      	cmp	r4, r1
 8003768:	d1f6      	bne.n	8003758 <memchr+0x8>
 800376a:	bd10      	pop	{r4, pc}

0800376c <memcpy>:
 800376c:	440a      	add	r2, r1
 800376e:	4291      	cmp	r1, r2
 8003770:	f100 33ff 	add.w	r3, r0, #4294967295
 8003774:	d100      	bne.n	8003778 <memcpy+0xc>
 8003776:	4770      	bx	lr
 8003778:	b510      	push	{r4, lr}
 800377a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800377e:	4291      	cmp	r1, r2
 8003780:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003784:	d1f9      	bne.n	800377a <memcpy+0xe>
 8003786:	bd10      	pop	{r4, pc}

08003788 <_realloc_r>:
 8003788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800378c:	4680      	mov	r8, r0
 800378e:	4615      	mov	r5, r2
 8003790:	460c      	mov	r4, r1
 8003792:	b921      	cbnz	r1, 800379e <_realloc_r+0x16>
 8003794:	4611      	mov	r1, r2
 8003796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800379a:	f7ff bc39 	b.w	8003010 <_malloc_r>
 800379e:	b92a      	cbnz	r2, 80037ac <_realloc_r+0x24>
 80037a0:	f7ff fbcc 	bl	8002f3c <_free_r>
 80037a4:	2400      	movs	r4, #0
 80037a6:	4620      	mov	r0, r4
 80037a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037ac:	f000 f81a 	bl	80037e4 <_malloc_usable_size_r>
 80037b0:	4285      	cmp	r5, r0
 80037b2:	4606      	mov	r6, r0
 80037b4:	d802      	bhi.n	80037bc <_realloc_r+0x34>
 80037b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80037ba:	d8f4      	bhi.n	80037a6 <_realloc_r+0x1e>
 80037bc:	4629      	mov	r1, r5
 80037be:	4640      	mov	r0, r8
 80037c0:	f7ff fc26 	bl	8003010 <_malloc_r>
 80037c4:	4607      	mov	r7, r0
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d0ec      	beq.n	80037a4 <_realloc_r+0x1c>
 80037ca:	42b5      	cmp	r5, r6
 80037cc:	462a      	mov	r2, r5
 80037ce:	4621      	mov	r1, r4
 80037d0:	bf28      	it	cs
 80037d2:	4632      	movcs	r2, r6
 80037d4:	f7ff ffca 	bl	800376c <memcpy>
 80037d8:	4621      	mov	r1, r4
 80037da:	4640      	mov	r0, r8
 80037dc:	f7ff fbae 	bl	8002f3c <_free_r>
 80037e0:	463c      	mov	r4, r7
 80037e2:	e7e0      	b.n	80037a6 <_realloc_r+0x1e>

080037e4 <_malloc_usable_size_r>:
 80037e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037e8:	1f18      	subs	r0, r3, #4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	bfbc      	itt	lt
 80037ee:	580b      	ldrlt	r3, [r1, r0]
 80037f0:	18c0      	addlt	r0, r0, r3
 80037f2:	4770      	bx	lr

080037f4 <_init>:
 80037f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f6:	bf00      	nop
 80037f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fa:	bc08      	pop	{r3}
 80037fc:	469e      	mov	lr, r3
 80037fe:	4770      	bx	lr

08003800 <_fini>:
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	bf00      	nop
 8003804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003806:	bc08      	pop	{r3}
 8003808:	469e      	mov	lr, r3
 800380a:	4770      	bx	lr
