
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003854  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003960  08003960  00004960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a2c  08003a2c  000050a4  2**0
                  CONTENTS
  4 .ARM          00000008  08003a2c  08003a2c  00004a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a34  08003a34  000050a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a34  08003a34  00004a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a38  08003a38  00004a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  08003a3c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200000a4  08003ae0  000050a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08003ae0  0000537c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a958  00000000  00000000  000050cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa9  00000000  00000000  0000fa25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  000119d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000939  00000000  00000000  000125d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180a1  00000000  00000000  00012f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbee  00000000  00000000  0002afb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089efe  00000000  00000000  00038ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2a9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003628  00000000  00000000  000c2ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000c610c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003948 	.word	0x08003948

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	08003948 	.word	0x08003948

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <KeyPad_Scan>:
    /* Set all rows to high */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
}

/* Scan the 4x5 keypad and return the pressed key value */
uint8_t KeyPad_Scan(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
    uint32_t currentMillis = HAL_GetTick();
 8000162:	f001 fa17 	bl	8001594 <HAL_GetTick>
 8000166:	6038      	str	r0, [r7, #0]

    if (currentMillis - lastDebounceTime < DEBOUNCE_DELAY) {
 8000168:	4b24      	ldr	r3, [pc, #144]	@ (80001fc <KeyPad_Scan+0xa0>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	683a      	ldr	r2, [r7, #0]
 800016e:	1ad3      	subs	r3, r2, r3
 8000170:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000174:	d201      	bcs.n	800017a <KeyPad_Scan+0x1e>
        return 0xFF;
 8000176:	23ff      	movs	r3, #255	@ 0xff
 8000178:	e03b      	b.n	80001f2 <KeyPad_Scan+0x96>
    }

    for (uint8_t row = 0; row < 4; row++) {
 800017a:	2300      	movs	r3, #0
 800017c:	71fb      	strb	r3, [r7, #7]
 800017e:	e034      	b.n	80001ea <KeyPad_Scan+0x8e>
        /* Set all rows low */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000186:	481e      	ldr	r0, [pc, #120]	@ (8000200 <KeyPad_Scan+0xa4>)
 8000188:	f001 fcb7 	bl	8001afa <HAL_GPIO_WritePin>

        /* Set the current row high */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 << row, GPIO_PIN_SET);
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	2240      	movs	r2, #64	@ 0x40
 8000190:	fa02 f303 	lsl.w	r3, r2, r3
 8000194:	b29b      	uxth	r3, r3
 8000196:	2201      	movs	r2, #1
 8000198:	4619      	mov	r1, r3
 800019a:	4819      	ldr	r0, [pc, #100]	@ (8000200 <KeyPad_Scan+0xa4>)
 800019c:	f001 fcad 	bl	8001afa <HAL_GPIO_WritePin>

        /* Read each column */
        for (uint8_t col = 0; col < 5; col++) {
 80001a0:	2300      	movs	r3, #0
 80001a2:	71bb      	strb	r3, [r7, #6]
 80001a4:	e01b      	b.n	80001de <KeyPad_Scan+0x82>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 << col) == GPIO_PIN_SET) {
 80001a6:	79bb      	ldrb	r3, [r7, #6]
 80001a8:	2201      	movs	r2, #1
 80001aa:	fa02 f303 	lsl.w	r3, r2, r3
 80001ae:	b29b      	uxth	r3, r3
 80001b0:	4619      	mov	r1, r3
 80001b2:	4813      	ldr	r0, [pc, #76]	@ (8000200 <KeyPad_Scan+0xa4>)
 80001b4:	f001 fc8a 	bl	8001acc <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b01      	cmp	r3, #1
 80001bc:	d10c      	bne.n	80001d8 <KeyPad_Scan+0x7c>
                lastDebounceTime = currentMillis;
 80001be:	4a0f      	ldr	r2, [pc, #60]	@ (80001fc <KeyPad_Scan+0xa0>)
 80001c0:	683b      	ldr	r3, [r7, #0]
 80001c2:	6013      	str	r3, [r2, #0]
                return keyMap[row][col];
 80001c4:	79fa      	ldrb	r2, [r7, #7]
 80001c6:	79b9      	ldrb	r1, [r7, #6]
 80001c8:	480e      	ldr	r0, [pc, #56]	@ (8000204 <KeyPad_Scan+0xa8>)
 80001ca:	4613      	mov	r3, r2
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	4413      	add	r3, r2
 80001d0:	4403      	add	r3, r0
 80001d2:	440b      	add	r3, r1
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	e00c      	b.n	80001f2 <KeyPad_Scan+0x96>
        for (uint8_t col = 0; col < 5; col++) {
 80001d8:	79bb      	ldrb	r3, [r7, #6]
 80001da:	3301      	adds	r3, #1
 80001dc:	71bb      	strb	r3, [r7, #6]
 80001de:	79bb      	ldrb	r3, [r7, #6]
 80001e0:	2b04      	cmp	r3, #4
 80001e2:	d9e0      	bls.n	80001a6 <KeyPad_Scan+0x4a>
    for (uint8_t row = 0; row < 4; row++) {
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	3301      	adds	r3, #1
 80001e8:	71fb      	strb	r3, [r7, #7]
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2b03      	cmp	r3, #3
 80001ee:	d9c7      	bls.n	8000180 <KeyPad_Scan+0x24>
            }
        }
    }

    return 0xFF;
 80001f0:	23ff      	movs	r3, #255	@ 0xff
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	200000c0 	.word	0x200000c0
 8000200:	40010c00 	.word	0x40010c00
 8000204:	080039c0 	.word	0x080039c0

08000208 <formatTotalLiters>:
// T + L pressed show total from beginning
void formatTotalLiters(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	60b9      	str	r1, [r7, #8]
 8000212:	607a      	str	r2, [r7, #4]
	if (total < 100000000) {
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	4a1b      	ldr	r2, [pc, #108]	@ (8000284 <formatTotalLiters+0x7c>)
 8000218:	4293      	cmp	r3, r2
 800021a:	d815      	bhi.n	8000248 <formatTotalLiters+0x40>
		* buffer1 = total / 1000000;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	4a1a      	ldr	r2, [pc, #104]	@ (8000288 <formatTotalLiters+0x80>)
 8000220:	fba2 2303 	umull	r2, r3, r2, r3
 8000224:	0c9a      	lsrs	r2, r3, #18
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	4b16      	ldr	r3, [pc, #88]	@ (8000288 <formatTotalLiters+0x80>)
 800022e:	fba3 1302 	umull	r1, r3, r3, r2
 8000232:	0c9b      	lsrs	r3, r3, #18
 8000234:	4915      	ldr	r1, [pc, #84]	@ (800028c <formatTotalLiters+0x84>)
 8000236:	fb01 f303 	mul.w	r3, r1, r3
 800023a:	1ad3      	subs	r3, r2, r3
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 8000240:	4b13      	ldr	r3, [pc, #76]	@ (8000290 <formatTotalLiters+0x88>)
 8000242:	2203      	movs	r2, #3
 8000244:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 = total / 100000000;
		* buffer2 = (total % 100000000 ) /100;
		LEDPointFlag = 1;
	}
}
 8000246:	e018      	b.n	800027a <formatTotalLiters+0x72>
		* buffer1 = total / 100000000;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	4a12      	ldr	r2, [pc, #72]	@ (8000294 <formatTotalLiters+0x8c>)
 800024c:	fba2 2303 	umull	r2, r3, r2, r3
 8000250:	0e5a      	lsrs	r2, r3, #25
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	601a      	str	r2, [r3, #0]
		* buffer2 = (total % 100000000 ) /100;
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4b0e      	ldr	r3, [pc, #56]	@ (8000294 <formatTotalLiters+0x8c>)
 800025a:	fba3 1302 	umull	r1, r3, r3, r2
 800025e:	0e5b      	lsrs	r3, r3, #25
 8000260:	490d      	ldr	r1, [pc, #52]	@ (8000298 <formatTotalLiters+0x90>)
 8000262:	fb01 f303 	mul.w	r3, r1, r3
 8000266:	1ad3      	subs	r3, r2, r3
 8000268:	4a0c      	ldr	r2, [pc, #48]	@ (800029c <formatTotalLiters+0x94>)
 800026a:	fba2 2303 	umull	r2, r3, r2, r3
 800026e:	095a      	lsrs	r2, r3, #5
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	601a      	str	r2, [r3, #0]
		LEDPointFlag = 1;
 8000274:	4b06      	ldr	r3, [pc, #24]	@ (8000290 <formatTotalLiters+0x88>)
 8000276:	2201      	movs	r2, #1
 8000278:	601a      	str	r2, [r3, #0]
}
 800027a:	bf00      	nop
 800027c:	3714      	adds	r7, #20
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	05f5e0ff 	.word	0x05f5e0ff
 8000288:	431bde83 	.word	0x431bde83
 800028c:	000f4240 	.word	0x000f4240
 8000290:	20000044 	.word	0x20000044
 8000294:	55e63b89 	.word	0x55e63b89
 8000298:	05f5e100 	.word	0x05f5e100
 800029c:	51eb851f 	.word	0x51eb851f

080002a0 <formatTotalLitersShift>:
// T + $ pressed show total per shift
void formatTotalLitersShift(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
	if (total < 1000000000) {
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	4a14      	ldr	r2, [pc, #80]	@ (8000300 <formatTotalLitersShift+0x60>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d815      	bhi.n	80002e0 <formatTotalLitersShift+0x40>

		* buffer1 = total / 1000000;
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4a13      	ldr	r2, [pc, #76]	@ (8000304 <formatTotalLitersShift+0x64>)
 80002b8:	fba2 2303 	umull	r2, r3, r2, r3
 80002bc:	0c9a      	lsrs	r2, r3, #18
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <formatTotalLitersShift+0x64>)
 80002c6:	fba3 1302 	umull	r1, r3, r3, r2
 80002ca:	0c9b      	lsrs	r3, r3, #18
 80002cc:	490e      	ldr	r1, [pc, #56]	@ (8000308 <formatTotalLitersShift+0x68>)
 80002ce:	fb01 f303 	mul.w	r3, r1, r3
 80002d2:	1ad3      	subs	r3, r2, r3
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	@ (800030c <formatTotalLitersShift+0x6c>)
 80002da:	2203      	movs	r2, #3
 80002dc:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 =0;
		* buffer2 = 0;
		LEDPointFlag = -1;
	}
}
 80002de:	e009      	b.n	80002f4 <formatTotalLitersShift+0x54>
		* buffer1 =0;
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
		* buffer2 = 0;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
		LEDPointFlag = -1;
 80002ec:	4b07      	ldr	r3, [pc, #28]	@ (800030c <formatTotalLitersShift+0x6c>)
 80002ee:	f04f 32ff 	mov.w	r2, #4294967295
 80002f2:	601a      	str	r2, [r3, #0]
}
 80002f4:	bf00      	nop
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	3b9ac9ff 	.word	0x3b9ac9ff
 8000304:	431bde83 	.word	0x431bde83
 8000308:	000f4240 	.word	0x000f4240
 800030c:	20000044 	.word	0x20000044

08000310 <KeyLogic>:

void KeyLogic() {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	keyPressed = KeyPad_Scan();
 8000314:	f7ff ff22 	bl	800015c <KeyPad_Scan>
 8000318:	4603      	mov	r3, r0
 800031a:	461a      	mov	r2, r3
 800031c:	4bb1      	ldr	r3, [pc, #708]	@ (80005e4 <KeyLogic+0x2d4>)
 800031e:	701a      	strb	r2, [r3, #0]
    if (keyPressed != 0xFF) {
 8000320:	4bb0      	ldr	r3, [pc, #704]	@ (80005e4 <KeyLogic+0x2d4>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2bff      	cmp	r3, #255	@ 0xff
 8000326:	f000 81e3 	beq.w	80006f0 <KeyLogic+0x3e0>
		switch (keyPressed) {
 800032a:	4bae      	ldr	r3, [pc, #696]	@ (80005e4 <KeyLogic+0x2d4>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	3b24      	subs	r3, #36	@ 0x24
 8000330:	2b30      	cmp	r3, #48	@ 0x30
 8000332:	f200 817f 	bhi.w	8000634 <KeyLogic+0x324>
 8000336:	a201      	add	r2, pc, #4	@ (adr r2, 800033c <KeyLogic+0x2c>)
 8000338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800033c:	0800056b 	.word	0x0800056b
 8000340:	08000635 	.word	0x08000635
 8000344:	08000635 	.word	0x08000635
 8000348:	08000635 	.word	0x08000635
 800034c:	08000635 	.word	0x08000635
 8000350:	08000635 	.word	0x08000635
 8000354:	08000635 	.word	0x08000635
 8000358:	08000635 	.word	0x08000635
 800035c:	08000635 	.word	0x08000635
 8000360:	08000635 	.word	0x08000635
 8000364:	08000635 	.word	0x08000635
 8000368:	08000635 	.word	0x08000635
 800036c:	08000635 	.word	0x08000635
 8000370:	08000635 	.word	0x08000635
 8000374:	08000635 	.word	0x08000635
 8000378:	08000635 	.word	0x08000635
 800037c:	08000635 	.word	0x08000635
 8000380:	08000635 	.word	0x08000635
 8000384:	08000635 	.word	0x08000635
 8000388:	08000635 	.word	0x08000635
 800038c:	08000635 	.word	0x08000635
 8000390:	08000635 	.word	0x08000635
 8000394:	08000635 	.word	0x08000635
 8000398:	08000635 	.word	0x08000635
 800039c:	08000635 	.word	0x08000635
 80003a0:	08000635 	.word	0x08000635
 80003a4:	08000635 	.word	0x08000635
 80003a8:	08000635 	.word	0x08000635
 80003ac:	08000635 	.word	0x08000635
 80003b0:	08000401 	.word	0x08000401
 80003b4:	08000429 	.word	0x08000429
 80003b8:	0800044f 	.word	0x0800044f
 80003bc:	080005b3 	.word	0x080005b3
 80003c0:	08000475 	.word	0x08000475
 80003c4:	08000611 	.word	0x08000611
 80003c8:	08000635 	.word	0x08000635
 80003cc:	08000635 	.word	0x08000635
 80003d0:	08000635 	.word	0x08000635
 80003d4:	08000635 	.word	0x08000635
 80003d8:	08000635 	.word	0x08000635
 80003dc:	0800058f 	.word	0x0800058f
 80003e0:	08000635 	.word	0x08000635
 80003e4:	08000635 	.word	0x08000635
 80003e8:	08000635 	.word	0x08000635
 80003ec:	08000523 	.word	0x08000523
 80003f0:	08000635 	.word	0x08000635
 80003f4:	08000635 	.word	0x08000635
 80003f8:	08000635 	.word	0x08000635
 80003fc:	08000547 	.word	0x08000547
/////////////////////////////////////////////////////KEY A/////////////////////////////////////////////////////////
			case 'A':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000400:	2300      	movs	r3, #0
 8000402:	4a79      	ldr	r2, [pc, #484]	@ (80005e8 <KeyLogic+0x2d8>)
 8000404:	2107      	movs	r1, #7
 8000406:	4879      	ldr	r0, [pc, #484]	@ (80005ec <KeyLogic+0x2dc>)
 8000408:	f002 fdda 	bl	8002fc0 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 10000);
 800040c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000410:	4a75      	ldr	r2, [pc, #468]	@ (80005e8 <KeyLogic+0x2d8>)
 8000412:	2107      	movs	r1, #7
 8000414:	4876      	ldr	r0, [pc, #472]	@ (80005f0 <KeyLogic+0x2e0>)
 8000416:	f002 fdd3 	bl	8002fc0 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 800041a:	2300      	movs	r3, #0
 800041c:	4a72      	ldr	r2, [pc, #456]	@ (80005e8 <KeyLogic+0x2d8>)
 800041e:	2107      	movs	r1, #7
 8000420:	4874      	ldr	r0, [pc, #464]	@ (80005f4 <KeyLogic+0x2e4>)
 8000422:	f002 fdcd 	bl	8002fc0 <sniprintf>
				break;
 8000426:	e163      	b.n	80006f0 <KeyLogic+0x3e0>
/////////////////////////////////////////////////////KEY B/////////////////////////////////////////////////////////
			case 'B':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000428:	2300      	movs	r3, #0
 800042a:	4a6f      	ldr	r2, [pc, #444]	@ (80005e8 <KeyLogic+0x2d8>)
 800042c:	2107      	movs	r1, #7
 800042e:	486f      	ldr	r0, [pc, #444]	@ (80005ec <KeyLogic+0x2dc>)
 8000430:	f002 fdc6 	bl	8002fc0 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 100000);
 8000434:	4b70      	ldr	r3, [pc, #448]	@ (80005f8 <KeyLogic+0x2e8>)
 8000436:	4a6c      	ldr	r2, [pc, #432]	@ (80005e8 <KeyLogic+0x2d8>)
 8000438:	2107      	movs	r1, #7
 800043a:	486d      	ldr	r0, [pc, #436]	@ (80005f0 <KeyLogic+0x2e0>)
 800043c:	f002 fdc0 	bl	8002fc0 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000440:	2300      	movs	r3, #0
 8000442:	4a69      	ldr	r2, [pc, #420]	@ (80005e8 <KeyLogic+0x2d8>)
 8000444:	2107      	movs	r1, #7
 8000446:	486b      	ldr	r0, [pc, #428]	@ (80005f4 <KeyLogic+0x2e4>)
 8000448:	f002 fdba 	bl	8002fc0 <sniprintf>
				break;
 800044c:	e150      	b.n	80006f0 <KeyLogic+0x3e0>
/////////////////////////////////////////////////////KEY C/////////////////////////////////////////////////////////
			case 'C':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 800044e:	2300      	movs	r3, #0
 8000450:	4a65      	ldr	r2, [pc, #404]	@ (80005e8 <KeyLogic+0x2d8>)
 8000452:	2107      	movs	r1, #7
 8000454:	4865      	ldr	r0, [pc, #404]	@ (80005ec <KeyLogic+0x2dc>)
 8000456:	f002 fdb3 	bl	8002fc0 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800045a:	2300      	movs	r3, #0
 800045c:	4a62      	ldr	r2, [pc, #392]	@ (80005e8 <KeyLogic+0x2d8>)
 800045e:	2107      	movs	r1, #7
 8000460:	4863      	ldr	r0, [pc, #396]	@ (80005f0 <KeyLogic+0x2e0>)
 8000462:	f002 fdad 	bl	8002fc0 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 1);
 8000466:	2301      	movs	r3, #1
 8000468:	4a5f      	ldr	r2, [pc, #380]	@ (80005e8 <KeyLogic+0x2d8>)
 800046a:	2107      	movs	r1, #7
 800046c:	4861      	ldr	r0, [pc, #388]	@ (80005f4 <KeyLogic+0x2e4>)
 800046e:	f002 fda7 	bl	8002fc0 <sniprintf>
				break;
 8000472:	e13d      	b.n	80006f0 <KeyLogic+0x3e0>
/////////////////////////////////////////////////////KEY E/////////////////////////////////////////////////////////
			case 'E':
				if (seqState == SEQ_PRESSED_P_NUM&&
 8000474:	4b61      	ldr	r3, [pc, #388]	@ (80005fc <KeyLogic+0x2ec>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b06      	cmp	r3, #6
 800047a:	d10f      	bne.n	800049c <KeyLogic+0x18c>
					accumulatedNumber==password) {
 800047c:	4b60      	ldr	r3, [pc, #384]	@ (8000600 <KeyLogic+0x2f0>)
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	4b60      	ldr	r3, [pc, #384]	@ (8000604 <KeyLogic+0x2f4>)
 8000482:	681b      	ldr	r3, [r3, #0]
				if (seqState == SEQ_PRESSED_P_NUM&&
 8000484:	429a      	cmp	r2, r3
 8000486:	d109      	bne.n	800049c <KeyLogic+0x18c>
					seqState = SEQ_PRESSED_P_PSWRD_SETPRICE;
 8000488:	4b5c      	ldr	r3, [pc, #368]	@ (80005fc <KeyLogic+0x2ec>)
 800048a:	2207      	movs	r2, #7
 800048c:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800048e:	4b5e      	ldr	r3, [pc, #376]	@ (8000608 <KeyLogic+0x2f8>)
 8000490:	2200      	movs	r2, #0
 8000492:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000494:	4b5a      	ldr	r3, [pc, #360]	@ (8000600 <KeyLogic+0x2f0>)
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	e041      	b.n	8000520 <KeyLogic+0x210>
				}
				else if(seqState == SEQ_PRESSED_P_PSWRD_SETPRICE){
 800049c:	4b57      	ldr	r3, [pc, #348]	@ (80005fc <KeyLogic+0x2ec>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b07      	cmp	r3, #7
 80004a2:	d10d      	bne.n	80004c0 <KeyLogic+0x1b0>
					currPrice = accumulatedNumber;
 80004a4:	4b56      	ldr	r3, [pc, #344]	@ (8000600 <KeyLogic+0x2f0>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a58      	ldr	r2, [pc, #352]	@ (800060c <KeyLogic+0x2fc>)
 80004aa:	6013      	str	r3, [r2, #0]
					seqState = SEQ_IDLE;
 80004ac:	4b53      	ldr	r3, [pc, #332]	@ (80005fc <KeyLogic+0x2ec>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80004b2:	4b55      	ldr	r3, [pc, #340]	@ (8000608 <KeyLogic+0x2f8>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80004b8:	4b51      	ldr	r3, [pc, #324]	@ (8000600 <KeyLogic+0x2f0>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
				else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 80004be:	e117      	b.n	80006f0 <KeyLogic+0x3e0>
				else if(seqState == SEQ_ENTER_OLD_PASSWORD&&accumulatedNumber == password){
 80004c0:	4b4e      	ldr	r3, [pc, #312]	@ (80005fc <KeyLogic+0x2ec>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b02      	cmp	r3, #2
 80004c6:	d10f      	bne.n	80004e8 <KeyLogic+0x1d8>
 80004c8:	4b4d      	ldr	r3, [pc, #308]	@ (8000600 <KeyLogic+0x2f0>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b4d      	ldr	r3, [pc, #308]	@ (8000604 <KeyLogic+0x2f4>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d109      	bne.n	80004e8 <KeyLogic+0x1d8>
					seqState = SEQ_ENTER_NEW_PASSWORD;
 80004d4:	4b49      	ldr	r3, [pc, #292]	@ (80005fc <KeyLogic+0x2ec>)
 80004d6:	2203      	movs	r2, #3
 80004d8:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80004da:	4b4b      	ldr	r3, [pc, #300]	@ (8000608 <KeyLogic+0x2f8>)
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80004e0:	4b47      	ldr	r3, [pc, #284]	@ (8000600 <KeyLogic+0x2f0>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	e01b      	b.n	8000520 <KeyLogic+0x210>
				else if(seqState == SEQ_ENTER_NEW_PASSWORD){
 80004e8:	4b44      	ldr	r3, [pc, #272]	@ (80005fc <KeyLogic+0x2ec>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b03      	cmp	r3, #3
 80004ee:	d10d      	bne.n	800050c <KeyLogic+0x1fc>
					password = accumulatedNumber;
 80004f0:	4b43      	ldr	r3, [pc, #268]	@ (8000600 <KeyLogic+0x2f0>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a43      	ldr	r2, [pc, #268]	@ (8000604 <KeyLogic+0x2f4>)
 80004f6:	6013      	str	r3, [r2, #0]
					seqState = SEQ_IDLE;
 80004f8:	4b40      	ldr	r3, [pc, #256]	@ (80005fc <KeyLogic+0x2ec>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80004fe:	4b42      	ldr	r3, [pc, #264]	@ (8000608 <KeyLogic+0x2f8>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000504:	4b3e      	ldr	r3, [pc, #248]	@ (8000600 <KeyLogic+0x2f0>)
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
				break;
 800050a:	e0f1      	b.n	80006f0 <KeyLogic+0x3e0>
					seqState = SEQ_IDLE;
 800050c:	4b3b      	ldr	r3, [pc, #236]	@ (80005fc <KeyLogic+0x2ec>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000512:	4b3d      	ldr	r3, [pc, #244]	@ (8000608 <KeyLogic+0x2f8>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000518:	4b39      	ldr	r3, [pc, #228]	@ (8000600 <KeyLogic+0x2f0>)
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
				break;
 800051e:	e0e7      	b.n	80006f0 <KeyLogic+0x3e0>
 8000520:	e0e6      	b.n	80006f0 <KeyLogic+0x3e0>
/////////////////////////////////////////////////////KEY P/////////////////////////////////////////////////////////
			case 'P':
				if (seqState == SEQ_IDLE) {
 8000522:	4b36      	ldr	r3, [pc, #216]	@ (80005fc <KeyLogic+0x2ec>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d103      	bne.n	8000532 <KeyLogic+0x222>
					seqState = SEQ_PRESSED_P;
 800052a:	4b34      	ldr	r3, [pc, #208]	@ (80005fc <KeyLogic+0x2ec>)
 800052c:	2205      	movs	r2, #5
 800052e:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000530:	e0de      	b.n	80006f0 <KeyLogic+0x3e0>
					seqState = SEQ_IDLE;
 8000532:	4b32      	ldr	r3, [pc, #200]	@ (80005fc <KeyLogic+0x2ec>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000538:	4b33      	ldr	r3, [pc, #204]	@ (8000608 <KeyLogic+0x2f8>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800053e:	4b30      	ldr	r3, [pc, #192]	@ (8000600 <KeyLogic+0x2f0>)
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
				break;
 8000544:	e0d4      	b.n	80006f0 <KeyLogic+0x3e0>
/////////////////////////////////////////////////////KEY T/////////////////////////////////////////////////////////
			case 'T':
				if (seqState == SEQ_IDLE) {
 8000546:	4b2d      	ldr	r3, [pc, #180]	@ (80005fc <KeyLogic+0x2ec>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d103      	bne.n	8000556 <KeyLogic+0x246>
					seqState = SEQ_PRESSED_T;
 800054e:	4b2b      	ldr	r3, [pc, #172]	@ (80005fc <KeyLogic+0x2ec>)
 8000550:	2208      	movs	r2, #8
 8000552:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000554:	e0cc      	b.n	80006f0 <KeyLogic+0x3e0>
					seqState = SEQ_IDLE;
 8000556:	4b29      	ldr	r3, [pc, #164]	@ (80005fc <KeyLogic+0x2ec>)
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800055c:	4b2a      	ldr	r3, [pc, #168]	@ (8000608 <KeyLogic+0x2f8>)
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000562:	4b27      	ldr	r3, [pc, #156]	@ (8000600 <KeyLogic+0x2f0>)
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
				break;
 8000568:	e0c2      	b.n	80006f0 <KeyLogic+0x3e0>
/////////////////////////////////////////////////////KEY $/////////////////////////////////////////////////////////
			case '$':
				if (seqState == SEQ_PRESSED_T) {
 800056a:	4b24      	ldr	r3, [pc, #144]	@ (80005fc <KeyLogic+0x2ec>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b08      	cmp	r3, #8
 8000570:	d103      	bne.n	800057a <KeyLogic+0x26a>
					seqState = SEQ_PRESSED_T_$;
 8000572:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <KeyLogic+0x2ec>)
 8000574:	220a      	movs	r2, #10
 8000576:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000578:	e0ba      	b.n	80006f0 <KeyLogic+0x3e0>
					seqState = SEQ_IDLE;
 800057a:	4b20      	ldr	r3, [pc, #128]	@ (80005fc <KeyLogic+0x2ec>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000580:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <KeyLogic+0x2f8>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000586:	4b1e      	ldr	r3, [pc, #120]	@ (8000600 <KeyLogic+0x2f0>)
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
				break;
 800058c:	e0b0      	b.n	80006f0 <KeyLogic+0x3e0>
/////////////////////////////////////////////////////KEY L/////////////////////////////////////////////////////////
			case 'L':
				if (seqState == SEQ_PRESSED_T) {
 800058e:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <KeyLogic+0x2ec>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b08      	cmp	r3, #8
 8000594:	d103      	bne.n	800059e <KeyLogic+0x28e>
					seqState = SEQ_PRESSED_T_L;
 8000596:	4b19      	ldr	r3, [pc, #100]	@ (80005fc <KeyLogic+0x2ec>)
 8000598:	2209      	movs	r2, #9
 800059a:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 800059c:	e0a8      	b.n	80006f0 <KeyLogic+0x3e0>
					seqState = SEQ_IDLE;
 800059e:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <KeyLogic+0x2ec>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80005a4:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <KeyLogic+0x2f8>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80005aa:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <KeyLogic+0x2f0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
				break;
 80005b0:	e09e      	b.n	80006f0 <KeyLogic+0x3e0>
/////////////////////////////////////////////////////KEY D/////////////////////////////////////////////////////////
			case 'D':
				if (seqState == SEQ_PRESSED_T) {
 80005b2:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <KeyLogic+0x2ec>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b08      	cmp	r3, #8
 80005b8:	d109      	bne.n	80005ce <KeyLogic+0x2be>
					seqState = SEQ_ENTER_OLD_PASSWORD;
 80005ba:	4b10      	ldr	r3, [pc, #64]	@ (80005fc <KeyLogic+0x2ec>)
 80005bc:	2202      	movs	r2, #2
 80005be:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <KeyLogic+0x2f8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <KeyLogic+0x2f0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 80005cc:	e090      	b.n	80006f0 <KeyLogic+0x3e0>
					seqState = SEQ_IDLE;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	@ (80005fc <KeyLogic+0x2ec>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <KeyLogic+0x2f8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <KeyLogic+0x2f0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
				break;
 80005e0:	e086      	b.n	80006f0 <KeyLogic+0x3e0>
 80005e2:	bf00      	nop
 80005e4:	20000031 	.word	0x20000031
 80005e8:	08003960 	.word	0x08003960
 80005ec:	2000001c 	.word	0x2000001c
 80005f0:	20000023 	.word	0x20000023
 80005f4:	2000002a 	.word	0x2000002a
 80005f8:	000186a0 	.word	0x000186a0
 80005fc:	200000d4 	.word	0x200000d4
 8000600:	200000c4 	.word	0x200000c4
 8000604:	20000034 	.word	0x20000034
 8000608:	200000c8 	.word	0x200000c8
 800060c:	20000040 	.word	0x20000040
/////////////////////////////////////////////////////KEY F/////////////////////////////////////////////////////////
			case 'F':
				if (seqState == SEQ_PRESSED_T) {
 8000610:	4b3a      	ldr	r3, [pc, #232]	@ (80006fc <KeyLogic+0x3ec>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b08      	cmp	r3, #8
 8000616:	d103      	bne.n	8000620 <KeyLogic+0x310>
					seqState = SEQ_PRESSED_T_F4;
 8000618:	4b38      	ldr	r3, [pc, #224]	@ (80006fc <KeyLogic+0x3ec>)
 800061a:	220c      	movs	r2, #12
 800061c:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 800061e:	e067      	b.n	80006f0 <KeyLogic+0x3e0>
					seqState = SEQ_IDLE;
 8000620:	4b36      	ldr	r3, [pc, #216]	@ (80006fc <KeyLogic+0x3ec>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000626:	4b36      	ldr	r3, [pc, #216]	@ (8000700 <KeyLogic+0x3f0>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800062c:	4b35      	ldr	r3, [pc, #212]	@ (8000704 <KeyLogic+0x3f4>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
				break;
 8000632:	e05d      	b.n	80006f0 <KeyLogic+0x3e0>
			default:
/////////////////////////////////////////////////////KEY 0-9/////////////////////////////////////////////////////////
				if(keyPressed >= '0' && keyPressed <= '9') {
 8000634:	4b34      	ldr	r3, [pc, #208]	@ (8000708 <KeyLogic+0x3f8>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b2f      	cmp	r3, #47	@ 0x2f
 800063a:	d94e      	bls.n	80006da <KeyLogic+0x3ca>
 800063c:	4b32      	ldr	r3, [pc, #200]	@ (8000708 <KeyLogic+0x3f8>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b39      	cmp	r3, #57	@ 0x39
 8000642:	d84a      	bhi.n	80006da <KeyLogic+0x3ca>
					if(seqState==SEQ_PRESSED_P){
 8000644:	4b2d      	ldr	r3, [pc, #180]	@ (80006fc <KeyLogic+0x3ec>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d10c      	bne.n	8000666 <KeyLogic+0x356>
						seqState=SEQ_PRESSED_P_NUM;
 800064c:	4b2b      	ldr	r3, [pc, #172]	@ (80006fc <KeyLogic+0x3ec>)
 800064e:	2206      	movs	r2, #6
 8000650:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 8000652:	4b2d      	ldr	r3, [pc, #180]	@ (8000708 <KeyLogic+0x3f8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	3b30      	subs	r3, #48	@ 0x30
 8000658:	461a      	mov	r2, r3
 800065a:	4b2a      	ldr	r3, [pc, #168]	@ (8000704 <KeyLogic+0x3f4>)
 800065c:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 800065e:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <KeyLogic+0x3f0>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8000664:	e043      	b.n	80006ee <KeyLogic+0x3de>
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 8000666:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <KeyLogic+0x3ec>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b06      	cmp	r3, #6
 800066c:	d00f      	beq.n	800068e <KeyLogic+0x37e>
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 800066e:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <KeyLogic+0x3ec>)
 8000670:	781b      	ldrb	r3, [r3, #0]
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 8000672:	2b07      	cmp	r3, #7
 8000674:	d00b      	beq.n	800068e <KeyLogic+0x37e>
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 8000676:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <KeyLogic+0x3ec>)
 8000678:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 800067a:	2b02      	cmp	r3, #2
 800067c:	d007      	beq.n	800068e <KeyLogic+0x37e>
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 800067e:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <KeyLogic+0x3ec>)
 8000680:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 8000682:	2b03      	cmp	r3, #3
 8000684:	d003      	beq.n	800068e <KeyLogic+0x37e>
							seqState == SEQ_NUMBER
 8000686:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <KeyLogic+0x3ec>)
 8000688:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 800068a:	2b04      	cmp	r3, #4
 800068c:	d117      	bne.n	80006be <KeyLogic+0x3ae>
							) {
						if (numberOfDigits < 6) {
 800068e:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <KeyLogic+0x3f0>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b05      	cmp	r3, #5
 8000694:	d820      	bhi.n	80006d8 <KeyLogic+0x3c8>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 8000696:	4b1b      	ldr	r3, [pc, #108]	@ (8000704 <KeyLogic+0x3f4>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	4613      	mov	r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4413      	add	r3, r2
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <KeyLogic+0x3f8>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4413      	add	r3, r2
 80006aa:	3b30      	subs	r3, #48	@ 0x30
 80006ac:	4a15      	ldr	r2, [pc, #84]	@ (8000704 <KeyLogic+0x3f4>)
 80006ae:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 80006b0:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <KeyLogic+0x3f0>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <KeyLogic+0x3f0>)
 80006ba:	701a      	strb	r2, [r3, #0]
						if (numberOfDigits < 6) {
 80006bc:	e00c      	b.n	80006d8 <KeyLogic+0x3c8>
						}

					}
					else{
						seqState = SEQ_NUMBER;
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <KeyLogic+0x3ec>)
 80006c0:	2204      	movs	r2, #4
 80006c2:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 80006c4:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <KeyLogic+0x3f8>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	3b30      	subs	r3, #48	@ 0x30
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <KeyLogic+0x3f4>)
 80006ce:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 80006d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <KeyLogic+0x3f0>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 80006d6:	e00a      	b.n	80006ee <KeyLogic+0x3de>
 80006d8:	e009      	b.n	80006ee <KeyLogic+0x3de>
					}
				}else{
					seqState = SEQ_IDLE;
 80006da:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <KeyLogic+0x3ec>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <KeyLogic+0x3f0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80006e6:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <KeyLogic+0x3f4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
				}
				break;
 80006ec:	e7ff      	b.n	80006ee <KeyLogic+0x3de>
 80006ee:	bf00      	nop
		}
	}
	keyPressed = 0xFF;
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <KeyLogic+0x3f8>)
 80006f2:	22ff      	movs	r2, #255	@ 0xff
 80006f4:	701a      	strb	r2, [r3, #0]
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000d4 	.word	0x200000d4
 8000700:	200000c8 	.word	0x200000c8
 8000704:	200000c4 	.word	0x200000c4
 8000708:	20000031 	.word	0x20000031

0800070c <KeyLogic_Action>:


void KeyLogic_Action() {
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	@ 0x30
 8000710:	af00      	add	r7, sp, #0
    char buffer[7];
    switch (seqState) {
 8000712:	4bab      	ldr	r3, [pc, #684]	@ (80009c0 <KeyLogic_Action+0x2b4>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b0c      	cmp	r3, #12
 8000718:	f200 81e0 	bhi.w	8000adc <KeyLogic_Action+0x3d0>
 800071c:	a201      	add	r2, pc, #4	@ (adr r2, 8000724 <KeyLogic_Action+0x18>)
 800071e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000722:	bf00      	nop
 8000724:	08000759 	.word	0x08000759
 8000728:	0800077f 	.word	0x0800077f
 800072c:	080007a5 	.word	0x080007a5
 8000730:	080007e3 	.word	0x080007e3
 8000734:	08000a9d 	.word	0x08000a9d
 8000738:	08000821 	.word	0x08000821
 800073c:	08000847 	.word	0x08000847
 8000740:	0800086d 	.word	0x0800086d
 8000744:	08000893 	.word	0x08000893
 8000748:	08000957 	.word	0x08000957
 800074c:	080008b9 	.word	0x080008b9
 8000750:	08000a51 	.word	0x08000a51
 8000754:	08000a77 	.word	0x08000a77
        case SEQ_IDLE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000758:	2300      	movs	r3, #0
 800075a:	4a9a      	ldr	r2, [pc, #616]	@ (80009c4 <KeyLogic_Action+0x2b8>)
 800075c:	2107      	movs	r1, #7
 800075e:	489a      	ldr	r0, [pc, #616]	@ (80009c8 <KeyLogic_Action+0x2bc>)
 8000760:	f002 fc2e 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000764:	2300      	movs	r3, #0
 8000766:	4a97      	ldr	r2, [pc, #604]	@ (80009c4 <KeyLogic_Action+0x2b8>)
 8000768:	2107      	movs	r1, #7
 800076a:	4898      	ldr	r0, [pc, #608]	@ (80009cc <KeyLogic_Action+0x2c0>)
 800076c:	f002 fc28 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000770:	2300      	movs	r3, #0
 8000772:	4a94      	ldr	r2, [pc, #592]	@ (80009c4 <KeyLogic_Action+0x2b8>)
 8000774:	2107      	movs	r1, #7
 8000776:	4896      	ldr	r0, [pc, #600]	@ (80009d0 <KeyLogic_Action+0x2c4>)
 8000778:	f002 fc22 	bl	8002fc0 <sniprintf>
            break;
 800077c:	e1c1      	b.n	8000b02 <KeyLogic_Action+0x3f6>
        case SEQ_DISP_PRICE:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "GIA   ");
 800077e:	4a95      	ldr	r2, [pc, #596]	@ (80009d4 <KeyLogic_Action+0x2c8>)
 8000780:	2107      	movs	r1, #7
 8000782:	4891      	ldr	r0, [pc, #580]	@ (80009c8 <KeyLogic_Action+0x2bc>)
 8000784:	f002 fc1c 	bl	8002fc0 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", currPrice);
 8000788:	4b93      	ldr	r3, [pc, #588]	@ (80009d8 <KeyLogic_Action+0x2cc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a93      	ldr	r2, [pc, #588]	@ (80009dc <KeyLogic_Action+0x2d0>)
 800078e:	2107      	movs	r1, #7
 8000790:	488e      	ldr	r0, [pc, #568]	@ (80009cc <KeyLogic_Action+0x2c0>)
 8000792:	f002 fc15 	bl	8002fc0 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000796:	2300      	movs	r3, #0
 8000798:	4a8a      	ldr	r2, [pc, #552]	@ (80009c4 <KeyLogic_Action+0x2b8>)
 800079a:	2107      	movs	r1, #7
 800079c:	488c      	ldr	r0, [pc, #560]	@ (80009d0 <KeyLogic_Action+0x2c4>)
 800079e:	f002 fc0f 	bl	8002fc0 <sniprintf>
			break;
 80007a2:	e1ae      	b.n	8000b02 <KeyLogic_Action+0x3f6>
        case SEQ_ENTER_OLD_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 80007a4:	4b8e      	ldr	r3, [pc, #568]	@ (80009e0 <KeyLogic_Action+0x2d4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f107 0020 	add.w	r0, r7, #32
 80007ac:	4a8b      	ldr	r2, [pc, #556]	@ (80009dc <KeyLogic_Action+0x2d0>)
 80007ae:	2107      	movs	r1, #7
 80007b0:	f002 fc06 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	4a8a      	ldr	r2, [pc, #552]	@ (80009e4 <KeyLogic_Action+0x2d8>)
 80007ba:	2107      	movs	r1, #7
 80007bc:	4882      	ldr	r0, [pc, #520]	@ (80009c8 <KeyLogic_Action+0x2bc>)
 80007be:	f002 fbff 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "0L0 ");
 80007c2:	4a89      	ldr	r2, [pc, #548]	@ (80009e8 <KeyLogic_Action+0x2dc>)
 80007c4:	2107      	movs	r1, #7
 80007c6:	4881      	ldr	r0, [pc, #516]	@ (80009cc <KeyLogic_Action+0x2c0>)
 80007c8:	f002 fbfa 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80007cc:	2300      	movs	r3, #0
 80007ce:	4a7d      	ldr	r2, [pc, #500]	@ (80009c4 <KeyLogic_Action+0x2b8>)
 80007d0:	2107      	movs	r1, #7
 80007d2:	487f      	ldr	r0, [pc, #508]	@ (80009d0 <KeyLogic_Action+0x2c4>)
 80007d4:	f002 fbf4 	bl	8002fc0 <sniprintf>
            LEDPointFlag = -1;
 80007d8:	4b84      	ldr	r3, [pc, #528]	@ (80009ec <KeyLogic_Action+0x2e0>)
 80007da:	f04f 32ff 	mov.w	r2, #4294967295
 80007de:	601a      	str	r2, [r3, #0]
            break;
 80007e0:	e18f      	b.n	8000b02 <KeyLogic_Action+0x3f6>
        case SEQ_ENTER_NEW_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 80007e2:	4b7f      	ldr	r3, [pc, #508]	@ (80009e0 <KeyLogic_Action+0x2d4>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f107 0020 	add.w	r0, r7, #32
 80007ea:	4a7c      	ldr	r2, [pc, #496]	@ (80009dc <KeyLogic_Action+0x2d0>)
 80007ec:	2107      	movs	r1, #7
 80007ee:	f002 fbe7 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 80007f2:	f107 0320 	add.w	r3, r7, #32
 80007f6:	4a7b      	ldr	r2, [pc, #492]	@ (80009e4 <KeyLogic_Action+0x2d8>)
 80007f8:	2107      	movs	r1, #7
 80007fa:	4873      	ldr	r0, [pc, #460]	@ (80009c8 <KeyLogic_Action+0x2bc>)
 80007fc:	f002 fbe0 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000800:	2300      	movs	r3, #0
 8000802:	4a70      	ldr	r2, [pc, #448]	@ (80009c4 <KeyLogic_Action+0x2b8>)
 8000804:	2107      	movs	r1, #7
 8000806:	4871      	ldr	r0, [pc, #452]	@ (80009cc <KeyLogic_Action+0x2c0>)
 8000808:	f002 fbda 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " NEUU ");
 800080c:	4a78      	ldr	r2, [pc, #480]	@ (80009f0 <KeyLogic_Action+0x2e4>)
 800080e:	2107      	movs	r1, #7
 8000810:	486f      	ldr	r0, [pc, #444]	@ (80009d0 <KeyLogic_Action+0x2c4>)
 8000812:	f002 fbd5 	bl	8002fc0 <sniprintf>
            LEDPointFlag = -1;
 8000816:	4b75      	ldr	r3, [pc, #468]	@ (80009ec <KeyLogic_Action+0x2e0>)
 8000818:	f04f 32ff 	mov.w	r2, #4294967295
 800081c:	601a      	str	r2, [r3, #0]
            break;
 800081e:	e170      	b.n	8000b02 <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_P:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8000820:	4b6f      	ldr	r3, [pc, #444]	@ (80009e0 <KeyLogic_Action+0x2d4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a6d      	ldr	r2, [pc, #436]	@ (80009dc <KeyLogic_Action+0x2d0>)
 8000826:	2107      	movs	r1, #7
 8000828:	4867      	ldr	r0, [pc, #412]	@ (80009c8 <KeyLogic_Action+0x2bc>)
 800082a:	f002 fbc9 	bl	8002fc0 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800082e:	2300      	movs	r3, #0
 8000830:	4a64      	ldr	r2, [pc, #400]	@ (80009c4 <KeyLogic_Action+0x2b8>)
 8000832:	2107      	movs	r1, #7
 8000834:	4865      	ldr	r0, [pc, #404]	@ (80009cc <KeyLogic_Action+0x2c0>)
 8000836:	f002 fbc3 	bl	8002fc0 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P     ");
 800083a:	4a6e      	ldr	r2, [pc, #440]	@ (80009f4 <KeyLogic_Action+0x2e8>)
 800083c:	2107      	movs	r1, #7
 800083e:	4864      	ldr	r0, [pc, #400]	@ (80009d0 <KeyLogic_Action+0x2c4>)
 8000840:	f002 fbbe 	bl	8002fc0 <sniprintf>
			break;
 8000844:	e15d      	b.n	8000b02 <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_P_NUM:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8000846:	4b66      	ldr	r3, [pc, #408]	@ (80009e0 <KeyLogic_Action+0x2d4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a64      	ldr	r2, [pc, #400]	@ (80009dc <KeyLogic_Action+0x2d0>)
 800084c:	2107      	movs	r1, #7
 800084e:	485e      	ldr	r0, [pc, #376]	@ (80009c8 <KeyLogic_Action+0x2bc>)
 8000850:	f002 fbb6 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000854:	2300      	movs	r3, #0
 8000856:	4a5b      	ldr	r2, [pc, #364]	@ (80009c4 <KeyLogic_Action+0x2b8>)
 8000858:	2107      	movs	r1, #7
 800085a:	485c      	ldr	r0, [pc, #368]	@ (80009cc <KeyLogic_Action+0x2c0>)
 800085c:	f002 fbb0 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P88888");
 8000860:	4a65      	ldr	r2, [pc, #404]	@ (80009f8 <KeyLogic_Action+0x2ec>)
 8000862:	2107      	movs	r1, #7
 8000864:	485a      	ldr	r0, [pc, #360]	@ (80009d0 <KeyLogic_Action+0x2c4>)
 8000866:	f002 fbab 	bl	8002fc0 <sniprintf>
            break;
 800086a:	e14a      	b.n	8000b02 <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_P_PSWRD_SETPRICE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 800086c:	4b5c      	ldr	r3, [pc, #368]	@ (80009e0 <KeyLogic_Action+0x2d4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a5a      	ldr	r2, [pc, #360]	@ (80009dc <KeyLogic_Action+0x2d0>)
 8000872:	2107      	movs	r1, #7
 8000874:	4854      	ldr	r0, [pc, #336]	@ (80009c8 <KeyLogic_Action+0x2bc>)
 8000876:	f002 fba3 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800087a:	2300      	movs	r3, #0
 800087c:	4a51      	ldr	r2, [pc, #324]	@ (80009c4 <KeyLogic_Action+0x2b8>)
 800087e:	2107      	movs	r1, #7
 8000880:	4852      	ldr	r0, [pc, #328]	@ (80009cc <KeyLogic_Action+0x2c0>)
 8000882:	f002 fb9d 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "GIA   ");
 8000886:	4a53      	ldr	r2, [pc, #332]	@ (80009d4 <KeyLogic_Action+0x2c8>)
 8000888:	2107      	movs	r1, #7
 800088a:	4851      	ldr	r0, [pc, #324]	@ (80009d0 <KeyLogic_Action+0x2c4>)
 800088c:	f002 fb98 	bl	8002fc0 <sniprintf>
            break;
 8000890:	e137      	b.n	8000b02 <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_T:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000892:	2300      	movs	r3, #0
 8000894:	4a4b      	ldr	r2, [pc, #300]	@ (80009c4 <KeyLogic_Action+0x2b8>)
 8000896:	2107      	movs	r1, #7
 8000898:	484b      	ldr	r0, [pc, #300]	@ (80009c8 <KeyLogic_Action+0x2bc>)
 800089a:	f002 fb91 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800089e:	2300      	movs	r3, #0
 80008a0:	4a48      	ldr	r2, [pc, #288]	@ (80009c4 <KeyLogic_Action+0x2b8>)
 80008a2:	2107      	movs	r1, #7
 80008a4:	4849      	ldr	r0, [pc, #292]	@ (80009cc <KeyLogic_Action+0x2c0>)
 80008a6:	f002 fb8b 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 999999);
 80008aa:	4b54      	ldr	r3, [pc, #336]	@ (80009fc <KeyLogic_Action+0x2f0>)
 80008ac:	4a45      	ldr	r2, [pc, #276]	@ (80009c4 <KeyLogic_Action+0x2b8>)
 80008ae:	2107      	movs	r1, #7
 80008b0:	4847      	ldr	r0, [pc, #284]	@ (80009d0 <KeyLogic_Action+0x2c4>)
 80008b2:	f002 fb85 	bl	8002fc0 <sniprintf>
            break;
 80008b6:	e124      	b.n	8000b02 <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_T_$:
        	 // Format the total liters into two parts
			formatTotalLitersShift(totalLitersShift, &row1, &row2);
 80008b8:	4b51      	ldr	r3, [pc, #324]	@ (8000a00 <KeyLogic_Action+0x2f4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a51      	ldr	r2, [pc, #324]	@ (8000a04 <KeyLogic_Action+0x2f8>)
 80008be:	4952      	ldr	r1, [pc, #328]	@ (8000a08 <KeyLogic_Action+0x2fc>)
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fced 	bl	80002a0 <formatTotalLitersShift>

			// Ensure the combined string fits into the buffer
			char row1StrShift[7]; // Buffer to hold formatted row1 string
			snprintf(row1StrShift, sizeof(row1StrShift), "%06ld", row1);
 80008c6:	4b50      	ldr	r3, [pc, #320]	@ (8000a08 <KeyLogic_Action+0x2fc>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f107 0018 	add.w	r0, r7, #24
 80008ce:	4a43      	ldr	r2, [pc, #268]	@ (80009dc <KeyLogic_Action+0x2d0>)
 80008d0:	2107      	movs	r1, #7
 80008d2:	f002 fb75 	bl	8002fc0 <sniprintf>

			// Combine "L.. " with the last two digits of row1
			char combinedStrShift[8]; // Buffer to hold combined string "L.. " and last two digits of row1
			snprintf(combinedStrShift, sizeof(combinedStrShift), "SH.%04ld", row1 % 10000); // Extract last two digits of row1
 80008d6:	4b4c      	ldr	r3, [pc, #304]	@ (8000a08 <KeyLogic_Action+0x2fc>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	4b4c      	ldr	r3, [pc, #304]	@ (8000a0c <KeyLogic_Action+0x300>)
 80008dc:	fba3 1302 	umull	r1, r3, r3, r2
 80008e0:	0b5b      	lsrs	r3, r3, #13
 80008e2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80008e6:	fb01 f303 	mul.w	r3, r1, r3
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	f107 0010 	add.w	r0, r7, #16
 80008f0:	4a47      	ldr	r2, [pc, #284]	@ (8000a10 <KeyLogic_Action+0x304>)
 80008f2:	2108      	movs	r1, #8
 80008f4:	f002 fb64 	bl	8002fc0 <sniprintf>

			// Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
			for (int i = 0; i < 6; ++i) {
 80008f8:	2300      	movs	r3, #0
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008fc:	e01b      	b.n	8000936 <KeyLogic_Action+0x22a>
				if (i < strlen(combinedStrShift)) {
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fc22 	bl	800014c <strlen>
 8000908:	4602      	mov	r2, r0
 800090a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800090c:	429a      	cmp	r2, r3
 800090e:	d90a      	bls.n	8000926 <KeyLogic_Action+0x21a>
					SevenSegBuffer[0][i] = combinedStrShift[i];
 8000910:	f107 0210 	add.w	r2, r7, #16
 8000914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000916:	4413      	add	r3, r2
 8000918:	7819      	ldrb	r1, [r3, #0]
 800091a:	4a2b      	ldr	r2, [pc, #172]	@ (80009c8 <KeyLogic_Action+0x2bc>)
 800091c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800091e:	4413      	add	r3, r2
 8000920:	460a      	mov	r2, r1
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	e004      	b.n	8000930 <KeyLogic_Action+0x224>
				} else {
					SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8000926:	4a28      	ldr	r2, [pc, #160]	@ (80009c8 <KeyLogic_Action+0x2bc>)
 8000928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800092a:	4413      	add	r3, r2
 800092c:	2220      	movs	r2, #32
 800092e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; ++i) {
 8000930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000932:	3301      	adds	r3, #1
 8000934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000938:	2b05      	cmp	r3, #5
 800093a:	dde0      	ble.n	80008fe <KeyLogic_Action+0x1f2>
				}
			}
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 800093c:	4b31      	ldr	r3, [pc, #196]	@ (8000a04 <KeyLogic_Action+0x2f8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a26      	ldr	r2, [pc, #152]	@ (80009dc <KeyLogic_Action+0x2d0>)
 8000942:	2107      	movs	r1, #7
 8000944:	4821      	ldr	r0, [pc, #132]	@ (80009cc <KeyLogic_Action+0x2c0>)
 8000946:	f002 fb3b 	bl	8002fc0 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SHIFT ");
 800094a:	4a32      	ldr	r2, [pc, #200]	@ (8000a14 <KeyLogic_Action+0x308>)
 800094c:	2107      	movs	r1, #7
 800094e:	4820      	ldr	r0, [pc, #128]	@ (80009d0 <KeyLogic_Action+0x2c4>)
 8000950:	f002 fb36 	bl	8002fc0 <sniprintf>

            break;
 8000954:	e0d5      	b.n	8000b02 <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_T_L:
            // Format the total liters into two parts
            formatTotalLiters(totalLiters, &row1, &row2);
 8000956:	4b30      	ldr	r3, [pc, #192]	@ (8000a18 <KeyLogic_Action+0x30c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a2a      	ldr	r2, [pc, #168]	@ (8000a04 <KeyLogic_Action+0x2f8>)
 800095c:	492a      	ldr	r1, [pc, #168]	@ (8000a08 <KeyLogic_Action+0x2fc>)
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fc52 	bl	8000208 <formatTotalLiters>

            // Ensure the combined string fits into the buffer
            char row1Str[7]; // Buffer to hold formatted row1 string
            snprintf(row1Str, sizeof(row1Str), "%06ld", row1);
 8000964:	4b28      	ldr	r3, [pc, #160]	@ (8000a08 <KeyLogic_Action+0x2fc>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f107 0008 	add.w	r0, r7, #8
 800096c:	4a1b      	ldr	r2, [pc, #108]	@ (80009dc <KeyLogic_Action+0x2d0>)
 800096e:	2107      	movs	r1, #7
 8000970:	f002 fb26 	bl	8002fc0 <sniprintf>

            // Combine "L.. " with the last two digits of row1
            char combinedStr[8]; // Buffer to hold combined string "L.. " and last two digits of row1
            snprintf(combinedStr, sizeof(combinedStr), "L.%04ld", row1 % 10000); // Extract last two digits of row1
 8000974:	4b24      	ldr	r3, [pc, #144]	@ (8000a08 <KeyLogic_Action+0x2fc>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <KeyLogic_Action+0x300>)
 800097a:	fba3 1302 	umull	r1, r3, r3, r2
 800097e:	0b5b      	lsrs	r3, r3, #13
 8000980:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000984:	fb01 f303 	mul.w	r3, r1, r3
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	4638      	mov	r0, r7
 800098c:	4a23      	ldr	r2, [pc, #140]	@ (8000a1c <KeyLogic_Action+0x310>)
 800098e:	2108      	movs	r1, #8
 8000990:	f002 fb16 	bl	8002fc0 <sniprintf>

            // Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
            for (int i = 0; i < 6; ++i) {
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000998:	e04a      	b.n	8000a30 <KeyLogic_Action+0x324>
                if (i < strlen(combinedStr)) {
 800099a:	463b      	mov	r3, r7
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fbd5 	bl	800014c <strlen>
 80009a2:	4602      	mov	r2, r0
 80009a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d93a      	bls.n	8000a20 <KeyLogic_Action+0x314>
                    SevenSegBuffer[0][i] = combinedStr[i];
 80009aa:	463a      	mov	r2, r7
 80009ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ae:	4413      	add	r3, r2
 80009b0:	7819      	ldrb	r1, [r3, #0]
 80009b2:	4a05      	ldr	r2, [pc, #20]	@ (80009c8 <KeyLogic_Action+0x2bc>)
 80009b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009b6:	4413      	add	r3, r2
 80009b8:	460a      	mov	r2, r1
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	e035      	b.n	8000a2a <KeyLogic_Action+0x31e>
 80009be:	bf00      	nop
 80009c0:	200000d4 	.word	0x200000d4
 80009c4:	08003960 	.word	0x08003960
 80009c8:	2000001c 	.word	0x2000001c
 80009cc:	20000023 	.word	0x20000023
 80009d0:	2000002a 	.word	0x2000002a
 80009d4:	08003968 	.word	0x08003968
 80009d8:	20000040 	.word	0x20000040
 80009dc:	08003970 	.word	0x08003970
 80009e0:	200000c4 	.word	0x200000c4
 80009e4:	08003978 	.word	0x08003978
 80009e8:	0800397c 	.word	0x0800397c
 80009ec:	20000044 	.word	0x20000044
 80009f0:	08003984 	.word	0x08003984
 80009f4:	0800398c 	.word	0x0800398c
 80009f8:	08003994 	.word	0x08003994
 80009fc:	000f423f 	.word	0x000f423f
 8000a00:	2000003c 	.word	0x2000003c
 8000a04:	200000d0 	.word	0x200000d0
 8000a08:	200000cc 	.word	0x200000cc
 8000a0c:	d1b71759 	.word	0xd1b71759
 8000a10:	0800399c 	.word	0x0800399c
 8000a14:	080039a8 	.word	0x080039a8
 8000a18:	20000038 	.word	0x20000038
 8000a1c:	080039b0 	.word	0x080039b0
                } else {
                    SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8000a20:	4a3a      	ldr	r2, [pc, #232]	@ (8000b0c <KeyLogic_Action+0x400>)
 8000a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a24:	4413      	add	r3, r2
 8000a26:	2220      	movs	r2, #32
 8000a28:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; ++i) {
 8000a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a32:	2b05      	cmp	r3, #5
 8000a34:	ddb1      	ble.n	800099a <KeyLogic_Action+0x28e>
                }
            }


            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8000a36:	4b36      	ldr	r3, [pc, #216]	@ (8000b10 <KeyLogic_Action+0x404>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a36      	ldr	r2, [pc, #216]	@ (8000b14 <KeyLogic_Action+0x408>)
 8000a3c:	2107      	movs	r1, #7
 8000a3e:	4836      	ldr	r0, [pc, #216]	@ (8000b18 <KeyLogic_Action+0x40c>)
 8000a40:	f002 fabe 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "TOTAL ");
 8000a44:	4a35      	ldr	r2, [pc, #212]	@ (8000b1c <KeyLogic_Action+0x410>)
 8000a46:	2107      	movs	r1, #7
 8000a48:	4835      	ldr	r0, [pc, #212]	@ (8000b20 <KeyLogic_Action+0x414>)
 8000a4a:	f002 fab9 	bl	8002fc0 <sniprintf>



            break;
 8000a4e:	e058      	b.n	8000b02 <KeyLogic_Action+0x3f6>

        case SEQ_PRESSED_T_F3:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 333333);
 8000a50:	4b34      	ldr	r3, [pc, #208]	@ (8000b24 <KeyLogic_Action+0x418>)
 8000a52:	4a35      	ldr	r2, [pc, #212]	@ (8000b28 <KeyLogic_Action+0x41c>)
 8000a54:	2107      	movs	r1, #7
 8000a56:	482d      	ldr	r0, [pc, #180]	@ (8000b0c <KeyLogic_Action+0x400>)
 8000a58:	f002 fab2 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	4a32      	ldr	r2, [pc, #200]	@ (8000b28 <KeyLogic_Action+0x41c>)
 8000a60:	2107      	movs	r1, #7
 8000a62:	482d      	ldr	r0, [pc, #180]	@ (8000b18 <KeyLogic_Action+0x40c>)
 8000a64:	f002 faac 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000a68:	2300      	movs	r3, #0
 8000a6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b28 <KeyLogic_Action+0x41c>)
 8000a6c:	2107      	movs	r1, #7
 8000a6e:	482c      	ldr	r0, [pc, #176]	@ (8000b20 <KeyLogic_Action+0x414>)
 8000a70:	f002 faa6 	bl	8002fc0 <sniprintf>
            break;
 8000a74:	e045      	b.n	8000b02 <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_T_F4:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 444444);
 8000a76:	4b2d      	ldr	r3, [pc, #180]	@ (8000b2c <KeyLogic_Action+0x420>)
 8000a78:	4a2b      	ldr	r2, [pc, #172]	@ (8000b28 <KeyLogic_Action+0x41c>)
 8000a7a:	2107      	movs	r1, #7
 8000a7c:	4823      	ldr	r0, [pc, #140]	@ (8000b0c <KeyLogic_Action+0x400>)
 8000a7e:	f002 fa9f 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000a82:	2300      	movs	r3, #0
 8000a84:	4a28      	ldr	r2, [pc, #160]	@ (8000b28 <KeyLogic_Action+0x41c>)
 8000a86:	2107      	movs	r1, #7
 8000a88:	4823      	ldr	r0, [pc, #140]	@ (8000b18 <KeyLogic_Action+0x40c>)
 8000a8a:	f002 fa99 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000a8e:	2300      	movs	r3, #0
 8000a90:	4a25      	ldr	r2, [pc, #148]	@ (8000b28 <KeyLogic_Action+0x41c>)
 8000a92:	2107      	movs	r1, #7
 8000a94:	4822      	ldr	r0, [pc, #136]	@ (8000b20 <KeyLogic_Action+0x414>)
 8000a96:	f002 fa93 	bl	8002fc0 <sniprintf>
            break;
 8000a9a:	e032      	b.n	8000b02 <KeyLogic_Action+0x3f6>
        case SEQ_NUMBER:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8000a9c:	4b24      	ldr	r3, [pc, #144]	@ (8000b30 <KeyLogic_Action+0x424>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f107 0020 	add.w	r0, r7, #32
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b14 <KeyLogic_Action+0x408>)
 8000aa6:	2107      	movs	r1, #7
 8000aa8:	f002 fa8a 	bl	8002fc0 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8000aac:	f107 0320 	add.w	r3, r7, #32
 8000ab0:	4a20      	ldr	r2, [pc, #128]	@ (8000b34 <KeyLogic_Action+0x428>)
 8000ab2:	2107      	movs	r1, #7
 8000ab4:	4815      	ldr	r0, [pc, #84]	@ (8000b0c <KeyLogic_Action+0x400>)
 8000ab6:	f002 fa83 	bl	8002fc0 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000aba:	2300      	movs	r3, #0
 8000abc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b28 <KeyLogic_Action+0x41c>)
 8000abe:	2107      	movs	r1, #7
 8000ac0:	4815      	ldr	r0, [pc, #84]	@ (8000b18 <KeyLogic_Action+0x40c>)
 8000ac2:	f002 fa7d 	bl	8002fc0 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	4a17      	ldr	r2, [pc, #92]	@ (8000b28 <KeyLogic_Action+0x41c>)
 8000aca:	2107      	movs	r1, #7
 8000acc:	4814      	ldr	r0, [pc, #80]	@ (8000b20 <KeyLogic_Action+0x414>)
 8000ace:	f002 fa77 	bl	8002fc0 <sniprintf>
			LEDPointFlag = -1;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <KeyLogic_Action+0x42c>)
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	601a      	str	r2, [r3, #0]
			break;
 8000ada:	e012      	b.n	8000b02 <KeyLogic_Action+0x3f6>
        default:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000adc:	2300      	movs	r3, #0
 8000ade:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <KeyLogic_Action+0x41c>)
 8000ae0:	2107      	movs	r1, #7
 8000ae2:	480a      	ldr	r0, [pc, #40]	@ (8000b0c <KeyLogic_Action+0x400>)
 8000ae4:	f002 fa6c 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4a0f      	ldr	r2, [pc, #60]	@ (8000b28 <KeyLogic_Action+0x41c>)
 8000aec:	2107      	movs	r1, #7
 8000aee:	480a      	ldr	r0, [pc, #40]	@ (8000b18 <KeyLogic_Action+0x40c>)
 8000af0:	f002 fa66 	bl	8002fc0 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000af4:	2300      	movs	r3, #0
 8000af6:	4a0c      	ldr	r2, [pc, #48]	@ (8000b28 <KeyLogic_Action+0x41c>)
 8000af8:	2107      	movs	r1, #7
 8000afa:	4809      	ldr	r0, [pc, #36]	@ (8000b20 <KeyLogic_Action+0x414>)
 8000afc:	f002 fa60 	bl	8002fc0 <sniprintf>
            break;
 8000b00:	bf00      	nop
    }
}
 8000b02:	bf00      	nop
 8000b04:	3730      	adds	r7, #48	@ 0x30
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2000001c 	.word	0x2000001c
 8000b10:	200000d0 	.word	0x200000d0
 8000b14:	08003970 	.word	0x08003970
 8000b18:	20000023 	.word	0x20000023
 8000b1c:	080039b8 	.word	0x080039b8
 8000b20:	2000002a 	.word	0x2000002a
 8000b24:	00051615 	.word	0x00051615
 8000b28:	08003960 	.word	0x08003960
 8000b2c:	0006c81c 	.word	0x0006c81c
 8000b30:	200000c4 	.word	0x200000c4
 8000b34:	08003978 	.word	0x08003978
 8000b38:	20000044 	.word	0x20000044

08000b3c <CharToSegment>:
//uint32_t SevenSegBuffer[3]={123456, 654321, 987654};
char SevenSegBuffer[3][7] = {"123456", "654321", "987654"};
uint8_t displayBuffer[5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;

uint8_t CharToSegment(char c) {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b2f      	cmp	r3, #47	@ 0x2f
 8000b4a:	d907      	bls.n	8000b5c <CharToSegment+0x20>
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b39      	cmp	r3, #57	@ 0x39
 8000b50:	d804      	bhi.n	8000b5c <CharToSegment+0x20>
        return digitMapWithOutDP[c - '0'];
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	3b30      	subs	r3, #48	@ 0x30
 8000b56:	4a31      	ldr	r2, [pc, #196]	@ (8000c1c <CharToSegment+0xe0>)
 8000b58:	5cd3      	ldrb	r3, [r2, r3]
 8000b5a:	e05a      	b.n	8000c12 <CharToSegment+0xd6>
    } else if (c == 'L') {
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	2b4c      	cmp	r3, #76	@ 0x4c
 8000b60:	d102      	bne.n	8000b68 <CharToSegment+0x2c>
        return specialCharMap[0];
 8000b62:	4b2f      	ldr	r3, [pc, #188]	@ (8000c20 <CharToSegment+0xe4>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	e054      	b.n	8000c12 <CharToSegment+0xd6>
    } else if (c == '.') {
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b6c:	d102      	bne.n	8000b74 <CharToSegment+0x38>
        return specialCharMap[1];
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c20 <CharToSegment+0xe4>)
 8000b70:	785b      	ldrb	r3, [r3, #1]
 8000b72:	e04e      	b.n	8000c12 <CharToSegment+0xd6>
    } else if (c == 'T') {
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	2b54      	cmp	r3, #84	@ 0x54
 8000b78:	d102      	bne.n	8000b80 <CharToSegment+0x44>
        return specialCharMap[2];
 8000b7a:	4b29      	ldr	r3, [pc, #164]	@ (8000c20 <CharToSegment+0xe4>)
 8000b7c:	789b      	ldrb	r3, [r3, #2]
 8000b7e:	e048      	b.n	8000c12 <CharToSegment+0xd6>
    } else if (c == 'O') {
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b4f      	cmp	r3, #79	@ 0x4f
 8000b84:	d102      	bne.n	8000b8c <CharToSegment+0x50>
        return specialCharMap[3];
 8000b86:	4b26      	ldr	r3, [pc, #152]	@ (8000c20 <CharToSegment+0xe4>)
 8000b88:	78db      	ldrb	r3, [r3, #3]
 8000b8a:	e042      	b.n	8000c12 <CharToSegment+0xd6>
    } else if (c == 'A') {
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b41      	cmp	r3, #65	@ 0x41
 8000b90:	d102      	bne.n	8000b98 <CharToSegment+0x5c>
        return specialCharMap[4];
 8000b92:	4b23      	ldr	r3, [pc, #140]	@ (8000c20 <CharToSegment+0xe4>)
 8000b94:	791b      	ldrb	r3, [r3, #4]
 8000b96:	e03c      	b.n	8000c12 <CharToSegment+0xd6>
    } else if (c == 'S') {
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2b53      	cmp	r3, #83	@ 0x53
 8000b9c:	d102      	bne.n	8000ba4 <CharToSegment+0x68>
        return specialCharMap[5];
 8000b9e:	4b20      	ldr	r3, [pc, #128]	@ (8000c20 <CharToSegment+0xe4>)
 8000ba0:	795b      	ldrb	r3, [r3, #5]
 8000ba2:	e036      	b.n	8000c12 <CharToSegment+0xd6>
    } else if (c == 'H') {
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	2b48      	cmp	r3, #72	@ 0x48
 8000ba8:	d102      	bne.n	8000bb0 <CharToSegment+0x74>
        return specialCharMap[6];
 8000baa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <CharToSegment+0xe4>)
 8000bac:	799b      	ldrb	r3, [r3, #6]
 8000bae:	e030      	b.n	8000c12 <CharToSegment+0xd6>
    } else if (c == 'I') {
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	2b49      	cmp	r3, #73	@ 0x49
 8000bb4:	d102      	bne.n	8000bbc <CharToSegment+0x80>
        return specialCharMap[7];
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <CharToSegment+0xe4>)
 8000bb8:	79db      	ldrb	r3, [r3, #7]
 8000bba:	e02a      	b.n	8000c12 <CharToSegment+0xd6>
    } else if (c == 'F') {
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b46      	cmp	r3, #70	@ 0x46
 8000bc0:	d102      	bne.n	8000bc8 <CharToSegment+0x8c>
        return specialCharMap[8];
 8000bc2:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <CharToSegment+0xe4>)
 8000bc4:	7a1b      	ldrb	r3, [r3, #8]
 8000bc6:	e024      	b.n	8000c12 <CharToSegment+0xd6>
    } else if (c == 'G') {
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	2b47      	cmp	r3, #71	@ 0x47
 8000bcc:	d102      	bne.n	8000bd4 <CharToSegment+0x98>
        return specialCharMap[9];
 8000bce:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <CharToSegment+0xe4>)
 8000bd0:	7a5b      	ldrb	r3, [r3, #9]
 8000bd2:	e01e      	b.n	8000c12 <CharToSegment+0xd6>
    } else if (c == 'P') {
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2b50      	cmp	r3, #80	@ 0x50
 8000bd8:	d102      	bne.n	8000be0 <CharToSegment+0xa4>
        return specialCharMap[10];
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <CharToSegment+0xe4>)
 8000bdc:	7a9b      	ldrb	r3, [r3, #10]
 8000bde:	e018      	b.n	8000c12 <CharToSegment+0xd6>
    } else if (c == 'C') {
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	2b43      	cmp	r3, #67	@ 0x43
 8000be4:	d102      	bne.n	8000bec <CharToSegment+0xb0>
        return specialCharMap[11];
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <CharToSegment+0xe4>)
 8000be8:	7adb      	ldrb	r3, [r3, #11]
 8000bea:	e012      	b.n	8000c12 <CharToSegment+0xd6>
    } else if (c == 'E') {
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2b45      	cmp	r3, #69	@ 0x45
 8000bf0:	d102      	bne.n	8000bf8 <CharToSegment+0xbc>
        return specialCharMap[12];
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <CharToSegment+0xe4>)
 8000bf4:	7b1b      	ldrb	r3, [r3, #12]
 8000bf6:	e00c      	b.n	8000c12 <CharToSegment+0xd6>
    } else if (c == 'U') {
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	2b55      	cmp	r3, #85	@ 0x55
 8000bfc:	d102      	bne.n	8000c04 <CharToSegment+0xc8>
        return specialCharMap[13];
 8000bfe:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <CharToSegment+0xe4>)
 8000c00:	7b5b      	ldrb	r3, [r3, #13]
 8000c02:	e006      	b.n	8000c12 <CharToSegment+0xd6>
    } else if (c == 'N') {
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b4e      	cmp	r3, #78	@ 0x4e
 8000c08:	d102      	bne.n	8000c10 <CharToSegment+0xd4>
        return specialCharMap[14];
 8000c0a:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <CharToSegment+0xe4>)
 8000c0c:	7b9b      	ldrb	r3, [r3, #14]
 8000c0e:	e000      	b.n	8000c12 <CharToSegment+0xd6>
    } else {
        return 0b11111111; // Blank
 8000c10:	23ff      	movs	r3, #255	@ 0xff
    }
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	2000000c 	.word	0x2000000c

08000c24 <SevenSegLEDsHandler>:

uint8_t* SevenSegLEDsHandler(char buffer[3][7], uint8_t scan_state) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    for (int i = 0; i < 3; i++) {
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	e035      	b.n	8000ca2 <SevenSegLEDsHandler+0x7e>
        int len = strlen(buffer[i]);
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	1a9b      	subs	r3, r3, r2
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fa82 	bl	800014c <strlen>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	60bb      	str	r3, [r7, #8]
        if (scan_state < 6) {
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	2b05      	cmp	r3, #5
 8000c50:	d81f      	bhi.n	8000c92 <SevenSegLEDsHandler+0x6e>
            if (scan_state < len) {
 8000c52:	78fb      	ldrb	r3, [r7, #3]
 8000c54:	68ba      	ldr	r2, [r7, #8]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	dd15      	ble.n	8000c86 <SevenSegLEDsHandler+0x62>
                output[i] = CharToSegment(buffer[i][len - 1 - scan_state]);
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	1a9b      	subs	r3, r3, r2
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	441a      	add	r2, r3
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	1e59      	subs	r1, r3, #1
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	1acb      	subs	r3, r1, r3
 8000c6e:	5cd3      	ldrb	r3, [r2, r3]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff63 	bl	8000b3c <CharToSegment>
 8000c76:	4603      	mov	r3, r0
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb4 <SevenSegLEDsHandler+0x90>)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	460a      	mov	r2, r1
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	e00a      	b.n	8000c9c <SevenSegLEDsHandler+0x78>
            } else {
                output[i] = 0b11111111; // Blank
 8000c86:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb4 <SevenSegLEDsHandler+0x90>)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	22ff      	movs	r2, #255	@ 0xff
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	e004      	b.n	8000c9c <SevenSegLEDsHandler+0x78>
            }
        } else {
            output[i] = 0b11111111; // Blank
 8000c92:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <SevenSegLEDsHandler+0x90>)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	22ff      	movs	r2, #255	@ 0xff
 8000c9a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	ddc6      	ble.n	8000c36 <SevenSegLEDsHandler+0x12>
        }
    }
    return output;
 8000ca8:	4b02      	ldr	r3, [pc, #8]	@ (8000cb4 <SevenSegLEDsHandler+0x90>)
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200000e0 	.word	0x200000e0

08000cb8 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(char buffer[3][7], uint8_t scan_state) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	70fb      	strb	r3, [r7, #3]
	uint8_t* curr_digit=SevenSegLEDsHandler(buffer,scan_state);
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ffab 	bl	8000c24 <SevenSegLEDsHandler>
 8000cce:	60b8      	str	r0, [r7, #8]
	uint8_t curr_scan;
	switch (scan_state) {
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	2b05      	cmp	r3, #5
 8000cd4:	d820      	bhi.n	8000d18 <UpdateDisplayBuffer+0x60>
 8000cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cdc <UpdateDisplayBuffer+0x24>)
 8000cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cdc:	08000cf5 	.word	0x08000cf5
 8000ce0:	08000cfb 	.word	0x08000cfb
 8000ce4:	08000d01 	.word	0x08000d01
 8000ce8:	08000d07 	.word	0x08000d07
 8000cec:	08000d0d 	.word	0x08000d0d
 8000cf0:	08000d13 	.word	0x08000d13
		case 0:
			curr_scan=0b00100000;
 8000cf4:	2320      	movs	r3, #32
 8000cf6:	73fb      	strb	r3, [r7, #15]
			break;
 8000cf8:	e011      	b.n	8000d1e <UpdateDisplayBuffer+0x66>
		case 1:
			curr_scan=0b00010000;
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	73fb      	strb	r3, [r7, #15]
			break;
 8000cfe:	e00e      	b.n	8000d1e <UpdateDisplayBuffer+0x66>
		case 2:
			curr_scan=0b00001000;
 8000d00:	2308      	movs	r3, #8
 8000d02:	73fb      	strb	r3, [r7, #15]
			break;
 8000d04:	e00b      	b.n	8000d1e <UpdateDisplayBuffer+0x66>
		case 3:
			curr_scan=0b00000100;
 8000d06:	2304      	movs	r3, #4
 8000d08:	73fb      	strb	r3, [r7, #15]
			break;
 8000d0a:	e008      	b.n	8000d1e <UpdateDisplayBuffer+0x66>
		case 4:
			curr_scan=0b00000010;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	73fb      	strb	r3, [r7, #15]
			break;
 8000d10:	e005      	b.n	8000d1e <UpdateDisplayBuffer+0x66>
		case 5:
			curr_scan=0b00000001;
 8000d12:	2301      	movs	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
			break;
 8000d16:	e002      	b.n	8000d1e <UpdateDisplayBuffer+0x66>
		default:
			curr_scan=0b00000001;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
			break;
 8000d1c:	bf00      	nop
	}
	if(LEDPointFlag >=0 && LEDPointFlag <=5){
 8000d1e:	4b22      	ldr	r3, [pc, #136]	@ (8000da8 <UpdateDisplayBuffer+0xf0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db2c      	blt.n	8000d80 <UpdateDisplayBuffer+0xc8>
 8000d26:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <UpdateDisplayBuffer+0xf0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b05      	cmp	r3, #5
 8000d2c:	dc28      	bgt.n	8000d80 <UpdateDisplayBuffer+0xc8>
	    	if (scan_state == LEDPointFlag){
 8000d2e:	78fa      	ldrb	r2, [r7, #3]
 8000d30:	4b1d      	ldr	r3, [pc, #116]	@ (8000da8 <UpdateDisplayBuffer+0xf0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d113      	bne.n	8000d60 <UpdateDisplayBuffer+0xa8>
				displayBuffer[0] = curr_scan;
 8000d38:	4a1c      	ldr	r2, [pc, #112]	@ (8000dac <UpdateDisplayBuffer+0xf4>)
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	7013      	strb	r3, [r2, #0]
				displayBuffer[1] = curr_digit[2];
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	789a      	ldrb	r2, [r3, #2]
 8000d42:	4b1a      	ldr	r3, [pc, #104]	@ (8000dac <UpdateDisplayBuffer+0xf4>)
 8000d44:	705a      	strb	r2, [r3, #1]
				displayBuffer[2] = curr_digit[1] & 0b01111111; //Add point to second row
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <UpdateDisplayBuffer+0xf4>)
 8000d54:	709a      	strb	r2, [r3, #2]
				displayBuffer[3] = curr_digit[0];
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	781a      	ldrb	r2, [r3, #0]
 8000d5a:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <UpdateDisplayBuffer+0xf4>)
 8000d5c:	70da      	strb	r2, [r3, #3]
	    	if (scan_state == LEDPointFlag){
 8000d5e:	e01f      	b.n	8000da0 <UpdateDisplayBuffer+0xe8>
	    	}
	    	else
	    	{
	    		displayBuffer[0] = curr_scan;
 8000d60:	4a12      	ldr	r2, [pc, #72]	@ (8000dac <UpdateDisplayBuffer+0xf4>)
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	7013      	strb	r3, [r2, #0]
	    		displayBuffer[1] = curr_digit[2];
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	789a      	ldrb	r2, [r3, #2]
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <UpdateDisplayBuffer+0xf4>)
 8000d6c:	705a      	strb	r2, [r3, #1]
	    		displayBuffer[2] = curr_digit[1];
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	785a      	ldrb	r2, [r3, #1]
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <UpdateDisplayBuffer+0xf4>)
 8000d74:	709a      	strb	r2, [r3, #2]
	    		displayBuffer[3] = curr_digit[0];
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	781a      	ldrb	r2, [r3, #0]
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <UpdateDisplayBuffer+0xf4>)
 8000d7c:	70da      	strb	r2, [r3, #3]
	    	if (scan_state == LEDPointFlag){
 8000d7e:	e00f      	b.n	8000da0 <UpdateDisplayBuffer+0xe8>
	    	}
	    }
	    else
	    {
			displayBuffer[0] = curr_scan;
 8000d80:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <UpdateDisplayBuffer+0xf4>)
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	7013      	strb	r3, [r2, #0]
			displayBuffer[1] = curr_digit[2];
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	789a      	ldrb	r2, [r3, #2]
 8000d8a:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <UpdateDisplayBuffer+0xf4>)
 8000d8c:	705a      	strb	r2, [r3, #1]
			displayBuffer[2] = curr_digit[1];
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	785a      	ldrb	r2, [r3, #1]
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <UpdateDisplayBuffer+0xf4>)
 8000d94:	709a      	strb	r2, [r3, #2]
			displayBuffer[3] = curr_digit[0];
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	781a      	ldrb	r2, [r3, #0]
 8000d9a:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <UpdateDisplayBuffer+0xf4>)
 8000d9c:	70da      	strb	r2, [r3, #3]
	    }
}
 8000d9e:	bf00      	nop
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000044 	.word	0x20000044
 8000dac:	200000d8 	.word	0x200000d8

08000db0 <SevenSegLEDsScan>:

//
void SevenSegLEDsScan(){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
//	uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
	UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState);
 8000db4:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <SevenSegLEDsScan+0x40>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <SevenSegLEDsScan+0x44>)
 8000dbe:	f7ff ff7b 	bl	8000cb8 <UpdateDisplayBuffer>
	ShiftOut_SPI(displayBuffer, 4);
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <SevenSegLEDsScan+0x48>)
 8000dc6:	f000 f81b 	bl	8000e00 <ShiftOut_SPI>
//    currentBufferIndex = bufferIndex;  // Swap buffers
    SevenSegScanState = (SevenSegScanState + 1) % 6;
 8000dca:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <SevenSegLEDsScan+0x40>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <SevenSegLEDsScan+0x4c>)
 8000dd4:	fb83 3102 	smull	r3, r1, r3, r2
 8000dd8:	17d3      	asrs	r3, r2, #31
 8000dda:	1ac9      	subs	r1, r1, r3
 8000ddc:	460b      	mov	r3, r1
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	440b      	add	r3, r1
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	1ad1      	subs	r1, r2, r3
 8000de6:	b2ca      	uxtb	r2, r1
 8000de8:	4b01      	ldr	r3, [pc, #4]	@ (8000df0 <SevenSegLEDsScan+0x40>)
 8000dea:	701a      	strb	r2, [r3, #0]
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200000d5 	.word	0x200000d5
 8000df4:	2000001c 	.word	0x2000001c
 8000df8:	200000d8 	.word	0x200000d8
 8000dfc:	2aaaaaab 	.word	0x2aaaaaab

08000e00 <ShiftOut_SPI>:
 *      Author: clong
 */
#include "SPI_shift.h"

void ShiftOut_SPI(uint8_t *data, size_t size)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Pull STCP (Latch) low
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e10:	480a      	ldr	r0, [pc, #40]	@ (8000e3c <ShiftOut_SPI+0x3c>)
 8000e12:	f000 fe72 	bl	8001afa <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, 300); // Transmit data
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	4807      	ldr	r0, [pc, #28]	@ (8000e40 <ShiftOut_SPI+0x40>)
 8000e22:	f001 fae5 	bl	80023f0 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Pull STCP (Latch) high
 8000e26:	2201      	movs	r2, #1
 8000e28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e2c:	4803      	ldr	r0, [pc, #12]	@ (8000e3c <ShiftOut_SPI+0x3c>)
 8000e2e:	f000 fe64 	bl	8001afa <HAL_GPIO_WritePin>

}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40010c00 	.word	0x40010c00
 8000e40:	2000013c 	.word	0x2000013c

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f000 fb4c 	bl	80014e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f832 	bl	8000eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e50:	f000 f924 	bl	800109c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000e54:	f000 f8a0 	bl	8000f98 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000e58:	f000 f8d4 	bl	8001004 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000e5c:	f000 f866 	bl	8000f2c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e60:	4812      	ldr	r0, [pc, #72]	@ (8000eac <main+0x68>)
 8000e62:	f001 fcff 	bl	8002864 <HAL_TIM_Base_Start_IT>
  setTimer(0,100);
 8000e66:	2164      	movs	r1, #100	@ 0x64
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f000 facd 	bl	8001408 <setTimer>
  setTimer(1,100);
 8000e6e:	2164      	movs	r1, #100	@ 0x64
 8000e70:	2001      	movs	r0, #1
 8000e72:	f000 fac9 	bl	8001408 <setTimer>
  setTimer(2,100);
 8000e76:	2164      	movs	r1, #100	@ 0x64
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f000 fac5 	bl	8001408 <setTimer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {
	  KeyLogic();
 8000e7e:	f7ff fa47 	bl	8000310 <KeyLogic>
	  // TIMER 0 /////////////////////////////////////
	  if(timer_flag[0]==1){
 8000e82:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <main+0x6c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d105      	bne.n	8000e96 <main+0x52>

		  SevenSegLEDsScan();
 8000e8a:	f7ff ff91 	bl	8000db0 <SevenSegLEDsScan>
		  setTimer(0,5);
 8000e8e:	2105      	movs	r1, #5
 8000e90:	2000      	movs	r0, #0
 8000e92:	f000 fab9 	bl	8001408 <setTimer>
	  }

	  // TIMER 1 /////////////////////////////////////
	  if(timer_flag[1]==1){
 8000e96:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <main+0x6c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d1ef      	bne.n	8000e7e <main+0x3a>
		  KeyLogic_Action();
 8000e9e:	f7ff fc35 	bl	800070c <KeyLogic_Action>
		  setTimer(1,10);
 8000ea2:	210a      	movs	r1, #10
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f000 faaf 	bl	8001408 <setTimer>
	  KeyLogic();
 8000eaa:	e7e8      	b.n	8000e7e <main+0x3a>
 8000eac:	20000194 	.word	0x20000194
 8000eb0:	20000208 	.word	0x20000208

08000eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b090      	sub	sp, #64	@ 0x40
 8000eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eba:	f107 0318 	add.w	r3, r7, #24
 8000ebe:	2228      	movs	r2, #40	@ 0x28
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f002 f8b0 	bl	8003028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eda:	2301      	movs	r3, #1
 8000edc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ede:	2310      	movs	r3, #16
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee6:	f107 0318 	add.w	r3, r7, #24
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 fe1e 	bl	8001b2c <HAL_RCC_OscConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ef6:	f000 f94b 	bl	8001190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efa:	230f      	movs	r3, #15
 8000efc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 f88c 	bl	8002030 <HAL_RCC_ClockConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f1e:	f000 f937 	bl	8001190 <Error_Handler>
  }
}
 8000f22:	bf00      	nop
 8000f24:	3740      	adds	r7, #64	@ 0x40
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f30:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f32:	4a18      	ldr	r2, [pc, #96]	@ (8000f94 <MX_SPI1_Init+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f36:	4b16      	ldr	r3, [pc, #88]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f70:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f78:	220a      	movs	r2, #10
 8000f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f7c:	4804      	ldr	r0, [pc, #16]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f7e:	f001 f9b3 	bl	80022e8 <HAL_SPI_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f88:	f000 f902 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200000e4 	.word	0x200000e4
 8000f94:	40013000 	.word	0x40013000

08000f98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f9c:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <MX_SPI2_Init+0x64>)
 8000f9e:	4a18      	ldr	r2, [pc, #96]	@ (8001000 <MX_SPI2_Init+0x68>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <MX_SPI2_Init+0x64>)
 8000fa4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fa8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000faa:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <MX_SPI2_Init+0x64>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <MX_SPI2_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <MX_SPI2_Init+0x64>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <MX_SPI2_Init+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <MX_SPI2_Init+0x64>)
 8000fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fca:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <MX_SPI2_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <MX_SPI2_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <MX_SPI2_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fdc:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <MX_SPI2_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <MX_SPI2_Init+0x64>)
 8000fe4:	220a      	movs	r2, #10
 8000fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fe8:	4804      	ldr	r0, [pc, #16]	@ (8000ffc <MX_SPI2_Init+0x64>)
 8000fea:	f001 f97d 	bl	80022e8 <HAL_SPI_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ff4:	f000 f8cc 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	2000013c 	.word	0x2000013c
 8001000:	40003800 	.word	0x40003800

08001004 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001018:	463b      	mov	r3, r7
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001020:	4b1d      	ldr	r3, [pc, #116]	@ (8001098 <MX_TIM2_Init+0x94>)
 8001022:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001026:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001028:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <MX_TIM2_Init+0x94>)
 800102a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800102e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001030:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <MX_TIM2_Init+0x94>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001036:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <MX_TIM2_Init+0x94>)
 8001038:	2209      	movs	r2, #9
 800103a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103c:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <MX_TIM2_Init+0x94>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <MX_TIM2_Init+0x94>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001048:	4813      	ldr	r0, [pc, #76]	@ (8001098 <MX_TIM2_Init+0x94>)
 800104a:	f001 fbbb 	bl	80027c4 <HAL_TIM_Base_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001054:	f000 f89c 	bl	8001190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001058:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800105c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	4619      	mov	r1, r3
 8001064:	480c      	ldr	r0, [pc, #48]	@ (8001098 <MX_TIM2_Init+0x94>)
 8001066:	f001 fd57 	bl	8002b18 <HAL_TIM_ConfigClockSource>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001070:	f000 f88e 	bl	8001190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	@ (8001098 <MX_TIM2_Init+0x94>)
 8001082:	f001 ff2d 	bl	8002ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800108c:	f000 f880 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000194 	.word	0x20000194

0800109c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001170 <MX_GPIO_Init+0xd4>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001170 <MX_GPIO_Init+0xd4>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001170 <MX_GPIO_Init+0xd4>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c8:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <MX_GPIO_Init+0xd4>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a28      	ldr	r2, [pc, #160]	@ (8001170 <MX_GPIO_Init+0xd4>)
 80010ce:	f043 0308 	orr.w	r3, r3, #8
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b26      	ldr	r3, [pc, #152]	@ (8001170 <MX_GPIO_Init+0xd4>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2140      	movs	r1, #64	@ 0x40
 80010e4:	4823      	ldr	r0, [pc, #140]	@ (8001174 <MX_GPIO_Init+0xd8>)
 80010e6:	f000 fd08 	bl	8001afa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 80010ea:	2200      	movs	r2, #0
 80010ec:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 80010f0:	4821      	ldr	r0, [pc, #132]	@ (8001178 <MX_GPIO_Init+0xdc>)
 80010f2:	f000 fd02 	bl	8001afa <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Latch_SPI1_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin;
 80010f6:	2340      	movs	r3, #64	@ 0x40
 80010f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2302      	movs	r3, #2
 8001104:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI1_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	4619      	mov	r1, r3
 800110c:	4819      	ldr	r0, [pc, #100]	@ (8001174 <MX_GPIO_Init+0xd8>)
 800110e:	f000 fb59 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001112:	231f      	movs	r3, #31
 8001114:	60bb      	str	r3, [r7, #8]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800111a:	2302      	movs	r3, #2
 800111c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	4619      	mov	r1, r3
 8001124:	4814      	ldr	r0, [pc, #80]	@ (8001178 <MX_GPIO_Init+0xdc>)
 8001126:	f000 fb4d 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Latch_SPI_Pin */
  GPIO_InitStruct.Pin = Latch_SPI_Pin;
 800112a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800112e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	4619      	mov	r1, r3
 8001142:	480d      	ldr	r0, [pc, #52]	@ (8001178 <MX_GPIO_Init+0xdc>)
 8001144:	f000 fb3e 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin OUT2_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin;
 8001148:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800114c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2302      	movs	r3, #2
 8001158:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_GPIO_Init+0xdc>)
 8001162:	f000 fb2f 	bl	80017c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	40010800 	.word	0x40010800
 8001178:	40010c00 	.word	0x40010c00

0800117c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	timerRun();
 8001184:	f000 f958 	bl	8001438 <timerRun>

}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001194:	b672      	cpsid	i
}
 8001196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <Error_Handler+0x8>

0800119c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <HAL_MspInit+0x5c>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	4a14      	ldr	r2, [pc, #80]	@ (80011f8 <HAL_MspInit+0x5c>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6193      	str	r3, [r2, #24]
 80011ae:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_MspInit+0x5c>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <HAL_MspInit+0x5c>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a0e      	ldr	r2, [pc, #56]	@ (80011f8 <HAL_MspInit+0x5c>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <HAL_MspInit+0x5c>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011d2:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <HAL_MspInit+0x60>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <HAL_MspInit+0x60>)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010000 	.word	0x40010000

08001200 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	@ 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0318 	add.w	r3, r7, #24
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a2b      	ldr	r2, [pc, #172]	@ (80012c8 <HAL_SPI_MspInit+0xc8>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d124      	bne.n	800126a <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001220:	4b2a      	ldr	r3, [pc, #168]	@ (80012cc <HAL_SPI_MspInit+0xcc>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a29      	ldr	r2, [pc, #164]	@ (80012cc <HAL_SPI_MspInit+0xcc>)
 8001226:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b27      	ldr	r3, [pc, #156]	@ (80012cc <HAL_SPI_MspInit+0xcc>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	4b24      	ldr	r3, [pc, #144]	@ (80012cc <HAL_SPI_MspInit+0xcc>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a23      	ldr	r2, [pc, #140]	@ (80012cc <HAL_SPI_MspInit+0xcc>)
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <HAL_SPI_MspInit+0xcc>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001250:	23a0      	movs	r3, #160	@ 0xa0
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0318 	add.w	r3, r7, #24
 8001260:	4619      	mov	r1, r3
 8001262:	481b      	ldr	r0, [pc, #108]	@ (80012d0 <HAL_SPI_MspInit+0xd0>)
 8001264:	f000 faae 	bl	80017c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001268:	e029      	b.n	80012be <HAL_SPI_MspInit+0xbe>
  else if(hspi->Instance==SPI2)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a19      	ldr	r2, [pc, #100]	@ (80012d4 <HAL_SPI_MspInit+0xd4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d124      	bne.n	80012be <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001274:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <HAL_SPI_MspInit+0xcc>)
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	4a14      	ldr	r2, [pc, #80]	@ (80012cc <HAL_SPI_MspInit+0xcc>)
 800127a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800127e:	61d3      	str	r3, [r2, #28]
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <HAL_SPI_MspInit+0xcc>)
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <HAL_SPI_MspInit+0xcc>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a0e      	ldr	r2, [pc, #56]	@ (80012cc <HAL_SPI_MspInit+0xcc>)
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <HAL_SPI_MspInit+0xcc>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80012a4:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80012a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	4619      	mov	r1, r3
 80012b8:	4807      	ldr	r0, [pc, #28]	@ (80012d8 <HAL_SPI_MspInit+0xd8>)
 80012ba:	f000 fa83 	bl	80017c4 <HAL_GPIO_Init>
}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	@ 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40013000 	.word	0x40013000
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010800 	.word	0x40010800
 80012d4:	40003800 	.word	0x40003800
 80012d8:	40010c00 	.word	0x40010c00

080012dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012ec:	d113      	bne.n	8001316 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <HAL_TIM_Base_MspInit+0x44>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001320 <HAL_TIM_Base_MspInit+0x44>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <HAL_TIM_Base_MspInit+0x44>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2101      	movs	r1, #1
 800130a:	201c      	movs	r0, #28
 800130c:	f000 fa23 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001310:	201c      	movs	r0, #28
 8001312:	f000 fa3c 	bl	800178e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <NMI_Handler+0x4>

0800132c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <MemManage_Handler+0x4>

0800133c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <UsageFault_Handler+0x4>

0800134c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001374:	f000 f8fc 	bl	8001570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <TIM2_IRQHandler+0x10>)
 8001382:	f001 fac1 	bl	8002908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000194 	.word	0x20000194

08001390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001398:	4a14      	ldr	r2, [pc, #80]	@ (80013ec <_sbrk+0x5c>)
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <_sbrk+0x60>)
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <_sbrk+0x64>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <_sbrk+0x68>)
 80013b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d207      	bcs.n	80013d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c0:	f001 fe3a 	bl	8003038 <__errno>
 80013c4:	4603      	mov	r3, r0
 80013c6:	220c      	movs	r2, #12
 80013c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	e009      	b.n	80013e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d6:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	4a05      	ldr	r2, [pc, #20]	@ (80013f4 <_sbrk+0x64>)
 80013e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20005000 	.word	0x20005000
 80013f0:	00000400 	.word	0x00000400
 80013f4:	200001dc 	.word	0x200001dc
 80013f8:	20000380 	.word	0x20000380

080013fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <setTimer>:

#define TIMERNUM 10
int timer_counter[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};
int timer_flag[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};

void setTimer(int INDEX,int duration){
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
	timer_counter[INDEX]=duration;
 8001412:	4907      	ldr	r1, [pc, #28]	@ (8001430 <setTimer+0x28>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[INDEX]=0;
 800141c:	4a05      	ldr	r2, [pc, #20]	@ (8001434 <setTimer+0x2c>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2100      	movs	r1, #0
 8001422:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	200001e0 	.word	0x200001e0
 8001434:	20000208 	.word	0x20000208

08001438 <timerRun>:

void timerRun(){
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
	for(int i=0;i<TIMERNUM;i++){
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	e01c      	b.n	800147e <timerRun+0x46>
		if(timer_counter[i] > 0){
 8001444:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <timerRun+0x58>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144c:	2b00      	cmp	r3, #0
 800144e:	dd13      	ble.n	8001478 <timerRun+0x40>
			timer_counter[i]--;
 8001450:	4a0f      	ldr	r2, [pc, #60]	@ (8001490 <timerRun+0x58>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	490d      	ldr	r1, [pc, #52]	@ (8001490 <timerRun+0x58>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <=0){
 8001462:	4a0b      	ldr	r2, [pc, #44]	@ (8001490 <timerRun+0x58>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	2b00      	cmp	r3, #0
 800146c:	dc04      	bgt.n	8001478 <timerRun+0x40>
				timer_flag[i]=1;
 800146e:	4a09      	ldr	r2, [pc, #36]	@ (8001494 <timerRun+0x5c>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2101      	movs	r1, #1
 8001474:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<TIMERNUM;i++){
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3301      	adds	r3, #1
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b09      	cmp	r3, #9
 8001482:	dddf      	ble.n	8001444 <timerRun+0xc>
			}
		}
	}
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	200001e0 	.word	0x200001e0
 8001494:	20000208 	.word	0x20000208

08001498 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001498:	f7ff ffb0 	bl	80013fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800149c:	480b      	ldr	r0, [pc, #44]	@ (80014cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800149e:	490c      	ldr	r1, [pc, #48]	@ (80014d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014a0:	4a0c      	ldr	r2, [pc, #48]	@ (80014d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b2:	4a09      	ldr	r2, [pc, #36]	@ (80014d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014b4:	4c09      	ldr	r4, [pc, #36]	@ (80014dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014c2:	f001 fdbf 	bl	8003044 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014c6:	f7ff fcbd 	bl	8000e44 <main>
  bx lr
 80014ca:	4770      	bx	lr
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80014d4:	08003a3c 	.word	0x08003a3c
  ldr r2, =_sbss
 80014d8:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80014dc:	2000037c 	.word	0x2000037c

080014e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC1_2_IRQHandler>
	...

080014e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e8:	4b08      	ldr	r3, [pc, #32]	@ (800150c <HAL_Init+0x28>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a07      	ldr	r2, [pc, #28]	@ (800150c <HAL_Init+0x28>)
 80014ee:	f043 0310 	orr.w	r3, r3, #16
 80014f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f4:	2003      	movs	r0, #3
 80014f6:	f000 f923 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fa:	200f      	movs	r0, #15
 80014fc:	f000 f808 	bl	8001510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001500:	f7ff fe4c 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40022000 	.word	0x40022000

08001510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <HAL_InitTick+0x54>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <HAL_InitTick+0x58>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001526:	fbb3 f3f1 	udiv	r3, r3, r1
 800152a:	fbb2 f3f3 	udiv	r3, r2, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f93b 	bl	80017aa <HAL_SYSTICK_Config>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e00e      	b.n	800155c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d80a      	bhi.n	800155a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f000 f903 	bl	8001756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001550:	4a06      	ldr	r2, [pc, #24]	@ (800156c <HAL_InitTick+0x5c>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	e000      	b.n	800155c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000048 	.word	0x20000048
 8001568:	20000050 	.word	0x20000050
 800156c:	2000004c 	.word	0x2000004c

08001570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_IncTick+0x1c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <HAL_IncTick+0x20>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4413      	add	r3, r2
 8001580:	4a03      	ldr	r2, [pc, #12]	@ (8001590 <HAL_IncTick+0x20>)
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	20000050 	.word	0x20000050
 8001590:	20000230 	.word	0x20000230

08001594 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b02      	ldr	r3, [pc, #8]	@ (80015a4 <HAL_GetTick+0x10>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	20000230 	.word	0x20000230

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015da:	4a04      	ldr	r2, [pc, #16]	@ (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60d3      	str	r3, [r2, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	2b00      	cmp	r3, #0
 800161c:	db0b      	blt.n	8001636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4906      	ldr	r1, [pc, #24]	@ (8001640 <__NVIC_EnableIRQ+0x34>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	2001      	movs	r0, #1
 800162e:	fa00 f202 	lsl.w	r2, r0, r2
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100

08001644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db0a      	blt.n	800166e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	490c      	ldr	r1, [pc, #48]	@ (8001690 <__NVIC_SetPriority+0x4c>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	440b      	add	r3, r1
 8001668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800166c:	e00a      	b.n	8001684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4908      	ldr	r1, [pc, #32]	@ (8001694 <__NVIC_SetPriority+0x50>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	3b04      	subs	r3, #4
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	440b      	add	r3, r1
 8001682:	761a      	strb	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	@ 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf28      	it	cs
 80016b6:	2304      	movcs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3304      	adds	r3, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d902      	bls.n	80016c8 <NVIC_EncodePriority+0x30>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3b03      	subs	r3, #3
 80016c6:	e000      	b.n	80016ca <NVIC_EncodePriority+0x32>
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	4313      	orrs	r3, r2
         );
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	@ 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	@ (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f7ff ff90 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	@ (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	@ (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff2d 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001768:	f7ff ff42 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 800176c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7ff ff90 	bl	8001698 <NVIC_EncodePriority>
 8001778:	4602      	mov	r2, r0
 800177a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff5f 	bl	8001644 <__NVIC_SetPriority>
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff35 	bl	800160c <__NVIC_EnableIRQ>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffa2 	bl	80016fc <SysTick_Config>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b08b      	sub	sp, #44	@ 0x2c
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	e169      	b.n	8001aac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017d8:	2201      	movs	r2, #1
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	f040 8158 	bne.w	8001aa6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4a9a      	ldr	r2, [pc, #616]	@ (8001a64 <HAL_GPIO_Init+0x2a0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d05e      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001800:	4a98      	ldr	r2, [pc, #608]	@ (8001a64 <HAL_GPIO_Init+0x2a0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d875      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001806:	4a98      	ldr	r2, [pc, #608]	@ (8001a68 <HAL_GPIO_Init+0x2a4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d058      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 800180c:	4a96      	ldr	r2, [pc, #600]	@ (8001a68 <HAL_GPIO_Init+0x2a4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d86f      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001812:	4a96      	ldr	r2, [pc, #600]	@ (8001a6c <HAL_GPIO_Init+0x2a8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d052      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001818:	4a94      	ldr	r2, [pc, #592]	@ (8001a6c <HAL_GPIO_Init+0x2a8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d869      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800181e:	4a94      	ldr	r2, [pc, #592]	@ (8001a70 <HAL_GPIO_Init+0x2ac>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d04c      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001824:	4a92      	ldr	r2, [pc, #584]	@ (8001a70 <HAL_GPIO_Init+0x2ac>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d863      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800182a:	4a92      	ldr	r2, [pc, #584]	@ (8001a74 <HAL_GPIO_Init+0x2b0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d046      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001830:	4a90      	ldr	r2, [pc, #576]	@ (8001a74 <HAL_GPIO_Init+0x2b0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d85d      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001836:	2b12      	cmp	r3, #18
 8001838:	d82a      	bhi.n	8001890 <HAL_GPIO_Init+0xcc>
 800183a:	2b12      	cmp	r3, #18
 800183c:	d859      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800183e:	a201      	add	r2, pc, #4	@ (adr r2, 8001844 <HAL_GPIO_Init+0x80>)
 8001840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001844:	080018bf 	.word	0x080018bf
 8001848:	08001899 	.word	0x08001899
 800184c:	080018ab 	.word	0x080018ab
 8001850:	080018ed 	.word	0x080018ed
 8001854:	080018f3 	.word	0x080018f3
 8001858:	080018f3 	.word	0x080018f3
 800185c:	080018f3 	.word	0x080018f3
 8001860:	080018f3 	.word	0x080018f3
 8001864:	080018f3 	.word	0x080018f3
 8001868:	080018f3 	.word	0x080018f3
 800186c:	080018f3 	.word	0x080018f3
 8001870:	080018f3 	.word	0x080018f3
 8001874:	080018f3 	.word	0x080018f3
 8001878:	080018f3 	.word	0x080018f3
 800187c:	080018f3 	.word	0x080018f3
 8001880:	080018f3 	.word	0x080018f3
 8001884:	080018f3 	.word	0x080018f3
 8001888:	080018a1 	.word	0x080018a1
 800188c:	080018b5 	.word	0x080018b5
 8001890:	4a79      	ldr	r2, [pc, #484]	@ (8001a78 <HAL_GPIO_Init+0x2b4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001896:	e02c      	b.n	80018f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	623b      	str	r3, [r7, #32]
          break;
 800189e:	e029      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	3304      	adds	r3, #4
 80018a6:	623b      	str	r3, [r7, #32]
          break;
 80018a8:	e024      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	3308      	adds	r3, #8
 80018b0:	623b      	str	r3, [r7, #32]
          break;
 80018b2:	e01f      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	330c      	adds	r3, #12
 80018ba:	623b      	str	r3, [r7, #32]
          break;
 80018bc:	e01a      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018c6:	2304      	movs	r3, #4
 80018c8:	623b      	str	r3, [r7, #32]
          break;
 80018ca:	e013      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d105      	bne.n	80018e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d4:	2308      	movs	r3, #8
 80018d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	611a      	str	r2, [r3, #16]
          break;
 80018de:	e009      	b.n	80018f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e0:	2308      	movs	r3, #8
 80018e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	615a      	str	r2, [r3, #20]
          break;
 80018ea:	e003      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
          break;
 80018f0:	e000      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          break;
 80018f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2bff      	cmp	r3, #255	@ 0xff
 80018f8:	d801      	bhi.n	80018fe <HAL_GPIO_Init+0x13a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	e001      	b.n	8001902 <HAL_GPIO_Init+0x13e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3304      	adds	r3, #4
 8001902:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2bff      	cmp	r3, #255	@ 0xff
 8001908:	d802      	bhi.n	8001910 <HAL_GPIO_Init+0x14c>
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	e002      	b.n	8001916 <HAL_GPIO_Init+0x152>
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001912:	3b08      	subs	r3, #8
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	210f      	movs	r1, #15
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	6a39      	ldr	r1, [r7, #32]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	431a      	orrs	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80b1 	beq.w	8001aa6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001944:	4b4d      	ldr	r3, [pc, #308]	@ (8001a7c <HAL_GPIO_Init+0x2b8>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a4c      	ldr	r2, [pc, #304]	@ (8001a7c <HAL_GPIO_Init+0x2b8>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b4a      	ldr	r3, [pc, #296]	@ (8001a7c <HAL_GPIO_Init+0x2b8>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800195c:	4a48      	ldr	r2, [pc, #288]	@ (8001a80 <HAL_GPIO_Init+0x2bc>)
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001968:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a40      	ldr	r2, [pc, #256]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d013      	beq.n	80019b0 <HAL_GPIO_Init+0x1ec>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a3f      	ldr	r2, [pc, #252]	@ (8001a88 <HAL_GPIO_Init+0x2c4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d00d      	beq.n	80019ac <HAL_GPIO_Init+0x1e8>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a3e      	ldr	r2, [pc, #248]	@ (8001a8c <HAL_GPIO_Init+0x2c8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d007      	beq.n	80019a8 <HAL_GPIO_Init+0x1e4>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a3d      	ldr	r2, [pc, #244]	@ (8001a90 <HAL_GPIO_Init+0x2cc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d101      	bne.n	80019a4 <HAL_GPIO_Init+0x1e0>
 80019a0:	2303      	movs	r3, #3
 80019a2:	e006      	b.n	80019b2 <HAL_GPIO_Init+0x1ee>
 80019a4:	2304      	movs	r3, #4
 80019a6:	e004      	b.n	80019b2 <HAL_GPIO_Init+0x1ee>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e002      	b.n	80019b2 <HAL_GPIO_Init+0x1ee>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <HAL_GPIO_Init+0x1ee>
 80019b0:	2300      	movs	r3, #0
 80019b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b4:	f002 0203 	and.w	r2, r2, #3
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	4093      	lsls	r3, r2
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4313      	orrs	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019c2:	492f      	ldr	r1, [pc, #188]	@ (8001a80 <HAL_GPIO_Init+0x2bc>)
 80019c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	492c      	ldr	r1, [pc, #176]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	4928      	ldr	r1, [pc, #160]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d006      	beq.n	8001a12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a04:	4b23      	ldr	r3, [pc, #140]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	4922      	ldr	r1, [pc, #136]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	60cb      	str	r3, [r1, #12]
 8001a10:	e006      	b.n	8001a20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a12:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	491e      	ldr	r1, [pc, #120]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a2c:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	4918      	ldr	r1, [pc, #96]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a3a:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4914      	ldr	r1, [pc, #80]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d021      	beq.n	8001a98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a54:	4b0f      	ldr	r3, [pc, #60]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	490e      	ldr	r1, [pc, #56]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
 8001a60:	e021      	b.n	8001aa6 <HAL_GPIO_Init+0x2e2>
 8001a62:	bf00      	nop
 8001a64:	10320000 	.word	0x10320000
 8001a68:	10310000 	.word	0x10310000
 8001a6c:	10220000 	.word	0x10220000
 8001a70:	10210000 	.word	0x10210000
 8001a74:	10120000 	.word	0x10120000
 8001a78:	10110000 	.word	0x10110000
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010000 	.word	0x40010000
 8001a84:	40010800 	.word	0x40010800
 8001a88:	40010c00 	.word	0x40010c00
 8001a8c:	40011000 	.word	0x40011000
 8001a90:	40011400 	.word	0x40011400
 8001a94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	4909      	ldr	r1, [pc, #36]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f47f ae8e 	bne.w	80017d8 <HAL_GPIO_Init+0x14>
  }
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	372c      	adds	r7, #44	@ 0x2c
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	40010400 	.word	0x40010400

08001acc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	e001      	b.n	8001aee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	807b      	strh	r3, [r7, #2]
 8001b06:	4613      	mov	r3, r2
 8001b08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b0a:	787b      	ldrb	r3, [r7, #1]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b10:	887a      	ldrh	r2, [r7, #2]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b16:	e003      	b.n	8001b20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	041a      	lsls	r2, r3, #16
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	611a      	str	r2, [r3, #16]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e272      	b.n	8002024 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8087 	beq.w	8001c5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b4c:	4b92      	ldr	r3, [pc, #584]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d00c      	beq.n	8001b72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b58:	4b8f      	ldr	r3, [pc, #572]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d112      	bne.n	8001b8a <HAL_RCC_OscConfig+0x5e>
 8001b64:	4b8c      	ldr	r3, [pc, #560]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b70:	d10b      	bne.n	8001b8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b72:	4b89      	ldr	r3, [pc, #548]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d06c      	beq.n	8001c58 <HAL_RCC_OscConfig+0x12c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d168      	bne.n	8001c58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e24c      	b.n	8002024 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x76>
 8001b94:	4b80      	ldr	r3, [pc, #512]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a7f      	ldr	r2, [pc, #508]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e02e      	b.n	8001c00 <HAL_RCC_OscConfig+0xd4>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x98>
 8001baa:	4b7b      	ldr	r3, [pc, #492]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a7a      	ldr	r2, [pc, #488]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b78      	ldr	r3, [pc, #480]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a77      	ldr	r2, [pc, #476]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e01d      	b.n	8001c00 <HAL_RCC_OscConfig+0xd4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0xbc>
 8001bce:	4b72      	ldr	r3, [pc, #456]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a71      	ldr	r2, [pc, #452]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b6f      	ldr	r3, [pc, #444]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a6e      	ldr	r2, [pc, #440]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e00b      	b.n	8001c00 <HAL_RCC_OscConfig+0xd4>
 8001be8:	4b6b      	ldr	r3, [pc, #428]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a6a      	ldr	r2, [pc, #424]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b68      	ldr	r3, [pc, #416]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a67      	ldr	r2, [pc, #412]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fcc4 	bl	8001594 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fcc0 	bl	8001594 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	@ 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e200      	b.n	8002024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	4b5d      	ldr	r3, [pc, #372]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0xe4>
 8001c2e:	e014      	b.n	8001c5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fcb0 	bl	8001594 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff fcac 	bl	8001594 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	@ 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e1ec      	b.n	8002024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	4b53      	ldr	r3, [pc, #332]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x10c>
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d063      	beq.n	8001d2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c66:	4b4c      	ldr	r3, [pc, #304]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c72:	4b49      	ldr	r3, [pc, #292]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d11c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x18c>
 8001c7e:	4b46      	ldr	r3, [pc, #280]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d116      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	4b43      	ldr	r3, [pc, #268]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x176>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e1c0      	b.n	8002024 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4939      	ldr	r1, [pc, #228]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	e03a      	b.n	8001d2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc0:	4b36      	ldr	r3, [pc, #216]	@ (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7ff fc65 	bl	8001594 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cce:	f7ff fc61 	bl	8001594 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e1a1      	b.n	8002024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cec:	4b2a      	ldr	r3, [pc, #168]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4927      	ldr	r1, [pc, #156]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
 8001d00:	e015      	b.n	8001d2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d02:	4b26      	ldr	r3, [pc, #152]	@ (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff fc44 	bl	8001594 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d10:	f7ff fc40 	bl	8001594 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e180      	b.n	8002024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d03a      	beq.n	8001db0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d019      	beq.n	8001d76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d42:	4b17      	ldr	r3, [pc, #92]	@ (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d48:	f7ff fc24 	bl	8001594 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d50:	f7ff fc20 	bl	8001594 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e160      	b.n	8002024 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d62:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f000 fa9c 	bl	80022ac <RCC_Delay>
 8001d74:	e01c      	b.n	8001db0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d76:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7c:	f7ff fc0a 	bl	8001594 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d82:	e00f      	b.n	8001da4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d84:	f7ff fc06 	bl	8001594 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d908      	bls.n	8001da4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e146      	b.n	8002024 <HAL_RCC_OscConfig+0x4f8>
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	42420000 	.word	0x42420000
 8001da0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da4:	4b92      	ldr	r3, [pc, #584]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1e9      	bne.n	8001d84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80a6 	beq.w	8001f0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc2:	4b8b      	ldr	r3, [pc, #556]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10d      	bne.n	8001dea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	4b88      	ldr	r3, [pc, #544]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4a87      	ldr	r2, [pc, #540]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd8:	61d3      	str	r3, [r2, #28]
 8001dda:	4b85      	ldr	r3, [pc, #532]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de6:	2301      	movs	r3, #1
 8001de8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dea:	4b82      	ldr	r3, [pc, #520]	@ (8001ff4 <HAL_RCC_OscConfig+0x4c8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d118      	bne.n	8001e28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ff4 <HAL_RCC_OscConfig+0x4c8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a7e      	ldr	r2, [pc, #504]	@ (8001ff4 <HAL_RCC_OscConfig+0x4c8>)
 8001dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e02:	f7ff fbc7 	bl	8001594 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0a:	f7ff fbc3 	bl	8001594 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b64      	cmp	r3, #100	@ 0x64
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e103      	b.n	8002024 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	4b75      	ldr	r3, [pc, #468]	@ (8001ff4 <HAL_RCC_OscConfig+0x4c8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x312>
 8001e30:	4b6f      	ldr	r3, [pc, #444]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4a6e      	ldr	r2, [pc, #440]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6213      	str	r3, [r2, #32]
 8001e3c:	e02d      	b.n	8001e9a <HAL_RCC_OscConfig+0x36e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x334>
 8001e46:	4b6a      	ldr	r3, [pc, #424]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4a69      	ldr	r2, [pc, #420]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	f023 0301 	bic.w	r3, r3, #1
 8001e50:	6213      	str	r3, [r2, #32]
 8001e52:	4b67      	ldr	r3, [pc, #412]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4a66      	ldr	r2, [pc, #408]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	f023 0304 	bic.w	r3, r3, #4
 8001e5c:	6213      	str	r3, [r2, #32]
 8001e5e:	e01c      	b.n	8001e9a <HAL_RCC_OscConfig+0x36e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	d10c      	bne.n	8001e82 <HAL_RCC_OscConfig+0x356>
 8001e68:	4b61      	ldr	r3, [pc, #388]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4a60      	ldr	r2, [pc, #384]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	6213      	str	r3, [r2, #32]
 8001e74:	4b5e      	ldr	r3, [pc, #376]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4a5d      	ldr	r2, [pc, #372]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6213      	str	r3, [r2, #32]
 8001e80:	e00b      	b.n	8001e9a <HAL_RCC_OscConfig+0x36e>
 8001e82:	4b5b      	ldr	r3, [pc, #364]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4a5a      	ldr	r2, [pc, #360]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	6213      	str	r3, [r2, #32]
 8001e8e:	4b58      	ldr	r3, [pc, #352]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4a57      	ldr	r2, [pc, #348]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	f023 0304 	bic.w	r3, r3, #4
 8001e98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d015      	beq.n	8001ece <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff fb77 	bl	8001594 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7ff fb73 	bl	8001594 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e0b1      	b.n	8002024 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec0:	4b4b      	ldr	r3, [pc, #300]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ee      	beq.n	8001eaa <HAL_RCC_OscConfig+0x37e>
 8001ecc:	e014      	b.n	8001ef8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ece:	f7ff fb61 	bl	8001594 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7ff fb5d 	bl	8001594 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e09b      	b.n	8002024 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eec:	4b40      	ldr	r3, [pc, #256]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1ee      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d105      	bne.n	8001f0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efe:	4b3c      	ldr	r3, [pc, #240]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	4a3b      	ldr	r2, [pc, #236]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8087 	beq.w	8002022 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f14:	4b36      	ldr	r3, [pc, #216]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d061      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d146      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f28:	4b33      	ldr	r3, [pc, #204]	@ (8001ff8 <HAL_RCC_OscConfig+0x4cc>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7ff fb31 	bl	8001594 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f36:	f7ff fb2d 	bl	8001594 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e06d      	b.n	8002024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f48:	4b29      	ldr	r3, [pc, #164]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f5c:	d108      	bne.n	8001f70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	4921      	ldr	r1, [pc, #132]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f70:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a19      	ldr	r1, [r3, #32]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f80:	430b      	orrs	r3, r1
 8001f82:	491b      	ldr	r1, [pc, #108]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff8 <HAL_RCC_OscConfig+0x4cc>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7ff fb01 	bl	8001594 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f96:	f7ff fafd 	bl	8001594 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e03d      	b.n	8002024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa8:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x46a>
 8001fb4:	e035      	b.n	8002022 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <HAL_RCC_OscConfig+0x4cc>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff faea 	bl	8001594 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7ff fae6 	bl	8001594 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e026      	b.n	8002024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd6:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x498>
 8001fe2:	e01e      	b.n	8002022 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e019      	b.n	8002024 <HAL_RCC_OscConfig+0x4f8>
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40007000 	.word	0x40007000
 8001ff8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <HAL_RCC_OscConfig+0x500>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	429a      	cmp	r2, r3
 800200e:	d106      	bne.n	800201e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d001      	beq.n	8002022 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000

08002030 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0d0      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002044:	4b6a      	ldr	r3, [pc, #424]	@ (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d910      	bls.n	8002074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	4b67      	ldr	r3, [pc, #412]	@ (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 0207 	bic.w	r2, r3, #7
 800205a:	4965      	ldr	r1, [pc, #404]	@ (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b63      	ldr	r3, [pc, #396]	@ (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0b8      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d020      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800208c:	4b59      	ldr	r3, [pc, #356]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4a58      	ldr	r2, [pc, #352]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002096:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a4:	4b53      	ldr	r3, [pc, #332]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4a52      	ldr	r2, [pc, #328]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80020ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b0:	4b50      	ldr	r3, [pc, #320]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	494d      	ldr	r1, [pc, #308]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d040      	beq.n	8002150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	4b47      	ldr	r3, [pc, #284]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d115      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e07f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ee:	4b41      	ldr	r3, [pc, #260]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d109      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e073      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fe:	4b3d      	ldr	r3, [pc, #244]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06b      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800210e:	4b39      	ldr	r3, [pc, #228]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f023 0203 	bic.w	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4936      	ldr	r1, [pc, #216]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002120:	f7ff fa38 	bl	8001594 <HAL_GetTick>
 8002124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	e00a      	b.n	800213e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002128:	f7ff fa34 	bl	8001594 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e053      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	4b2d      	ldr	r3, [pc, #180]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 020c 	and.w	r2, r3, #12
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	429a      	cmp	r2, r3
 800214e:	d1eb      	bne.n	8002128 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002150:	4b27      	ldr	r3, [pc, #156]	@ (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d210      	bcs.n	8002180 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b24      	ldr	r3, [pc, #144]	@ (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 0207 	bic.w	r2, r3, #7
 8002166:	4922      	ldr	r1, [pc, #136]	@ (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b20      	ldr	r3, [pc, #128]	@ (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e032      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800218c:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4916      	ldr	r1, [pc, #88]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021aa:	4b12      	ldr	r3, [pc, #72]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	490e      	ldr	r1, [pc, #56]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021be:	f000 f821 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80021c2:	4602      	mov	r2, r0
 80021c4:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	490a      	ldr	r1, [pc, #40]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 80021d0:	5ccb      	ldrb	r3, [r1, r3]
 80021d2:	fa22 f303 	lsr.w	r3, r2, r3
 80021d6:	4a09      	ldr	r2, [pc, #36]	@ (80021fc <HAL_RCC_ClockConfig+0x1cc>)
 80021d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021da:	4b09      	ldr	r3, [pc, #36]	@ (8002200 <HAL_RCC_ClockConfig+0x1d0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f996 	bl	8001510 <HAL_InitTick>

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40022000 	.word	0x40022000
 80021f4:	40021000 	.word	0x40021000
 80021f8:	080039d4 	.word	0x080039d4
 80021fc:	20000048 	.word	0x20000048
 8002200:	2000004c 	.word	0x2000004c

08002204 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	2300      	movs	r3, #0
 8002218:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800221e:	4b1e      	ldr	r3, [pc, #120]	@ (8002298 <HAL_RCC_GetSysClockFreq+0x94>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b04      	cmp	r3, #4
 800222c:	d002      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x30>
 800222e:	2b08      	cmp	r3, #8
 8002230:	d003      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x36>
 8002232:	e027      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002234:	4b19      	ldr	r3, [pc, #100]	@ (800229c <HAL_RCC_GetSysClockFreq+0x98>)
 8002236:	613b      	str	r3, [r7, #16]
      break;
 8002238:	e027      	b.n	800228a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	0c9b      	lsrs	r3, r3, #18
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	4a17      	ldr	r2, [pc, #92]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002244:	5cd3      	ldrb	r3, [r2, r3]
 8002246:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d010      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002252:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <HAL_RCC_GetSysClockFreq+0x94>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	0c5b      	lsrs	r3, r3, #17
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	4a11      	ldr	r2, [pc, #68]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800225e:	5cd3      	ldrb	r3, [r2, r3]
 8002260:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a0d      	ldr	r2, [pc, #52]	@ (800229c <HAL_RCC_GetSysClockFreq+0x98>)
 8002266:	fb03 f202 	mul.w	r2, r3, r2
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	e004      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a0c      	ldr	r2, [pc, #48]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002278:	fb02 f303 	mul.w	r3, r2, r3
 800227c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	613b      	str	r3, [r7, #16]
      break;
 8002282:	e002      	b.n	800228a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002284:	4b05      	ldr	r3, [pc, #20]	@ (800229c <HAL_RCC_GetSysClockFreq+0x98>)
 8002286:	613b      	str	r3, [r7, #16]
      break;
 8002288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800228a:	693b      	ldr	r3, [r7, #16]
}
 800228c:	4618      	mov	r0, r3
 800228e:	371c      	adds	r7, #28
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	007a1200 	.word	0x007a1200
 80022a0:	080039e4 	.word	0x080039e4
 80022a4:	080039f4 	.word	0x080039f4
 80022a8:	003d0900 	.word	0x003d0900

080022ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022b4:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <RCC_Delay+0x34>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <RCC_Delay+0x38>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	0a5b      	lsrs	r3, r3, #9
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022c8:	bf00      	nop
  }
  while (Delay --);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1e5a      	subs	r2, r3, #1
 80022ce:	60fa      	str	r2, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f9      	bne.n	80022c8 <RCC_Delay+0x1c>
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	20000048 	.word	0x20000048
 80022e4:	10624dd3 	.word	0x10624dd3

080022e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e076      	b.n	80023e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d108      	bne.n	8002314 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800230a:	d009      	beq.n	8002320 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
 8002312:	e005      	b.n	8002320 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7fe ff60 	bl	8001200 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002356:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a4:	ea42 0103 	orr.w	r1, r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	0c1a      	lsrs	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f002 0204 	and.w	r2, r2, #4
 80023c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	69da      	ldr	r2, [r3, #28]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	4613      	mov	r3, r2
 80023fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_SPI_Transmit+0x22>
 800240e:	2302      	movs	r3, #2
 8002410:	e12d      	b.n	800266e <HAL_SPI_Transmit+0x27e>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800241a:	f7ff f8bb 	bl	8001594 <HAL_GetTick>
 800241e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d002      	beq.n	8002436 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002430:	2302      	movs	r3, #2
 8002432:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002434:	e116      	b.n	8002664 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_SPI_Transmit+0x52>
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002446:	e10d      	b.n	8002664 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2203      	movs	r2, #3
 800244c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	88fa      	ldrh	r2, [r7, #6]
 8002460:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	88fa      	ldrh	r2, [r7, #6]
 8002466:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800248e:	d10f      	bne.n	80024b0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800249e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ba:	2b40      	cmp	r3, #64	@ 0x40
 80024bc:	d007      	beq.n	80024ce <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024d6:	d14f      	bne.n	8002578 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <HAL_SPI_Transmit+0xf6>
 80024e0:	8afb      	ldrh	r3, [r7, #22]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d142      	bne.n	800256c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	881a      	ldrh	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	1c9a      	adds	r2, r3, #2
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002500:	b29b      	uxth	r3, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800250a:	e02f      	b.n	800256c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b02      	cmp	r3, #2
 8002518:	d112      	bne.n	8002540 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	881a      	ldrh	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	1c9a      	adds	r2, r3, #2
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800253e:	e015      	b.n	800256c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002540:	f7ff f828 	bl	8001594 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d803      	bhi.n	8002558 <HAL_SPI_Transmit+0x168>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002556:	d102      	bne.n	800255e <HAL_SPI_Transmit+0x16e>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800256a:	e07b      	b.n	8002664 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1ca      	bne.n	800250c <HAL_SPI_Transmit+0x11c>
 8002576:	e050      	b.n	800261a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_SPI_Transmit+0x196>
 8002580:	8afb      	ldrh	r3, [r7, #22]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d144      	bne.n	8002610 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	330c      	adds	r3, #12
 8002590:	7812      	ldrb	r2, [r2, #0]
 8002592:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80025ac:	e030      	b.n	8002610 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d113      	bne.n	80025e4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	330c      	adds	r3, #12
 80025c6:	7812      	ldrb	r2, [r2, #0]
 80025c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80025e2:	e015      	b.n	8002610 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025e4:	f7fe ffd6 	bl	8001594 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d803      	bhi.n	80025fc <HAL_SPI_Transmit+0x20c>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fa:	d102      	bne.n	8002602 <HAL_SPI_Transmit+0x212>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800260e:	e029      	b.n	8002664 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002614:	b29b      	uxth	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1c9      	bne.n	80025ae <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	6839      	ldr	r1, [r7, #0]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f8b2 	bl	8002788 <SPI_EndRxTxTransaction>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2220      	movs	r2, #32
 800262e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10a      	bne.n	800264e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	77fb      	strb	r3, [r7, #31]
 800265a:	e003      	b.n	8002664 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800266c:	7ffb      	ldrb	r3, [r7, #31]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	4613      	mov	r3, r2
 8002686:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002688:	f7fe ff84 	bl	8001594 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	4413      	add	r3, r2
 8002696:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002698:	f7fe ff7c 	bl	8001594 <HAL_GetTick>
 800269c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800269e:	4b39      	ldr	r3, [pc, #228]	@ (8002784 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	015b      	lsls	r3, r3, #5
 80026a4:	0d1b      	lsrs	r3, r3, #20
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	fb02 f303 	mul.w	r3, r2, r3
 80026ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026ae:	e054      	b.n	800275a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b6:	d050      	beq.n	800275a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026b8:	f7fe ff6c 	bl	8001594 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d902      	bls.n	80026ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d13d      	bne.n	800274a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80026dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026e6:	d111      	bne.n	800270c <SPI_WaitFlagStateUntilTimeout+0x94>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026f0:	d004      	beq.n	80026fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026fa:	d107      	bne.n	800270c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800270a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002710:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002714:	d10f      	bne.n	8002736 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002734:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e017      	b.n	800277a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3b01      	subs	r3, #1
 8002758:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4013      	ands	r3, r2
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	429a      	cmp	r2, r3
 8002768:	bf0c      	ite	eq
 800276a:	2301      	moveq	r3, #1
 800276c:	2300      	movne	r3, #0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	429a      	cmp	r2, r3
 8002776:	d19b      	bne.n	80026b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3720      	adds	r7, #32
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000048 	.word	0x20000048

08002788 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2200      	movs	r2, #0
 800279c:	2180      	movs	r1, #128	@ 0x80
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f7ff ff6a 	bl	8002678 <SPI_WaitFlagStateUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ae:	f043 0220 	orr.w	r2, r3, #32
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e000      	b.n	80027bc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e041      	b.n	800285a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe fd76 	bl	80012dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3304      	adds	r3, #4
 8002800:	4619      	mov	r1, r3
 8002802:	4610      	mov	r0, r2
 8002804:	f000 fa74 	bl	8002cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b01      	cmp	r3, #1
 8002876:	d001      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e03a      	b.n	80028f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a18      	ldr	r2, [pc, #96]	@ (80028fc <HAL_TIM_Base_Start_IT+0x98>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00e      	beq.n	80028bc <HAL_TIM_Base_Start_IT+0x58>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a6:	d009      	beq.n	80028bc <HAL_TIM_Base_Start_IT+0x58>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a14      	ldr	r2, [pc, #80]	@ (8002900 <HAL_TIM_Base_Start_IT+0x9c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d004      	beq.n	80028bc <HAL_TIM_Base_Start_IT+0x58>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a13      	ldr	r2, [pc, #76]	@ (8002904 <HAL_TIM_Base_Start_IT+0xa0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d111      	bne.n	80028e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	d010      	beq.n	80028f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0201 	orr.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028de:	e007      	b.n	80028f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	40012c00 	.word	0x40012c00
 8002900:	40000400 	.word	0x40000400
 8002904:	40000800 	.word	0x40000800

08002908 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b02      	cmp	r3, #2
 800291c:	d122      	bne.n	8002964 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b02      	cmp	r3, #2
 800292a:	d11b      	bne.n	8002964 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0202 	mvn.w	r2, #2
 8002934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f9b4 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
 8002950:	e005      	b.n	800295e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f9a7 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f9b6 	bl	8002cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b04      	cmp	r3, #4
 8002970:	d122      	bne.n	80029b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b04      	cmp	r3, #4
 800297e:	d11b      	bne.n	80029b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0204 	mvn.w	r2, #4
 8002988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2202      	movs	r2, #2
 800298e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f98a 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
 80029a4:	e005      	b.n	80029b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f97d 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f98c 	bl	8002cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d122      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d11b      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0208 	mvn.w	r2, #8
 80029dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2204      	movs	r2, #4
 80029e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f960 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
 80029f8:	e005      	b.n	8002a06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f953 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f962 	bl	8002cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b10      	cmp	r3, #16
 8002a18:	d122      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d11b      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0210 	mvn.w	r2, #16
 8002a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2208      	movs	r2, #8
 8002a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f936 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
 8002a4c:	e005      	b.n	8002a5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f929 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f938 	bl	8002cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d10e      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d107      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0201 	mvn.w	r2, #1
 8002a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fe fb78 	bl	800117c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a96:	2b80      	cmp	r3, #128	@ 0x80
 8002a98:	d10e      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa4:	2b80      	cmp	r3, #128	@ 0x80
 8002aa6:	d107      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fa7b 	bl	8002fae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac2:	2b40      	cmp	r3, #64	@ 0x40
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad0:	2b40      	cmp	r3, #64	@ 0x40
 8002ad2:	d107      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f8fc 	bl	8002cdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	d10e      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d107      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0220 	mvn.w	r2, #32
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fa46 	bl	8002f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_TIM_ConfigClockSource+0x1c>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e0b4      	b.n	8002c9e <HAL_TIM_ConfigClockSource+0x186>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b6c:	d03e      	beq.n	8002bec <HAL_TIM_ConfigClockSource+0xd4>
 8002b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b72:	f200 8087 	bhi.w	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
 8002b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b7a:	f000 8086 	beq.w	8002c8a <HAL_TIM_ConfigClockSource+0x172>
 8002b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b82:	d87f      	bhi.n	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
 8002b84:	2b70      	cmp	r3, #112	@ 0x70
 8002b86:	d01a      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0xa6>
 8002b88:	2b70      	cmp	r3, #112	@ 0x70
 8002b8a:	d87b      	bhi.n	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
 8002b8c:	2b60      	cmp	r3, #96	@ 0x60
 8002b8e:	d050      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x11a>
 8002b90:	2b60      	cmp	r3, #96	@ 0x60
 8002b92:	d877      	bhi.n	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
 8002b94:	2b50      	cmp	r3, #80	@ 0x50
 8002b96:	d03c      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0xfa>
 8002b98:	2b50      	cmp	r3, #80	@ 0x50
 8002b9a:	d873      	bhi.n	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
 8002b9c:	2b40      	cmp	r3, #64	@ 0x40
 8002b9e:	d058      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x13a>
 8002ba0:	2b40      	cmp	r3, #64	@ 0x40
 8002ba2:	d86f      	bhi.n	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba4:	2b30      	cmp	r3, #48	@ 0x30
 8002ba6:	d064      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0x15a>
 8002ba8:	2b30      	cmp	r3, #48	@ 0x30
 8002baa:	d86b      	bhi.n	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d060      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0x15a>
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d867      	bhi.n	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d05c      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0x15a>
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d05a      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0x15a>
 8002bbc:	e062      	b.n	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bce:	f000 f968 	bl	8002ea2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002be0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	609a      	str	r2, [r3, #8]
      break;
 8002bea:	e04f      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bfc:	f000 f951 	bl	8002ea2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c0e:	609a      	str	r2, [r3, #8]
      break;
 8002c10:	e03c      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f000 f8c8 	bl	8002db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2150      	movs	r1, #80	@ 0x50
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f91f 	bl	8002e6e <TIM_ITRx_SetConfig>
      break;
 8002c30:	e02c      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f000 f8e6 	bl	8002e10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2160      	movs	r1, #96	@ 0x60
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f90f 	bl	8002e6e <TIM_ITRx_SetConfig>
      break;
 8002c50:	e01c      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f000 f8a8 	bl	8002db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2140      	movs	r1, #64	@ 0x40
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f8ff 	bl	8002e6e <TIM_ITRx_SetConfig>
      break;
 8002c70:	e00c      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	f000 f8f6 	bl	8002e6e <TIM_ITRx_SetConfig>
      break;
 8002c82:	e003      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
      break;
 8002c88:	e000      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
	...

08002cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a29      	ldr	r2, [pc, #164]	@ (8002da8 <TIM_Base_SetConfig+0xb8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00b      	beq.n	8002d20 <TIM_Base_SetConfig+0x30>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d0e:	d007      	beq.n	8002d20 <TIM_Base_SetConfig+0x30>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a26      	ldr	r2, [pc, #152]	@ (8002dac <TIM_Base_SetConfig+0xbc>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d003      	beq.n	8002d20 <TIM_Base_SetConfig+0x30>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a25      	ldr	r2, [pc, #148]	@ (8002db0 <TIM_Base_SetConfig+0xc0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d108      	bne.n	8002d32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a1c      	ldr	r2, [pc, #112]	@ (8002da8 <TIM_Base_SetConfig+0xb8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00b      	beq.n	8002d52 <TIM_Base_SetConfig+0x62>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d40:	d007      	beq.n	8002d52 <TIM_Base_SetConfig+0x62>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a19      	ldr	r2, [pc, #100]	@ (8002dac <TIM_Base_SetConfig+0xbc>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d003      	beq.n	8002d52 <TIM_Base_SetConfig+0x62>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a18      	ldr	r2, [pc, #96]	@ (8002db0 <TIM_Base_SetConfig+0xc0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d108      	bne.n	8002d64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a07      	ldr	r2, [pc, #28]	@ (8002da8 <TIM_Base_SetConfig+0xb8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d103      	bne.n	8002d98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	615a      	str	r2, [r3, #20]
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	40012c00 	.word	0x40012c00
 8002dac:	40000400 	.word	0x40000400
 8002db0:	40000800 	.word	0x40000800

08002db4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	f023 0201 	bic.w	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f023 030a 	bic.w	r3, r3, #10
 8002df0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	621a      	str	r2, [r3, #32]
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b087      	sub	sp, #28
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	f023 0210 	bic.w	r2, r3, #16
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	031b      	lsls	r3, r3, #12
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	621a      	str	r2, [r3, #32]
}
 8002e64:	bf00      	nop
 8002e66:	371c      	adds	r7, #28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f043 0307 	orr.w	r3, r3, #7
 8002e90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	609a      	str	r2, [r3, #8]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr

08002ea2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b087      	sub	sp, #28
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ebc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	021a      	lsls	r2, r3, #8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	609a      	str	r2, [r3, #8]
}
 8002ed6:	bf00      	nop
 8002ed8:	371c      	adds	r7, #28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e046      	b.n	8002f86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a16      	ldr	r2, [pc, #88]	@ (8002f90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00e      	beq.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f44:	d009      	beq.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a12      	ldr	r2, [pc, #72]	@ (8002f94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d004      	beq.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a10      	ldr	r2, [pc, #64]	@ (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d10c      	bne.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40000800 	.word	0x40000800

08002f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <sniprintf>:
 8002fc0:	b40c      	push	{r2, r3}
 8002fc2:	b530      	push	{r4, r5, lr}
 8002fc4:	4b17      	ldr	r3, [pc, #92]	@ (8003024 <sniprintf+0x64>)
 8002fc6:	1e0c      	subs	r4, r1, #0
 8002fc8:	681d      	ldr	r5, [r3, #0]
 8002fca:	b09d      	sub	sp, #116	@ 0x74
 8002fcc:	da08      	bge.n	8002fe0 <sniprintf+0x20>
 8002fce:	238b      	movs	r3, #139	@ 0x8b
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd4:	602b      	str	r3, [r5, #0]
 8002fd6:	b01d      	add	sp, #116	@ 0x74
 8002fd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fdc:	b002      	add	sp, #8
 8002fde:	4770      	bx	lr
 8002fe0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002fe4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002fe8:	bf0c      	ite	eq
 8002fea:	4623      	moveq	r3, r4
 8002fec:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002ff0:	9304      	str	r3, [sp, #16]
 8002ff2:	9307      	str	r3, [sp, #28]
 8002ff4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ff8:	9002      	str	r0, [sp, #8]
 8002ffa:	9006      	str	r0, [sp, #24]
 8002ffc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003000:	4628      	mov	r0, r5
 8003002:	ab21      	add	r3, sp, #132	@ 0x84
 8003004:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003006:	a902      	add	r1, sp, #8
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	f000 f993 	bl	8003334 <_svfiprintf_r>
 800300e:	1c43      	adds	r3, r0, #1
 8003010:	bfbc      	itt	lt
 8003012:	238b      	movlt	r3, #139	@ 0x8b
 8003014:	602b      	strlt	r3, [r5, #0]
 8003016:	2c00      	cmp	r4, #0
 8003018:	d0dd      	beq.n	8002fd6 <sniprintf+0x16>
 800301a:	2200      	movs	r2, #0
 800301c:	9b02      	ldr	r3, [sp, #8]
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	e7d9      	b.n	8002fd6 <sniprintf+0x16>
 8003022:	bf00      	nop
 8003024:	20000054 	.word	0x20000054

08003028 <memset>:
 8003028:	4603      	mov	r3, r0
 800302a:	4402      	add	r2, r0
 800302c:	4293      	cmp	r3, r2
 800302e:	d100      	bne.n	8003032 <memset+0xa>
 8003030:	4770      	bx	lr
 8003032:	f803 1b01 	strb.w	r1, [r3], #1
 8003036:	e7f9      	b.n	800302c <memset+0x4>

08003038 <__errno>:
 8003038:	4b01      	ldr	r3, [pc, #4]	@ (8003040 <__errno+0x8>)
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000054 	.word	0x20000054

08003044 <__libc_init_array>:
 8003044:	b570      	push	{r4, r5, r6, lr}
 8003046:	2600      	movs	r6, #0
 8003048:	4d0c      	ldr	r5, [pc, #48]	@ (800307c <__libc_init_array+0x38>)
 800304a:	4c0d      	ldr	r4, [pc, #52]	@ (8003080 <__libc_init_array+0x3c>)
 800304c:	1b64      	subs	r4, r4, r5
 800304e:	10a4      	asrs	r4, r4, #2
 8003050:	42a6      	cmp	r6, r4
 8003052:	d109      	bne.n	8003068 <__libc_init_array+0x24>
 8003054:	f000 fc78 	bl	8003948 <_init>
 8003058:	2600      	movs	r6, #0
 800305a:	4d0a      	ldr	r5, [pc, #40]	@ (8003084 <__libc_init_array+0x40>)
 800305c:	4c0a      	ldr	r4, [pc, #40]	@ (8003088 <__libc_init_array+0x44>)
 800305e:	1b64      	subs	r4, r4, r5
 8003060:	10a4      	asrs	r4, r4, #2
 8003062:	42a6      	cmp	r6, r4
 8003064:	d105      	bne.n	8003072 <__libc_init_array+0x2e>
 8003066:	bd70      	pop	{r4, r5, r6, pc}
 8003068:	f855 3b04 	ldr.w	r3, [r5], #4
 800306c:	4798      	blx	r3
 800306e:	3601      	adds	r6, #1
 8003070:	e7ee      	b.n	8003050 <__libc_init_array+0xc>
 8003072:	f855 3b04 	ldr.w	r3, [r5], #4
 8003076:	4798      	blx	r3
 8003078:	3601      	adds	r6, #1
 800307a:	e7f2      	b.n	8003062 <__libc_init_array+0x1e>
 800307c:	08003a34 	.word	0x08003a34
 8003080:	08003a34 	.word	0x08003a34
 8003084:	08003a34 	.word	0x08003a34
 8003088:	08003a38 	.word	0x08003a38

0800308c <__retarget_lock_acquire_recursive>:
 800308c:	4770      	bx	lr

0800308e <__retarget_lock_release_recursive>:
 800308e:	4770      	bx	lr

08003090 <_free_r>:
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	4605      	mov	r5, r0
 8003094:	2900      	cmp	r1, #0
 8003096:	d040      	beq.n	800311a <_free_r+0x8a>
 8003098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800309c:	1f0c      	subs	r4, r1, #4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bfb8      	it	lt
 80030a2:	18e4      	addlt	r4, r4, r3
 80030a4:	f000 f8de 	bl	8003264 <__malloc_lock>
 80030a8:	4a1c      	ldr	r2, [pc, #112]	@ (800311c <_free_r+0x8c>)
 80030aa:	6813      	ldr	r3, [r2, #0]
 80030ac:	b933      	cbnz	r3, 80030bc <_free_r+0x2c>
 80030ae:	6063      	str	r3, [r4, #4]
 80030b0:	6014      	str	r4, [r2, #0]
 80030b2:	4628      	mov	r0, r5
 80030b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030b8:	f000 b8da 	b.w	8003270 <__malloc_unlock>
 80030bc:	42a3      	cmp	r3, r4
 80030be:	d908      	bls.n	80030d2 <_free_r+0x42>
 80030c0:	6820      	ldr	r0, [r4, #0]
 80030c2:	1821      	adds	r1, r4, r0
 80030c4:	428b      	cmp	r3, r1
 80030c6:	bf01      	itttt	eq
 80030c8:	6819      	ldreq	r1, [r3, #0]
 80030ca:	685b      	ldreq	r3, [r3, #4]
 80030cc:	1809      	addeq	r1, r1, r0
 80030ce:	6021      	streq	r1, [r4, #0]
 80030d0:	e7ed      	b.n	80030ae <_free_r+0x1e>
 80030d2:	461a      	mov	r2, r3
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	b10b      	cbz	r3, 80030dc <_free_r+0x4c>
 80030d8:	42a3      	cmp	r3, r4
 80030da:	d9fa      	bls.n	80030d2 <_free_r+0x42>
 80030dc:	6811      	ldr	r1, [r2, #0]
 80030de:	1850      	adds	r0, r2, r1
 80030e0:	42a0      	cmp	r0, r4
 80030e2:	d10b      	bne.n	80030fc <_free_r+0x6c>
 80030e4:	6820      	ldr	r0, [r4, #0]
 80030e6:	4401      	add	r1, r0
 80030e8:	1850      	adds	r0, r2, r1
 80030ea:	4283      	cmp	r3, r0
 80030ec:	6011      	str	r1, [r2, #0]
 80030ee:	d1e0      	bne.n	80030b2 <_free_r+0x22>
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4408      	add	r0, r1
 80030f6:	6010      	str	r0, [r2, #0]
 80030f8:	6053      	str	r3, [r2, #4]
 80030fa:	e7da      	b.n	80030b2 <_free_r+0x22>
 80030fc:	d902      	bls.n	8003104 <_free_r+0x74>
 80030fe:	230c      	movs	r3, #12
 8003100:	602b      	str	r3, [r5, #0]
 8003102:	e7d6      	b.n	80030b2 <_free_r+0x22>
 8003104:	6820      	ldr	r0, [r4, #0]
 8003106:	1821      	adds	r1, r4, r0
 8003108:	428b      	cmp	r3, r1
 800310a:	bf01      	itttt	eq
 800310c:	6819      	ldreq	r1, [r3, #0]
 800310e:	685b      	ldreq	r3, [r3, #4]
 8003110:	1809      	addeq	r1, r1, r0
 8003112:	6021      	streq	r1, [r4, #0]
 8003114:	6063      	str	r3, [r4, #4]
 8003116:	6054      	str	r4, [r2, #4]
 8003118:	e7cb      	b.n	80030b2 <_free_r+0x22>
 800311a:	bd38      	pop	{r3, r4, r5, pc}
 800311c:	20000378 	.word	0x20000378

08003120 <sbrk_aligned>:
 8003120:	b570      	push	{r4, r5, r6, lr}
 8003122:	4e0f      	ldr	r6, [pc, #60]	@ (8003160 <sbrk_aligned+0x40>)
 8003124:	460c      	mov	r4, r1
 8003126:	6831      	ldr	r1, [r6, #0]
 8003128:	4605      	mov	r5, r0
 800312a:	b911      	cbnz	r1, 8003132 <sbrk_aligned+0x12>
 800312c:	f000 fbaa 	bl	8003884 <_sbrk_r>
 8003130:	6030      	str	r0, [r6, #0]
 8003132:	4621      	mov	r1, r4
 8003134:	4628      	mov	r0, r5
 8003136:	f000 fba5 	bl	8003884 <_sbrk_r>
 800313a:	1c43      	adds	r3, r0, #1
 800313c:	d103      	bne.n	8003146 <sbrk_aligned+0x26>
 800313e:	f04f 34ff 	mov.w	r4, #4294967295
 8003142:	4620      	mov	r0, r4
 8003144:	bd70      	pop	{r4, r5, r6, pc}
 8003146:	1cc4      	adds	r4, r0, #3
 8003148:	f024 0403 	bic.w	r4, r4, #3
 800314c:	42a0      	cmp	r0, r4
 800314e:	d0f8      	beq.n	8003142 <sbrk_aligned+0x22>
 8003150:	1a21      	subs	r1, r4, r0
 8003152:	4628      	mov	r0, r5
 8003154:	f000 fb96 	bl	8003884 <_sbrk_r>
 8003158:	3001      	adds	r0, #1
 800315a:	d1f2      	bne.n	8003142 <sbrk_aligned+0x22>
 800315c:	e7ef      	b.n	800313e <sbrk_aligned+0x1e>
 800315e:	bf00      	nop
 8003160:	20000374 	.word	0x20000374

08003164 <_malloc_r>:
 8003164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003168:	1ccd      	adds	r5, r1, #3
 800316a:	f025 0503 	bic.w	r5, r5, #3
 800316e:	3508      	adds	r5, #8
 8003170:	2d0c      	cmp	r5, #12
 8003172:	bf38      	it	cc
 8003174:	250c      	movcc	r5, #12
 8003176:	2d00      	cmp	r5, #0
 8003178:	4606      	mov	r6, r0
 800317a:	db01      	blt.n	8003180 <_malloc_r+0x1c>
 800317c:	42a9      	cmp	r1, r5
 800317e:	d904      	bls.n	800318a <_malloc_r+0x26>
 8003180:	230c      	movs	r3, #12
 8003182:	6033      	str	r3, [r6, #0]
 8003184:	2000      	movs	r0, #0
 8003186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800318a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003260 <_malloc_r+0xfc>
 800318e:	f000 f869 	bl	8003264 <__malloc_lock>
 8003192:	f8d8 3000 	ldr.w	r3, [r8]
 8003196:	461c      	mov	r4, r3
 8003198:	bb44      	cbnz	r4, 80031ec <_malloc_r+0x88>
 800319a:	4629      	mov	r1, r5
 800319c:	4630      	mov	r0, r6
 800319e:	f7ff ffbf 	bl	8003120 <sbrk_aligned>
 80031a2:	1c43      	adds	r3, r0, #1
 80031a4:	4604      	mov	r4, r0
 80031a6:	d158      	bne.n	800325a <_malloc_r+0xf6>
 80031a8:	f8d8 4000 	ldr.w	r4, [r8]
 80031ac:	4627      	mov	r7, r4
 80031ae:	2f00      	cmp	r7, #0
 80031b0:	d143      	bne.n	800323a <_malloc_r+0xd6>
 80031b2:	2c00      	cmp	r4, #0
 80031b4:	d04b      	beq.n	800324e <_malloc_r+0xea>
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	4639      	mov	r1, r7
 80031ba:	4630      	mov	r0, r6
 80031bc:	eb04 0903 	add.w	r9, r4, r3
 80031c0:	f000 fb60 	bl	8003884 <_sbrk_r>
 80031c4:	4581      	cmp	r9, r0
 80031c6:	d142      	bne.n	800324e <_malloc_r+0xea>
 80031c8:	6821      	ldr	r1, [r4, #0]
 80031ca:	4630      	mov	r0, r6
 80031cc:	1a6d      	subs	r5, r5, r1
 80031ce:	4629      	mov	r1, r5
 80031d0:	f7ff ffa6 	bl	8003120 <sbrk_aligned>
 80031d4:	3001      	adds	r0, #1
 80031d6:	d03a      	beq.n	800324e <_malloc_r+0xea>
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	442b      	add	r3, r5
 80031dc:	6023      	str	r3, [r4, #0]
 80031de:	f8d8 3000 	ldr.w	r3, [r8]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	bb62      	cbnz	r2, 8003240 <_malloc_r+0xdc>
 80031e6:	f8c8 7000 	str.w	r7, [r8]
 80031ea:	e00f      	b.n	800320c <_malloc_r+0xa8>
 80031ec:	6822      	ldr	r2, [r4, #0]
 80031ee:	1b52      	subs	r2, r2, r5
 80031f0:	d420      	bmi.n	8003234 <_malloc_r+0xd0>
 80031f2:	2a0b      	cmp	r2, #11
 80031f4:	d917      	bls.n	8003226 <_malloc_r+0xc2>
 80031f6:	1961      	adds	r1, r4, r5
 80031f8:	42a3      	cmp	r3, r4
 80031fa:	6025      	str	r5, [r4, #0]
 80031fc:	bf18      	it	ne
 80031fe:	6059      	strne	r1, [r3, #4]
 8003200:	6863      	ldr	r3, [r4, #4]
 8003202:	bf08      	it	eq
 8003204:	f8c8 1000 	streq.w	r1, [r8]
 8003208:	5162      	str	r2, [r4, r5]
 800320a:	604b      	str	r3, [r1, #4]
 800320c:	4630      	mov	r0, r6
 800320e:	f000 f82f 	bl	8003270 <__malloc_unlock>
 8003212:	f104 000b 	add.w	r0, r4, #11
 8003216:	1d23      	adds	r3, r4, #4
 8003218:	f020 0007 	bic.w	r0, r0, #7
 800321c:	1ac2      	subs	r2, r0, r3
 800321e:	bf1c      	itt	ne
 8003220:	1a1b      	subne	r3, r3, r0
 8003222:	50a3      	strne	r3, [r4, r2]
 8003224:	e7af      	b.n	8003186 <_malloc_r+0x22>
 8003226:	6862      	ldr	r2, [r4, #4]
 8003228:	42a3      	cmp	r3, r4
 800322a:	bf0c      	ite	eq
 800322c:	f8c8 2000 	streq.w	r2, [r8]
 8003230:	605a      	strne	r2, [r3, #4]
 8003232:	e7eb      	b.n	800320c <_malloc_r+0xa8>
 8003234:	4623      	mov	r3, r4
 8003236:	6864      	ldr	r4, [r4, #4]
 8003238:	e7ae      	b.n	8003198 <_malloc_r+0x34>
 800323a:	463c      	mov	r4, r7
 800323c:	687f      	ldr	r7, [r7, #4]
 800323e:	e7b6      	b.n	80031ae <_malloc_r+0x4a>
 8003240:	461a      	mov	r2, r3
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	42a3      	cmp	r3, r4
 8003246:	d1fb      	bne.n	8003240 <_malloc_r+0xdc>
 8003248:	2300      	movs	r3, #0
 800324a:	6053      	str	r3, [r2, #4]
 800324c:	e7de      	b.n	800320c <_malloc_r+0xa8>
 800324e:	230c      	movs	r3, #12
 8003250:	4630      	mov	r0, r6
 8003252:	6033      	str	r3, [r6, #0]
 8003254:	f000 f80c 	bl	8003270 <__malloc_unlock>
 8003258:	e794      	b.n	8003184 <_malloc_r+0x20>
 800325a:	6005      	str	r5, [r0, #0]
 800325c:	e7d6      	b.n	800320c <_malloc_r+0xa8>
 800325e:	bf00      	nop
 8003260:	20000378 	.word	0x20000378

08003264 <__malloc_lock>:
 8003264:	4801      	ldr	r0, [pc, #4]	@ (800326c <__malloc_lock+0x8>)
 8003266:	f7ff bf11 	b.w	800308c <__retarget_lock_acquire_recursive>
 800326a:	bf00      	nop
 800326c:	20000370 	.word	0x20000370

08003270 <__malloc_unlock>:
 8003270:	4801      	ldr	r0, [pc, #4]	@ (8003278 <__malloc_unlock+0x8>)
 8003272:	f7ff bf0c 	b.w	800308e <__retarget_lock_release_recursive>
 8003276:	bf00      	nop
 8003278:	20000370 	.word	0x20000370

0800327c <__ssputs_r>:
 800327c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003280:	461f      	mov	r7, r3
 8003282:	688e      	ldr	r6, [r1, #8]
 8003284:	4682      	mov	sl, r0
 8003286:	42be      	cmp	r6, r7
 8003288:	460c      	mov	r4, r1
 800328a:	4690      	mov	r8, r2
 800328c:	680b      	ldr	r3, [r1, #0]
 800328e:	d82d      	bhi.n	80032ec <__ssputs_r+0x70>
 8003290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003294:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003298:	d026      	beq.n	80032e8 <__ssputs_r+0x6c>
 800329a:	6965      	ldr	r5, [r4, #20]
 800329c:	6909      	ldr	r1, [r1, #16]
 800329e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032a2:	eba3 0901 	sub.w	r9, r3, r1
 80032a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032aa:	1c7b      	adds	r3, r7, #1
 80032ac:	444b      	add	r3, r9
 80032ae:	106d      	asrs	r5, r5, #1
 80032b0:	429d      	cmp	r5, r3
 80032b2:	bf38      	it	cc
 80032b4:	461d      	movcc	r5, r3
 80032b6:	0553      	lsls	r3, r2, #21
 80032b8:	d527      	bpl.n	800330a <__ssputs_r+0x8e>
 80032ba:	4629      	mov	r1, r5
 80032bc:	f7ff ff52 	bl	8003164 <_malloc_r>
 80032c0:	4606      	mov	r6, r0
 80032c2:	b360      	cbz	r0, 800331e <__ssputs_r+0xa2>
 80032c4:	464a      	mov	r2, r9
 80032c6:	6921      	ldr	r1, [r4, #16]
 80032c8:	f000 fafa 	bl	80038c0 <memcpy>
 80032cc:	89a3      	ldrh	r3, [r4, #12]
 80032ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80032d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032d6:	81a3      	strh	r3, [r4, #12]
 80032d8:	6126      	str	r6, [r4, #16]
 80032da:	444e      	add	r6, r9
 80032dc:	6026      	str	r6, [r4, #0]
 80032de:	463e      	mov	r6, r7
 80032e0:	6165      	str	r5, [r4, #20]
 80032e2:	eba5 0509 	sub.w	r5, r5, r9
 80032e6:	60a5      	str	r5, [r4, #8]
 80032e8:	42be      	cmp	r6, r7
 80032ea:	d900      	bls.n	80032ee <__ssputs_r+0x72>
 80032ec:	463e      	mov	r6, r7
 80032ee:	4632      	mov	r2, r6
 80032f0:	4641      	mov	r1, r8
 80032f2:	6820      	ldr	r0, [r4, #0]
 80032f4:	f000 faac 	bl	8003850 <memmove>
 80032f8:	2000      	movs	r0, #0
 80032fa:	68a3      	ldr	r3, [r4, #8]
 80032fc:	1b9b      	subs	r3, r3, r6
 80032fe:	60a3      	str	r3, [r4, #8]
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	4433      	add	r3, r6
 8003304:	6023      	str	r3, [r4, #0]
 8003306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800330a:	462a      	mov	r2, r5
 800330c:	f000 fae6 	bl	80038dc <_realloc_r>
 8003310:	4606      	mov	r6, r0
 8003312:	2800      	cmp	r0, #0
 8003314:	d1e0      	bne.n	80032d8 <__ssputs_r+0x5c>
 8003316:	4650      	mov	r0, sl
 8003318:	6921      	ldr	r1, [r4, #16]
 800331a:	f7ff feb9 	bl	8003090 <_free_r>
 800331e:	230c      	movs	r3, #12
 8003320:	f8ca 3000 	str.w	r3, [sl]
 8003324:	89a3      	ldrh	r3, [r4, #12]
 8003326:	f04f 30ff 	mov.w	r0, #4294967295
 800332a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800332e:	81a3      	strh	r3, [r4, #12]
 8003330:	e7e9      	b.n	8003306 <__ssputs_r+0x8a>
	...

08003334 <_svfiprintf_r>:
 8003334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003338:	4698      	mov	r8, r3
 800333a:	898b      	ldrh	r3, [r1, #12]
 800333c:	4607      	mov	r7, r0
 800333e:	061b      	lsls	r3, r3, #24
 8003340:	460d      	mov	r5, r1
 8003342:	4614      	mov	r4, r2
 8003344:	b09d      	sub	sp, #116	@ 0x74
 8003346:	d510      	bpl.n	800336a <_svfiprintf_r+0x36>
 8003348:	690b      	ldr	r3, [r1, #16]
 800334a:	b973      	cbnz	r3, 800336a <_svfiprintf_r+0x36>
 800334c:	2140      	movs	r1, #64	@ 0x40
 800334e:	f7ff ff09 	bl	8003164 <_malloc_r>
 8003352:	6028      	str	r0, [r5, #0]
 8003354:	6128      	str	r0, [r5, #16]
 8003356:	b930      	cbnz	r0, 8003366 <_svfiprintf_r+0x32>
 8003358:	230c      	movs	r3, #12
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	f04f 30ff 	mov.w	r0, #4294967295
 8003360:	b01d      	add	sp, #116	@ 0x74
 8003362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003366:	2340      	movs	r3, #64	@ 0x40
 8003368:	616b      	str	r3, [r5, #20]
 800336a:	2300      	movs	r3, #0
 800336c:	9309      	str	r3, [sp, #36]	@ 0x24
 800336e:	2320      	movs	r3, #32
 8003370:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003374:	2330      	movs	r3, #48	@ 0x30
 8003376:	f04f 0901 	mov.w	r9, #1
 800337a:	f8cd 800c 	str.w	r8, [sp, #12]
 800337e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003518 <_svfiprintf_r+0x1e4>
 8003382:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003386:	4623      	mov	r3, r4
 8003388:	469a      	mov	sl, r3
 800338a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800338e:	b10a      	cbz	r2, 8003394 <_svfiprintf_r+0x60>
 8003390:	2a25      	cmp	r2, #37	@ 0x25
 8003392:	d1f9      	bne.n	8003388 <_svfiprintf_r+0x54>
 8003394:	ebba 0b04 	subs.w	fp, sl, r4
 8003398:	d00b      	beq.n	80033b2 <_svfiprintf_r+0x7e>
 800339a:	465b      	mov	r3, fp
 800339c:	4622      	mov	r2, r4
 800339e:	4629      	mov	r1, r5
 80033a0:	4638      	mov	r0, r7
 80033a2:	f7ff ff6b 	bl	800327c <__ssputs_r>
 80033a6:	3001      	adds	r0, #1
 80033a8:	f000 80a7 	beq.w	80034fa <_svfiprintf_r+0x1c6>
 80033ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033ae:	445a      	add	r2, fp
 80033b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80033b2:	f89a 3000 	ldrb.w	r3, [sl]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 809f 	beq.w	80034fa <_svfiprintf_r+0x1c6>
 80033bc:	2300      	movs	r3, #0
 80033be:	f04f 32ff 	mov.w	r2, #4294967295
 80033c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033c6:	f10a 0a01 	add.w	sl, sl, #1
 80033ca:	9304      	str	r3, [sp, #16]
 80033cc:	9307      	str	r3, [sp, #28]
 80033ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80033d4:	4654      	mov	r4, sl
 80033d6:	2205      	movs	r2, #5
 80033d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033dc:	484e      	ldr	r0, [pc, #312]	@ (8003518 <_svfiprintf_r+0x1e4>)
 80033de:	f000 fa61 	bl	80038a4 <memchr>
 80033e2:	9a04      	ldr	r2, [sp, #16]
 80033e4:	b9d8      	cbnz	r0, 800341e <_svfiprintf_r+0xea>
 80033e6:	06d0      	lsls	r0, r2, #27
 80033e8:	bf44      	itt	mi
 80033ea:	2320      	movmi	r3, #32
 80033ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033f0:	0711      	lsls	r1, r2, #28
 80033f2:	bf44      	itt	mi
 80033f4:	232b      	movmi	r3, #43	@ 0x2b
 80033f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033fa:	f89a 3000 	ldrb.w	r3, [sl]
 80033fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8003400:	d015      	beq.n	800342e <_svfiprintf_r+0xfa>
 8003402:	4654      	mov	r4, sl
 8003404:	2000      	movs	r0, #0
 8003406:	f04f 0c0a 	mov.w	ip, #10
 800340a:	9a07      	ldr	r2, [sp, #28]
 800340c:	4621      	mov	r1, r4
 800340e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003412:	3b30      	subs	r3, #48	@ 0x30
 8003414:	2b09      	cmp	r3, #9
 8003416:	d94b      	bls.n	80034b0 <_svfiprintf_r+0x17c>
 8003418:	b1b0      	cbz	r0, 8003448 <_svfiprintf_r+0x114>
 800341a:	9207      	str	r2, [sp, #28]
 800341c:	e014      	b.n	8003448 <_svfiprintf_r+0x114>
 800341e:	eba0 0308 	sub.w	r3, r0, r8
 8003422:	fa09 f303 	lsl.w	r3, r9, r3
 8003426:	4313      	orrs	r3, r2
 8003428:	46a2      	mov	sl, r4
 800342a:	9304      	str	r3, [sp, #16]
 800342c:	e7d2      	b.n	80033d4 <_svfiprintf_r+0xa0>
 800342e:	9b03      	ldr	r3, [sp, #12]
 8003430:	1d19      	adds	r1, r3, #4
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	9103      	str	r1, [sp, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	bfbb      	ittet	lt
 800343a:	425b      	neglt	r3, r3
 800343c:	f042 0202 	orrlt.w	r2, r2, #2
 8003440:	9307      	strge	r3, [sp, #28]
 8003442:	9307      	strlt	r3, [sp, #28]
 8003444:	bfb8      	it	lt
 8003446:	9204      	strlt	r2, [sp, #16]
 8003448:	7823      	ldrb	r3, [r4, #0]
 800344a:	2b2e      	cmp	r3, #46	@ 0x2e
 800344c:	d10a      	bne.n	8003464 <_svfiprintf_r+0x130>
 800344e:	7863      	ldrb	r3, [r4, #1]
 8003450:	2b2a      	cmp	r3, #42	@ 0x2a
 8003452:	d132      	bne.n	80034ba <_svfiprintf_r+0x186>
 8003454:	9b03      	ldr	r3, [sp, #12]
 8003456:	3402      	adds	r4, #2
 8003458:	1d1a      	adds	r2, r3, #4
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	9203      	str	r2, [sp, #12]
 800345e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003462:	9305      	str	r3, [sp, #20]
 8003464:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800351c <_svfiprintf_r+0x1e8>
 8003468:	2203      	movs	r2, #3
 800346a:	4650      	mov	r0, sl
 800346c:	7821      	ldrb	r1, [r4, #0]
 800346e:	f000 fa19 	bl	80038a4 <memchr>
 8003472:	b138      	cbz	r0, 8003484 <_svfiprintf_r+0x150>
 8003474:	2240      	movs	r2, #64	@ 0x40
 8003476:	9b04      	ldr	r3, [sp, #16]
 8003478:	eba0 000a 	sub.w	r0, r0, sl
 800347c:	4082      	lsls	r2, r0
 800347e:	4313      	orrs	r3, r2
 8003480:	3401      	adds	r4, #1
 8003482:	9304      	str	r3, [sp, #16]
 8003484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003488:	2206      	movs	r2, #6
 800348a:	4825      	ldr	r0, [pc, #148]	@ (8003520 <_svfiprintf_r+0x1ec>)
 800348c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003490:	f000 fa08 	bl	80038a4 <memchr>
 8003494:	2800      	cmp	r0, #0
 8003496:	d036      	beq.n	8003506 <_svfiprintf_r+0x1d2>
 8003498:	4b22      	ldr	r3, [pc, #136]	@ (8003524 <_svfiprintf_r+0x1f0>)
 800349a:	bb1b      	cbnz	r3, 80034e4 <_svfiprintf_r+0x1b0>
 800349c:	9b03      	ldr	r3, [sp, #12]
 800349e:	3307      	adds	r3, #7
 80034a0:	f023 0307 	bic.w	r3, r3, #7
 80034a4:	3308      	adds	r3, #8
 80034a6:	9303      	str	r3, [sp, #12]
 80034a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034aa:	4433      	add	r3, r6
 80034ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80034ae:	e76a      	b.n	8003386 <_svfiprintf_r+0x52>
 80034b0:	460c      	mov	r4, r1
 80034b2:	2001      	movs	r0, #1
 80034b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80034b8:	e7a8      	b.n	800340c <_svfiprintf_r+0xd8>
 80034ba:	2300      	movs	r3, #0
 80034bc:	f04f 0c0a 	mov.w	ip, #10
 80034c0:	4619      	mov	r1, r3
 80034c2:	3401      	adds	r4, #1
 80034c4:	9305      	str	r3, [sp, #20]
 80034c6:	4620      	mov	r0, r4
 80034c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034cc:	3a30      	subs	r2, #48	@ 0x30
 80034ce:	2a09      	cmp	r2, #9
 80034d0:	d903      	bls.n	80034da <_svfiprintf_r+0x1a6>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0c6      	beq.n	8003464 <_svfiprintf_r+0x130>
 80034d6:	9105      	str	r1, [sp, #20]
 80034d8:	e7c4      	b.n	8003464 <_svfiprintf_r+0x130>
 80034da:	4604      	mov	r4, r0
 80034dc:	2301      	movs	r3, #1
 80034de:	fb0c 2101 	mla	r1, ip, r1, r2
 80034e2:	e7f0      	b.n	80034c6 <_svfiprintf_r+0x192>
 80034e4:	ab03      	add	r3, sp, #12
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	462a      	mov	r2, r5
 80034ea:	4638      	mov	r0, r7
 80034ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003528 <_svfiprintf_r+0x1f4>)
 80034ee:	a904      	add	r1, sp, #16
 80034f0:	f3af 8000 	nop.w
 80034f4:	1c42      	adds	r2, r0, #1
 80034f6:	4606      	mov	r6, r0
 80034f8:	d1d6      	bne.n	80034a8 <_svfiprintf_r+0x174>
 80034fa:	89ab      	ldrh	r3, [r5, #12]
 80034fc:	065b      	lsls	r3, r3, #25
 80034fe:	f53f af2d 	bmi.w	800335c <_svfiprintf_r+0x28>
 8003502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003504:	e72c      	b.n	8003360 <_svfiprintf_r+0x2c>
 8003506:	ab03      	add	r3, sp, #12
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	462a      	mov	r2, r5
 800350c:	4638      	mov	r0, r7
 800350e:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <_svfiprintf_r+0x1f4>)
 8003510:	a904      	add	r1, sp, #16
 8003512:	f000 f87d 	bl	8003610 <_printf_i>
 8003516:	e7ed      	b.n	80034f4 <_svfiprintf_r+0x1c0>
 8003518:	080039f6 	.word	0x080039f6
 800351c:	080039fc 	.word	0x080039fc
 8003520:	08003a00 	.word	0x08003a00
 8003524:	00000000 	.word	0x00000000
 8003528:	0800327d 	.word	0x0800327d

0800352c <_printf_common>:
 800352c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003530:	4616      	mov	r6, r2
 8003532:	4698      	mov	r8, r3
 8003534:	688a      	ldr	r2, [r1, #8]
 8003536:	690b      	ldr	r3, [r1, #16]
 8003538:	4607      	mov	r7, r0
 800353a:	4293      	cmp	r3, r2
 800353c:	bfb8      	it	lt
 800353e:	4613      	movlt	r3, r2
 8003540:	6033      	str	r3, [r6, #0]
 8003542:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003546:	460c      	mov	r4, r1
 8003548:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800354c:	b10a      	cbz	r2, 8003552 <_printf_common+0x26>
 800354e:	3301      	adds	r3, #1
 8003550:	6033      	str	r3, [r6, #0]
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	0699      	lsls	r1, r3, #26
 8003556:	bf42      	ittt	mi
 8003558:	6833      	ldrmi	r3, [r6, #0]
 800355a:	3302      	addmi	r3, #2
 800355c:	6033      	strmi	r3, [r6, #0]
 800355e:	6825      	ldr	r5, [r4, #0]
 8003560:	f015 0506 	ands.w	r5, r5, #6
 8003564:	d106      	bne.n	8003574 <_printf_common+0x48>
 8003566:	f104 0a19 	add.w	sl, r4, #25
 800356a:	68e3      	ldr	r3, [r4, #12]
 800356c:	6832      	ldr	r2, [r6, #0]
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	42ab      	cmp	r3, r5
 8003572:	dc2b      	bgt.n	80035cc <_printf_common+0xa0>
 8003574:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003578:	6822      	ldr	r2, [r4, #0]
 800357a:	3b00      	subs	r3, #0
 800357c:	bf18      	it	ne
 800357e:	2301      	movne	r3, #1
 8003580:	0692      	lsls	r2, r2, #26
 8003582:	d430      	bmi.n	80035e6 <_printf_common+0xba>
 8003584:	4641      	mov	r1, r8
 8003586:	4638      	mov	r0, r7
 8003588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800358c:	47c8      	blx	r9
 800358e:	3001      	adds	r0, #1
 8003590:	d023      	beq.n	80035da <_printf_common+0xae>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	6922      	ldr	r2, [r4, #16]
 8003596:	f003 0306 	and.w	r3, r3, #6
 800359a:	2b04      	cmp	r3, #4
 800359c:	bf14      	ite	ne
 800359e:	2500      	movne	r5, #0
 80035a0:	6833      	ldreq	r3, [r6, #0]
 80035a2:	f04f 0600 	mov.w	r6, #0
 80035a6:	bf08      	it	eq
 80035a8:	68e5      	ldreq	r5, [r4, #12]
 80035aa:	f104 041a 	add.w	r4, r4, #26
 80035ae:	bf08      	it	eq
 80035b0:	1aed      	subeq	r5, r5, r3
 80035b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80035b6:	bf08      	it	eq
 80035b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035bc:	4293      	cmp	r3, r2
 80035be:	bfc4      	itt	gt
 80035c0:	1a9b      	subgt	r3, r3, r2
 80035c2:	18ed      	addgt	r5, r5, r3
 80035c4:	42b5      	cmp	r5, r6
 80035c6:	d11a      	bne.n	80035fe <_printf_common+0xd2>
 80035c8:	2000      	movs	r0, #0
 80035ca:	e008      	b.n	80035de <_printf_common+0xb2>
 80035cc:	2301      	movs	r3, #1
 80035ce:	4652      	mov	r2, sl
 80035d0:	4641      	mov	r1, r8
 80035d2:	4638      	mov	r0, r7
 80035d4:	47c8      	blx	r9
 80035d6:	3001      	adds	r0, #1
 80035d8:	d103      	bne.n	80035e2 <_printf_common+0xb6>
 80035da:	f04f 30ff 	mov.w	r0, #4294967295
 80035de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e2:	3501      	adds	r5, #1
 80035e4:	e7c1      	b.n	800356a <_printf_common+0x3e>
 80035e6:	2030      	movs	r0, #48	@ 0x30
 80035e8:	18e1      	adds	r1, r4, r3
 80035ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035f4:	4422      	add	r2, r4
 80035f6:	3302      	adds	r3, #2
 80035f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035fc:	e7c2      	b.n	8003584 <_printf_common+0x58>
 80035fe:	2301      	movs	r3, #1
 8003600:	4622      	mov	r2, r4
 8003602:	4641      	mov	r1, r8
 8003604:	4638      	mov	r0, r7
 8003606:	47c8      	blx	r9
 8003608:	3001      	adds	r0, #1
 800360a:	d0e6      	beq.n	80035da <_printf_common+0xae>
 800360c:	3601      	adds	r6, #1
 800360e:	e7d9      	b.n	80035c4 <_printf_common+0x98>

08003610 <_printf_i>:
 8003610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003614:	7e0f      	ldrb	r7, [r1, #24]
 8003616:	4691      	mov	r9, r2
 8003618:	2f78      	cmp	r7, #120	@ 0x78
 800361a:	4680      	mov	r8, r0
 800361c:	460c      	mov	r4, r1
 800361e:	469a      	mov	sl, r3
 8003620:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003626:	d807      	bhi.n	8003638 <_printf_i+0x28>
 8003628:	2f62      	cmp	r7, #98	@ 0x62
 800362a:	d80a      	bhi.n	8003642 <_printf_i+0x32>
 800362c:	2f00      	cmp	r7, #0
 800362e:	f000 80d3 	beq.w	80037d8 <_printf_i+0x1c8>
 8003632:	2f58      	cmp	r7, #88	@ 0x58
 8003634:	f000 80ba 	beq.w	80037ac <_printf_i+0x19c>
 8003638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800363c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003640:	e03a      	b.n	80036b8 <_printf_i+0xa8>
 8003642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003646:	2b15      	cmp	r3, #21
 8003648:	d8f6      	bhi.n	8003638 <_printf_i+0x28>
 800364a:	a101      	add	r1, pc, #4	@ (adr r1, 8003650 <_printf_i+0x40>)
 800364c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003650:	080036a9 	.word	0x080036a9
 8003654:	080036bd 	.word	0x080036bd
 8003658:	08003639 	.word	0x08003639
 800365c:	08003639 	.word	0x08003639
 8003660:	08003639 	.word	0x08003639
 8003664:	08003639 	.word	0x08003639
 8003668:	080036bd 	.word	0x080036bd
 800366c:	08003639 	.word	0x08003639
 8003670:	08003639 	.word	0x08003639
 8003674:	08003639 	.word	0x08003639
 8003678:	08003639 	.word	0x08003639
 800367c:	080037bf 	.word	0x080037bf
 8003680:	080036e7 	.word	0x080036e7
 8003684:	08003779 	.word	0x08003779
 8003688:	08003639 	.word	0x08003639
 800368c:	08003639 	.word	0x08003639
 8003690:	080037e1 	.word	0x080037e1
 8003694:	08003639 	.word	0x08003639
 8003698:	080036e7 	.word	0x080036e7
 800369c:	08003639 	.word	0x08003639
 80036a0:	08003639 	.word	0x08003639
 80036a4:	08003781 	.word	0x08003781
 80036a8:	6833      	ldr	r3, [r6, #0]
 80036aa:	1d1a      	adds	r2, r3, #4
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6032      	str	r2, [r6, #0]
 80036b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036b8:	2301      	movs	r3, #1
 80036ba:	e09e      	b.n	80037fa <_printf_i+0x1ea>
 80036bc:	6833      	ldr	r3, [r6, #0]
 80036be:	6820      	ldr	r0, [r4, #0]
 80036c0:	1d19      	adds	r1, r3, #4
 80036c2:	6031      	str	r1, [r6, #0]
 80036c4:	0606      	lsls	r6, r0, #24
 80036c6:	d501      	bpl.n	80036cc <_printf_i+0xbc>
 80036c8:	681d      	ldr	r5, [r3, #0]
 80036ca:	e003      	b.n	80036d4 <_printf_i+0xc4>
 80036cc:	0645      	lsls	r5, r0, #25
 80036ce:	d5fb      	bpl.n	80036c8 <_printf_i+0xb8>
 80036d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036d4:	2d00      	cmp	r5, #0
 80036d6:	da03      	bge.n	80036e0 <_printf_i+0xd0>
 80036d8:	232d      	movs	r3, #45	@ 0x2d
 80036da:	426d      	negs	r5, r5
 80036dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036e0:	230a      	movs	r3, #10
 80036e2:	4859      	ldr	r0, [pc, #356]	@ (8003848 <_printf_i+0x238>)
 80036e4:	e011      	b.n	800370a <_printf_i+0xfa>
 80036e6:	6821      	ldr	r1, [r4, #0]
 80036e8:	6833      	ldr	r3, [r6, #0]
 80036ea:	0608      	lsls	r0, r1, #24
 80036ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80036f0:	d402      	bmi.n	80036f8 <_printf_i+0xe8>
 80036f2:	0649      	lsls	r1, r1, #25
 80036f4:	bf48      	it	mi
 80036f6:	b2ad      	uxthmi	r5, r5
 80036f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80036fa:	6033      	str	r3, [r6, #0]
 80036fc:	bf14      	ite	ne
 80036fe:	230a      	movne	r3, #10
 8003700:	2308      	moveq	r3, #8
 8003702:	4851      	ldr	r0, [pc, #324]	@ (8003848 <_printf_i+0x238>)
 8003704:	2100      	movs	r1, #0
 8003706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800370a:	6866      	ldr	r6, [r4, #4]
 800370c:	2e00      	cmp	r6, #0
 800370e:	bfa8      	it	ge
 8003710:	6821      	ldrge	r1, [r4, #0]
 8003712:	60a6      	str	r6, [r4, #8]
 8003714:	bfa4      	itt	ge
 8003716:	f021 0104 	bicge.w	r1, r1, #4
 800371a:	6021      	strge	r1, [r4, #0]
 800371c:	b90d      	cbnz	r5, 8003722 <_printf_i+0x112>
 800371e:	2e00      	cmp	r6, #0
 8003720:	d04b      	beq.n	80037ba <_printf_i+0x1aa>
 8003722:	4616      	mov	r6, r2
 8003724:	fbb5 f1f3 	udiv	r1, r5, r3
 8003728:	fb03 5711 	mls	r7, r3, r1, r5
 800372c:	5dc7      	ldrb	r7, [r0, r7]
 800372e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003732:	462f      	mov	r7, r5
 8003734:	42bb      	cmp	r3, r7
 8003736:	460d      	mov	r5, r1
 8003738:	d9f4      	bls.n	8003724 <_printf_i+0x114>
 800373a:	2b08      	cmp	r3, #8
 800373c:	d10b      	bne.n	8003756 <_printf_i+0x146>
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	07df      	lsls	r7, r3, #31
 8003742:	d508      	bpl.n	8003756 <_printf_i+0x146>
 8003744:	6923      	ldr	r3, [r4, #16]
 8003746:	6861      	ldr	r1, [r4, #4]
 8003748:	4299      	cmp	r1, r3
 800374a:	bfde      	ittt	le
 800374c:	2330      	movle	r3, #48	@ 0x30
 800374e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003752:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003756:	1b92      	subs	r2, r2, r6
 8003758:	6122      	str	r2, [r4, #16]
 800375a:	464b      	mov	r3, r9
 800375c:	4621      	mov	r1, r4
 800375e:	4640      	mov	r0, r8
 8003760:	f8cd a000 	str.w	sl, [sp]
 8003764:	aa03      	add	r2, sp, #12
 8003766:	f7ff fee1 	bl	800352c <_printf_common>
 800376a:	3001      	adds	r0, #1
 800376c:	d14a      	bne.n	8003804 <_printf_i+0x1f4>
 800376e:	f04f 30ff 	mov.w	r0, #4294967295
 8003772:	b004      	add	sp, #16
 8003774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	f043 0320 	orr.w	r3, r3, #32
 800377e:	6023      	str	r3, [r4, #0]
 8003780:	2778      	movs	r7, #120	@ 0x78
 8003782:	4832      	ldr	r0, [pc, #200]	@ (800384c <_printf_i+0x23c>)
 8003784:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003788:	6823      	ldr	r3, [r4, #0]
 800378a:	6831      	ldr	r1, [r6, #0]
 800378c:	061f      	lsls	r7, r3, #24
 800378e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003792:	d402      	bmi.n	800379a <_printf_i+0x18a>
 8003794:	065f      	lsls	r7, r3, #25
 8003796:	bf48      	it	mi
 8003798:	b2ad      	uxthmi	r5, r5
 800379a:	6031      	str	r1, [r6, #0]
 800379c:	07d9      	lsls	r1, r3, #31
 800379e:	bf44      	itt	mi
 80037a0:	f043 0320 	orrmi.w	r3, r3, #32
 80037a4:	6023      	strmi	r3, [r4, #0]
 80037a6:	b11d      	cbz	r5, 80037b0 <_printf_i+0x1a0>
 80037a8:	2310      	movs	r3, #16
 80037aa:	e7ab      	b.n	8003704 <_printf_i+0xf4>
 80037ac:	4826      	ldr	r0, [pc, #152]	@ (8003848 <_printf_i+0x238>)
 80037ae:	e7e9      	b.n	8003784 <_printf_i+0x174>
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	f023 0320 	bic.w	r3, r3, #32
 80037b6:	6023      	str	r3, [r4, #0]
 80037b8:	e7f6      	b.n	80037a8 <_printf_i+0x198>
 80037ba:	4616      	mov	r6, r2
 80037bc:	e7bd      	b.n	800373a <_printf_i+0x12a>
 80037be:	6833      	ldr	r3, [r6, #0]
 80037c0:	6825      	ldr	r5, [r4, #0]
 80037c2:	1d18      	adds	r0, r3, #4
 80037c4:	6961      	ldr	r1, [r4, #20]
 80037c6:	6030      	str	r0, [r6, #0]
 80037c8:	062e      	lsls	r6, r5, #24
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	d501      	bpl.n	80037d2 <_printf_i+0x1c2>
 80037ce:	6019      	str	r1, [r3, #0]
 80037d0:	e002      	b.n	80037d8 <_printf_i+0x1c8>
 80037d2:	0668      	lsls	r0, r5, #25
 80037d4:	d5fb      	bpl.n	80037ce <_printf_i+0x1be>
 80037d6:	8019      	strh	r1, [r3, #0]
 80037d8:	2300      	movs	r3, #0
 80037da:	4616      	mov	r6, r2
 80037dc:	6123      	str	r3, [r4, #16]
 80037de:	e7bc      	b.n	800375a <_printf_i+0x14a>
 80037e0:	6833      	ldr	r3, [r6, #0]
 80037e2:	2100      	movs	r1, #0
 80037e4:	1d1a      	adds	r2, r3, #4
 80037e6:	6032      	str	r2, [r6, #0]
 80037e8:	681e      	ldr	r6, [r3, #0]
 80037ea:	6862      	ldr	r2, [r4, #4]
 80037ec:	4630      	mov	r0, r6
 80037ee:	f000 f859 	bl	80038a4 <memchr>
 80037f2:	b108      	cbz	r0, 80037f8 <_printf_i+0x1e8>
 80037f4:	1b80      	subs	r0, r0, r6
 80037f6:	6060      	str	r0, [r4, #4]
 80037f8:	6863      	ldr	r3, [r4, #4]
 80037fa:	6123      	str	r3, [r4, #16]
 80037fc:	2300      	movs	r3, #0
 80037fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003802:	e7aa      	b.n	800375a <_printf_i+0x14a>
 8003804:	4632      	mov	r2, r6
 8003806:	4649      	mov	r1, r9
 8003808:	4640      	mov	r0, r8
 800380a:	6923      	ldr	r3, [r4, #16]
 800380c:	47d0      	blx	sl
 800380e:	3001      	adds	r0, #1
 8003810:	d0ad      	beq.n	800376e <_printf_i+0x15e>
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	079b      	lsls	r3, r3, #30
 8003816:	d413      	bmi.n	8003840 <_printf_i+0x230>
 8003818:	68e0      	ldr	r0, [r4, #12]
 800381a:	9b03      	ldr	r3, [sp, #12]
 800381c:	4298      	cmp	r0, r3
 800381e:	bfb8      	it	lt
 8003820:	4618      	movlt	r0, r3
 8003822:	e7a6      	b.n	8003772 <_printf_i+0x162>
 8003824:	2301      	movs	r3, #1
 8003826:	4632      	mov	r2, r6
 8003828:	4649      	mov	r1, r9
 800382a:	4640      	mov	r0, r8
 800382c:	47d0      	blx	sl
 800382e:	3001      	adds	r0, #1
 8003830:	d09d      	beq.n	800376e <_printf_i+0x15e>
 8003832:	3501      	adds	r5, #1
 8003834:	68e3      	ldr	r3, [r4, #12]
 8003836:	9903      	ldr	r1, [sp, #12]
 8003838:	1a5b      	subs	r3, r3, r1
 800383a:	42ab      	cmp	r3, r5
 800383c:	dcf2      	bgt.n	8003824 <_printf_i+0x214>
 800383e:	e7eb      	b.n	8003818 <_printf_i+0x208>
 8003840:	2500      	movs	r5, #0
 8003842:	f104 0619 	add.w	r6, r4, #25
 8003846:	e7f5      	b.n	8003834 <_printf_i+0x224>
 8003848:	08003a07 	.word	0x08003a07
 800384c:	08003a18 	.word	0x08003a18

08003850 <memmove>:
 8003850:	4288      	cmp	r0, r1
 8003852:	b510      	push	{r4, lr}
 8003854:	eb01 0402 	add.w	r4, r1, r2
 8003858:	d902      	bls.n	8003860 <memmove+0x10>
 800385a:	4284      	cmp	r4, r0
 800385c:	4623      	mov	r3, r4
 800385e:	d807      	bhi.n	8003870 <memmove+0x20>
 8003860:	1e43      	subs	r3, r0, #1
 8003862:	42a1      	cmp	r1, r4
 8003864:	d008      	beq.n	8003878 <memmove+0x28>
 8003866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800386a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800386e:	e7f8      	b.n	8003862 <memmove+0x12>
 8003870:	4601      	mov	r1, r0
 8003872:	4402      	add	r2, r0
 8003874:	428a      	cmp	r2, r1
 8003876:	d100      	bne.n	800387a <memmove+0x2a>
 8003878:	bd10      	pop	{r4, pc}
 800387a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800387e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003882:	e7f7      	b.n	8003874 <memmove+0x24>

08003884 <_sbrk_r>:
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	2300      	movs	r3, #0
 8003888:	4d05      	ldr	r5, [pc, #20]	@ (80038a0 <_sbrk_r+0x1c>)
 800388a:	4604      	mov	r4, r0
 800388c:	4608      	mov	r0, r1
 800388e:	602b      	str	r3, [r5, #0]
 8003890:	f7fd fd7e 	bl	8001390 <_sbrk>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	d102      	bne.n	800389e <_sbrk_r+0x1a>
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	b103      	cbz	r3, 800389e <_sbrk_r+0x1a>
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	2000036c 	.word	0x2000036c

080038a4 <memchr>:
 80038a4:	4603      	mov	r3, r0
 80038a6:	b510      	push	{r4, lr}
 80038a8:	b2c9      	uxtb	r1, r1
 80038aa:	4402      	add	r2, r0
 80038ac:	4293      	cmp	r3, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	d101      	bne.n	80038b6 <memchr+0x12>
 80038b2:	2000      	movs	r0, #0
 80038b4:	e003      	b.n	80038be <memchr+0x1a>
 80038b6:	7804      	ldrb	r4, [r0, #0]
 80038b8:	3301      	adds	r3, #1
 80038ba:	428c      	cmp	r4, r1
 80038bc:	d1f6      	bne.n	80038ac <memchr+0x8>
 80038be:	bd10      	pop	{r4, pc}

080038c0 <memcpy>:
 80038c0:	440a      	add	r2, r1
 80038c2:	4291      	cmp	r1, r2
 80038c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80038c8:	d100      	bne.n	80038cc <memcpy+0xc>
 80038ca:	4770      	bx	lr
 80038cc:	b510      	push	{r4, lr}
 80038ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038d2:	4291      	cmp	r1, r2
 80038d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038d8:	d1f9      	bne.n	80038ce <memcpy+0xe>
 80038da:	bd10      	pop	{r4, pc}

080038dc <_realloc_r>:
 80038dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038e0:	4680      	mov	r8, r0
 80038e2:	4615      	mov	r5, r2
 80038e4:	460c      	mov	r4, r1
 80038e6:	b921      	cbnz	r1, 80038f2 <_realloc_r+0x16>
 80038e8:	4611      	mov	r1, r2
 80038ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038ee:	f7ff bc39 	b.w	8003164 <_malloc_r>
 80038f2:	b92a      	cbnz	r2, 8003900 <_realloc_r+0x24>
 80038f4:	f7ff fbcc 	bl	8003090 <_free_r>
 80038f8:	2400      	movs	r4, #0
 80038fa:	4620      	mov	r0, r4
 80038fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003900:	f000 f81a 	bl	8003938 <_malloc_usable_size_r>
 8003904:	4285      	cmp	r5, r0
 8003906:	4606      	mov	r6, r0
 8003908:	d802      	bhi.n	8003910 <_realloc_r+0x34>
 800390a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800390e:	d8f4      	bhi.n	80038fa <_realloc_r+0x1e>
 8003910:	4629      	mov	r1, r5
 8003912:	4640      	mov	r0, r8
 8003914:	f7ff fc26 	bl	8003164 <_malloc_r>
 8003918:	4607      	mov	r7, r0
 800391a:	2800      	cmp	r0, #0
 800391c:	d0ec      	beq.n	80038f8 <_realloc_r+0x1c>
 800391e:	42b5      	cmp	r5, r6
 8003920:	462a      	mov	r2, r5
 8003922:	4621      	mov	r1, r4
 8003924:	bf28      	it	cs
 8003926:	4632      	movcs	r2, r6
 8003928:	f7ff ffca 	bl	80038c0 <memcpy>
 800392c:	4621      	mov	r1, r4
 800392e:	4640      	mov	r0, r8
 8003930:	f7ff fbae 	bl	8003090 <_free_r>
 8003934:	463c      	mov	r4, r7
 8003936:	e7e0      	b.n	80038fa <_realloc_r+0x1e>

08003938 <_malloc_usable_size_r>:
 8003938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800393c:	1f18      	subs	r0, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	bfbc      	itt	lt
 8003942:	580b      	ldrlt	r3, [r1, r0]
 8003944:	18c0      	addlt	r0, r0, r3
 8003946:	4770      	bx	lr

08003948 <_init>:
 8003948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394a:	bf00      	nop
 800394c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394e:	bc08      	pop	{r3}
 8003950:	469e      	mov	lr, r3
 8003952:	4770      	bx	lr

08003954 <_fini>:
 8003954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003956:	bf00      	nop
 8003958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395a:	bc08      	pop	{r3}
 800395c:	469e      	mov	lr, r3
 800395e:	4770      	bx	lr
