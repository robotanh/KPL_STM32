
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ccc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08006de0  08006de0  00007de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007220  08007220  00009224  2**0
                  CONTENTS
  4 .ARM          00000008  08007220  08007220  00008220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007228  08007228  00009224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007228  08007228  00008228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800722c  0800722c  0000822c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  08007230  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000228  08007454  00009228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  08007454  00009514  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0e5  00000000  00000000  0000924d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000215f  00000000  00000000  00014332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00016498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b2  00000000  00000000  00017148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d3b  00000000  00000000  00017afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e771  00000000  00000000  00030835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bbdd  00000000  00000000  0003efa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cab83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004520  00000000  00000000  000cabc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000cf0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000228 	.word	0x20000228
 800012c:	00000000 	.word	0x00000000
 8000130:	08006dc4 	.word	0x08006dc4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000022c 	.word	0x2000022c
 800014c:	08006dc4 	.word	0x08006dc4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <KeyPad_Scan>:
    /* Set all rows to high */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
}

/* Scan the 4x5 keypad and return the pressed key value */
uint8_t KeyPad_Scan(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
    uint32_t currentMillis = HAL_GetTick();
 8000ace:	f001 fdfb 	bl	80026c8 <HAL_GetTick>
 8000ad2:	6038      	str	r0, [r7, #0]

    if (currentMillis - lastDebounceTime < DEBOUNCE_DELAY) {
 8000ad4:	4b24      	ldr	r3, [pc, #144]	@ (8000b68 <KeyPad_Scan+0xa0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ae0:	d201      	bcs.n	8000ae6 <KeyPad_Scan+0x1e>
        return 0xFF;
 8000ae2:	23ff      	movs	r3, #255	@ 0xff
 8000ae4:	e03b      	b.n	8000b5e <KeyPad_Scan+0x96>
    }

    for (uint8_t row = 0; row < 4; row++) {
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	71fb      	strb	r3, [r7, #7]
 8000aea:	e034      	b.n	8000b56 <KeyPad_Scan+0x8e>
        /* Set all rows low */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000af2:	481e      	ldr	r0, [pc, #120]	@ (8000b6c <KeyPad_Scan+0xa4>)
 8000af4:	f002 f89b 	bl	8002c2e <HAL_GPIO_WritePin>

        /* Set the current row high */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 << row, GPIO_PIN_SET);
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	2240      	movs	r2, #64	@ 0x40
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	2201      	movs	r2, #1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4819      	ldr	r0, [pc, #100]	@ (8000b6c <KeyPad_Scan+0xa4>)
 8000b08:	f002 f891 	bl	8002c2e <HAL_GPIO_WritePin>

        /* Read each column */
        for (uint8_t col = 0; col < 5; col++) {
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	71bb      	strb	r3, [r7, #6]
 8000b10:	e01b      	b.n	8000b4a <KeyPad_Scan+0x82>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 << col) == GPIO_PIN_SET) {
 8000b12:	79bb      	ldrb	r3, [r7, #6]
 8000b14:	2201      	movs	r2, #1
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4813      	ldr	r0, [pc, #76]	@ (8000b6c <KeyPad_Scan+0xa4>)
 8000b20:	f002 f86e 	bl	8002c00 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d10c      	bne.n	8000b44 <KeyPad_Scan+0x7c>
                lastDebounceTime = currentMillis;
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b68 <KeyPad_Scan+0xa0>)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	6013      	str	r3, [r2, #0]
                return keyMap[row][col];
 8000b30:	79fa      	ldrb	r2, [r7, #7]
 8000b32:	79b9      	ldrb	r1, [r7, #6]
 8000b34:	480e      	ldr	r0, [pc, #56]	@ (8000b70 <KeyPad_Scan+0xa8>)
 8000b36:	4613      	mov	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4403      	add	r3, r0
 8000b3e:	440b      	add	r3, r1
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	e00c      	b.n	8000b5e <KeyPad_Scan+0x96>
        for (uint8_t col = 0; col < 5; col++) {
 8000b44:	79bb      	ldrb	r3, [r7, #6]
 8000b46:	3301      	adds	r3, #1
 8000b48:	71bb      	strb	r3, [r7, #6]
 8000b4a:	79bb      	ldrb	r3, [r7, #6]
 8000b4c:	2b04      	cmp	r3, #4
 8000b4e:	d9e0      	bls.n	8000b12 <KeyPad_Scan+0x4a>
    for (uint8_t row = 0; row < 4; row++) {
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	3301      	adds	r3, #1
 8000b54:	71fb      	strb	r3, [r7, #7]
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	d9c7      	bls.n	8000aec <KeyPad_Scan+0x24>
            }
        }
    }

    return 0xFF;
 8000b5c:	23ff      	movs	r3, #255	@ 0xff
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000244 	.word	0x20000244
 8000b6c:	40010c00 	.word	0x40010c00
 8000b70:	08006e78 	.word	0x08006e78

08000b74 <formatTotalLiters>:
// T + L pressed show total from beginning
void formatTotalLiters(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
	if (total < 100000000) {
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf0 <formatTotalLiters+0x7c>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d815      	bhi.n	8000bb4 <formatTotalLiters+0x40>
		* buffer1 = total / 1000000;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8000bf4 <formatTotalLiters+0x80>)
 8000b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b90:	0c9a      	lsrs	r2, r3, #18
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <formatTotalLiters+0x80>)
 8000b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9e:	0c9b      	lsrs	r3, r3, #18
 8000ba0:	4915      	ldr	r1, [pc, #84]	@ (8000bf8 <formatTotalLiters+0x84>)
 8000ba2:	fb01 f303 	mul.w	r3, r1, r3
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <formatTotalLiters+0x88>)
 8000bae:	2203      	movs	r2, #3
 8000bb0:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 = total / 100000000;
		* buffer2 = (total % 100000000 ) /100;
		LEDPointFlag = 1;
	}
}
 8000bb2:	e018      	b.n	8000be6 <formatTotalLiters+0x72>
		* buffer1 = total / 100000000;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4a12      	ldr	r2, [pc, #72]	@ (8000c00 <formatTotalLiters+0x8c>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	0e5a      	lsrs	r2, r3, #25
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	601a      	str	r2, [r3, #0]
		* buffer2 = (total % 100000000 ) /100;
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <formatTotalLiters+0x8c>)
 8000bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8000bca:	0e5b      	lsrs	r3, r3, #25
 8000bcc:	490d      	ldr	r1, [pc, #52]	@ (8000c04 <formatTotalLiters+0x90>)
 8000bce:	fb01 f303 	mul.w	r3, r1, r3
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c08 <formatTotalLiters+0x94>)
 8000bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bda:	095a      	lsrs	r2, r3, #5
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	601a      	str	r2, [r3, #0]
		LEDPointFlag = 1;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <formatTotalLiters+0x88>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	601a      	str	r2, [r3, #0]
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	05f5e0ff 	.word	0x05f5e0ff
 8000bf4:	431bde83 	.word	0x431bde83
 8000bf8:	000f4240 	.word	0x000f4240
 8000bfc:	2000004c 	.word	0x2000004c
 8000c00:	55e63b89 	.word	0x55e63b89
 8000c04:	05f5e100 	.word	0x05f5e100
 8000c08:	51eb851f 	.word	0x51eb851f

08000c0c <formatTotalLitersShift>:
// T + $ pressed show total per shift
void formatTotalLitersShift(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
	if (total < 1000000000) {
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4a14      	ldr	r2, [pc, #80]	@ (8000c6c <formatTotalLitersShift+0x60>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d815      	bhi.n	8000c4c <formatTotalLitersShift+0x40>

		* buffer1 = total / 1000000;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4a13      	ldr	r2, [pc, #76]	@ (8000c70 <formatTotalLitersShift+0x64>)
 8000c24:	fba2 2303 	umull	r2, r3, r2, r3
 8000c28:	0c9a      	lsrs	r2, r3, #18
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <formatTotalLitersShift+0x64>)
 8000c32:	fba3 1302 	umull	r1, r3, r3, r2
 8000c36:	0c9b      	lsrs	r3, r3, #18
 8000c38:	490e      	ldr	r1, [pc, #56]	@ (8000c74 <formatTotalLitersShift+0x68>)
 8000c3a:	fb01 f303 	mul.w	r3, r1, r3
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <formatTotalLitersShift+0x6c>)
 8000c46:	2203      	movs	r2, #3
 8000c48:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 =0;
		* buffer2 = 0;
		LEDPointFlag = -1;
	}
}
 8000c4a:	e009      	b.n	8000c60 <formatTotalLitersShift+0x54>
		* buffer1 =0;
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
		* buffer2 = 0;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
		LEDPointFlag = -1;
 8000c58:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <formatTotalLitersShift+0x6c>)
 8000c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	3b9ac9ff 	.word	0x3b9ac9ff
 8000c70:	431bde83 	.word	0x431bde83
 8000c74:	000f4240 	.word	0x000f4240
 8000c78:	2000004c 	.word	0x2000004c

08000c7c <KeyLogic>:

void KeyLogic() {
 8000c7c:	b5b0      	push	{r4, r5, r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	keyPressed = KeyPad_Scan();
 8000c80:	f7ff ff22 	bl	8000ac8 <KeyPad_Scan>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	4bb9      	ldr	r3, [pc, #740]	@ (8000f70 <KeyLogic+0x2f4>)
 8000c8a:	701a      	strb	r2, [r3, #0]
    if (keyPressed != 0xFF) {
 8000c8c:	4bb8      	ldr	r3, [pc, #736]	@ (8000f70 <KeyLogic+0x2f4>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2bff      	cmp	r3, #255	@ 0xff
 8000c92:	f000 84b4 	beq.w	80015fe <KeyLogic+0x982>
		switch (keyPressed) {
 8000c96:	4bb6      	ldr	r3, [pc, #728]	@ (8000f70 <KeyLogic+0x2f4>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	3b24      	subs	r3, #36	@ 0x24
 8000c9c:	2b30      	cmp	r3, #48	@ 0x30
 8000c9e:	f200 8427 	bhi.w	80014f0 <KeyLogic+0x874>
 8000ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ca8 <KeyLogic+0x2c>)
 8000ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca8:	08001469 	.word	0x08001469
 8000cac:	080014f1 	.word	0x080014f1
 8000cb0:	080014f1 	.word	0x080014f1
 8000cb4:	080014f1 	.word	0x080014f1
 8000cb8:	080014f1 	.word	0x080014f1
 8000cbc:	080014f1 	.word	0x080014f1
 8000cc0:	080014f1 	.word	0x080014f1
 8000cc4:	080014f1 	.word	0x080014f1
 8000cc8:	080014f1 	.word	0x080014f1
 8000ccc:	080014f1 	.word	0x080014f1
 8000cd0:	080014f1 	.word	0x080014f1
 8000cd4:	080014f1 	.word	0x080014f1
 8000cd8:	080014f1 	.word	0x080014f1
 8000cdc:	080014f1 	.word	0x080014f1
 8000ce0:	080014f1 	.word	0x080014f1
 8000ce4:	080014f1 	.word	0x080014f1
 8000ce8:	080014f1 	.word	0x080014f1
 8000cec:	080014f1 	.word	0x080014f1
 8000cf0:	080014f1 	.word	0x080014f1
 8000cf4:	080014f1 	.word	0x080014f1
 8000cf8:	080014f1 	.word	0x080014f1
 8000cfc:	080014f1 	.word	0x080014f1
 8000d00:	080014f1 	.word	0x080014f1
 8000d04:	080014f1 	.word	0x080014f1
 8000d08:	080014f1 	.word	0x080014f1
 8000d0c:	080014f1 	.word	0x080014f1
 8000d10:	080014f1 	.word	0x080014f1
 8000d14:	080014f1 	.word	0x080014f1
 8000d18:	080014f1 	.word	0x080014f1
 8000d1c:	08000d6d 	.word	0x08000d6d
 8000d20:	08000e13 	.word	0x08000e13
 8000d24:	0800105b 	.word	0x0800105b
 8000d28:	08000ec7 	.word	0x08000ec7
 8000d2c:	08001081 	.word	0x08001081
 8000d30:	08000fa9 	.word	0x08000fa9
 8000d34:	080014f1 	.word	0x080014f1
 8000d38:	080014f1 	.word	0x080014f1
 8000d3c:	080014f1 	.word	0x080014f1
 8000d40:	080014f1 	.word	0x080014f1
 8000d44:	080014f1 	.word	0x080014f1
 8000d48:	0800149d 	.word	0x0800149d
 8000d4c:	080014f1 	.word	0x080014f1
 8000d50:	080014f1 	.word	0x080014f1
 8000d54:	080014f1 	.word	0x080014f1
 8000d58:	08001421 	.word	0x08001421
 8000d5c:	080014f1 	.word	0x080014f1
 8000d60:	080014f1 	.word	0x080014f1
 8000d64:	080014f1 	.word	0x080014f1
 8000d68:	08001445 	.word	0x08001445
/////////////////////////////////////////////////////KEY A/////////////////////////////////////////////////////////
			case 'A':
				if(seqState==SEQ_IDLE){
 8000d6c:	4b81      	ldr	r3, [pc, #516]	@ (8000f74 <KeyLogic+0x2f8>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d11c      	bne.n	8000dae <KeyLogic+0x132>
					orderPrice=10000;
 8000d74:	4b80      	ldr	r3, [pc, #512]	@ (8000f78 <KeyLogic+0x2fc>)
 8000d76:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000d7a:	601a      	str	r2, [r3, #0]
					orderLiter=(double)orderPrice/(double)roundedPrice;
 8000d7c:	4b7e      	ldr	r3, [pc, #504]	@ (8000f78 <KeyLogic+0x2fc>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fb2f 	bl	80003e4 <__aeabi_ui2d>
 8000d86:	4604      	mov	r4, r0
 8000d88:	460d      	mov	r5, r1
 8000d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8000f7c <KeyLogic+0x300>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fb28 	bl	80003e4 <__aeabi_ui2d>
 8000d94:	4602      	mov	r2, r0
 8000d96:	460b      	mov	r3, r1
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	f7ff fcc6 	bl	800072c <__aeabi_ddiv>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4976      	ldr	r1, [pc, #472]	@ (8000f80 <KeyLogic+0x304>)
 8000da6:	e9c1 2300 	strd	r2, r3, [r1]
				else{
					seqState=SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000daa:	f000 bc28 	b.w	80015fe <KeyLogic+0x982>
				else if(seqState==SEQ_PRESSED_L){
 8000dae:	4b71      	ldr	r3, [pc, #452]	@ (8000f74 <KeyLogic+0x2f8>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b0f      	cmp	r3, #15
 8000db4:	d123      	bne.n	8000dfe <KeyLogic+0x182>
					orderLiter=1;
 8000db6:	4972      	ldr	r1, [pc, #456]	@ (8000f80 <KeyLogic+0x304>)
 8000db8:	f04f 0200 	mov.w	r2, #0
 8000dbc:	4b71      	ldr	r3, [pc, #452]	@ (8000f84 <KeyLogic+0x308>)
 8000dbe:	e9c1 2300 	strd	r2, r3, [r1]
					orderPrice=orderLiter*roundedPrice;
 8000dc2:	4b6e      	ldr	r3, [pc, #440]	@ (8000f7c <KeyLogic+0x300>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fb0c 	bl	80003e4 <__aeabi_ui2d>
 8000dcc:	4b6c      	ldr	r3, [pc, #432]	@ (8000f80 <KeyLogic+0x304>)
 8000dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd2:	f7ff fb81 	bl	80004d8 <__aeabi_dmul>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f7ff fe53 	bl	8000a88 <__aeabi_d2uiz>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a64      	ldr	r2, [pc, #400]	@ (8000f78 <KeyLogic+0x2fc>)
 8000de6:	6013      	str	r3, [r2, #0]
					seqState=SEQ_IDLE;
 8000de8:	4b62      	ldr	r3, [pc, #392]	@ (8000f74 <KeyLogic+0x2f8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000dee:	4b66      	ldr	r3, [pc, #408]	@ (8000f88 <KeyLogic+0x30c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000df4:	4b65      	ldr	r3, [pc, #404]	@ (8000f8c <KeyLogic+0x310>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
				break;
 8000dfa:	f000 bc00 	b.w	80015fe <KeyLogic+0x982>
					seqState=SEQ_IDLE;
 8000dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8000f74 <KeyLogic+0x2f8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000e04:	4b60      	ldr	r3, [pc, #384]	@ (8000f88 <KeyLogic+0x30c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000e0a:	4b60      	ldr	r3, [pc, #384]	@ (8000f8c <KeyLogic+0x310>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
				break;
 8000e10:	e3f5      	b.n	80015fe <KeyLogic+0x982>
/////////////////////////////////////////////////////KEY B/////////////////////////////////////////////////////////
			case 'B':
				if(seqState==SEQ_IDLE){
 8000e12:	4b58      	ldr	r3, [pc, #352]	@ (8000f74 <KeyLogic+0x2f8>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d11b      	bne.n	8000e52 <KeyLogic+0x1d6>
					orderPrice=15000;
 8000e1a:	4b57      	ldr	r3, [pc, #348]	@ (8000f78 <KeyLogic+0x2fc>)
 8000e1c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8000e20:	601a      	str	r2, [r3, #0]
					orderLiter=(double)orderPrice/(double)roundedPrice;
 8000e22:	4b55      	ldr	r3, [pc, #340]	@ (8000f78 <KeyLogic+0x2fc>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fadc 	bl	80003e4 <__aeabi_ui2d>
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	460d      	mov	r5, r1
 8000e30:	4b52      	ldr	r3, [pc, #328]	@ (8000f7c <KeyLogic+0x300>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fad5 	bl	80003e4 <__aeabi_ui2d>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4620      	mov	r0, r4
 8000e40:	4629      	mov	r1, r5
 8000e42:	f7ff fc73 	bl	800072c <__aeabi_ddiv>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	494d      	ldr	r1, [pc, #308]	@ (8000f80 <KeyLogic+0x304>)
 8000e4c:	e9c1 2300 	strd	r2, r3, [r1]
				}else{
					seqState=SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000e50:	e3d5      	b.n	80015fe <KeyLogic+0x982>
				else if(seqState==SEQ_PRESSED_L){
 8000e52:	4b48      	ldr	r3, [pc, #288]	@ (8000f74 <KeyLogic+0x2f8>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b0f      	cmp	r3, #15
 8000e58:	d123      	bne.n	8000ea2 <KeyLogic+0x226>
					orderLiter=2;
 8000e5a:	4949      	ldr	r1, [pc, #292]	@ (8000f80 <KeyLogic+0x304>)
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e64:	e9c1 2300 	strd	r2, r3, [r1]
					orderPrice=orderLiter*roundedPrice;
 8000e68:	4b44      	ldr	r3, [pc, #272]	@ (8000f7c <KeyLogic+0x300>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fab9 	bl	80003e4 <__aeabi_ui2d>
 8000e72:	4b43      	ldr	r3, [pc, #268]	@ (8000f80 <KeyLogic+0x304>)
 8000e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e78:	f7ff fb2e 	bl	80004d8 <__aeabi_dmul>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	f7ff fe00 	bl	8000a88 <__aeabi_d2uiz>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4a3b      	ldr	r2, [pc, #236]	@ (8000f78 <KeyLogic+0x2fc>)
 8000e8c:	6013      	str	r3, [r2, #0]
					seqState=SEQ_IDLE;
 8000e8e:	4b39      	ldr	r3, [pc, #228]	@ (8000f74 <KeyLogic+0x2f8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000e94:	4b3c      	ldr	r3, [pc, #240]	@ (8000f88 <KeyLogic+0x30c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000e9a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f8c <KeyLogic+0x310>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
				break;
 8000ea0:	e3ad      	b.n	80015fe <KeyLogic+0x982>
				else if(seqState==SEQ_PRESSED_P){
 8000ea2:	4b34      	ldr	r3, [pc, #208]	@ (8000f74 <KeyLogic+0x2f8>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b05      	cmp	r3, #5
 8000ea8:	d103      	bne.n	8000eb2 <KeyLogic+0x236>
					seqState=SEQ_PRESSED_P_F2_PSWRD;
 8000eaa:	4b32      	ldr	r3, [pc, #200]	@ (8000f74 <KeyLogic+0x2f8>)
 8000eac:	2206      	movs	r2, #6
 8000eae:	701a      	strb	r2, [r3, #0]
				break;
 8000eb0:	e3a5      	b.n	80015fe <KeyLogic+0x982>
					seqState=SEQ_IDLE;
 8000eb2:	4b30      	ldr	r3, [pc, #192]	@ (8000f74 <KeyLogic+0x2f8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000eb8:	4b33      	ldr	r3, [pc, #204]	@ (8000f88 <KeyLogic+0x30c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000ebe:	4b33      	ldr	r3, [pc, #204]	@ (8000f8c <KeyLogic+0x310>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
				break;
 8000ec4:	e39b      	b.n	80015fe <KeyLogic+0x982>
/////////////////////////////////////////////////////KEY D/////////////////////////////////////////////////////////
			case 'D':
				if(seqState==SEQ_IDLE){
 8000ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f74 <KeyLogic+0x2f8>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d11b      	bne.n	8000f06 <KeyLogic+0x28a>
					orderPrice=20000;
 8000ece:	4b2a      	ldr	r3, [pc, #168]	@ (8000f78 <KeyLogic+0x2fc>)
 8000ed0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000ed4:	601a      	str	r2, [r3, #0]
					orderLiter=(double)orderPrice/(double)roundedPrice;
 8000ed6:	4b28      	ldr	r3, [pc, #160]	@ (8000f78 <KeyLogic+0x2fc>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fa82 	bl	80003e4 <__aeabi_ui2d>
 8000ee0:	4604      	mov	r4, r0
 8000ee2:	460d      	mov	r5, r1
 8000ee4:	4b25      	ldr	r3, [pc, #148]	@ (8000f7c <KeyLogic+0x300>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fa7b 	bl	80003e4 <__aeabi_ui2d>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	4629      	mov	r1, r5
 8000ef6:	f7ff fc19 	bl	800072c <__aeabi_ddiv>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4920      	ldr	r1, [pc, #128]	@ (8000f80 <KeyLogic+0x304>)
 8000f00:	e9c1 2300 	strd	r2, r3, [r1]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000f04:	e37b      	b.n	80015fe <KeyLogic+0x982>
				else if(seqState==SEQ_PRESSED_L){
 8000f06:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <KeyLogic+0x2f8>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	d122      	bne.n	8000f54 <KeyLogic+0x2d8>
					orderLiter=5;
 8000f0e:	491c      	ldr	r1, [pc, #112]	@ (8000f80 <KeyLogic+0x304>)
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	4b1e      	ldr	r3, [pc, #120]	@ (8000f90 <KeyLogic+0x314>)
 8000f16:	e9c1 2300 	strd	r2, r3, [r1]
					orderPrice=orderLiter*roundedPrice;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <KeyLogic+0x300>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fa60 	bl	80003e4 <__aeabi_ui2d>
 8000f24:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <KeyLogic+0x304>)
 8000f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2a:	f7ff fad5 	bl	80004d8 <__aeabi_dmul>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4610      	mov	r0, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	f7ff fda7 	bl	8000a88 <__aeabi_d2uiz>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	@ (8000f78 <KeyLogic+0x2fc>)
 8000f3e:	6013      	str	r3, [r2, #0]
					seqState=SEQ_IDLE;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <KeyLogic+0x2f8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <KeyLogic+0x30c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <KeyLogic+0x310>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
				break;
 8000f52:	e354      	b.n	80015fe <KeyLogic+0x982>
				else if (seqState == SEQ_PRESSED_T) {
 8000f54:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <KeyLogic+0x2f8>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b0a      	cmp	r3, #10
 8000f5a:	d11b      	bne.n	8000f94 <KeyLogic+0x318>
					seqState = SEQ_ENTER_OLD_PASSWORD;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <KeyLogic+0x2f8>)
 8000f5e:	2202      	movs	r2, #2
 8000f60:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000f62:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <KeyLogic+0x30c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000f68:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <KeyLogic+0x310>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
				break;
 8000f6e:	e346      	b.n	80015fe <KeyLogic+0x982>
 8000f70:	20000035 	.word	0x20000035
 8000f74:	20000259 	.word	0x20000259
 8000f78:	20000360 	.word	0x20000360
 8000f7c:	20000048 	.word	0x20000048
 8000f80:	20000368 	.word	0x20000368
 8000f84:	3ff00000 	.word	0x3ff00000
 8000f88:	2000024c 	.word	0x2000024c
 8000f8c:	20000248 	.word	0x20000248
 8000f90:	40140000 	.word	0x40140000
					seqState = SEQ_IDLE;
 8000f94:	4b9d      	ldr	r3, [pc, #628]	@ (800120c <KeyLogic+0x590>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000f9a:	4b9d      	ldr	r3, [pc, #628]	@ (8001210 <KeyLogic+0x594>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000fa0:	4b9c      	ldr	r3, [pc, #624]	@ (8001214 <KeyLogic+0x598>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
				break;
 8000fa6:	e32a      	b.n	80015fe <KeyLogic+0x982>
/////////////////////////////////////////////////////KEY F/////////////////////////////////////////////////////////
			case 'F':
				if(seqState==SEQ_IDLE){
 8000fa8:	4b98      	ldr	r3, [pc, #608]	@ (800120c <KeyLogic+0x590>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d11b      	bne.n	8000fe8 <KeyLogic+0x36c>
					orderPrice=50000;
 8000fb0:	4b99      	ldr	r3, [pc, #612]	@ (8001218 <KeyLogic+0x59c>)
 8000fb2:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000fb6:	601a      	str	r2, [r3, #0]
					orderLiter=(double)orderPrice/(double)roundedPrice;
 8000fb8:	4b97      	ldr	r3, [pc, #604]	@ (8001218 <KeyLogic+0x59c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fa11 	bl	80003e4 <__aeabi_ui2d>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	460d      	mov	r5, r1
 8000fc6:	4b95      	ldr	r3, [pc, #596]	@ (800121c <KeyLogic+0x5a0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fa0a 	bl	80003e4 <__aeabi_ui2d>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	4629      	mov	r1, r5
 8000fd8:	f7ff fba8 	bl	800072c <__aeabi_ddiv>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	498f      	ldr	r1, [pc, #572]	@ (8001220 <KeyLogic+0x5a4>)
 8000fe2:	e9c1 2300 	strd	r2, r3, [r1]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000fe6:	e30a      	b.n	80015fe <KeyLogic+0x982>
				else if(seqState==SEQ_PRESSED_L){
 8000fe8:	4b88      	ldr	r3, [pc, #544]	@ (800120c <KeyLogic+0x590>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d122      	bne.n	8001036 <KeyLogic+0x3ba>
					orderLiter=10;
 8000ff0:	498b      	ldr	r1, [pc, #556]	@ (8001220 <KeyLogic+0x5a4>)
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	4b8b      	ldr	r3, [pc, #556]	@ (8001224 <KeyLogic+0x5a8>)
 8000ff8:	e9c1 2300 	strd	r2, r3, [r1]
					orderPrice=orderLiter*roundedPrice;
 8000ffc:	4b87      	ldr	r3, [pc, #540]	@ (800121c <KeyLogic+0x5a0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff f9ef 	bl	80003e4 <__aeabi_ui2d>
 8001006:	4b86      	ldr	r3, [pc, #536]	@ (8001220 <KeyLogic+0x5a4>)
 8001008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100c:	f7ff fa64 	bl	80004d8 <__aeabi_dmul>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4610      	mov	r0, r2
 8001016:	4619      	mov	r1, r3
 8001018:	f7ff fd36 	bl	8000a88 <__aeabi_d2uiz>
 800101c:	4603      	mov	r3, r0
 800101e:	4a7e      	ldr	r2, [pc, #504]	@ (8001218 <KeyLogic+0x59c>)
 8001020:	6013      	str	r3, [r2, #0]
					seqState=SEQ_IDLE;
 8001022:	4b7a      	ldr	r3, [pc, #488]	@ (800120c <KeyLogic+0x590>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001028:	4b79      	ldr	r3, [pc, #484]	@ (8001210 <KeyLogic+0x594>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800102e:	4b79      	ldr	r3, [pc, #484]	@ (8001214 <KeyLogic+0x598>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
				break;
 8001034:	e2e3      	b.n	80015fe <KeyLogic+0x982>
				else if (seqState == SEQ_PRESSED_T) {
 8001036:	4b75      	ldr	r3, [pc, #468]	@ (800120c <KeyLogic+0x590>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b0a      	cmp	r3, #10
 800103c:	d103      	bne.n	8001046 <KeyLogic+0x3ca>
					seqState = SEQ_PRESSED_T_F4;
 800103e:	4b73      	ldr	r3, [pc, #460]	@ (800120c <KeyLogic+0x590>)
 8001040:	220e      	movs	r2, #14
 8001042:	701a      	strb	r2, [r3, #0]
				break;
 8001044:	e2db      	b.n	80015fe <KeyLogic+0x982>
					seqState = SEQ_IDLE;
 8001046:	4b71      	ldr	r3, [pc, #452]	@ (800120c <KeyLogic+0x590>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800104c:	4b70      	ldr	r3, [pc, #448]	@ (8001210 <KeyLogic+0x594>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001052:	4b70      	ldr	r3, [pc, #448]	@ (8001214 <KeyLogic+0x598>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
				break;
 8001058:	e2d1      	b.n	80015fe <KeyLogic+0x982>
/////////////////////////////////////////////////////KEY C/////////////////////////////////////////////////////////
			case 'C':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 800105a:	2300      	movs	r3, #0
 800105c:	4a72      	ldr	r2, [pc, #456]	@ (8001228 <KeyLogic+0x5ac>)
 800105e:	2107      	movs	r1, #7
 8001060:	4872      	ldr	r0, [pc, #456]	@ (800122c <KeyLogic+0x5b0>)
 8001062:	f003 fd65 	bl	8004b30 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001066:	2300      	movs	r3, #0
 8001068:	4a6f      	ldr	r2, [pc, #444]	@ (8001228 <KeyLogic+0x5ac>)
 800106a:	2107      	movs	r1, #7
 800106c:	4870      	ldr	r0, [pc, #448]	@ (8001230 <KeyLogic+0x5b4>)
 800106e:	f003 fd5f 	bl	8004b30 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 1);
 8001072:	2301      	movs	r3, #1
 8001074:	4a6c      	ldr	r2, [pc, #432]	@ (8001228 <KeyLogic+0x5ac>)
 8001076:	2107      	movs	r1, #7
 8001078:	486e      	ldr	r0, [pc, #440]	@ (8001234 <KeyLogic+0x5b8>)
 800107a:	f003 fd59 	bl	8004b30 <sniprintf>
				break;
 800107e:	e2be      	b.n	80015fe <KeyLogic+0x982>
/////////////////////////////////////////////////////KEY E/////////////////////////////////////////////////////////
			case 'E':
				if(seqState == SEQ_IDLE){
 8001080:	4b62      	ldr	r3, [pc, #392]	@ (800120c <KeyLogic+0x590>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d103      	bne.n	8001090 <KeyLogic+0x414>
					seqState = SEQ_DISP_PRICE;
 8001088:	4b60      	ldr	r3, [pc, #384]	@ (800120c <KeyLogic+0x590>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
				else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 800108e:	e2b6      	b.n	80015fe <KeyLogic+0x982>
				else if (seqState == SEQ_PRESSED_$){
 8001090:	4b5e      	ldr	r3, [pc, #376]	@ (800120c <KeyLogic+0x590>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b10      	cmp	r3, #16
 8001096:	d124      	bne.n	80010e2 <KeyLogic+0x466>
					orderPrice=accumulatedNumber;
 8001098:	4b5e      	ldr	r3, [pc, #376]	@ (8001214 <KeyLogic+0x598>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a5e      	ldr	r2, [pc, #376]	@ (8001218 <KeyLogic+0x59c>)
 800109e:	6013      	str	r3, [r2, #0]
					orderLiter=(double)orderPrice/(double)roundedPrice;
 80010a0:	4b5d      	ldr	r3, [pc, #372]	@ (8001218 <KeyLogic+0x59c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f99d 	bl	80003e4 <__aeabi_ui2d>
 80010aa:	4604      	mov	r4, r0
 80010ac:	460d      	mov	r5, r1
 80010ae:	4b5b      	ldr	r3, [pc, #364]	@ (800121c <KeyLogic+0x5a0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f996 	bl	80003e4 <__aeabi_ui2d>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4620      	mov	r0, r4
 80010be:	4629      	mov	r1, r5
 80010c0:	f7ff fb34 	bl	800072c <__aeabi_ddiv>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4955      	ldr	r1, [pc, #340]	@ (8001220 <KeyLogic+0x5a4>)
 80010ca:	e9c1 2300 	strd	r2, r3, [r1]
					seqState = SEQ_IDLE;
 80010ce:	4b4f      	ldr	r3, [pc, #316]	@ (800120c <KeyLogic+0x590>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80010d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001210 <KeyLogic+0x594>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80010da:	4b4e      	ldr	r3, [pc, #312]	@ (8001214 <KeyLogic+0x598>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
				break;
 80010e0:	e28d      	b.n	80015fe <KeyLogic+0x982>
				else if (seqState == SEQ_PRESSED_L){
 80010e2:	4b4a      	ldr	r3, [pc, #296]	@ (800120c <KeyLogic+0x590>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b0f      	cmp	r3, #15
 80010e8:	d126      	bne.n	8001138 <KeyLogic+0x4bc>
					orderLiter=accumulatedNumber;
 80010ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001214 <KeyLogic+0x598>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f978 	bl	80003e4 <__aeabi_ui2d>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4949      	ldr	r1, [pc, #292]	@ (8001220 <KeyLogic+0x5a4>)
 80010fa:	e9c1 2300 	strd	r2, r3, [r1]
					orderPrice=orderLiter*roundedPrice;
 80010fe:	4b47      	ldr	r3, [pc, #284]	@ (800121c <KeyLogic+0x5a0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f96e 	bl	80003e4 <__aeabi_ui2d>
 8001108:	4b45      	ldr	r3, [pc, #276]	@ (8001220 <KeyLogic+0x5a4>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff f9e3 	bl	80004d8 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fcb5 	bl	8000a88 <__aeabi_d2uiz>
 800111e:	4603      	mov	r3, r0
 8001120:	4a3d      	ldr	r2, [pc, #244]	@ (8001218 <KeyLogic+0x59c>)
 8001122:	6013      	str	r3, [r2, #0]
					seqState = SEQ_IDLE;
 8001124:	4b39      	ldr	r3, [pc, #228]	@ (800120c <KeyLogic+0x590>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800112a:	4b39      	ldr	r3, [pc, #228]	@ (8001210 <KeyLogic+0x594>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001130:	4b38      	ldr	r3, [pc, #224]	@ (8001214 <KeyLogic+0x598>)
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
				break;
 8001136:	e262      	b.n	80015fe <KeyLogic+0x982>
				else if (seqState == SEQ_PRESSED_P_NUM&&
 8001138:	4b34      	ldr	r3, [pc, #208]	@ (800120c <KeyLogic+0x590>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b08      	cmp	r3, #8
 800113e:	d10f      	bne.n	8001160 <KeyLogic+0x4e4>
					accumulatedNumber==password) {
 8001140:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <KeyLogic+0x598>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b3c      	ldr	r3, [pc, #240]	@ (8001238 <KeyLogic+0x5bc>)
 8001146:	681b      	ldr	r3, [r3, #0]
				else if (seqState == SEQ_PRESSED_P_NUM&&
 8001148:	429a      	cmp	r2, r3
 800114a:	d109      	bne.n	8001160 <KeyLogic+0x4e4>
					seqState = SEQ_PRESSED_P_PSWRD_SETPRICE;
 800114c:	4b2f      	ldr	r3, [pc, #188]	@ (800120c <KeyLogic+0x590>)
 800114e:	2209      	movs	r2, #9
 8001150:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001152:	4b2f      	ldr	r3, [pc, #188]	@ (8001210 <KeyLogic+0x594>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001158:	4b2e      	ldr	r3, [pc, #184]	@ (8001214 <KeyLogic+0x598>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	e15e      	b.n	800141e <KeyLogic+0x7a2>
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD&&
 8001160:	4b2a      	ldr	r3, [pc, #168]	@ (800120c <KeyLogic+0x590>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b06      	cmp	r3, #6
 8001166:	d10f      	bne.n	8001188 <KeyLogic+0x50c>
						accumulatedNumber==password){
 8001168:	4b2a      	ldr	r3, [pc, #168]	@ (8001214 <KeyLogic+0x598>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b32      	ldr	r3, [pc, #200]	@ (8001238 <KeyLogic+0x5bc>)
 800116e:	681b      	ldr	r3, [r3, #0]
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD&&
 8001170:	429a      	cmp	r2, r3
 8001172:	d109      	bne.n	8001188 <KeyLogic+0x50c>
					seqState = SEQ_PRESSED_P_F2_PSWRD_ROUND;
 8001174:	4b25      	ldr	r3, [pc, #148]	@ (800120c <KeyLogic+0x590>)
 8001176:	2207      	movs	r2, #7
 8001178:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800117a:	4b25      	ldr	r3, [pc, #148]	@ (8001210 <KeyLogic+0x594>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001180:	4b24      	ldr	r3, [pc, #144]	@ (8001214 <KeyLogic+0x598>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	e14a      	b.n	800141e <KeyLogic+0x7a2>
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD_ROUND){
 8001188:	4b20      	ldr	r3, [pc, #128]	@ (800120c <KeyLogic+0x590>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b07      	cmp	r3, #7
 800118e:	f040 809e 	bne.w	80012ce <KeyLogic+0x652>
					switch(accumulatedNumber){
 8001192:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <KeyLogic+0x598>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b02      	cmp	r3, #2
 8001198:	f000 8086 	beq.w	80012a8 <KeyLogic+0x62c>
 800119c:	2b02      	cmp	r3, #2
 800119e:	f200 808b 	bhi.w	80012b8 <KeyLogic+0x63c>
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d002      	beq.n	80011ac <KeyLogic+0x530>
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d04e      	beq.n	8001248 <KeyLogic+0x5cc>
							break;
 80011aa:	e085      	b.n	80012b8 <KeyLogic+0x63c>
							if(currPrice%50<25){
 80011ac:	4b23      	ldr	r3, [pc, #140]	@ (800123c <KeyLogic+0x5c0>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <KeyLogic+0x5c4>)
 80011b2:	fba3 1302 	umull	r1, r3, r3, r2
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	2132      	movs	r1, #50	@ 0x32
 80011ba:	fb01 f303 	mul.w	r3, r1, r3
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b18      	cmp	r3, #24
 80011c2:	d80f      	bhi.n	80011e4 <KeyLogic+0x568>
								roundedPrice=currPrice-(currPrice%50);
 80011c4:	4b1d      	ldr	r3, [pc, #116]	@ (800123c <KeyLogic+0x5c0>)
 80011c6:	6819      	ldr	r1, [r3, #0]
 80011c8:	4b1c      	ldr	r3, [pc, #112]	@ (800123c <KeyLogic+0x5c0>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <KeyLogic+0x5c4>)
 80011ce:	fba3 0302 	umull	r0, r3, r3, r2
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	2032      	movs	r0, #50	@ 0x32
 80011d6:	fb00 f303 	mul.w	r3, r0, r3
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	1acb      	subs	r3, r1, r3
 80011de:	4a0f      	ldr	r2, [pc, #60]	@ (800121c <KeyLogic+0x5a0>)
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e00f      	b.n	8001204 <KeyLogic+0x588>
								roundedPrice=currPrice-(currPrice%50)+50;
 80011e4:	4b15      	ldr	r3, [pc, #84]	@ (800123c <KeyLogic+0x5c0>)
 80011e6:	6819      	ldr	r1, [r3, #0]
 80011e8:	4b14      	ldr	r3, [pc, #80]	@ (800123c <KeyLogic+0x5c0>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <KeyLogic+0x5c4>)
 80011ee:	fba3 0302 	umull	r0, r3, r3, r2
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	2032      	movs	r0, #50	@ 0x32
 80011f6:	fb00 f303 	mul.w	r3, r0, r3
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	1acb      	subs	r3, r1, r3
 80011fe:	3332      	adds	r3, #50	@ 0x32
 8001200:	4a06      	ldr	r2, [pc, #24]	@ (800121c <KeyLogic+0x5a0>)
 8001202:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_ROUND_50;
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <KeyLogic+0x5c8>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
							break;
 800120a:	e056      	b.n	80012ba <KeyLogic+0x63e>
 800120c:	20000259 	.word	0x20000259
 8001210:	2000024c 	.word	0x2000024c
 8001214:	20000248 	.word	0x20000248
 8001218:	20000360 	.word	0x20000360
 800121c:	20000048 	.word	0x20000048
 8001220:	20000368 	.word	0x20000368
 8001224:	40240000 	.word	0x40240000
 8001228:	08006de0 	.word	0x08006de0
 800122c:	20000020 	.word	0x20000020
 8001230:	20000027 	.word	0x20000027
 8001234:	2000002e 	.word	0x2000002e
 8001238:	20000038 	.word	0x20000038
 800123c:	20000044 	.word	0x20000044
 8001240:	51eb851f 	.word	0x51eb851f
 8001244:	20000258 	.word	0x20000258
							if(currPrice%100<50){
 8001248:	4b9c      	ldr	r3, [pc, #624]	@ (80014bc <KeyLogic+0x840>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b9c      	ldr	r3, [pc, #624]	@ (80014c0 <KeyLogic+0x844>)
 800124e:	fba3 1302 	umull	r1, r3, r3, r2
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	2164      	movs	r1, #100	@ 0x64
 8001256:	fb01 f303 	mul.w	r3, r1, r3
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b31      	cmp	r3, #49	@ 0x31
 800125e:	d80f      	bhi.n	8001280 <KeyLogic+0x604>
								roundedPrice=currPrice-(currPrice%100);
 8001260:	4b96      	ldr	r3, [pc, #600]	@ (80014bc <KeyLogic+0x840>)
 8001262:	6819      	ldr	r1, [r3, #0]
 8001264:	4b95      	ldr	r3, [pc, #596]	@ (80014bc <KeyLogic+0x840>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b95      	ldr	r3, [pc, #596]	@ (80014c0 <KeyLogic+0x844>)
 800126a:	fba3 0302 	umull	r0, r3, r3, r2
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2064      	movs	r0, #100	@ 0x64
 8001272:	fb00 f303 	mul.w	r3, r0, r3
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	1acb      	subs	r3, r1, r3
 800127a:	4a92      	ldr	r2, [pc, #584]	@ (80014c4 <KeyLogic+0x848>)
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e00f      	b.n	80012a0 <KeyLogic+0x624>
								roundedPrice=currPrice-(currPrice%100)+100;
 8001280:	4b8e      	ldr	r3, [pc, #568]	@ (80014bc <KeyLogic+0x840>)
 8001282:	6819      	ldr	r1, [r3, #0]
 8001284:	4b8d      	ldr	r3, [pc, #564]	@ (80014bc <KeyLogic+0x840>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b8d      	ldr	r3, [pc, #564]	@ (80014c0 <KeyLogic+0x844>)
 800128a:	fba3 0302 	umull	r0, r3, r3, r2
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	2064      	movs	r0, #100	@ 0x64
 8001292:	fb00 f303 	mul.w	r3, r0, r3
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	1acb      	subs	r3, r1, r3
 800129a:	3364      	adds	r3, #100	@ 0x64
 800129c:	4a89      	ldr	r2, [pc, #548]	@ (80014c4 <KeyLogic+0x848>)
 800129e:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_ROUND_100;
 80012a0:	4b89      	ldr	r3, [pc, #548]	@ (80014c8 <KeyLogic+0x84c>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
							break;
 80012a6:	e008      	b.n	80012ba <KeyLogic+0x63e>
							roundedPrice=currPrice;
 80012a8:	4b84      	ldr	r3, [pc, #528]	@ (80014bc <KeyLogic+0x840>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a85      	ldr	r2, [pc, #532]	@ (80014c4 <KeyLogic+0x848>)
 80012ae:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_DEFAULT;
 80012b0:	4b85      	ldr	r3, [pc, #532]	@ (80014c8 <KeyLogic+0x84c>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	701a      	strb	r2, [r3, #0]
							break;
 80012b6:	e000      	b.n	80012ba <KeyLogic+0x63e>
							break;
 80012b8:	bf00      	nop
					seqState = SEQ_IDLE;
 80012ba:	4b84      	ldr	r3, [pc, #528]	@ (80014cc <KeyLogic+0x850>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80012c0:	4b83      	ldr	r3, [pc, #524]	@ (80014d0 <KeyLogic+0x854>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80012c6:	4b83      	ldr	r3, [pc, #524]	@ (80014d4 <KeyLogic+0x858>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
				break;
 80012cc:	e197      	b.n	80015fe <KeyLogic+0x982>
				else if(seqState == SEQ_PRESSED_P_PSWRD_SETPRICE){
 80012ce:	4b7f      	ldr	r3, [pc, #508]	@ (80014cc <KeyLogic+0x850>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b09      	cmp	r3, #9
 80012d4:	d173      	bne.n	80013be <KeyLogic+0x742>
					currPrice = accumulatedNumber;
 80012d6:	4b7f      	ldr	r3, [pc, #508]	@ (80014d4 <KeyLogic+0x858>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a78      	ldr	r2, [pc, #480]	@ (80014bc <KeyLogic+0x840>)
 80012dc:	6013      	str	r3, [r2, #0]
					switch (currentPriceState){
 80012de:	4b7a      	ldr	r3, [pc, #488]	@ (80014c8 <KeyLogic+0x84c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <KeyLogic+0x670>
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d02d      	beq.n	8001346 <KeyLogic+0x6ca>
 80012ea:	e059      	b.n	80013a0 <KeyLogic+0x724>
							if(currPrice%50<25){
 80012ec:	4b73      	ldr	r3, [pc, #460]	@ (80014bc <KeyLogic+0x840>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b73      	ldr	r3, [pc, #460]	@ (80014c0 <KeyLogic+0x844>)
 80012f2:	fba3 1302 	umull	r1, r3, r3, r2
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	2132      	movs	r1, #50	@ 0x32
 80012fa:	fb01 f303 	mul.w	r3, r1, r3
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b18      	cmp	r3, #24
 8001302:	d80f      	bhi.n	8001324 <KeyLogic+0x6a8>
								roundedPrice=currPrice-(currPrice%50);
 8001304:	4b6d      	ldr	r3, [pc, #436]	@ (80014bc <KeyLogic+0x840>)
 8001306:	6819      	ldr	r1, [r3, #0]
 8001308:	4b6c      	ldr	r3, [pc, #432]	@ (80014bc <KeyLogic+0x840>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b6c      	ldr	r3, [pc, #432]	@ (80014c0 <KeyLogic+0x844>)
 800130e:	fba3 0302 	umull	r0, r3, r3, r2
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	2032      	movs	r0, #50	@ 0x32
 8001316:	fb00 f303 	mul.w	r3, r0, r3
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	1acb      	subs	r3, r1, r3
 800131e:	4a69      	ldr	r2, [pc, #420]	@ (80014c4 <KeyLogic+0x848>)
 8001320:	6013      	str	r3, [r2, #0]
							break;
 8001322:	e042      	b.n	80013aa <KeyLogic+0x72e>
								roundedPrice=currPrice-(currPrice%50)+50;
 8001324:	4b65      	ldr	r3, [pc, #404]	@ (80014bc <KeyLogic+0x840>)
 8001326:	6819      	ldr	r1, [r3, #0]
 8001328:	4b64      	ldr	r3, [pc, #400]	@ (80014bc <KeyLogic+0x840>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b64      	ldr	r3, [pc, #400]	@ (80014c0 <KeyLogic+0x844>)
 800132e:	fba3 0302 	umull	r0, r3, r3, r2
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	2032      	movs	r0, #50	@ 0x32
 8001336:	fb00 f303 	mul.w	r3, r0, r3
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	1acb      	subs	r3, r1, r3
 800133e:	3332      	adds	r3, #50	@ 0x32
 8001340:	4a60      	ldr	r2, [pc, #384]	@ (80014c4 <KeyLogic+0x848>)
 8001342:	6013      	str	r3, [r2, #0]
							break;
 8001344:	e031      	b.n	80013aa <KeyLogic+0x72e>
							if(currPrice%100<50){
 8001346:	4b5d      	ldr	r3, [pc, #372]	@ (80014bc <KeyLogic+0x840>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4b5d      	ldr	r3, [pc, #372]	@ (80014c0 <KeyLogic+0x844>)
 800134c:	fba3 1302 	umull	r1, r3, r3, r2
 8001350:	095b      	lsrs	r3, r3, #5
 8001352:	2164      	movs	r1, #100	@ 0x64
 8001354:	fb01 f303 	mul.w	r3, r1, r3
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b31      	cmp	r3, #49	@ 0x31
 800135c:	d80f      	bhi.n	800137e <KeyLogic+0x702>
								roundedPrice=currPrice-(currPrice%100);
 800135e:	4b57      	ldr	r3, [pc, #348]	@ (80014bc <KeyLogic+0x840>)
 8001360:	6819      	ldr	r1, [r3, #0]
 8001362:	4b56      	ldr	r3, [pc, #344]	@ (80014bc <KeyLogic+0x840>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b56      	ldr	r3, [pc, #344]	@ (80014c0 <KeyLogic+0x844>)
 8001368:	fba3 0302 	umull	r0, r3, r3, r2
 800136c:	095b      	lsrs	r3, r3, #5
 800136e:	2064      	movs	r0, #100	@ 0x64
 8001370:	fb00 f303 	mul.w	r3, r0, r3
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	1acb      	subs	r3, r1, r3
 8001378:	4a52      	ldr	r2, [pc, #328]	@ (80014c4 <KeyLogic+0x848>)
 800137a:	6013      	str	r3, [r2, #0]
							break;
 800137c:	e015      	b.n	80013aa <KeyLogic+0x72e>
								roundedPrice=currPrice-(currPrice%100)+100;
 800137e:	4b4f      	ldr	r3, [pc, #316]	@ (80014bc <KeyLogic+0x840>)
 8001380:	6819      	ldr	r1, [r3, #0]
 8001382:	4b4e      	ldr	r3, [pc, #312]	@ (80014bc <KeyLogic+0x840>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b4e      	ldr	r3, [pc, #312]	@ (80014c0 <KeyLogic+0x844>)
 8001388:	fba3 0302 	umull	r0, r3, r3, r2
 800138c:	095b      	lsrs	r3, r3, #5
 800138e:	2064      	movs	r0, #100	@ 0x64
 8001390:	fb00 f303 	mul.w	r3, r0, r3
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	1acb      	subs	r3, r1, r3
 8001398:	3364      	adds	r3, #100	@ 0x64
 800139a:	4a4a      	ldr	r2, [pc, #296]	@ (80014c4 <KeyLogic+0x848>)
 800139c:	6013      	str	r3, [r2, #0]
							break;
 800139e:	e004      	b.n	80013aa <KeyLogic+0x72e>
							roundedPrice=currPrice;
 80013a0:	4b46      	ldr	r3, [pc, #280]	@ (80014bc <KeyLogic+0x840>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a47      	ldr	r2, [pc, #284]	@ (80014c4 <KeyLogic+0x848>)
 80013a6:	6013      	str	r3, [r2, #0]
							break;
 80013a8:	bf00      	nop
					seqState = SEQ_IDLE;
 80013aa:	4b48      	ldr	r3, [pc, #288]	@ (80014cc <KeyLogic+0x850>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80013b0:	4b47      	ldr	r3, [pc, #284]	@ (80014d0 <KeyLogic+0x854>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80013b6:	4b47      	ldr	r3, [pc, #284]	@ (80014d4 <KeyLogic+0x858>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
				break;
 80013bc:	e11f      	b.n	80015fe <KeyLogic+0x982>
				else if(seqState == SEQ_ENTER_OLD_PASSWORD&&
 80013be:	4b43      	ldr	r3, [pc, #268]	@ (80014cc <KeyLogic+0x850>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d10f      	bne.n	80013e6 <KeyLogic+0x76a>
						accumulatedNumber == password){
 80013c6:	4b43      	ldr	r3, [pc, #268]	@ (80014d4 <KeyLogic+0x858>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4b43      	ldr	r3, [pc, #268]	@ (80014d8 <KeyLogic+0x85c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
				else if(seqState == SEQ_ENTER_OLD_PASSWORD&&
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d109      	bne.n	80013e6 <KeyLogic+0x76a>
					seqState = SEQ_ENTER_NEW_PASSWORD;
 80013d2:	4b3e      	ldr	r3, [pc, #248]	@ (80014cc <KeyLogic+0x850>)
 80013d4:	2203      	movs	r2, #3
 80013d6:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80013d8:	4b3d      	ldr	r3, [pc, #244]	@ (80014d0 <KeyLogic+0x854>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80013de:	4b3d      	ldr	r3, [pc, #244]	@ (80014d4 <KeyLogic+0x858>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e01b      	b.n	800141e <KeyLogic+0x7a2>
				else if(seqState == SEQ_ENTER_NEW_PASSWORD){
 80013e6:	4b39      	ldr	r3, [pc, #228]	@ (80014cc <KeyLogic+0x850>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d10d      	bne.n	800140a <KeyLogic+0x78e>
					password = accumulatedNumber;
 80013ee:	4b39      	ldr	r3, [pc, #228]	@ (80014d4 <KeyLogic+0x858>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a39      	ldr	r2, [pc, #228]	@ (80014d8 <KeyLogic+0x85c>)
 80013f4:	6013      	str	r3, [r2, #0]
					seqState = SEQ_IDLE;
 80013f6:	4b35      	ldr	r3, [pc, #212]	@ (80014cc <KeyLogic+0x850>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80013fc:	4b34      	ldr	r3, [pc, #208]	@ (80014d0 <KeyLogic+0x854>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001402:	4b34      	ldr	r3, [pc, #208]	@ (80014d4 <KeyLogic+0x858>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
				break;
 8001408:	e0f9      	b.n	80015fe <KeyLogic+0x982>
					seqState = SEQ_IDLE;
 800140a:	4b30      	ldr	r3, [pc, #192]	@ (80014cc <KeyLogic+0x850>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001410:	4b2f      	ldr	r3, [pc, #188]	@ (80014d0 <KeyLogic+0x854>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001416:	4b2f      	ldr	r3, [pc, #188]	@ (80014d4 <KeyLogic+0x858>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
				break;
 800141c:	e0ef      	b.n	80015fe <KeyLogic+0x982>
 800141e:	e0ee      	b.n	80015fe <KeyLogic+0x982>
/////////////////////////////////////////////////////KEY P/////////////////////////////////////////////////////////
			case 'P':
				if (seqState == SEQ_IDLE) {
 8001420:	4b2a      	ldr	r3, [pc, #168]	@ (80014cc <KeyLogic+0x850>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d103      	bne.n	8001430 <KeyLogic+0x7b4>
					seqState = SEQ_PRESSED_P;
 8001428:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <KeyLogic+0x850>)
 800142a:	2205      	movs	r2, #5
 800142c:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 800142e:	e0e6      	b.n	80015fe <KeyLogic+0x982>
					seqState = SEQ_IDLE;
 8001430:	4b26      	ldr	r3, [pc, #152]	@ (80014cc <KeyLogic+0x850>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001436:	4b26      	ldr	r3, [pc, #152]	@ (80014d0 <KeyLogic+0x854>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800143c:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <KeyLogic+0x858>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
				break;
 8001442:	e0dc      	b.n	80015fe <KeyLogic+0x982>
/////////////////////////////////////////////////////KEY T/////////////////////////////////////////////////////////
			case 'T':
				if (seqState == SEQ_IDLE) {
 8001444:	4b21      	ldr	r3, [pc, #132]	@ (80014cc <KeyLogic+0x850>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d103      	bne.n	8001454 <KeyLogic+0x7d8>
					seqState = SEQ_PRESSED_T;
 800144c:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <KeyLogic+0x850>)
 800144e:	220a      	movs	r2, #10
 8001450:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8001452:	e0d4      	b.n	80015fe <KeyLogic+0x982>
					seqState = SEQ_IDLE;
 8001454:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <KeyLogic+0x850>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800145a:	4b1d      	ldr	r3, [pc, #116]	@ (80014d0 <KeyLogic+0x854>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001460:	4b1c      	ldr	r3, [pc, #112]	@ (80014d4 <KeyLogic+0x858>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
				break;
 8001466:	e0ca      	b.n	80015fe <KeyLogic+0x982>
/////////////////////////////////////////////////////KEY $/////////////////////////////////////////////////////////
			case '$':
				if (seqState == SEQ_IDLE) {
 8001468:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <KeyLogic+0x850>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d103      	bne.n	8001478 <KeyLogic+0x7fc>
					seqState = SEQ_PRESSED_$;
 8001470:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <KeyLogic+0x850>)
 8001472:	2210      	movs	r2, #16
 8001474:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8001476:	e0c2      	b.n	80015fe <KeyLogic+0x982>
				}else if (seqState == SEQ_PRESSED_T) {
 8001478:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <KeyLogic+0x850>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b0a      	cmp	r3, #10
 800147e:	d103      	bne.n	8001488 <KeyLogic+0x80c>
					seqState = SEQ_PRESSED_T_$;
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <KeyLogic+0x850>)
 8001482:	220c      	movs	r2, #12
 8001484:	701a      	strb	r2, [r3, #0]
				break;
 8001486:	e0ba      	b.n	80015fe <KeyLogic+0x982>
					seqState = SEQ_IDLE;
 8001488:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <KeyLogic+0x850>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <KeyLogic+0x854>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001494:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <KeyLogic+0x858>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
				break;
 800149a:	e0b0      	b.n	80015fe <KeyLogic+0x982>
/////////////////////////////////////////////////////KEY L/////////////////////////////////////////////////////////
			case 'L':
				if (seqState == SEQ_IDLE) {
 800149c:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <KeyLogic+0x850>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d103      	bne.n	80014ac <KeyLogic+0x830>
					seqState = SEQ_PRESSED_L;
 80014a4:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <KeyLogic+0x850>)
 80014a6:	220f      	movs	r2, #15
 80014a8:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 80014aa:	e0a8      	b.n	80015fe <KeyLogic+0x982>
				} else if (seqState == SEQ_PRESSED_T) {
 80014ac:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <KeyLogic+0x850>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b0a      	cmp	r3, #10
 80014b2:	d113      	bne.n	80014dc <KeyLogic+0x860>
					seqState = SEQ_PRESSED_T_L;
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <KeyLogic+0x850>)
 80014b6:	220b      	movs	r2, #11
 80014b8:	701a      	strb	r2, [r3, #0]
				break;
 80014ba:	e0a0      	b.n	80015fe <KeyLogic+0x982>
 80014bc:	20000044 	.word	0x20000044
 80014c0:	51eb851f 	.word	0x51eb851f
 80014c4:	20000048 	.word	0x20000048
 80014c8:	20000258 	.word	0x20000258
 80014cc:	20000259 	.word	0x20000259
 80014d0:	2000024c 	.word	0x2000024c
 80014d4:	20000248 	.word	0x20000248
 80014d8:	20000038 	.word	0x20000038
					seqState = SEQ_IDLE;
 80014dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001608 <KeyLogic+0x98c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80014e2:	4b4a      	ldr	r3, [pc, #296]	@ (800160c <KeyLogic+0x990>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80014e8:	4b49      	ldr	r3, [pc, #292]	@ (8001610 <KeyLogic+0x994>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
				break;
 80014ee:	e086      	b.n	80015fe <KeyLogic+0x982>
			default:
/////////////////////////////////////////////////////KEY 0-9/////////////////////////////////////////////////////////
				if(keyPressed >= '0' && keyPressed <= '9') {
 80014f0:	4b48      	ldr	r3, [pc, #288]	@ (8001614 <KeyLogic+0x998>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80014f6:	d976      	bls.n	80015e6 <KeyLogic+0x96a>
 80014f8:	4b46      	ldr	r3, [pc, #280]	@ (8001614 <KeyLogic+0x998>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b39      	cmp	r3, #57	@ 0x39
 80014fe:	d872      	bhi.n	80015e6 <KeyLogic+0x96a>
					if(seqState==SEQ_PRESSED_P){
 8001500:	4b41      	ldr	r3, [pc, #260]	@ (8001608 <KeyLogic+0x98c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d10c      	bne.n	8001522 <KeyLogic+0x8a6>
						seqState=SEQ_PRESSED_P_NUM;
 8001508:	4b3f      	ldr	r3, [pc, #252]	@ (8001608 <KeyLogic+0x98c>)
 800150a:	2208      	movs	r2, #8
 800150c:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 800150e:	4b41      	ldr	r3, [pc, #260]	@ (8001614 <KeyLogic+0x998>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	3b30      	subs	r3, #48	@ 0x30
 8001514:	461a      	mov	r2, r3
 8001516:	4b3e      	ldr	r3, [pc, #248]	@ (8001610 <KeyLogic+0x994>)
 8001518:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 800151a:	4b3c      	ldr	r3, [pc, #240]	@ (800160c <KeyLogic+0x990>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8001520:	e06b      	b.n	80015fa <KeyLogic+0x97e>
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 8001522:	4b39      	ldr	r3, [pc, #228]	@ (8001608 <KeyLogic+0x98c>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b08      	cmp	r3, #8
 8001528:	d01b      	beq.n	8001562 <KeyLogic+0x8e6>
							seqState == SEQ_PRESSED_P_F2_PSWRD ||
 800152a:	4b37      	ldr	r3, [pc, #220]	@ (8001608 <KeyLogic+0x98c>)
 800152c:	781b      	ldrb	r3, [r3, #0]
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 800152e:	2b06      	cmp	r3, #6
 8001530:	d017      	beq.n	8001562 <KeyLogic+0x8e6>
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 8001532:	4b35      	ldr	r3, [pc, #212]	@ (8001608 <KeyLogic+0x98c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_F2_PSWRD ||
 8001536:	2b09      	cmp	r3, #9
 8001538:	d013      	beq.n	8001562 <KeyLogic+0x8e6>
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 800153a:	4b33      	ldr	r3, [pc, #204]	@ (8001608 <KeyLogic+0x98c>)
 800153c:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 800153e:	2b02      	cmp	r3, #2
 8001540:	d00f      	beq.n	8001562 <KeyLogic+0x8e6>
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 8001542:	4b31      	ldr	r3, [pc, #196]	@ (8001608 <KeyLogic+0x98c>)
 8001544:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 8001546:	2b03      	cmp	r3, #3
 8001548:	d00b      	beq.n	8001562 <KeyLogic+0x8e6>
							seqState == SEQ_NUMBER ||
 800154a:	4b2f      	ldr	r3, [pc, #188]	@ (8001608 <KeyLogic+0x98c>)
 800154c:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 800154e:	2b04      	cmp	r3, #4
 8001550:	d007      	beq.n	8001562 <KeyLogic+0x8e6>
							seqState == SEQ_PRESSED_$||
 8001552:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <KeyLogic+0x98c>)
 8001554:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_NUMBER ||
 8001556:	2b10      	cmp	r3, #16
 8001558:	d003      	beq.n	8001562 <KeyLogic+0x8e6>
							seqState == SEQ_PRESSED_L
 800155a:	4b2b      	ldr	r3, [pc, #172]	@ (8001608 <KeyLogic+0x98c>)
 800155c:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_$||
 800155e:	2b0f      	cmp	r3, #15
 8001560:	d117      	bne.n	8001592 <KeyLogic+0x916>
							) {
						if (numberOfDigits < 6) {
 8001562:	4b2a      	ldr	r3, [pc, #168]	@ (800160c <KeyLogic+0x990>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b05      	cmp	r3, #5
 8001568:	d83c      	bhi.n	80015e4 <KeyLogic+0x968>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 800156a:	4b29      	ldr	r3, [pc, #164]	@ (8001610 <KeyLogic+0x994>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	461a      	mov	r2, r3
 8001578:	4b26      	ldr	r3, [pc, #152]	@ (8001614 <KeyLogic+0x998>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4413      	add	r3, r2
 800157e:	3b30      	subs	r3, #48	@ 0x30
 8001580:	4a23      	ldr	r2, [pc, #140]	@ (8001610 <KeyLogic+0x994>)
 8001582:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 8001584:	4b21      	ldr	r3, [pc, #132]	@ (800160c <KeyLogic+0x990>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b1f      	ldr	r3, [pc, #124]	@ (800160c <KeyLogic+0x990>)
 800158e:	701a      	strb	r2, [r3, #0]
						if (numberOfDigits < 6) {
 8001590:	e028      	b.n	80015e4 <KeyLogic+0x968>
						}

					}else if(seqState == SEQ_PRESSED_P_F2_PSWRD_ROUND){
 8001592:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <KeyLogic+0x98c>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b07      	cmp	r3, #7
 8001598:	d117      	bne.n	80015ca <KeyLogic+0x94e>
						if (numberOfDigits < 1) {
 800159a:	4b1c      	ldr	r3, [pc, #112]	@ (800160c <KeyLogic+0x990>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d12b      	bne.n	80015fa <KeyLogic+0x97e>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 80015a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <KeyLogic+0x994>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <KeyLogic+0x998>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4413      	add	r3, r2
 80015b6:	3b30      	subs	r3, #48	@ 0x30
 80015b8:	4a15      	ldr	r2, [pc, #84]	@ (8001610 <KeyLogic+0x994>)
 80015ba:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 80015bc:	4b13      	ldr	r3, [pc, #76]	@ (800160c <KeyLogic+0x990>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	3301      	adds	r3, #1
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	4b11      	ldr	r3, [pc, #68]	@ (800160c <KeyLogic+0x990>)
 80015c6:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 80015c8:	e017      	b.n	80015fa <KeyLogic+0x97e>
						}
					}else{ //IDLE
						seqState = SEQ_NUMBER;
 80015ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <KeyLogic+0x98c>)
 80015cc:	2204      	movs	r2, #4
 80015ce:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 80015d0:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <KeyLogic+0x998>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	3b30      	subs	r3, #48	@ 0x30
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <KeyLogic+0x994>)
 80015da:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <KeyLogic+0x990>)
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 80015e2:	e00a      	b.n	80015fa <KeyLogic+0x97e>
 80015e4:	e009      	b.n	80015fa <KeyLogic+0x97e>
					}
				}else{
					seqState = SEQ_IDLE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <KeyLogic+0x98c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80015ec:	4b07      	ldr	r3, [pc, #28]	@ (800160c <KeyLogic+0x990>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80015f2:	4b07      	ldr	r3, [pc, #28]	@ (8001610 <KeyLogic+0x994>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
				}
				break;
 80015f8:	e000      	b.n	80015fc <KeyLogic+0x980>
					if(seqState==SEQ_PRESSED_P){
 80015fa:	bf00      	nop
				break;
 80015fc:	bf00      	nop
		}
	}
	keyPressed = 0xFF;
 80015fe:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <KeyLogic+0x998>)
 8001600:	22ff      	movs	r2, #255	@ 0xff
 8001602:	701a      	strb	r2, [r3, #0]
}
 8001604:	bf00      	nop
 8001606:	bdb0      	pop	{r4, r5, r7, pc}
 8001608:	20000259 	.word	0x20000259
 800160c:	2000024c 	.word	0x2000024c
 8001610:	20000248 	.word	0x20000248
 8001614:	20000035 	.word	0x20000035

08001618 <KeyLogic_Action>:


void KeyLogic_Action() {
 8001618:	b580      	push	{r7, lr}
 800161a:	b08e      	sub	sp, #56	@ 0x38
 800161c:	af02      	add	r7, sp, #8
    char buffer[7];
    switch (seqState) {
 800161e:	4ba9      	ldr	r3, [pc, #676]	@ (80018c4 <KeyLogic_Action+0x2ac>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b10      	cmp	r3, #16
 8001624:	f200 824e 	bhi.w	8001ac4 <KeyLogic_Action+0x4ac>
 8001628:	a201      	add	r2, pc, #4	@ (adr r2, 8001630 <KeyLogic_Action+0x18>)
 800162a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162e:	bf00      	nop
 8001630:	08001675 	.word	0x08001675
 8001634:	080016a5 	.word	0x080016a5
 8001638:	080016cb 	.word	0x080016cb
 800163c:	08001709 	.word	0x08001709
 8001640:	08001a1d 	.word	0x08001a1d
 8001644:	08001747 	.word	0x08001747
 8001648:	0800176d 	.word	0x0800176d
 800164c:	08001793 	.word	0x08001793
 8001650:	080017b3 	.word	0x080017b3
 8001654:	080017d9 	.word	0x080017d9
 8001658:	080017ff 	.word	0x080017ff
 800165c:	08001939 	.word	0x08001939
 8001660:	08001825 	.word	0x08001825
 8001664:	080019d1 	.word	0x080019d1
 8001668:	080019f7 	.word	0x080019f7
 800166c:	08001a91 	.word	0x08001a91
 8001670:	08001a5d 	.word	0x08001a5d
        case SEQ_IDLE:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8001674:	2300      	movs	r3, #0
 8001676:	4a94      	ldr	r2, [pc, #592]	@ (80018c8 <KeyLogic_Action+0x2b0>)
 8001678:	2107      	movs	r1, #7
 800167a:	4894      	ldr	r0, [pc, #592]	@ (80018cc <KeyLogic_Action+0x2b4>)
 800167c:	f003 fa58 	bl	8004b30 <sniprintf>
        	snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", orderPrice);
 8001680:	4b93      	ldr	r3, [pc, #588]	@ (80018d0 <KeyLogic_Action+0x2b8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a90      	ldr	r2, [pc, #576]	@ (80018c8 <KeyLogic_Action+0x2b0>)
 8001686:	2107      	movs	r1, #7
 8001688:	4892      	ldr	r0, [pc, #584]	@ (80018d4 <KeyLogic_Action+0x2bc>)
 800168a:	f003 fa51 	bl	8004b30 <sniprintf>
        	snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06.2f", orderLiter);
 800168e:	4b92      	ldr	r3, [pc, #584]	@ (80018d8 <KeyLogic_Action+0x2c0>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	e9cd 2300 	strd	r2, r3, [sp]
 8001698:	4a90      	ldr	r2, [pc, #576]	@ (80018dc <KeyLogic_Action+0x2c4>)
 800169a:	2107      	movs	r1, #7
 800169c:	4890      	ldr	r0, [pc, #576]	@ (80018e0 <KeyLogic_Action+0x2c8>)
 800169e:	f003 fa47 	bl	8004b30 <sniprintf>

            break;
 80016a2:	e222      	b.n	8001aea <KeyLogic_Action+0x4d2>
        case SEQ_DISP_PRICE:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "GIA   ");
 80016a4:	4a8f      	ldr	r2, [pc, #572]	@ (80018e4 <KeyLogic_Action+0x2cc>)
 80016a6:	2107      	movs	r1, #7
 80016a8:	4888      	ldr	r0, [pc, #544]	@ (80018cc <KeyLogic_Action+0x2b4>)
 80016aa:	f003 fa41 	bl	8004b30 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", roundedPrice);
 80016ae:	4b8e      	ldr	r3, [pc, #568]	@ (80018e8 <KeyLogic_Action+0x2d0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a8e      	ldr	r2, [pc, #568]	@ (80018ec <KeyLogic_Action+0x2d4>)
 80016b4:	2107      	movs	r1, #7
 80016b6:	4887      	ldr	r0, [pc, #540]	@ (80018d4 <KeyLogic_Action+0x2bc>)
 80016b8:	f003 fa3a 	bl	8004b30 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80016bc:	2300      	movs	r3, #0
 80016be:	4a82      	ldr	r2, [pc, #520]	@ (80018c8 <KeyLogic_Action+0x2b0>)
 80016c0:	2107      	movs	r1, #7
 80016c2:	4887      	ldr	r0, [pc, #540]	@ (80018e0 <KeyLogic_Action+0x2c8>)
 80016c4:	f003 fa34 	bl	8004b30 <sniprintf>
			break;
 80016c8:	e20f      	b.n	8001aea <KeyLogic_Action+0x4d2>
        case SEQ_ENTER_OLD_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 80016ca:	4b89      	ldr	r3, [pc, #548]	@ (80018f0 <KeyLogic_Action+0x2d8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f107 0020 	add.w	r0, r7, #32
 80016d2:	4a86      	ldr	r2, [pc, #536]	@ (80018ec <KeyLogic_Action+0x2d4>)
 80016d4:	2107      	movs	r1, #7
 80016d6:	f003 fa2b 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	4a85      	ldr	r2, [pc, #532]	@ (80018f4 <KeyLogic_Action+0x2dc>)
 80016e0:	2107      	movs	r1, #7
 80016e2:	487a      	ldr	r0, [pc, #488]	@ (80018cc <KeyLogic_Action+0x2b4>)
 80016e4:	f003 fa24 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "0L0 ");
 80016e8:	4a83      	ldr	r2, [pc, #524]	@ (80018f8 <KeyLogic_Action+0x2e0>)
 80016ea:	2107      	movs	r1, #7
 80016ec:	4879      	ldr	r0, [pc, #484]	@ (80018d4 <KeyLogic_Action+0x2bc>)
 80016ee:	f003 fa1f 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80016f2:	2300      	movs	r3, #0
 80016f4:	4a74      	ldr	r2, [pc, #464]	@ (80018c8 <KeyLogic_Action+0x2b0>)
 80016f6:	2107      	movs	r1, #7
 80016f8:	4879      	ldr	r0, [pc, #484]	@ (80018e0 <KeyLogic_Action+0x2c8>)
 80016fa:	f003 fa19 	bl	8004b30 <sniprintf>
            LEDPointFlag = -1;
 80016fe:	4b7f      	ldr	r3, [pc, #508]	@ (80018fc <KeyLogic_Action+0x2e4>)
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	601a      	str	r2, [r3, #0]
            break;
 8001706:	e1f0      	b.n	8001aea <KeyLogic_Action+0x4d2>
        case SEQ_ENTER_NEW_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001708:	4b79      	ldr	r3, [pc, #484]	@ (80018f0 <KeyLogic_Action+0x2d8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f107 0020 	add.w	r0, r7, #32
 8001710:	4a76      	ldr	r2, [pc, #472]	@ (80018ec <KeyLogic_Action+0x2d4>)
 8001712:	2107      	movs	r1, #7
 8001714:	f003 fa0c 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001718:	f107 0320 	add.w	r3, r7, #32
 800171c:	4a75      	ldr	r2, [pc, #468]	@ (80018f4 <KeyLogic_Action+0x2dc>)
 800171e:	2107      	movs	r1, #7
 8001720:	486a      	ldr	r0, [pc, #424]	@ (80018cc <KeyLogic_Action+0x2b4>)
 8001722:	f003 fa05 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001726:	2300      	movs	r3, #0
 8001728:	4a67      	ldr	r2, [pc, #412]	@ (80018c8 <KeyLogic_Action+0x2b0>)
 800172a:	2107      	movs	r1, #7
 800172c:	4869      	ldr	r0, [pc, #420]	@ (80018d4 <KeyLogic_Action+0x2bc>)
 800172e:	f003 f9ff 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " NEUU ");
 8001732:	4a73      	ldr	r2, [pc, #460]	@ (8001900 <KeyLogic_Action+0x2e8>)
 8001734:	2107      	movs	r1, #7
 8001736:	486a      	ldr	r0, [pc, #424]	@ (80018e0 <KeyLogic_Action+0x2c8>)
 8001738:	f003 f9fa 	bl	8004b30 <sniprintf>
            LEDPointFlag = -1;
 800173c:	4b6f      	ldr	r3, [pc, #444]	@ (80018fc <KeyLogic_Action+0x2e4>)
 800173e:	f04f 32ff 	mov.w	r2, #4294967295
 8001742:	601a      	str	r2, [r3, #0]
            break;
 8001744:	e1d1      	b.n	8001aea <KeyLogic_Action+0x4d2>
        case SEQ_PRESSED_P:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001746:	4b6a      	ldr	r3, [pc, #424]	@ (80018f0 <KeyLogic_Action+0x2d8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a68      	ldr	r2, [pc, #416]	@ (80018ec <KeyLogic_Action+0x2d4>)
 800174c:	2107      	movs	r1, #7
 800174e:	485f      	ldr	r0, [pc, #380]	@ (80018cc <KeyLogic_Action+0x2b4>)
 8001750:	f003 f9ee 	bl	8004b30 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001754:	2300      	movs	r3, #0
 8001756:	4a5c      	ldr	r2, [pc, #368]	@ (80018c8 <KeyLogic_Action+0x2b0>)
 8001758:	2107      	movs	r1, #7
 800175a:	485e      	ldr	r0, [pc, #376]	@ (80018d4 <KeyLogic_Action+0x2bc>)
 800175c:	f003 f9e8 	bl	8004b30 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P     ");
 8001760:	4a68      	ldr	r2, [pc, #416]	@ (8001904 <KeyLogic_Action+0x2ec>)
 8001762:	2107      	movs	r1, #7
 8001764:	485e      	ldr	r0, [pc, #376]	@ (80018e0 <KeyLogic_Action+0x2c8>)
 8001766:	f003 f9e3 	bl	8004b30 <sniprintf>
			break;
 800176a:	e1be      	b.n	8001aea <KeyLogic_Action+0x4d2>
        case SEQ_PRESSED_P_F2_PSWRD:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 800176c:	4b60      	ldr	r3, [pc, #384]	@ (80018f0 <KeyLogic_Action+0x2d8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a5e      	ldr	r2, [pc, #376]	@ (80018ec <KeyLogic_Action+0x2d4>)
 8001772:	2107      	movs	r1, #7
 8001774:	4855      	ldr	r0, [pc, #340]	@ (80018cc <KeyLogic_Action+0x2b4>)
 8001776:	f003 f9db 	bl	8004b30 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800177a:	2300      	movs	r3, #0
 800177c:	4a52      	ldr	r2, [pc, #328]	@ (80018c8 <KeyLogic_Action+0x2b0>)
 800177e:	2107      	movs	r1, #7
 8001780:	4854      	ldr	r0, [pc, #336]	@ (80018d4 <KeyLogic_Action+0x2bc>)
 8001782:	f003 f9d5 	bl	8004b30 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SL ARO");
 8001786:	4a60      	ldr	r2, [pc, #384]	@ (8001908 <KeyLogic_Action+0x2f0>)
 8001788:	2107      	movs	r1, #7
 800178a:	4855      	ldr	r0, [pc, #340]	@ (80018e0 <KeyLogic_Action+0x2c8>)
 800178c:	f003 f9d0 	bl	8004b30 <sniprintf>
			break;
 8001790:	e1ab      	b.n	8001aea <KeyLogic_Action+0x4d2>
        case SEQ_PRESSED_P_F2_PSWRD_ROUND:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "0.  50");
 8001792:	4a5e      	ldr	r2, [pc, #376]	@ (800190c <KeyLogic_Action+0x2f4>)
 8001794:	2107      	movs	r1, #7
 8001796:	484d      	ldr	r0, [pc, #308]	@ (80018cc <KeyLogic_Action+0x2b4>)
 8001798:	f003 f9ca 	bl	8004b30 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "1. 100");
 800179c:	4a5c      	ldr	r2, [pc, #368]	@ (8001910 <KeyLogic_Action+0x2f8>)
 800179e:	2107      	movs	r1, #7
 80017a0:	484c      	ldr	r0, [pc, #304]	@ (80018d4 <KeyLogic_Action+0x2bc>)
 80017a2:	f003 f9c5 	bl	8004b30 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "2. 1..");
 80017a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001914 <KeyLogic_Action+0x2fc>)
 80017a8:	2107      	movs	r1, #7
 80017aa:	484d      	ldr	r0, [pc, #308]	@ (80018e0 <KeyLogic_Action+0x2c8>)
 80017ac:	f003 f9c0 	bl	8004b30 <sniprintf>
			break;
 80017b0:	e19b      	b.n	8001aea <KeyLogic_Action+0x4d2>
        case SEQ_PRESSED_P_NUM:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 80017b2:	4b4f      	ldr	r3, [pc, #316]	@ (80018f0 <KeyLogic_Action+0x2d8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a4d      	ldr	r2, [pc, #308]	@ (80018ec <KeyLogic_Action+0x2d4>)
 80017b8:	2107      	movs	r1, #7
 80017ba:	4844      	ldr	r0, [pc, #272]	@ (80018cc <KeyLogic_Action+0x2b4>)
 80017bc:	f003 f9b8 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80017c0:	2300      	movs	r3, #0
 80017c2:	4a41      	ldr	r2, [pc, #260]	@ (80018c8 <KeyLogic_Action+0x2b0>)
 80017c4:	2107      	movs	r1, #7
 80017c6:	4843      	ldr	r0, [pc, #268]	@ (80018d4 <KeyLogic_Action+0x2bc>)
 80017c8:	f003 f9b2 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P88888");
 80017cc:	4a52      	ldr	r2, [pc, #328]	@ (8001918 <KeyLogic_Action+0x300>)
 80017ce:	2107      	movs	r1, #7
 80017d0:	4843      	ldr	r0, [pc, #268]	@ (80018e0 <KeyLogic_Action+0x2c8>)
 80017d2:	f003 f9ad 	bl	8004b30 <sniprintf>
            break;
 80017d6:	e188      	b.n	8001aea <KeyLogic_Action+0x4d2>
        case SEQ_PRESSED_P_PSWRD_SETPRICE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 80017d8:	4b45      	ldr	r3, [pc, #276]	@ (80018f0 <KeyLogic_Action+0x2d8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a43      	ldr	r2, [pc, #268]	@ (80018ec <KeyLogic_Action+0x2d4>)
 80017de:	2107      	movs	r1, #7
 80017e0:	483a      	ldr	r0, [pc, #232]	@ (80018cc <KeyLogic_Action+0x2b4>)
 80017e2:	f003 f9a5 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80017e6:	2300      	movs	r3, #0
 80017e8:	4a37      	ldr	r2, [pc, #220]	@ (80018c8 <KeyLogic_Action+0x2b0>)
 80017ea:	2107      	movs	r1, #7
 80017ec:	4839      	ldr	r0, [pc, #228]	@ (80018d4 <KeyLogic_Action+0x2bc>)
 80017ee:	f003 f99f 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "GIA   ");
 80017f2:	4a3c      	ldr	r2, [pc, #240]	@ (80018e4 <KeyLogic_Action+0x2cc>)
 80017f4:	2107      	movs	r1, #7
 80017f6:	483a      	ldr	r0, [pc, #232]	@ (80018e0 <KeyLogic_Action+0x2c8>)
 80017f8:	f003 f99a 	bl	8004b30 <sniprintf>
            break;
 80017fc:	e175      	b.n	8001aea <KeyLogic_Action+0x4d2>
        case SEQ_PRESSED_T:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 80017fe:	2300      	movs	r3, #0
 8001800:	4a31      	ldr	r2, [pc, #196]	@ (80018c8 <KeyLogic_Action+0x2b0>)
 8001802:	2107      	movs	r1, #7
 8001804:	4831      	ldr	r0, [pc, #196]	@ (80018cc <KeyLogic_Action+0x2b4>)
 8001806:	f003 f993 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800180a:	2300      	movs	r3, #0
 800180c:	4a2e      	ldr	r2, [pc, #184]	@ (80018c8 <KeyLogic_Action+0x2b0>)
 800180e:	2107      	movs	r1, #7
 8001810:	4830      	ldr	r0, [pc, #192]	@ (80018d4 <KeyLogic_Action+0x2bc>)
 8001812:	f003 f98d 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 999999);
 8001816:	4b41      	ldr	r3, [pc, #260]	@ (800191c <KeyLogic_Action+0x304>)
 8001818:	4a2b      	ldr	r2, [pc, #172]	@ (80018c8 <KeyLogic_Action+0x2b0>)
 800181a:	2107      	movs	r1, #7
 800181c:	4830      	ldr	r0, [pc, #192]	@ (80018e0 <KeyLogic_Action+0x2c8>)
 800181e:	f003 f987 	bl	8004b30 <sniprintf>
            break;
 8001822:	e162      	b.n	8001aea <KeyLogic_Action+0x4d2>
        case SEQ_PRESSED_T_$:
        	 // Format the total liters into two parts
			formatTotalLitersShift(totalLitersShift, &row1, &row2);
 8001824:	4b3e      	ldr	r3, [pc, #248]	@ (8001920 <KeyLogic_Action+0x308>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a3e      	ldr	r2, [pc, #248]	@ (8001924 <KeyLogic_Action+0x30c>)
 800182a:	493f      	ldr	r1, [pc, #252]	@ (8001928 <KeyLogic_Action+0x310>)
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff f9ed 	bl	8000c0c <formatTotalLitersShift>

			// Ensure the combined string fits into the buffer
			char row1StrShift[7]; // Buffer to hold formatted row1 string
			snprintf(row1StrShift, sizeof(row1StrShift), "%06ld", row1);
 8001832:	4b3d      	ldr	r3, [pc, #244]	@ (8001928 <KeyLogic_Action+0x310>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f107 0018 	add.w	r0, r7, #24
 800183a:	4a2c      	ldr	r2, [pc, #176]	@ (80018ec <KeyLogic_Action+0x2d4>)
 800183c:	2107      	movs	r1, #7
 800183e:	f003 f977 	bl	8004b30 <sniprintf>

			// Combine "L.. " with the last two digits of row1
			char combinedStrShift[8]; // Buffer to hold combined string "L.. " and last two digits of row1
			snprintf(combinedStrShift, sizeof(combinedStrShift), "SH.%04ld", row1 % 10000); // Extract last two digits of row1
 8001842:	4b39      	ldr	r3, [pc, #228]	@ (8001928 <KeyLogic_Action+0x310>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4b39      	ldr	r3, [pc, #228]	@ (800192c <KeyLogic_Action+0x314>)
 8001848:	fba3 1302 	umull	r1, r3, r3, r2
 800184c:	0b5b      	lsrs	r3, r3, #13
 800184e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001852:	fb01 f303 	mul.w	r3, r1, r3
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f107 0010 	add.w	r0, r7, #16
 800185c:	4a34      	ldr	r2, [pc, #208]	@ (8001930 <KeyLogic_Action+0x318>)
 800185e:	2108      	movs	r1, #8
 8001860:	f003 f966 	bl	8004b30 <sniprintf>

			// Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
			for (int i = 0; i < 6; ++i) {
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001868:	e01b      	b.n	80018a2 <KeyLogic_Action+0x28a>
				if (i < strlen(combinedStrShift)) {
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fc6e 	bl	8000150 <strlen>
 8001874:	4602      	mov	r2, r0
 8001876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001878:	429a      	cmp	r2, r3
 800187a:	d90a      	bls.n	8001892 <KeyLogic_Action+0x27a>
					SevenSegBuffer[0][i] = combinedStrShift[i];
 800187c:	f107 0210 	add.w	r2, r7, #16
 8001880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001882:	4413      	add	r3, r2
 8001884:	7819      	ldrb	r1, [r3, #0]
 8001886:	4a11      	ldr	r2, [pc, #68]	@ (80018cc <KeyLogic_Action+0x2b4>)
 8001888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188a:	4413      	add	r3, r2
 800188c:	460a      	mov	r2, r1
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	e004      	b.n	800189c <KeyLogic_Action+0x284>
				} else {
					SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8001892:	4a0e      	ldr	r2, [pc, #56]	@ (80018cc <KeyLogic_Action+0x2b4>)
 8001894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001896:	4413      	add	r3, r2
 8001898:	2220      	movs	r2, #32
 800189a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; ++i) {
 800189c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800189e:	3301      	adds	r3, #1
 80018a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	dde0      	ble.n	800186a <KeyLogic_Action+0x252>
				}
			}
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 80018a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001924 <KeyLogic_Action+0x30c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0f      	ldr	r2, [pc, #60]	@ (80018ec <KeyLogic_Action+0x2d4>)
 80018ae:	2107      	movs	r1, #7
 80018b0:	4808      	ldr	r0, [pc, #32]	@ (80018d4 <KeyLogic_Action+0x2bc>)
 80018b2:	f003 f93d 	bl	8004b30 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SHIFT ");
 80018b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001934 <KeyLogic_Action+0x31c>)
 80018b8:	2107      	movs	r1, #7
 80018ba:	4809      	ldr	r0, [pc, #36]	@ (80018e0 <KeyLogic_Action+0x2c8>)
 80018bc:	f003 f938 	bl	8004b30 <sniprintf>

            break;
 80018c0:	e113      	b.n	8001aea <KeyLogic_Action+0x4d2>
 80018c2:	bf00      	nop
 80018c4:	20000259 	.word	0x20000259
 80018c8:	08006de0 	.word	0x08006de0
 80018cc:	20000020 	.word	0x20000020
 80018d0:	20000360 	.word	0x20000360
 80018d4:	20000027 	.word	0x20000027
 80018d8:	20000368 	.word	0x20000368
 80018dc:	08006de8 	.word	0x08006de8
 80018e0:	2000002e 	.word	0x2000002e
 80018e4:	08006df0 	.word	0x08006df0
 80018e8:	20000048 	.word	0x20000048
 80018ec:	08006df8 	.word	0x08006df8
 80018f0:	20000248 	.word	0x20000248
 80018f4:	08006e00 	.word	0x08006e00
 80018f8:	08006e04 	.word	0x08006e04
 80018fc:	2000004c 	.word	0x2000004c
 8001900:	08006e0c 	.word	0x08006e0c
 8001904:	08006e14 	.word	0x08006e14
 8001908:	08006e1c 	.word	0x08006e1c
 800190c:	08006e24 	.word	0x08006e24
 8001910:	08006e2c 	.word	0x08006e2c
 8001914:	08006e34 	.word	0x08006e34
 8001918:	08006e3c 	.word	0x08006e3c
 800191c:	000f423f 	.word	0x000f423f
 8001920:	20000040 	.word	0x20000040
 8001924:	20000254 	.word	0x20000254
 8001928:	20000250 	.word	0x20000250
 800192c:	d1b71759 	.word	0xd1b71759
 8001930:	08006e44 	.word	0x08006e44
 8001934:	08006e50 	.word	0x08006e50
        case SEQ_PRESSED_T_L:
            // Format the total liters into two parts
            formatTotalLiters(totalLiters, &row1, &row2);
 8001938:	4b6e      	ldr	r3, [pc, #440]	@ (8001af4 <KeyLogic_Action+0x4dc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a6e      	ldr	r2, [pc, #440]	@ (8001af8 <KeyLogic_Action+0x4e0>)
 800193e:	496f      	ldr	r1, [pc, #444]	@ (8001afc <KeyLogic_Action+0x4e4>)
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff f917 	bl	8000b74 <formatTotalLiters>

            // Ensure the combined string fits into the buffer
            char row1Str[7]; // Buffer to hold formatted row1 string
            snprintf(row1Str, sizeof(row1Str), "%06ld", row1);
 8001946:	4b6d      	ldr	r3, [pc, #436]	@ (8001afc <KeyLogic_Action+0x4e4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f107 0008 	add.w	r0, r7, #8
 800194e:	4a6c      	ldr	r2, [pc, #432]	@ (8001b00 <KeyLogic_Action+0x4e8>)
 8001950:	2107      	movs	r1, #7
 8001952:	f003 f8ed 	bl	8004b30 <sniprintf>

            // Combine "L.. " with the last two digits of row1
            char combinedStr[8]; // Buffer to hold combined string "L.. " and last two digits of row1
            snprintf(combinedStr, sizeof(combinedStr), "L.%04ld", row1 % 10000); // Extract last two digits of row1
 8001956:	4b69      	ldr	r3, [pc, #420]	@ (8001afc <KeyLogic_Action+0x4e4>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b04 <KeyLogic_Action+0x4ec>)
 800195c:	fba3 1302 	umull	r1, r3, r3, r2
 8001960:	0b5b      	lsrs	r3, r3, #13
 8001962:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001966:	fb01 f303 	mul.w	r3, r1, r3
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	4638      	mov	r0, r7
 800196e:	4a66      	ldr	r2, [pc, #408]	@ (8001b08 <KeyLogic_Action+0x4f0>)
 8001970:	2108      	movs	r1, #8
 8001972:	f003 f8dd 	bl	8004b30 <sniprintf>

            // Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
            for (int i = 0; i < 6; ++i) {
 8001976:	2300      	movs	r3, #0
 8001978:	62bb      	str	r3, [r7, #40]	@ 0x28
 800197a:	e019      	b.n	80019b0 <KeyLogic_Action+0x398>
                if (i < strlen(combinedStr)) {
 800197c:	463b      	mov	r3, r7
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fbe6 	bl	8000150 <strlen>
 8001984:	4602      	mov	r2, r0
 8001986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001988:	429a      	cmp	r2, r3
 800198a:	d909      	bls.n	80019a0 <KeyLogic_Action+0x388>
                    SevenSegBuffer[0][i] = combinedStr[i];
 800198c:	463a      	mov	r2, r7
 800198e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001990:	4413      	add	r3, r2
 8001992:	7819      	ldrb	r1, [r3, #0]
 8001994:	4a5d      	ldr	r2, [pc, #372]	@ (8001b0c <KeyLogic_Action+0x4f4>)
 8001996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001998:	4413      	add	r3, r2
 800199a:	460a      	mov	r2, r1
 800199c:	701a      	strb	r2, [r3, #0]
 800199e:	e004      	b.n	80019aa <KeyLogic_Action+0x392>
                } else {
                    SevenSegBuffer[0][i] = ' '; // Pad with spaces
 80019a0:	4a5a      	ldr	r2, [pc, #360]	@ (8001b0c <KeyLogic_Action+0x4f4>)
 80019a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a4:	4413      	add	r3, r2
 80019a6:	2220      	movs	r2, #32
 80019a8:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; ++i) {
 80019aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ac:	3301      	adds	r3, #1
 80019ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	dde2      	ble.n	800197c <KeyLogic_Action+0x364>
                }
            }


            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 80019b6:	4b50      	ldr	r3, [pc, #320]	@ (8001af8 <KeyLogic_Action+0x4e0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a51      	ldr	r2, [pc, #324]	@ (8001b00 <KeyLogic_Action+0x4e8>)
 80019bc:	2107      	movs	r1, #7
 80019be:	4854      	ldr	r0, [pc, #336]	@ (8001b10 <KeyLogic_Action+0x4f8>)
 80019c0:	f003 f8b6 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "TOTAL ");
 80019c4:	4a53      	ldr	r2, [pc, #332]	@ (8001b14 <KeyLogic_Action+0x4fc>)
 80019c6:	2107      	movs	r1, #7
 80019c8:	4853      	ldr	r0, [pc, #332]	@ (8001b18 <KeyLogic_Action+0x500>)
 80019ca:	f003 f8b1 	bl	8004b30 <sniprintf>



            break;
 80019ce:	e08c      	b.n	8001aea <KeyLogic_Action+0x4d2>

        case SEQ_PRESSED_T_F3:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 333333);
 80019d0:	4b52      	ldr	r3, [pc, #328]	@ (8001b1c <KeyLogic_Action+0x504>)
 80019d2:	4a53      	ldr	r2, [pc, #332]	@ (8001b20 <KeyLogic_Action+0x508>)
 80019d4:	2107      	movs	r1, #7
 80019d6:	484d      	ldr	r0, [pc, #308]	@ (8001b0c <KeyLogic_Action+0x4f4>)
 80019d8:	f003 f8aa 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80019dc:	2300      	movs	r3, #0
 80019de:	4a50      	ldr	r2, [pc, #320]	@ (8001b20 <KeyLogic_Action+0x508>)
 80019e0:	2107      	movs	r1, #7
 80019e2:	484b      	ldr	r0, [pc, #300]	@ (8001b10 <KeyLogic_Action+0x4f8>)
 80019e4:	f003 f8a4 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80019e8:	2300      	movs	r3, #0
 80019ea:	4a4d      	ldr	r2, [pc, #308]	@ (8001b20 <KeyLogic_Action+0x508>)
 80019ec:	2107      	movs	r1, #7
 80019ee:	484a      	ldr	r0, [pc, #296]	@ (8001b18 <KeyLogic_Action+0x500>)
 80019f0:	f003 f89e 	bl	8004b30 <sniprintf>
            break;
 80019f4:	e079      	b.n	8001aea <KeyLogic_Action+0x4d2>
        case SEQ_PRESSED_T_F4:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 444444);
 80019f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001b24 <KeyLogic_Action+0x50c>)
 80019f8:	4a49      	ldr	r2, [pc, #292]	@ (8001b20 <KeyLogic_Action+0x508>)
 80019fa:	2107      	movs	r1, #7
 80019fc:	4843      	ldr	r0, [pc, #268]	@ (8001b0c <KeyLogic_Action+0x4f4>)
 80019fe:	f003 f897 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001a02:	2300      	movs	r3, #0
 8001a04:	4a46      	ldr	r2, [pc, #280]	@ (8001b20 <KeyLogic_Action+0x508>)
 8001a06:	2107      	movs	r1, #7
 8001a08:	4841      	ldr	r0, [pc, #260]	@ (8001b10 <KeyLogic_Action+0x4f8>)
 8001a0a:	f003 f891 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001a0e:	2300      	movs	r3, #0
 8001a10:	4a43      	ldr	r2, [pc, #268]	@ (8001b20 <KeyLogic_Action+0x508>)
 8001a12:	2107      	movs	r1, #7
 8001a14:	4840      	ldr	r0, [pc, #256]	@ (8001b18 <KeyLogic_Action+0x500>)
 8001a16:	f003 f88b 	bl	8004b30 <sniprintf>
            break;
 8001a1a:	e066      	b.n	8001aea <KeyLogic_Action+0x4d2>
        case SEQ_NUMBER:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001a1c:	4b42      	ldr	r3, [pc, #264]	@ (8001b28 <KeyLogic_Action+0x510>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f107 0020 	add.w	r0, r7, #32
 8001a24:	4a36      	ldr	r2, [pc, #216]	@ (8001b00 <KeyLogic_Action+0x4e8>)
 8001a26:	2107      	movs	r1, #7
 8001a28:	f003 f882 	bl	8004b30 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001a2c:	f107 0320 	add.w	r3, r7, #32
 8001a30:	4a3e      	ldr	r2, [pc, #248]	@ (8001b2c <KeyLogic_Action+0x514>)
 8001a32:	2107      	movs	r1, #7
 8001a34:	4835      	ldr	r0, [pc, #212]	@ (8001b0c <KeyLogic_Action+0x4f4>)
 8001a36:	f003 f87b 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	4a38      	ldr	r2, [pc, #224]	@ (8001b20 <KeyLogic_Action+0x508>)
 8001a3e:	2107      	movs	r1, #7
 8001a40:	4833      	ldr	r0, [pc, #204]	@ (8001b10 <KeyLogic_Action+0x4f8>)
 8001a42:	f003 f875 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001a46:	2300      	movs	r3, #0
 8001a48:	4a35      	ldr	r2, [pc, #212]	@ (8001b20 <KeyLogic_Action+0x508>)
 8001a4a:	2107      	movs	r1, #7
 8001a4c:	4832      	ldr	r0, [pc, #200]	@ (8001b18 <KeyLogic_Action+0x500>)
 8001a4e:	f003 f86f 	bl	8004b30 <sniprintf>
			LEDPointFlag = -1;
 8001a52:	4b37      	ldr	r3, [pc, #220]	@ (8001b30 <KeyLogic_Action+0x518>)
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	601a      	str	r2, [r3, #0]
			break;
 8001a5a:	e046      	b.n	8001aea <KeyLogic_Action+0x4d2>
        case SEQ_PRESSED_$:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001a5c:	4b32      	ldr	r3, [pc, #200]	@ (8001b28 <KeyLogic_Action+0x510>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f107 0020 	add.w	r0, r7, #32
 8001a64:	4a26      	ldr	r2, [pc, #152]	@ (8001b00 <KeyLogic_Action+0x4e8>)
 8001a66:	2107      	movs	r1, #7
 8001a68:	f003 f862 	bl	8004b30 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001a6c:	f107 0320 	add.w	r3, r7, #32
 8001a70:	4a2e      	ldr	r2, [pc, #184]	@ (8001b2c <KeyLogic_Action+0x514>)
 8001a72:	2107      	movs	r1, #7
 8001a74:	4825      	ldr	r0, [pc, #148]	@ (8001b0c <KeyLogic_Action+0x4f4>)
 8001a76:	f003 f85b 	bl	8004b30 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "SET   ");
 8001a7a:	4a2e      	ldr	r2, [pc, #184]	@ (8001b34 <KeyLogic_Action+0x51c>)
 8001a7c:	2107      	movs	r1, #7
 8001a7e:	4824      	ldr	r0, [pc, #144]	@ (8001b10 <KeyLogic_Action+0x4f8>)
 8001a80:	f003 f856 	bl	8004b30 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "GIA   ");
 8001a84:	4a2c      	ldr	r2, [pc, #176]	@ (8001b38 <KeyLogic_Action+0x520>)
 8001a86:	2107      	movs	r1, #7
 8001a88:	4823      	ldr	r0, [pc, #140]	@ (8001b18 <KeyLogic_Action+0x500>)
 8001a8a:	f003 f851 	bl	8004b30 <sniprintf>
			break;
 8001a8e:	e02c      	b.n	8001aea <KeyLogic_Action+0x4d2>
        case SEQ_PRESSED_L:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001a90:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <KeyLogic_Action+0x510>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f107 0020 	add.w	r0, r7, #32
 8001a98:	4a19      	ldr	r2, [pc, #100]	@ (8001b00 <KeyLogic_Action+0x4e8>)
 8001a9a:	2107      	movs	r1, #7
 8001a9c:	f003 f848 	bl	8004b30 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001aa0:	f107 0320 	add.w	r3, r7, #32
 8001aa4:	4a21      	ldr	r2, [pc, #132]	@ (8001b2c <KeyLogic_Action+0x514>)
 8001aa6:	2107      	movs	r1, #7
 8001aa8:	4818      	ldr	r0, [pc, #96]	@ (8001b0c <KeyLogic_Action+0x4f4>)
 8001aaa:	f003 f841 	bl	8004b30 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "SET   ");
 8001aae:	4a21      	ldr	r2, [pc, #132]	@ (8001b34 <KeyLogic_Action+0x51c>)
 8001ab0:	2107      	movs	r1, #7
 8001ab2:	4817      	ldr	r0, [pc, #92]	@ (8001b10 <KeyLogic_Action+0x4f8>)
 8001ab4:	f003 f83c 	bl	8004b30 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "LIT   ");
 8001ab8:	4a20      	ldr	r2, [pc, #128]	@ (8001b3c <KeyLogic_Action+0x524>)
 8001aba:	2107      	movs	r1, #7
 8001abc:	4816      	ldr	r0, [pc, #88]	@ (8001b18 <KeyLogic_Action+0x500>)
 8001abe:	f003 f837 	bl	8004b30 <sniprintf>
			break;
 8001ac2:	e012      	b.n	8001aea <KeyLogic_Action+0x4d2>
        default:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	4a16      	ldr	r2, [pc, #88]	@ (8001b20 <KeyLogic_Action+0x508>)
 8001ac8:	2107      	movs	r1, #7
 8001aca:	4810      	ldr	r0, [pc, #64]	@ (8001b0c <KeyLogic_Action+0x4f4>)
 8001acc:	f003 f830 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	4a13      	ldr	r2, [pc, #76]	@ (8001b20 <KeyLogic_Action+0x508>)
 8001ad4:	2107      	movs	r1, #7
 8001ad6:	480e      	ldr	r0, [pc, #56]	@ (8001b10 <KeyLogic_Action+0x4f8>)
 8001ad8:	f003 f82a 	bl	8004b30 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001adc:	2300      	movs	r3, #0
 8001ade:	4a10      	ldr	r2, [pc, #64]	@ (8001b20 <KeyLogic_Action+0x508>)
 8001ae0:	2107      	movs	r1, #7
 8001ae2:	480d      	ldr	r0, [pc, #52]	@ (8001b18 <KeyLogic_Action+0x500>)
 8001ae4:	f003 f824 	bl	8004b30 <sniprintf>
            break;
 8001ae8:	bf00      	nop
    }
}
 8001aea:	bf00      	nop
 8001aec:	3730      	adds	r7, #48	@ 0x30
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000003c 	.word	0x2000003c
 8001af8:	20000254 	.word	0x20000254
 8001afc:	20000250 	.word	0x20000250
 8001b00:	08006df8 	.word	0x08006df8
 8001b04:	d1b71759 	.word	0xd1b71759
 8001b08:	08006e58 	.word	0x08006e58
 8001b0c:	20000020 	.word	0x20000020
 8001b10:	20000027 	.word	0x20000027
 8001b14:	08006e60 	.word	0x08006e60
 8001b18:	2000002e 	.word	0x2000002e
 8001b1c:	00051615 	.word	0x00051615
 8001b20:	08006de0 	.word	0x08006de0
 8001b24:	0006c81c 	.word	0x0006c81c
 8001b28:	20000248 	.word	0x20000248
 8001b2c:	08006e00 	.word	0x08006e00
 8001b30:	2000004c 	.word	0x2000004c
 8001b34:	08006e68 	.word	0x08006e68
 8001b38:	08006df0 	.word	0x08006df0
 8001b3c:	08006e70 	.word	0x08006e70

08001b40 <CharToSegment>:
//uint32_t SevenSegBuffer[3]={123456, 654321, 987654};
char SevenSegBuffer[3][7] = {"123456", "654321", "987654"};
uint8_t displayBuffer[5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;

uint8_t CharToSegment(char c) {
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b4e:	d907      	bls.n	8001b60 <CharToSegment+0x20>
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	2b39      	cmp	r3, #57	@ 0x39
 8001b54:	d804      	bhi.n	8001b60 <CharToSegment+0x20>
        return digitMapWithOutDP[c - '0'];
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	3b30      	subs	r3, #48	@ 0x30
 8001b5a:	4a37      	ldr	r2, [pc, #220]	@ (8001c38 <CharToSegment+0xf8>)
 8001b5c:	5cd3      	ldrb	r3, [r2, r3]
 8001b5e:	e066      	b.n	8001c2e <CharToSegment+0xee>
    } else if (c == 'L') {
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	2b4c      	cmp	r3, #76	@ 0x4c
 8001b64:	d102      	bne.n	8001b6c <CharToSegment+0x2c>
        return specialCharMap[0];
 8001b66:	4b35      	ldr	r3, [pc, #212]	@ (8001c3c <CharToSegment+0xfc>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	e060      	b.n	8001c2e <CharToSegment+0xee>
    } else if (c == '.') {
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b70:	d102      	bne.n	8001b78 <CharToSegment+0x38>
        return specialCharMap[1];
 8001b72:	4b32      	ldr	r3, [pc, #200]	@ (8001c3c <CharToSegment+0xfc>)
 8001b74:	785b      	ldrb	r3, [r3, #1]
 8001b76:	e05a      	b.n	8001c2e <CharToSegment+0xee>
    } else if (c == 'T') {
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	2b54      	cmp	r3, #84	@ 0x54
 8001b7c:	d102      	bne.n	8001b84 <CharToSegment+0x44>
        return specialCharMap[2];
 8001b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c3c <CharToSegment+0xfc>)
 8001b80:	789b      	ldrb	r3, [r3, #2]
 8001b82:	e054      	b.n	8001c2e <CharToSegment+0xee>
    } else if (c == 'O') {
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	2b4f      	cmp	r3, #79	@ 0x4f
 8001b88:	d102      	bne.n	8001b90 <CharToSegment+0x50>
        return specialCharMap[3];
 8001b8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001c3c <CharToSegment+0xfc>)
 8001b8c:	78db      	ldrb	r3, [r3, #3]
 8001b8e:	e04e      	b.n	8001c2e <CharToSegment+0xee>
    } else if (c == 'A') {
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	2b41      	cmp	r3, #65	@ 0x41
 8001b94:	d102      	bne.n	8001b9c <CharToSegment+0x5c>
        return specialCharMap[4];
 8001b96:	4b29      	ldr	r3, [pc, #164]	@ (8001c3c <CharToSegment+0xfc>)
 8001b98:	791b      	ldrb	r3, [r3, #4]
 8001b9a:	e048      	b.n	8001c2e <CharToSegment+0xee>
    } else if (c == 'S') {
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	2b53      	cmp	r3, #83	@ 0x53
 8001ba0:	d102      	bne.n	8001ba8 <CharToSegment+0x68>
        return specialCharMap[5];
 8001ba2:	4b26      	ldr	r3, [pc, #152]	@ (8001c3c <CharToSegment+0xfc>)
 8001ba4:	795b      	ldrb	r3, [r3, #5]
 8001ba6:	e042      	b.n	8001c2e <CharToSegment+0xee>
    } else if (c == 'H') {
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	2b48      	cmp	r3, #72	@ 0x48
 8001bac:	d102      	bne.n	8001bb4 <CharToSegment+0x74>
        return specialCharMap[6];
 8001bae:	4b23      	ldr	r3, [pc, #140]	@ (8001c3c <CharToSegment+0xfc>)
 8001bb0:	799b      	ldrb	r3, [r3, #6]
 8001bb2:	e03c      	b.n	8001c2e <CharToSegment+0xee>
    } else if (c == 'I') {
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	2b49      	cmp	r3, #73	@ 0x49
 8001bb8:	d102      	bne.n	8001bc0 <CharToSegment+0x80>
        return specialCharMap[7];
 8001bba:	4b20      	ldr	r3, [pc, #128]	@ (8001c3c <CharToSegment+0xfc>)
 8001bbc:	79db      	ldrb	r3, [r3, #7]
 8001bbe:	e036      	b.n	8001c2e <CharToSegment+0xee>
    } else if (c == 'F') {
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	2b46      	cmp	r3, #70	@ 0x46
 8001bc4:	d102      	bne.n	8001bcc <CharToSegment+0x8c>
        return specialCharMap[8];
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <CharToSegment+0xfc>)
 8001bc8:	7a1b      	ldrb	r3, [r3, #8]
 8001bca:	e030      	b.n	8001c2e <CharToSegment+0xee>
    } else if (c == 'G') {
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	2b47      	cmp	r3, #71	@ 0x47
 8001bd0:	d102      	bne.n	8001bd8 <CharToSegment+0x98>
        return specialCharMap[9];
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <CharToSegment+0xfc>)
 8001bd4:	7a5b      	ldrb	r3, [r3, #9]
 8001bd6:	e02a      	b.n	8001c2e <CharToSegment+0xee>
    } else if (c == 'P') {
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2b50      	cmp	r3, #80	@ 0x50
 8001bdc:	d102      	bne.n	8001be4 <CharToSegment+0xa4>
        return specialCharMap[10];
 8001bde:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <CharToSegment+0xfc>)
 8001be0:	7a9b      	ldrb	r3, [r3, #10]
 8001be2:	e024      	b.n	8001c2e <CharToSegment+0xee>
    } else if (c == 'C') {
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2b43      	cmp	r3, #67	@ 0x43
 8001be8:	d102      	bne.n	8001bf0 <CharToSegment+0xb0>
        return specialCharMap[11];
 8001bea:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <CharToSegment+0xfc>)
 8001bec:	7adb      	ldrb	r3, [r3, #11]
 8001bee:	e01e      	b.n	8001c2e <CharToSegment+0xee>
    } else if (c == 'E') {
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b45      	cmp	r3, #69	@ 0x45
 8001bf4:	d102      	bne.n	8001bfc <CharToSegment+0xbc>
        return specialCharMap[12];
 8001bf6:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <CharToSegment+0xfc>)
 8001bf8:	7b1b      	ldrb	r3, [r3, #12]
 8001bfa:	e018      	b.n	8001c2e <CharToSegment+0xee>
    } else if (c == 'U') {
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	2b55      	cmp	r3, #85	@ 0x55
 8001c00:	d102      	bne.n	8001c08 <CharToSegment+0xc8>
        return specialCharMap[13];
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <CharToSegment+0xfc>)
 8001c04:	7b5b      	ldrb	r3, [r3, #13]
 8001c06:	e012      	b.n	8001c2e <CharToSegment+0xee>
    } else if (c == 'N') {
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	2b4e      	cmp	r3, #78	@ 0x4e
 8001c0c:	d102      	bne.n	8001c14 <CharToSegment+0xd4>
        return specialCharMap[14];
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <CharToSegment+0xfc>)
 8001c10:	7b9b      	ldrb	r3, [r3, #14]
 8001c12:	e00c      	b.n	8001c2e <CharToSegment+0xee>
    } else if (c == 'R') {
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	2b52      	cmp	r3, #82	@ 0x52
 8001c18:	d102      	bne.n	8001c20 <CharToSegment+0xe0>
        return specialCharMap[15];
 8001c1a:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <CharToSegment+0xfc>)
 8001c1c:	7bdb      	ldrb	r3, [r3, #15]
 8001c1e:	e006      	b.n	8001c2e <CharToSegment+0xee>
    } else if (c == 'D') {
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	2b44      	cmp	r3, #68	@ 0x44
 8001c24:	d102      	bne.n	8001c2c <CharToSegment+0xec>
        return specialCharMap[16];
 8001c26:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <CharToSegment+0xfc>)
 8001c28:	7c1b      	ldrb	r3, [r3, #16]
 8001c2a:	e000      	b.n	8001c2e <CharToSegment+0xee>
    } else {
        return 0b11111111; // Blank
 8001c2c:	23ff      	movs	r3, #255	@ 0xff
    }
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	2000000c 	.word	0x2000000c

08001c40 <SevenSegLEDsHandler>:

uint8_t* SevenSegLEDsHandler(char buffer[3][7], uint8_t scan_state) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    for (int i = 0; i < 3; i++) {
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	e035      	b.n	8001cbe <SevenSegLEDsHandler+0x7e>
        int len = strlen(buffer[i]);
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4613      	mov	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fa76 	bl	8000150 <strlen>
 8001c64:	4603      	mov	r3, r0
 8001c66:	60bb      	str	r3, [r7, #8]
        if (scan_state < 6) {
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d81f      	bhi.n	8001cae <SevenSegLEDsHandler+0x6e>
            if (scan_state < len) {
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	dd15      	ble.n	8001ca2 <SevenSegLEDsHandler+0x62>
                output[i] = CharToSegment(buffer[i][len - 1 - scan_state]);
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	1a9b      	subs	r3, r3, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	441a      	add	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	1e59      	subs	r1, r3, #1
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	1acb      	subs	r3, r1, r3
 8001c8a:	5cd3      	ldrb	r3, [r2, r3]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff57 	bl	8001b40 <CharToSegment>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4619      	mov	r1, r3
 8001c96:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd0 <SevenSegLEDsHandler+0x90>)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	460a      	mov	r2, r1
 8001c9e:	701a      	strb	r2, [r3, #0]
 8001ca0:	e00a      	b.n	8001cb8 <SevenSegLEDsHandler+0x78>
            } else {
                output[i] = 0b11111111; // Blank
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd0 <SevenSegLEDsHandler+0x90>)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	22ff      	movs	r2, #255	@ 0xff
 8001caa:	701a      	strb	r2, [r3, #0]
 8001cac:	e004      	b.n	8001cb8 <SevenSegLEDsHandler+0x78>
            }
        } else {
            output[i] = 0b11111111; // Blank
 8001cae:	4a08      	ldr	r2, [pc, #32]	@ (8001cd0 <SevenSegLEDsHandler+0x90>)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	22ff      	movs	r2, #255	@ 0xff
 8001cb6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	ddc6      	ble.n	8001c52 <SevenSegLEDsHandler+0x12>
        }
    }
    return output;
 8001cc4:	4b02      	ldr	r3, [pc, #8]	@ (8001cd0 <SevenSegLEDsHandler+0x90>)
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000264 	.word	0x20000264

08001cd4 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(char buffer[3][7], uint8_t scan_state) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	70fb      	strb	r3, [r7, #3]
	uint8_t* curr_digit=SevenSegLEDsHandler(buffer,scan_state);
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ffab 	bl	8001c40 <SevenSegLEDsHandler>
 8001cea:	60b8      	str	r0, [r7, #8]
	uint8_t curr_scan;
	switch (scan_state) {
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d820      	bhi.n	8001d34 <UpdateDisplayBuffer+0x60>
 8001cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cf8 <UpdateDisplayBuffer+0x24>)
 8001cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf8:	08001d11 	.word	0x08001d11
 8001cfc:	08001d17 	.word	0x08001d17
 8001d00:	08001d1d 	.word	0x08001d1d
 8001d04:	08001d23 	.word	0x08001d23
 8001d08:	08001d29 	.word	0x08001d29
 8001d0c:	08001d2f 	.word	0x08001d2f
		case 0:
			curr_scan=0b00100000;
 8001d10:	2320      	movs	r3, #32
 8001d12:	73fb      	strb	r3, [r7, #15]
			break;
 8001d14:	e011      	b.n	8001d3a <UpdateDisplayBuffer+0x66>
		case 1:
			curr_scan=0b00010000;
 8001d16:	2310      	movs	r3, #16
 8001d18:	73fb      	strb	r3, [r7, #15]
			break;
 8001d1a:	e00e      	b.n	8001d3a <UpdateDisplayBuffer+0x66>
		case 2:
			curr_scan=0b00001000;
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	73fb      	strb	r3, [r7, #15]
			break;
 8001d20:	e00b      	b.n	8001d3a <UpdateDisplayBuffer+0x66>
		case 3:
			curr_scan=0b00000100;
 8001d22:	2304      	movs	r3, #4
 8001d24:	73fb      	strb	r3, [r7, #15]
			break;
 8001d26:	e008      	b.n	8001d3a <UpdateDisplayBuffer+0x66>
		case 4:
			curr_scan=0b00000010;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	73fb      	strb	r3, [r7, #15]
			break;
 8001d2c:	e005      	b.n	8001d3a <UpdateDisplayBuffer+0x66>
		case 5:
			curr_scan=0b00000001;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	73fb      	strb	r3, [r7, #15]
			break;
 8001d32:	e002      	b.n	8001d3a <UpdateDisplayBuffer+0x66>
		default:
			curr_scan=0b00000001;
 8001d34:	2301      	movs	r3, #1
 8001d36:	73fb      	strb	r3, [r7, #15]
			break;
 8001d38:	bf00      	nop
	}
	if(LEDPointFlag >=0 && LEDPointFlag <=5){
 8001d3a:	4b22      	ldr	r3, [pc, #136]	@ (8001dc4 <UpdateDisplayBuffer+0xf0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	db2c      	blt.n	8001d9c <UpdateDisplayBuffer+0xc8>
 8001d42:	4b20      	ldr	r3, [pc, #128]	@ (8001dc4 <UpdateDisplayBuffer+0xf0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b05      	cmp	r3, #5
 8001d48:	dc28      	bgt.n	8001d9c <UpdateDisplayBuffer+0xc8>
	    	if (scan_state == LEDPointFlag){
 8001d4a:	78fa      	ldrb	r2, [r7, #3]
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc4 <UpdateDisplayBuffer+0xf0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d113      	bne.n	8001d7c <UpdateDisplayBuffer+0xa8>
				displayBuffer[0] = curr_scan;
 8001d54:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc8 <UpdateDisplayBuffer+0xf4>)
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	7013      	strb	r3, [r2, #0]
				displayBuffer[1] = curr_digit[2];
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	789a      	ldrb	r2, [r3, #2]
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc8 <UpdateDisplayBuffer+0xf4>)
 8001d60:	705a      	strb	r2, [r3, #1]
				displayBuffer[2] = curr_digit[1] & 0b01111111; //Add point to second row
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3301      	adds	r3, #1
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4b16      	ldr	r3, [pc, #88]	@ (8001dc8 <UpdateDisplayBuffer+0xf4>)
 8001d70:	709a      	strb	r2, [r3, #2]
				displayBuffer[3] = curr_digit[0];
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	781a      	ldrb	r2, [r3, #0]
 8001d76:	4b14      	ldr	r3, [pc, #80]	@ (8001dc8 <UpdateDisplayBuffer+0xf4>)
 8001d78:	70da      	strb	r2, [r3, #3]
	    	if (scan_state == LEDPointFlag){
 8001d7a:	e01f      	b.n	8001dbc <UpdateDisplayBuffer+0xe8>
	    	}
	    	else
	    	{
	    		displayBuffer[0] = curr_scan;
 8001d7c:	4a12      	ldr	r2, [pc, #72]	@ (8001dc8 <UpdateDisplayBuffer+0xf4>)
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	7013      	strb	r3, [r2, #0]
	    		displayBuffer[1] = curr_digit[2];
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	789a      	ldrb	r2, [r3, #2]
 8001d86:	4b10      	ldr	r3, [pc, #64]	@ (8001dc8 <UpdateDisplayBuffer+0xf4>)
 8001d88:	705a      	strb	r2, [r3, #1]
	    		displayBuffer[2] = curr_digit[1];
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	785a      	ldrb	r2, [r3, #1]
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <UpdateDisplayBuffer+0xf4>)
 8001d90:	709a      	strb	r2, [r3, #2]
	    		displayBuffer[3] = curr_digit[0];
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	781a      	ldrb	r2, [r3, #0]
 8001d96:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <UpdateDisplayBuffer+0xf4>)
 8001d98:	70da      	strb	r2, [r3, #3]
	    	if (scan_state == LEDPointFlag){
 8001d9a:	e00f      	b.n	8001dbc <UpdateDisplayBuffer+0xe8>
	    	}
	    }
	    else
	    {
			displayBuffer[0] = curr_scan;
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <UpdateDisplayBuffer+0xf4>)
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	7013      	strb	r3, [r2, #0]
			displayBuffer[1] = curr_digit[2];
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	789a      	ldrb	r2, [r3, #2]
 8001da6:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <UpdateDisplayBuffer+0xf4>)
 8001da8:	705a      	strb	r2, [r3, #1]
			displayBuffer[2] = curr_digit[1];
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	785a      	ldrb	r2, [r3, #1]
 8001dae:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <UpdateDisplayBuffer+0xf4>)
 8001db0:	709a      	strb	r2, [r3, #2]
			displayBuffer[3] = curr_digit[0];
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	4b04      	ldr	r3, [pc, #16]	@ (8001dc8 <UpdateDisplayBuffer+0xf4>)
 8001db8:	70da      	strb	r2, [r3, #3]
	    }
}
 8001dba:	bf00      	nop
 8001dbc:	bf00      	nop
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	2000004c 	.word	0x2000004c
 8001dc8:	2000025c 	.word	0x2000025c

08001dcc <SevenSegLEDsScan>:

//
void SevenSegLEDsScan(){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
//	uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
	UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState);
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <SevenSegLEDsScan+0x40>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480d      	ldr	r0, [pc, #52]	@ (8001e10 <SevenSegLEDsScan+0x44>)
 8001dda:	f7ff ff7b 	bl	8001cd4 <UpdateDisplayBuffer>
	ShiftOut_SPI(displayBuffer, 4);
 8001dde:	2104      	movs	r1, #4
 8001de0:	480c      	ldr	r0, [pc, #48]	@ (8001e14 <SevenSegLEDsScan+0x48>)
 8001de2:	f000 f81b 	bl	8001e1c <ShiftOut_SPI>
//    currentBufferIndex = bufferIndex;  // Swap buffers
    SevenSegScanState = (SevenSegScanState + 1) % 6;
 8001de6:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <SevenSegLEDsScan+0x40>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <SevenSegLEDsScan+0x4c>)
 8001df0:	fb83 3102 	smull	r3, r1, r3, r2
 8001df4:	17d3      	asrs	r3, r2, #31
 8001df6:	1ac9      	subs	r1, r1, r3
 8001df8:	460b      	mov	r3, r1
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	440b      	add	r3, r1
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	1ad1      	subs	r1, r2, r3
 8001e02:	b2ca      	uxtb	r2, r1
 8001e04:	4b01      	ldr	r3, [pc, #4]	@ (8001e0c <SevenSegLEDsScan+0x40>)
 8001e06:	701a      	strb	r2, [r3, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2000025a 	.word	0x2000025a
 8001e10:	20000020 	.word	0x20000020
 8001e14:	2000025c 	.word	0x2000025c
 8001e18:	2aaaaaab 	.word	0x2aaaaaab

08001e1c <ShiftOut_SPI>:
 *      Author: clong
 */
#include "SPI_shift.h"

void ShiftOut_SPI(uint8_t *data, size_t size)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Pull STCP (Latch) low
 8001e26:	2200      	movs	r2, #0
 8001e28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e2c:	480a      	ldr	r0, [pc, #40]	@ (8001e58 <ShiftOut_SPI+0x3c>)
 8001e2e:	f000 fefe 	bl	8002c2e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, 300); // Transmit data
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4807      	ldr	r0, [pc, #28]	@ (8001e5c <ShiftOut_SPI+0x40>)
 8001e3e:	f001 fb71 	bl	8003524 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Pull STCP (Latch) high
 8001e42:	2201      	movs	r2, #1
 8001e44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e48:	4803      	ldr	r0, [pc, #12]	@ (8001e58 <ShiftOut_SPI+0x3c>)
 8001e4a:	f000 fef0 	bl	8002c2e <HAL_GPIO_WritePin>

}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40010c00 	.word	0x40010c00
 8001e5c:	200002c0 	.word	0x200002c0

08001e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e64:	f000 fbd8 	bl	8002618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e68:	f000 f832 	bl	8001ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e6c:	f000 f924 	bl	80020b8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001e70:	f000 f8a0 	bl	8001fb4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001e74:	f000 f8d4 	bl	8002020 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001e78:	f000 f866 	bl	8001f48 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001e7c:	4812      	ldr	r0, [pc, #72]	@ (8001ec8 <main+0x68>)
 8001e7e:	f001 fd8b 	bl	8003998 <HAL_TIM_Base_Start_IT>
  setTimer(0,100);
 8001e82:	2164      	movs	r1, #100	@ 0x64
 8001e84:	2000      	movs	r0, #0
 8001e86:	f000 fb59 	bl	800253c <setTimer>
  setTimer(1,100);
 8001e8a:	2164      	movs	r1, #100	@ 0x64
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f000 fb55 	bl	800253c <setTimer>
  setTimer(2,100);
 8001e92:	2164      	movs	r1, #100	@ 0x64
 8001e94:	2002      	movs	r0, #2
 8001e96:	f000 fb51 	bl	800253c <setTimer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {
	  KeyLogic();
 8001e9a:	f7fe feef 	bl	8000c7c <KeyLogic>
	  // TIMER 0 /////////////////////////////////////
	  if(timer_flag[0]==1){
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <main+0x6c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d105      	bne.n	8001eb2 <main+0x52>

		  SevenSegLEDsScan();
 8001ea6:	f7ff ff91 	bl	8001dcc <SevenSegLEDsScan>
		  setTimer(0,5);
 8001eaa:	2105      	movs	r1, #5
 8001eac:	2000      	movs	r0, #0
 8001eae:	f000 fb45 	bl	800253c <setTimer>
	  }

	  // TIMER 1 /////////////////////////////////////
	  if(timer_flag[1]==1){
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <main+0x6c>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d1ef      	bne.n	8001e9a <main+0x3a>
		  KeyLogic_Action();
 8001eba:	f7ff fbad 	bl	8001618 <KeyLogic_Action>
		  setTimer(1,10);
 8001ebe:	210a      	movs	r1, #10
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f000 fb3b 	bl	800253c <setTimer>
	  KeyLogic();
 8001ec6:	e7e8      	b.n	8001e9a <main+0x3a>
 8001ec8:	20000318 	.word	0x20000318
 8001ecc:	2000039c 	.word	0x2000039c

08001ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b090      	sub	sp, #64	@ 0x40
 8001ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed6:	f107 0318 	add.w	r3, r7, #24
 8001eda:	2228      	movs	r2, #40	@ 0x28
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f002 fe9d 	bl	8004c1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001efa:	2310      	movs	r3, #16
 8001efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f02:	f107 0318 	add.w	r3, r7, #24
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 feaa 	bl	8002c60 <HAL_RCC_OscConfig>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001f12:	f000 f94b 	bl	80021ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f16:	230f      	movs	r3, #15
 8001f18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f001 f918 	bl	8003164 <HAL_RCC_ClockConfig>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001f3a:	f000 f937 	bl	80021ac <Error_Handler>
  }
}
 8001f3e:	bf00      	nop
 8001f40:	3740      	adds	r7, #64	@ 0x40
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f4c:	4b17      	ldr	r3, [pc, #92]	@ (8001fac <MX_SPI1_Init+0x64>)
 8001f4e:	4a18      	ldr	r2, [pc, #96]	@ (8001fb0 <MX_SPI1_Init+0x68>)
 8001f50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f52:	4b16      	ldr	r3, [pc, #88]	@ (8001fac <MX_SPI1_Init+0x64>)
 8001f54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f5a:	4b14      	ldr	r3, [pc, #80]	@ (8001fac <MX_SPI1_Init+0x64>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f60:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <MX_SPI1_Init+0x64>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f66:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <MX_SPI1_Init+0x64>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fac <MX_SPI1_Init+0x64>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <MX_SPI1_Init+0x64>)
 8001f74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <MX_SPI1_Init+0x64>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f80:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <MX_SPI1_Init+0x64>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f86:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <MX_SPI1_Init+0x64>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f8c:	4b07      	ldr	r3, [pc, #28]	@ (8001fac <MX_SPI1_Init+0x64>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <MX_SPI1_Init+0x64>)
 8001f94:	220a      	movs	r2, #10
 8001f96:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f98:	4804      	ldr	r0, [pc, #16]	@ (8001fac <MX_SPI1_Init+0x64>)
 8001f9a:	f001 fa3f 	bl	800341c <HAL_SPI_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fa4:	f000 f902 	bl	80021ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000268 	.word	0x20000268
 8001fb0:	40013000 	.word	0x40013000

08001fb4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fb8:	4b17      	ldr	r3, [pc, #92]	@ (8002018 <MX_SPI2_Init+0x64>)
 8001fba:	4a18      	ldr	r2, [pc, #96]	@ (800201c <MX_SPI2_Init+0x68>)
 8001fbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fbe:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <MX_SPI2_Init+0x64>)
 8001fc0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fc6:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <MX_SPI2_Init+0x64>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fcc:	4b12      	ldr	r3, [pc, #72]	@ (8002018 <MX_SPI2_Init+0x64>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fd2:	4b11      	ldr	r3, [pc, #68]	@ (8002018 <MX_SPI2_Init+0x64>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002018 <MX_SPI2_Init+0x64>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	@ (8002018 <MX_SPI2_Init+0x64>)
 8001fe0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fe4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <MX_SPI2_Init+0x64>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fec:	4b0a      	ldr	r3, [pc, #40]	@ (8002018 <MX_SPI2_Init+0x64>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <MX_SPI2_Init+0x64>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff8:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <MX_SPI2_Init+0x64>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <MX_SPI2_Init+0x64>)
 8002000:	220a      	movs	r2, #10
 8002002:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002004:	4804      	ldr	r0, [pc, #16]	@ (8002018 <MX_SPI2_Init+0x64>)
 8002006:	f001 fa09 	bl	800341c <HAL_SPI_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002010:	f000 f8cc 	bl	80021ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	200002c0 	.word	0x200002c0
 800201c:	40003800 	.word	0x40003800

08002020 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002026:	f107 0308 	add.w	r3, r7, #8
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002034:	463b      	mov	r3, r7
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800203c:	4b1d      	ldr	r3, [pc, #116]	@ (80020b4 <MX_TIM2_Init+0x94>)
 800203e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002042:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8002044:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <MX_TIM2_Init+0x94>)
 8002046:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800204a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204c:	4b19      	ldr	r3, [pc, #100]	@ (80020b4 <MX_TIM2_Init+0x94>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8002052:	4b18      	ldr	r3, [pc, #96]	@ (80020b4 <MX_TIM2_Init+0x94>)
 8002054:	2209      	movs	r2, #9
 8002056:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002058:	4b16      	ldr	r3, [pc, #88]	@ (80020b4 <MX_TIM2_Init+0x94>)
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205e:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <MX_TIM2_Init+0x94>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002064:	4813      	ldr	r0, [pc, #76]	@ (80020b4 <MX_TIM2_Init+0x94>)
 8002066:	f001 fc47 	bl	80038f8 <HAL_TIM_Base_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002070:	f000 f89c 	bl	80021ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002078:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	4619      	mov	r1, r3
 8002080:	480c      	ldr	r0, [pc, #48]	@ (80020b4 <MX_TIM2_Init+0x94>)
 8002082:	f001 fde3 	bl	8003c4c <HAL_TIM_ConfigClockSource>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800208c:	f000 f88e 	bl	80021ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002090:	2300      	movs	r3, #0
 8002092:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002098:	463b      	mov	r3, r7
 800209a:	4619      	mov	r1, r3
 800209c:	4805      	ldr	r0, [pc, #20]	@ (80020b4 <MX_TIM2_Init+0x94>)
 800209e:	f001 ffb9 	bl	8004014 <HAL_TIMEx_MasterConfigSynchronization>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020a8:	f000 f880 	bl	80021ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020ac:	bf00      	nop
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000318 	.word	0x20000318

080020b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020be:	f107 0308 	add.w	r3, r7, #8
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020cc:	4b2f      	ldr	r3, [pc, #188]	@ (800218c <MX_GPIO_Init+0xd4>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4a2e      	ldr	r2, [pc, #184]	@ (800218c <MX_GPIO_Init+0xd4>)
 80020d2:	f043 0304 	orr.w	r3, r3, #4
 80020d6:	6193      	str	r3, [r2, #24]
 80020d8:	4b2c      	ldr	r3, [pc, #176]	@ (800218c <MX_GPIO_Init+0xd4>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e4:	4b29      	ldr	r3, [pc, #164]	@ (800218c <MX_GPIO_Init+0xd4>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a28      	ldr	r2, [pc, #160]	@ (800218c <MX_GPIO_Init+0xd4>)
 80020ea:	f043 0308 	orr.w	r3, r3, #8
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b26      	ldr	r3, [pc, #152]	@ (800218c <MX_GPIO_Init+0xd4>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2140      	movs	r1, #64	@ 0x40
 8002100:	4823      	ldr	r0, [pc, #140]	@ (8002190 <MX_GPIO_Init+0xd8>)
 8002102:	f000 fd94 	bl	8002c2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8002106:	2200      	movs	r2, #0
 8002108:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 800210c:	4821      	ldr	r0, [pc, #132]	@ (8002194 <MX_GPIO_Init+0xdc>)
 800210e:	f000 fd8e 	bl	8002c2e <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Latch_SPI1_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin;
 8002112:	2340      	movs	r3, #64	@ 0x40
 8002114:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002116:	2301      	movs	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2302      	movs	r3, #2
 8002120:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI1_GPIO_Port, &GPIO_InitStruct);
 8002122:	f107 0308 	add.w	r3, r7, #8
 8002126:	4619      	mov	r1, r3
 8002128:	4819      	ldr	r0, [pc, #100]	@ (8002190 <MX_GPIO_Init+0xd8>)
 800212a:	f000 fbe5 	bl	80028f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800212e:	231f      	movs	r3, #31
 8002130:	60bb      	str	r3, [r7, #8]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002136:	2302      	movs	r3, #2
 8002138:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213a:	f107 0308 	add.w	r3, r7, #8
 800213e:	4619      	mov	r1, r3
 8002140:	4814      	ldr	r0, [pc, #80]	@ (8002194 <MX_GPIO_Init+0xdc>)
 8002142:	f000 fbd9 	bl	80028f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Latch_SPI_Pin */
  GPIO_InitStruct.Pin = Latch_SPI_Pin;
 8002146:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800214a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214c:	2301      	movs	r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI_GPIO_Port, &GPIO_InitStruct);
 8002158:	f107 0308 	add.w	r3, r7, #8
 800215c:	4619      	mov	r1, r3
 800215e:	480d      	ldr	r0, [pc, #52]	@ (8002194 <MX_GPIO_Init+0xdc>)
 8002160:	f000 fbca 	bl	80028f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin OUT2_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin;
 8002164:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002168:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216a:	2301      	movs	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2302      	movs	r3, #2
 8002174:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002176:	f107 0308 	add.w	r3, r7, #8
 800217a:	4619      	mov	r1, r3
 800217c:	4805      	ldr	r0, [pc, #20]	@ (8002194 <MX_GPIO_Init+0xdc>)
 800217e:	f000 fbbb 	bl	80028f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	40010800 	.word	0x40010800
 8002194:	40010c00 	.word	0x40010c00

08002198 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	timerRun();
 80021a0:	f000 f9e4 	bl	800256c <timerRun>

}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b0:	b672      	cpsid	i
}
 80021b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <Error_Handler+0x8>

080021b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <HAL_MspInit+0x5c>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	4a14      	ldr	r2, [pc, #80]	@ (8002214 <HAL_MspInit+0x5c>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6193      	str	r3, [r2, #24]
 80021ca:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <HAL_MspInit+0x5c>)
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002214 <HAL_MspInit+0x5c>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4a0e      	ldr	r2, [pc, #56]	@ (8002214 <HAL_MspInit+0x5c>)
 80021dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e0:	61d3      	str	r3, [r2, #28]
 80021e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <HAL_MspInit+0x5c>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <HAL_MspInit+0x60>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	4a04      	ldr	r2, [pc, #16]	@ (8002218 <HAL_MspInit+0x60>)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	40021000 	.word	0x40021000
 8002218:	40010000 	.word	0x40010000

0800221c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	@ 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0318 	add.w	r3, r7, #24
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a2b      	ldr	r2, [pc, #172]	@ (80022e4 <HAL_SPI_MspInit+0xc8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d124      	bne.n	8002286 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800223c:	4b2a      	ldr	r3, [pc, #168]	@ (80022e8 <HAL_SPI_MspInit+0xcc>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	4a29      	ldr	r2, [pc, #164]	@ (80022e8 <HAL_SPI_MspInit+0xcc>)
 8002242:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002246:	6193      	str	r3, [r2, #24]
 8002248:	4b27      	ldr	r3, [pc, #156]	@ (80022e8 <HAL_SPI_MspInit+0xcc>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002254:	4b24      	ldr	r3, [pc, #144]	@ (80022e8 <HAL_SPI_MspInit+0xcc>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	4a23      	ldr	r2, [pc, #140]	@ (80022e8 <HAL_SPI_MspInit+0xcc>)
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	6193      	str	r3, [r2, #24]
 8002260:	4b21      	ldr	r3, [pc, #132]	@ (80022e8 <HAL_SPI_MspInit+0xcc>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800226c:	23a0      	movs	r3, #160	@ 0xa0
 800226e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f107 0318 	add.w	r3, r7, #24
 800227c:	4619      	mov	r1, r3
 800227e:	481b      	ldr	r0, [pc, #108]	@ (80022ec <HAL_SPI_MspInit+0xd0>)
 8002280:	f000 fb3a 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002284:	e029      	b.n	80022da <HAL_SPI_MspInit+0xbe>
  else if(hspi->Instance==SPI2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a19      	ldr	r2, [pc, #100]	@ (80022f0 <HAL_SPI_MspInit+0xd4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d124      	bne.n	80022da <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002290:	4b15      	ldr	r3, [pc, #84]	@ (80022e8 <HAL_SPI_MspInit+0xcc>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	4a14      	ldr	r2, [pc, #80]	@ (80022e8 <HAL_SPI_MspInit+0xcc>)
 8002296:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800229a:	61d3      	str	r3, [r2, #28]
 800229c:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <HAL_SPI_MspInit+0xcc>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a8:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <HAL_SPI_MspInit+0xcc>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	4a0e      	ldr	r2, [pc, #56]	@ (80022e8 <HAL_SPI_MspInit+0xcc>)
 80022ae:	f043 0308 	orr.w	r3, r3, #8
 80022b2:	6193      	str	r3, [r2, #24]
 80022b4:	4b0c      	ldr	r3, [pc, #48]	@ (80022e8 <HAL_SPI_MspInit+0xcc>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80022c0:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80022c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ca:	2303      	movs	r3, #3
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ce:	f107 0318 	add.w	r3, r7, #24
 80022d2:	4619      	mov	r1, r3
 80022d4:	4807      	ldr	r0, [pc, #28]	@ (80022f4 <HAL_SPI_MspInit+0xd8>)
 80022d6:	f000 fb0f 	bl	80028f8 <HAL_GPIO_Init>
}
 80022da:	bf00      	nop
 80022dc:	3728      	adds	r7, #40	@ 0x28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40013000 	.word	0x40013000
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40010800 	.word	0x40010800
 80022f0:	40003800 	.word	0x40003800
 80022f4:	40010c00 	.word	0x40010c00

080022f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002308:	d113      	bne.n	8002332 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800230a:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <HAL_TIM_Base_MspInit+0x44>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4a0b      	ldr	r2, [pc, #44]	@ (800233c <HAL_TIM_Base_MspInit+0x44>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	61d3      	str	r3, [r2, #28]
 8002316:	4b09      	ldr	r3, [pc, #36]	@ (800233c <HAL_TIM_Base_MspInit+0x44>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2101      	movs	r1, #1
 8002326:	201c      	movs	r0, #28
 8002328:	f000 faaf 	bl	800288a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800232c:	201c      	movs	r0, #28
 800232e:	f000 fac8 	bl	80028c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000

08002340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002344:	bf00      	nop
 8002346:	e7fd      	b.n	8002344 <NMI_Handler+0x4>

08002348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234c:	bf00      	nop
 800234e:	e7fd      	b.n	800234c <HardFault_Handler+0x4>

08002350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <MemManage_Handler+0x4>

08002358 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <BusFault_Handler+0x4>

08002360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <UsageFault_Handler+0x4>

08002368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002390:	f000 f988 	bl	80026a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}

08002398 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800239c:	4802      	ldr	r0, [pc, #8]	@ (80023a8 <TIM2_IRQHandler+0x10>)
 800239e:	f001 fb4d 	bl	8003a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000318 	.word	0x20000318

080023ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return 1;
 80023b0:	2301      	movs	r3, #1
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <_kill>:

int _kill(int pid, int sig)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023c4:	f002 fc7e 	bl	8004cc4 <__errno>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2216      	movs	r2, #22
 80023cc:	601a      	str	r2, [r3, #0]
  return -1;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <_exit>:

void _exit (int status)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023e2:	f04f 31ff 	mov.w	r1, #4294967295
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff ffe7 	bl	80023ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <_exit+0x12>

080023f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	e00a      	b.n	8002418 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002402:	f3af 8000 	nop.w
 8002406:	4601      	mov	r1, r0
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	60ba      	str	r2, [r7, #8]
 800240e:	b2ca      	uxtb	r2, r1
 8002410:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3301      	adds	r3, #1
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	dbf0      	blt.n	8002402 <_read+0x12>
  }

  return len;
 8002420:	687b      	ldr	r3, [r7, #4]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	e009      	b.n	8002450 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	60ba      	str	r2, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3301      	adds	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	dbf1      	blt.n	800243c <_write+0x12>
  }
  return len;
 8002458:	687b      	ldr	r3, [r7, #4]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <_close>:

int _close(int file)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002488:	605a      	str	r2, [r3, #4]
  return 0;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <_isatty>:

int _isatty(int file)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800249e:	2301      	movs	r3, #1
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
	...

080024c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024cc:	4a14      	ldr	r2, [pc, #80]	@ (8002520 <_sbrk+0x5c>)
 80024ce:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <_sbrk+0x60>)
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d8:	4b13      	ldr	r3, [pc, #76]	@ (8002528 <_sbrk+0x64>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d102      	bne.n	80024e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024e0:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <_sbrk+0x64>)
 80024e2:	4a12      	ldr	r2, [pc, #72]	@ (800252c <_sbrk+0x68>)
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024e6:	4b10      	ldr	r3, [pc, #64]	@ (8002528 <_sbrk+0x64>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d207      	bcs.n	8002504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024f4:	f002 fbe6 	bl	8004cc4 <__errno>
 80024f8:	4603      	mov	r3, r0
 80024fa:	220c      	movs	r2, #12
 80024fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002502:	e009      	b.n	8002518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002504:	4b08      	ldr	r3, [pc, #32]	@ (8002528 <_sbrk+0x64>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800250a:	4b07      	ldr	r3, [pc, #28]	@ (8002528 <_sbrk+0x64>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	4a05      	ldr	r2, [pc, #20]	@ (8002528 <_sbrk+0x64>)
 8002514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002516:	68fb      	ldr	r3, [r7, #12]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20005000 	.word	0x20005000
 8002524:	00000400 	.word	0x00000400
 8002528:	20000370 	.word	0x20000370
 800252c:	20000518 	.word	0x20000518

08002530 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <setTimer>:

#define TIMERNUM 10
int timer_counter[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};
int timer_flag[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};

void setTimer(int INDEX,int duration){
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
	timer_counter[INDEX]=duration;
 8002546:	4907      	ldr	r1, [pc, #28]	@ (8002564 <setTimer+0x28>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[INDEX]=0;
 8002550:	4a05      	ldr	r2, [pc, #20]	@ (8002568 <setTimer+0x2c>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2100      	movs	r1, #0
 8002556:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	20000374 	.word	0x20000374
 8002568:	2000039c 	.word	0x2000039c

0800256c <timerRun>:

void timerRun(){
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
	for(int i=0;i<TIMERNUM;i++){
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	e01c      	b.n	80025b2 <timerRun+0x46>
		if(timer_counter[i] > 0){
 8002578:	4a12      	ldr	r2, [pc, #72]	@ (80025c4 <timerRun+0x58>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002580:	2b00      	cmp	r3, #0
 8002582:	dd13      	ble.n	80025ac <timerRun+0x40>
			timer_counter[i]--;
 8002584:	4a0f      	ldr	r2, [pc, #60]	@ (80025c4 <timerRun+0x58>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258c:	1e5a      	subs	r2, r3, #1
 800258e:	490d      	ldr	r1, [pc, #52]	@ (80025c4 <timerRun+0x58>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <=0){
 8002596:	4a0b      	ldr	r2, [pc, #44]	@ (80025c4 <timerRun+0x58>)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	dc04      	bgt.n	80025ac <timerRun+0x40>
				timer_flag[i]=1;
 80025a2:	4a09      	ldr	r2, [pc, #36]	@ (80025c8 <timerRun+0x5c>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2101      	movs	r1, #1
 80025a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<TIMERNUM;i++){
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3301      	adds	r3, #1
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b09      	cmp	r3, #9
 80025b6:	dddf      	ble.n	8002578 <timerRun+0xc>
			}
		}
	}
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	20000374 	.word	0x20000374
 80025c8:	2000039c 	.word	0x2000039c

080025cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025cc:	f7ff ffb0 	bl	8002530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d0:	480b      	ldr	r0, [pc, #44]	@ (8002600 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025d2:	490c      	ldr	r1, [pc, #48]	@ (8002604 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002608 <LoopFillZerobss+0x16>)
  movs r3, #0
 80025d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025d8:	e002      	b.n	80025e0 <LoopCopyDataInit>

080025da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025de:	3304      	adds	r3, #4

080025e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e4:	d3f9      	bcc.n	80025da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025e6:	4a09      	ldr	r2, [pc, #36]	@ (800260c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025e8:	4c09      	ldr	r4, [pc, #36]	@ (8002610 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025ec:	e001      	b.n	80025f2 <LoopFillZerobss>

080025ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f0:	3204      	adds	r2, #4

080025f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f4:	d3fb      	bcc.n	80025ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025f6:	f002 fb6b 	bl	8004cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025fa:	f7ff fc31 	bl	8001e60 <main>
  bx lr
 80025fe:	4770      	bx	lr
  ldr r0, =_sdata
 8002600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002604:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8002608:	08007230 	.word	0x08007230
  ldr r2, =_sbss
 800260c:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8002610:	20000514 	.word	0x20000514

08002614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002614:	e7fe      	b.n	8002614 <ADC1_2_IRQHandler>
	...

08002618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800261c:	4b08      	ldr	r3, [pc, #32]	@ (8002640 <HAL_Init+0x28>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a07      	ldr	r2, [pc, #28]	@ (8002640 <HAL_Init+0x28>)
 8002622:	f043 0310 	orr.w	r3, r3, #16
 8002626:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002628:	2003      	movs	r0, #3
 800262a:	f000 f923 	bl	8002874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262e:	200f      	movs	r0, #15
 8002630:	f000 f808 	bl	8002644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002634:	f7ff fdc0 	bl	80021b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40022000 	.word	0x40022000

08002644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800264c:	4b12      	ldr	r3, [pc, #72]	@ (8002698 <HAL_InitTick+0x54>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b12      	ldr	r3, [pc, #72]	@ (800269c <HAL_InitTick+0x58>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800265a:	fbb3 f3f1 	udiv	r3, r3, r1
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f93b 	bl	80028de <HAL_SYSTICK_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e00e      	b.n	8002690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d80a      	bhi.n	800268e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002678:	2200      	movs	r2, #0
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	f000 f903 	bl	800288a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002684:	4a06      	ldr	r2, [pc, #24]	@ (80026a0 <HAL_InitTick+0x5c>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000050 	.word	0x20000050
 800269c:	20000058 	.word	0x20000058
 80026a0:	20000054 	.word	0x20000054

080026a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a8:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <HAL_IncTick+0x1c>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <HAL_IncTick+0x20>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	4a03      	ldr	r2, [pc, #12]	@ (80026c4 <HAL_IncTick+0x20>)
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	20000058 	.word	0x20000058
 80026c4:	200003c4 	.word	0x200003c4

080026c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return uwTick;
 80026cc:	4b02      	ldr	r3, [pc, #8]	@ (80026d8 <HAL_GetTick+0x10>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	200003c4 	.word	0x200003c4

080026dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026f8:	4013      	ands	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002704:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800270c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800270e:	4a04      	ldr	r2, [pc, #16]	@ (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	60d3      	str	r3, [r2, #12]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002728:	4b04      	ldr	r3, [pc, #16]	@ (800273c <__NVIC_GetPriorityGrouping+0x18>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	f003 0307 	and.w	r3, r3, #7
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	2b00      	cmp	r3, #0
 8002750:	db0b      	blt.n	800276a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	4906      	ldr	r1, [pc, #24]	@ (8002774 <__NVIC_EnableIRQ+0x34>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	2001      	movs	r0, #1
 8002762:	fa00 f202 	lsl.w	r2, r0, r2
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	e000e100 	.word	0xe000e100

08002778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	6039      	str	r1, [r7, #0]
 8002782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002788:	2b00      	cmp	r3, #0
 800278a:	db0a      	blt.n	80027a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	490c      	ldr	r1, [pc, #48]	@ (80027c4 <__NVIC_SetPriority+0x4c>)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	0112      	lsls	r2, r2, #4
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	440b      	add	r3, r1
 800279c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a0:	e00a      	b.n	80027b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4908      	ldr	r1, [pc, #32]	@ (80027c8 <__NVIC_SetPriority+0x50>)
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	3b04      	subs	r3, #4
 80027b0:	0112      	lsls	r2, r2, #4
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	440b      	add	r3, r1
 80027b6:	761a      	strb	r2, [r3, #24]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e000e100 	.word	0xe000e100
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b089      	sub	sp, #36	@ 0x24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f1c3 0307 	rsb	r3, r3, #7
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	bf28      	it	cs
 80027ea:	2304      	movcs	r3, #4
 80027ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3304      	adds	r3, #4
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d902      	bls.n	80027fc <NVIC_EncodePriority+0x30>
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3b03      	subs	r3, #3
 80027fa:	e000      	b.n	80027fe <NVIC_EncodePriority+0x32>
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002800:	f04f 32ff 	mov.w	r2, #4294967295
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43da      	mvns	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	401a      	ands	r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002814:	f04f 31ff 	mov.w	r1, #4294967295
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	43d9      	mvns	r1, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	4313      	orrs	r3, r2
         );
}
 8002826:	4618      	mov	r0, r3
 8002828:	3724      	adds	r7, #36	@ 0x24
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3b01      	subs	r3, #1
 800283c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002840:	d301      	bcc.n	8002846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002842:	2301      	movs	r3, #1
 8002844:	e00f      	b.n	8002866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002846:	4a0a      	ldr	r2, [pc, #40]	@ (8002870 <SysTick_Config+0x40>)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800284e:	210f      	movs	r1, #15
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	f7ff ff90 	bl	8002778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002858:	4b05      	ldr	r3, [pc, #20]	@ (8002870 <SysTick_Config+0x40>)
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800285e:	4b04      	ldr	r3, [pc, #16]	@ (8002870 <SysTick_Config+0x40>)
 8002860:	2207      	movs	r2, #7
 8002862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	e000e010 	.word	0xe000e010

08002874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff ff2d 	bl	80026dc <__NVIC_SetPriorityGrouping>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800288a:	b580      	push	{r7, lr}
 800288c:	b086      	sub	sp, #24
 800288e:	af00      	add	r7, sp, #0
 8002890:	4603      	mov	r3, r0
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800289c:	f7ff ff42 	bl	8002724 <__NVIC_GetPriorityGrouping>
 80028a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68b9      	ldr	r1, [r7, #8]
 80028a6:	6978      	ldr	r0, [r7, #20]
 80028a8:	f7ff ff90 	bl	80027cc <NVIC_EncodePriority>
 80028ac:	4602      	mov	r2, r0
 80028ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff5f 	bl	8002778 <__NVIC_SetPriority>
}
 80028ba:	bf00      	nop
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	4603      	mov	r3, r0
 80028ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff35 	bl	8002740 <__NVIC_EnableIRQ>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff ffa2 	bl	8002830 <SysTick_Config>
 80028ec:	4603      	mov	r3, r0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b08b      	sub	sp, #44	@ 0x2c
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002906:	2300      	movs	r3, #0
 8002908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800290a:	e169      	b.n	8002be0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800290c:	2201      	movs	r2, #1
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	429a      	cmp	r2, r3
 8002926:	f040 8158 	bne.w	8002bda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4a9a      	ldr	r2, [pc, #616]	@ (8002b98 <HAL_GPIO_Init+0x2a0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d05e      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 8002934:	4a98      	ldr	r2, [pc, #608]	@ (8002b98 <HAL_GPIO_Init+0x2a0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d875      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 800293a:	4a98      	ldr	r2, [pc, #608]	@ (8002b9c <HAL_GPIO_Init+0x2a4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d058      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 8002940:	4a96      	ldr	r2, [pc, #600]	@ (8002b9c <HAL_GPIO_Init+0x2a4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d86f      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 8002946:	4a96      	ldr	r2, [pc, #600]	@ (8002ba0 <HAL_GPIO_Init+0x2a8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d052      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 800294c:	4a94      	ldr	r2, [pc, #592]	@ (8002ba0 <HAL_GPIO_Init+0x2a8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d869      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 8002952:	4a94      	ldr	r2, [pc, #592]	@ (8002ba4 <HAL_GPIO_Init+0x2ac>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d04c      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 8002958:	4a92      	ldr	r2, [pc, #584]	@ (8002ba4 <HAL_GPIO_Init+0x2ac>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d863      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 800295e:	4a92      	ldr	r2, [pc, #584]	@ (8002ba8 <HAL_GPIO_Init+0x2b0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d046      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 8002964:	4a90      	ldr	r2, [pc, #576]	@ (8002ba8 <HAL_GPIO_Init+0x2b0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d85d      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 800296a:	2b12      	cmp	r3, #18
 800296c:	d82a      	bhi.n	80029c4 <HAL_GPIO_Init+0xcc>
 800296e:	2b12      	cmp	r3, #18
 8002970:	d859      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 8002972:	a201      	add	r2, pc, #4	@ (adr r2, 8002978 <HAL_GPIO_Init+0x80>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	080029f3 	.word	0x080029f3
 800297c:	080029cd 	.word	0x080029cd
 8002980:	080029df 	.word	0x080029df
 8002984:	08002a21 	.word	0x08002a21
 8002988:	08002a27 	.word	0x08002a27
 800298c:	08002a27 	.word	0x08002a27
 8002990:	08002a27 	.word	0x08002a27
 8002994:	08002a27 	.word	0x08002a27
 8002998:	08002a27 	.word	0x08002a27
 800299c:	08002a27 	.word	0x08002a27
 80029a0:	08002a27 	.word	0x08002a27
 80029a4:	08002a27 	.word	0x08002a27
 80029a8:	08002a27 	.word	0x08002a27
 80029ac:	08002a27 	.word	0x08002a27
 80029b0:	08002a27 	.word	0x08002a27
 80029b4:	08002a27 	.word	0x08002a27
 80029b8:	08002a27 	.word	0x08002a27
 80029bc:	080029d5 	.word	0x080029d5
 80029c0:	080029e9 	.word	0x080029e9
 80029c4:	4a79      	ldr	r2, [pc, #484]	@ (8002bac <HAL_GPIO_Init+0x2b4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029ca:	e02c      	b.n	8002a26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	623b      	str	r3, [r7, #32]
          break;
 80029d2:	e029      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	3304      	adds	r3, #4
 80029da:	623b      	str	r3, [r7, #32]
          break;
 80029dc:	e024      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	3308      	adds	r3, #8
 80029e4:	623b      	str	r3, [r7, #32]
          break;
 80029e6:	e01f      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	330c      	adds	r3, #12
 80029ee:	623b      	str	r3, [r7, #32]
          break;
 80029f0:	e01a      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d102      	bne.n	8002a00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029fa:	2304      	movs	r3, #4
 80029fc:	623b      	str	r3, [r7, #32]
          break;
 80029fe:	e013      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a08:	2308      	movs	r3, #8
 8002a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69fa      	ldr	r2, [r7, #28]
 8002a10:	611a      	str	r2, [r3, #16]
          break;
 8002a12:	e009      	b.n	8002a28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a14:	2308      	movs	r3, #8
 8002a16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	615a      	str	r2, [r3, #20]
          break;
 8002a1e:	e003      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a20:	2300      	movs	r3, #0
 8002a22:	623b      	str	r3, [r7, #32]
          break;
 8002a24:	e000      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          break;
 8002a26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2bff      	cmp	r3, #255	@ 0xff
 8002a2c:	d801      	bhi.n	8002a32 <HAL_GPIO_Init+0x13a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	e001      	b.n	8002a36 <HAL_GPIO_Init+0x13e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3304      	adds	r3, #4
 8002a36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2bff      	cmp	r3, #255	@ 0xff
 8002a3c:	d802      	bhi.n	8002a44 <HAL_GPIO_Init+0x14c>
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	e002      	b.n	8002a4a <HAL_GPIO_Init+0x152>
 8002a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a46:	3b08      	subs	r3, #8
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	210f      	movs	r1, #15
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	6a39      	ldr	r1, [r7, #32]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	431a      	orrs	r2, r3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 80b1 	beq.w	8002bda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a78:	4b4d      	ldr	r3, [pc, #308]	@ (8002bb0 <HAL_GPIO_Init+0x2b8>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	4a4c      	ldr	r2, [pc, #304]	@ (8002bb0 <HAL_GPIO_Init+0x2b8>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6193      	str	r3, [r2, #24]
 8002a84:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb0 <HAL_GPIO_Init+0x2b8>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a90:	4a48      	ldr	r2, [pc, #288]	@ (8002bb4 <HAL_GPIO_Init+0x2bc>)
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	3302      	adds	r3, #2
 8002a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a40      	ldr	r2, [pc, #256]	@ (8002bb8 <HAL_GPIO_Init+0x2c0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d013      	beq.n	8002ae4 <HAL_GPIO_Init+0x1ec>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a3f      	ldr	r2, [pc, #252]	@ (8002bbc <HAL_GPIO_Init+0x2c4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00d      	beq.n	8002ae0 <HAL_GPIO_Init+0x1e8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a3e      	ldr	r2, [pc, #248]	@ (8002bc0 <HAL_GPIO_Init+0x2c8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d007      	beq.n	8002adc <HAL_GPIO_Init+0x1e4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a3d      	ldr	r2, [pc, #244]	@ (8002bc4 <HAL_GPIO_Init+0x2cc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d101      	bne.n	8002ad8 <HAL_GPIO_Init+0x1e0>
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e006      	b.n	8002ae6 <HAL_GPIO_Init+0x1ee>
 8002ad8:	2304      	movs	r3, #4
 8002ada:	e004      	b.n	8002ae6 <HAL_GPIO_Init+0x1ee>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e002      	b.n	8002ae6 <HAL_GPIO_Init+0x1ee>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_GPIO_Init+0x1ee>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae8:	f002 0203 	and.w	r2, r2, #3
 8002aec:	0092      	lsls	r2, r2, #2
 8002aee:	4093      	lsls	r3, r2
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002af6:	492f      	ldr	r1, [pc, #188]	@ (8002bb4 <HAL_GPIO_Init+0x2bc>)
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	089b      	lsrs	r3, r3, #2
 8002afc:	3302      	adds	r3, #2
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d006      	beq.n	8002b1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b10:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	492c      	ldr	r1, [pc, #176]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]
 8002b1c:	e006      	b.n	8002b2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	4928      	ldr	r1, [pc, #160]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d006      	beq.n	8002b46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b38:	4b23      	ldr	r3, [pc, #140]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	4922      	ldr	r1, [pc, #136]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60cb      	str	r3, [r1, #12]
 8002b44:	e006      	b.n	8002b54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b46:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	491e      	ldr	r1, [pc, #120]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b60:	4b19      	ldr	r3, [pc, #100]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	4918      	ldr	r1, [pc, #96]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
 8002b6c:	e006      	b.n	8002b7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b6e:	4b16      	ldr	r3, [pc, #88]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	4914      	ldr	r1, [pc, #80]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d021      	beq.n	8002bcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b88:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	490e      	ldr	r1, [pc, #56]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	600b      	str	r3, [r1, #0]
 8002b94:	e021      	b.n	8002bda <HAL_GPIO_Init+0x2e2>
 8002b96:	bf00      	nop
 8002b98:	10320000 	.word	0x10320000
 8002b9c:	10310000 	.word	0x10310000
 8002ba0:	10220000 	.word	0x10220000
 8002ba4:	10210000 	.word	0x10210000
 8002ba8:	10120000 	.word	0x10120000
 8002bac:	10110000 	.word	0x10110000
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40010000 	.word	0x40010000
 8002bb8:	40010800 	.word	0x40010800
 8002bbc:	40010c00 	.word	0x40010c00
 8002bc0:	40011000 	.word	0x40011000
 8002bc4:	40011400 	.word	0x40011400
 8002bc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bfc <HAL_GPIO_Init+0x304>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	4909      	ldr	r1, [pc, #36]	@ (8002bfc <HAL_GPIO_Init+0x304>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	3301      	adds	r3, #1
 8002bde:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f47f ae8e 	bne.w	800290c <HAL_GPIO_Init+0x14>
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	372c      	adds	r7, #44	@ 0x2c
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40010400 	.word	0x40010400

08002c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	887b      	ldrh	r3, [r7, #2]
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
 8002c1c:	e001      	b.n	8002c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr

08002c2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	460b      	mov	r3, r1
 8002c38:	807b      	strh	r3, [r7, #2]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c3e:	787b      	ldrb	r3, [r7, #1]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c44:	887a      	ldrh	r2, [r7, #2]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c4a:	e003      	b.n	8002c54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c4c:	887b      	ldrh	r3, [r7, #2]
 8002c4e:	041a      	lsls	r2, r3, #16
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	611a      	str	r2, [r3, #16]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e272      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 8087 	beq.w	8002d8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c80:	4b92      	ldr	r3, [pc, #584]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d00c      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c8c:	4b8f      	ldr	r3, [pc, #572]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 030c 	and.w	r3, r3, #12
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d112      	bne.n	8002cbe <HAL_RCC_OscConfig+0x5e>
 8002c98:	4b8c      	ldr	r3, [pc, #560]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca4:	d10b      	bne.n	8002cbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca6:	4b89      	ldr	r3, [pc, #548]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d06c      	beq.n	8002d8c <HAL_RCC_OscConfig+0x12c>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d168      	bne.n	8002d8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e24c      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cc6:	d106      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x76>
 8002cc8:	4b80      	ldr	r3, [pc, #512]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a7f      	ldr	r2, [pc, #508]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002cce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	e02e      	b.n	8002d34 <HAL_RCC_OscConfig+0xd4>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x98>
 8002cde:	4b7b      	ldr	r3, [pc, #492]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a7a      	ldr	r2, [pc, #488]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	4b78      	ldr	r3, [pc, #480]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a77      	ldr	r2, [pc, #476]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e01d      	b.n	8002d34 <HAL_RCC_OscConfig+0xd4>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCC_OscConfig+0xbc>
 8002d02:	4b72      	ldr	r3, [pc, #456]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a71      	ldr	r2, [pc, #452]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b6f      	ldr	r3, [pc, #444]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a6e      	ldr	r2, [pc, #440]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e00b      	b.n	8002d34 <HAL_RCC_OscConfig+0xd4>
 8002d1c:	4b6b      	ldr	r3, [pc, #428]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a6a      	ldr	r2, [pc, #424]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b68      	ldr	r3, [pc, #416]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a67      	ldr	r2, [pc, #412]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7ff fcc4 	bl	80026c8 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d44:	f7ff fcc0 	bl	80026c8 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	@ 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e200      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	4b5d      	ldr	r3, [pc, #372]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0xe4>
 8002d62:	e014      	b.n	8002d8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7ff fcb0 	bl	80026c8 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7ff fcac 	bl	80026c8 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	@ 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e1ec      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	4b53      	ldr	r3, [pc, #332]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x10c>
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d063      	beq.n	8002e62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002da6:	4b49      	ldr	r3, [pc, #292]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d11c      	bne.n	8002dec <HAL_RCC_OscConfig+0x18c>
 8002db2:	4b46      	ldr	r3, [pc, #280]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d116      	bne.n	8002dec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dbe:	4b43      	ldr	r3, [pc, #268]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d005      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x176>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d001      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e1c0      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4939      	ldr	r1, [pc, #228]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dea:	e03a      	b.n	8002e62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d020      	beq.n	8002e36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df4:	4b36      	ldr	r3, [pc, #216]	@ (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7ff fc65 	bl	80026c8 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e02:	f7ff fc61 	bl	80026c8 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e1a1      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e14:	4b2d      	ldr	r3, [pc, #180]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e20:	4b2a      	ldr	r3, [pc, #168]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4927      	ldr	r1, [pc, #156]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	600b      	str	r3, [r1, #0]
 8002e34:	e015      	b.n	8002e62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e36:	4b26      	ldr	r3, [pc, #152]	@ (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7ff fc44 	bl	80026c8 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e44:	f7ff fc40 	bl	80026c8 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e180      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e56:	4b1d      	ldr	r3, [pc, #116]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d03a      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d019      	beq.n	8002eaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e76:	4b17      	ldr	r3, [pc, #92]	@ (8002ed4 <HAL_RCC_OscConfig+0x274>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7c:	f7ff fc24 	bl	80026c8 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e84:	f7ff fc20 	bl	80026c8 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e160      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ea2:	2001      	movs	r0, #1
 8002ea4:	f000 fa9c 	bl	80033e0 <RCC_Delay>
 8002ea8:	e01c      	b.n	8002ee4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <HAL_RCC_OscConfig+0x274>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb0:	f7ff fc0a 	bl	80026c8 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb6:	e00f      	b.n	8002ed8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb8:	f7ff fc06 	bl	80026c8 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d908      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e146      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	42420000 	.word	0x42420000
 8002ed4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	4b92      	ldr	r3, [pc, #584]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e9      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80a6 	beq.w	800303e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef6:	4b8b      	ldr	r3, [pc, #556]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10d      	bne.n	8002f1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	4b88      	ldr	r3, [pc, #544]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	4a87      	ldr	r2, [pc, #540]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f0c:	61d3      	str	r3, [r2, #28]
 8002f0e:	4b85      	ldr	r3, [pc, #532]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1e:	4b82      	ldr	r3, [pc, #520]	@ (8003128 <HAL_RCC_OscConfig+0x4c8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d118      	bne.n	8002f5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003128 <HAL_RCC_OscConfig+0x4c8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003128 <HAL_RCC_OscConfig+0x4c8>)
 8002f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f36:	f7ff fbc7 	bl	80026c8 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3e:	f7ff fbc3 	bl	80026c8 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b64      	cmp	r3, #100	@ 0x64
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e103      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	4b75      	ldr	r3, [pc, #468]	@ (8003128 <HAL_RCC_OscConfig+0x4c8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_OscConfig+0x312>
 8002f64:	4b6f      	ldr	r3, [pc, #444]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4a6e      	ldr	r2, [pc, #440]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6213      	str	r3, [r2, #32]
 8002f70:	e02d      	b.n	8002fce <HAL_RCC_OscConfig+0x36e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x334>
 8002f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4a69      	ldr	r2, [pc, #420]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	6213      	str	r3, [r2, #32]
 8002f86:	4b67      	ldr	r3, [pc, #412]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	4a66      	ldr	r2, [pc, #408]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f8c:	f023 0304 	bic.w	r3, r3, #4
 8002f90:	6213      	str	r3, [r2, #32]
 8002f92:	e01c      	b.n	8002fce <HAL_RCC_OscConfig+0x36e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	d10c      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x356>
 8002f9c:	4b61      	ldr	r3, [pc, #388]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4a60      	ldr	r2, [pc, #384]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	6213      	str	r3, [r2, #32]
 8002fa8:	4b5e      	ldr	r3, [pc, #376]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4a5d      	ldr	r2, [pc, #372]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6213      	str	r3, [r2, #32]
 8002fb4:	e00b      	b.n	8002fce <HAL_RCC_OscConfig+0x36e>
 8002fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4a5a      	ldr	r2, [pc, #360]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	6213      	str	r3, [r2, #32]
 8002fc2:	4b58      	ldr	r3, [pc, #352]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	4a57      	ldr	r2, [pc, #348]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	f023 0304 	bic.w	r3, r3, #4
 8002fcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d015      	beq.n	8003002 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd6:	f7ff fb77 	bl	80026c8 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fde:	f7ff fb73 	bl	80026c8 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0b1      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0ee      	beq.n	8002fde <HAL_RCC_OscConfig+0x37e>
 8003000:	e014      	b.n	800302c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003002:	f7ff fb61 	bl	80026c8 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003008:	e00a      	b.n	8003020 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300a:	f7ff fb5d 	bl	80026c8 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e09b      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003020:	4b40      	ldr	r3, [pc, #256]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1ee      	bne.n	800300a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d105      	bne.n	800303e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003032:	4b3c      	ldr	r3, [pc, #240]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	4a3b      	ldr	r2, [pc, #236]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800303c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8087 	beq.w	8003156 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003048:	4b36      	ldr	r3, [pc, #216]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d061      	beq.n	8003118 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d146      	bne.n	80030ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305c:	4b33      	ldr	r3, [pc, #204]	@ (800312c <HAL_RCC_OscConfig+0x4cc>)
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003062:	f7ff fb31 	bl	80026c8 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306a:	f7ff fb2d 	bl	80026c8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e06d      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307c:	4b29      	ldr	r3, [pc, #164]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f0      	bne.n	800306a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003090:	d108      	bne.n	80030a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003092:	4b24      	ldr	r3, [pc, #144]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	4921      	ldr	r1, [pc, #132]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a19      	ldr	r1, [r3, #32]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	430b      	orrs	r3, r1
 80030b6:	491b      	ldr	r1, [pc, #108]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030bc:	4b1b      	ldr	r3, [pc, #108]	@ (800312c <HAL_RCC_OscConfig+0x4cc>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c2:	f7ff fb01 	bl	80026c8 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ca:	f7ff fafd 	bl	80026c8 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e03d      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030dc:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x46a>
 80030e8:	e035      	b.n	8003156 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ea:	4b10      	ldr	r3, [pc, #64]	@ (800312c <HAL_RCC_OscConfig+0x4cc>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7ff faea 	bl	80026c8 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f8:	f7ff fae6 	bl	80026c8 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e026      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310a:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x498>
 8003116:	e01e      	b.n	8003156 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d107      	bne.n	8003130 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e019      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
 8003124:	40021000 	.word	0x40021000
 8003128:	40007000 	.word	0x40007000
 800312c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003130:	4b0b      	ldr	r3, [pc, #44]	@ (8003160 <HAL_RCC_OscConfig+0x500>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	429a      	cmp	r2, r3
 8003142:	d106      	bne.n	8003152 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d001      	beq.n	8003156 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40021000 	.word	0x40021000

08003164 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0d0      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003178:	4b6a      	ldr	r3, [pc, #424]	@ (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d910      	bls.n	80031a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b67      	ldr	r3, [pc, #412]	@ (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 0207 	bic.w	r2, r3, #7
 800318e:	4965      	ldr	r1, [pc, #404]	@ (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003196:	4b63      	ldr	r3, [pc, #396]	@ (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0b8      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d020      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c0:	4b59      	ldr	r3, [pc, #356]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a58      	ldr	r2, [pc, #352]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031d8:	4b53      	ldr	r3, [pc, #332]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4a52      	ldr	r2, [pc, #328]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80031e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e4:	4b50      	ldr	r3, [pc, #320]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	494d      	ldr	r1, [pc, #308]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d040      	beq.n	8003284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	4b47      	ldr	r3, [pc, #284]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d115      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e07f      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003222:	4b41      	ldr	r3, [pc, #260]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e073      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003232:	4b3d      	ldr	r3, [pc, #244]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e06b      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003242:	4b39      	ldr	r3, [pc, #228]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f023 0203 	bic.w	r2, r3, #3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4936      	ldr	r1, [pc, #216]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003254:	f7ff fa38 	bl	80026c8 <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	e00a      	b.n	8003272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325c:	f7ff fa34 	bl	80026c8 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e053      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	4b2d      	ldr	r3, [pc, #180]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 020c 	and.w	r2, r3, #12
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	429a      	cmp	r2, r3
 8003282:	d1eb      	bne.n	800325c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003284:	4b27      	ldr	r3, [pc, #156]	@ (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d210      	bcs.n	80032b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b24      	ldr	r3, [pc, #144]	@ (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 0207 	bic.w	r2, r3, #7
 800329a:	4922      	ldr	r1, [pc, #136]	@ (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	4313      	orrs	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	4b20      	ldr	r3, [pc, #128]	@ (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e032      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c0:	4b19      	ldr	r3, [pc, #100]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4916      	ldr	r1, [pc, #88]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032de:	4b12      	ldr	r3, [pc, #72]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	490e      	ldr	r1, [pc, #56]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032f2:	f000 f821 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80032f6:	4602      	mov	r2, r0
 80032f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	490a      	ldr	r1, [pc, #40]	@ (800332c <HAL_RCC_ClockConfig+0x1c8>)
 8003304:	5ccb      	ldrb	r3, [r1, r3]
 8003306:	fa22 f303 	lsr.w	r3, r2, r3
 800330a:	4a09      	ldr	r2, [pc, #36]	@ (8003330 <HAL_RCC_ClockConfig+0x1cc>)
 800330c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800330e:	4b09      	ldr	r3, [pc, #36]	@ (8003334 <HAL_RCC_ClockConfig+0x1d0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff f996 	bl	8002644 <HAL_InitTick>

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40022000 	.word	0x40022000
 8003328:	40021000 	.word	0x40021000
 800332c:	08006e8c 	.word	0x08006e8c
 8003330:	20000050 	.word	0x20000050
 8003334:	20000054 	.word	0x20000054

08003338 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	2300      	movs	r3, #0
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	2300      	movs	r3, #0
 800334c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003352:	4b1e      	ldr	r3, [pc, #120]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b04      	cmp	r3, #4
 8003360:	d002      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x30>
 8003362:	2b08      	cmp	r3, #8
 8003364:	d003      	beq.n	800336e <HAL_RCC_GetSysClockFreq+0x36>
 8003366:	e027      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003368:	4b19      	ldr	r3, [pc, #100]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800336a:	613b      	str	r3, [r7, #16]
      break;
 800336c:	e027      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	0c9b      	lsrs	r3, r3, #18
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	4a17      	ldr	r2, [pc, #92]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003378:	5cd3      	ldrb	r3, [r2, r3]
 800337a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d010      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003386:	4b11      	ldr	r3, [pc, #68]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	0c5b      	lsrs	r3, r3, #17
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	4a11      	ldr	r2, [pc, #68]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003392:	5cd3      	ldrb	r3, [r2, r3]
 8003394:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a0d      	ldr	r2, [pc, #52]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800339a:	fb03 f202 	mul.w	r2, r3, r2
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	e004      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a0c      	ldr	r2, [pc, #48]	@ (80033dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80033ac:	fb02 f303 	mul.w	r3, r2, r3
 80033b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	613b      	str	r3, [r7, #16]
      break;
 80033b6:	e002      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033b8:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ba:	613b      	str	r3, [r7, #16]
      break;
 80033bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033be:	693b      	ldr	r3, [r7, #16]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000
 80033d0:	007a1200 	.word	0x007a1200
 80033d4:	08006e9c 	.word	0x08006e9c
 80033d8:	08006eac 	.word	0x08006eac
 80033dc:	003d0900 	.word	0x003d0900

080033e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003414 <RCC_Delay+0x34>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003418 <RCC_Delay+0x38>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	0a5b      	lsrs	r3, r3, #9
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033fc:	bf00      	nop
  }
  while (Delay --);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1e5a      	subs	r2, r3, #1
 8003402:	60fa      	str	r2, [r7, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f9      	bne.n	80033fc <RCC_Delay+0x1c>
}
 8003408:	bf00      	nop
 800340a:	bf00      	nop
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	20000050 	.word	0x20000050
 8003418:	10624dd3 	.word	0x10624dd3

0800341c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e076      	b.n	800351c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	2b00      	cmp	r3, #0
 8003434:	d108      	bne.n	8003448 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800343e:	d009      	beq.n	8003454 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	61da      	str	r2, [r3, #28]
 8003446:	e005      	b.n	8003454 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fe fed4 	bl	800221c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800348a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d8:	ea42 0103 	orr.w	r1, r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	0c1a      	lsrs	r2, r3, #16
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f002 0204 	and.w	r2, r2, #4
 80034fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800350a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_SPI_Transmit+0x22>
 8003542:	2302      	movs	r3, #2
 8003544:	e12d      	b.n	80037a2 <HAL_SPI_Transmit+0x27e>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800354e:	f7ff f8bb 	bl	80026c8 <HAL_GetTick>
 8003552:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	d002      	beq.n	800356a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003564:	2302      	movs	r3, #2
 8003566:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003568:	e116      	b.n	8003798 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <HAL_SPI_Transmit+0x52>
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d102      	bne.n	800357c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	77fb      	strb	r3, [r7, #31]
    goto error;
 800357a:	e10d      	b.n	8003798 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2203      	movs	r2, #3
 8003580:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	88fa      	ldrh	r2, [r7, #6]
 8003594:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	88fa      	ldrh	r2, [r7, #6]
 800359a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035c2:	d10f      	bne.n	80035e4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ee:	2b40      	cmp	r3, #64	@ 0x40
 80035f0:	d007      	beq.n	8003602 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003600:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800360a:	d14f      	bne.n	80036ac <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <HAL_SPI_Transmit+0xf6>
 8003614:	8afb      	ldrh	r3, [r7, #22]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d142      	bne.n	80036a0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	881a      	ldrh	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	1c9a      	adds	r2, r3, #2
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800363e:	e02f      	b.n	80036a0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b02      	cmp	r3, #2
 800364c:	d112      	bne.n	8003674 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	881a      	ldrh	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365e:	1c9a      	adds	r2, r3, #2
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003672:	e015      	b.n	80036a0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003674:	f7ff f828 	bl	80026c8 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d803      	bhi.n	800368c <HAL_SPI_Transmit+0x168>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368a:	d102      	bne.n	8003692 <HAL_SPI_Transmit+0x16e>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800369e:	e07b      	b.n	8003798 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1ca      	bne.n	8003640 <HAL_SPI_Transmit+0x11c>
 80036aa:	e050      	b.n	800374e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_SPI_Transmit+0x196>
 80036b4:	8afb      	ldrh	r3, [r7, #22]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d144      	bne.n	8003744 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	330c      	adds	r3, #12
 80036c4:	7812      	ldrb	r2, [r2, #0]
 80036c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036e0:	e030      	b.n	8003744 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d113      	bne.n	8003718 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	330c      	adds	r3, #12
 80036fa:	7812      	ldrb	r2, [r2, #0]
 80036fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003716:	e015      	b.n	8003744 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003718:	f7fe ffd6 	bl	80026c8 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d803      	bhi.n	8003730 <HAL_SPI_Transmit+0x20c>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372e:	d102      	bne.n	8003736 <HAL_SPI_Transmit+0x212>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003742:	e029      	b.n	8003798 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1c9      	bne.n	80036e2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	6839      	ldr	r1, [r7, #0]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f8b2 	bl	80038bc <SPI_EndRxTxTransaction>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	77fb      	strb	r3, [r7, #31]
 800378e:	e003      	b.n	8003798 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80037a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037bc:	f7fe ff84 	bl	80026c8 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	4413      	add	r3, r2
 80037ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037cc:	f7fe ff7c 	bl	80026c8 <HAL_GetTick>
 80037d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037d2:	4b39      	ldr	r3, [pc, #228]	@ (80038b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	015b      	lsls	r3, r3, #5
 80037d8:	0d1b      	lsrs	r3, r3, #20
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	fb02 f303 	mul.w	r3, r2, r3
 80037e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037e2:	e054      	b.n	800388e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d050      	beq.n	800388e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037ec:	f7fe ff6c 	bl	80026c8 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d902      	bls.n	8003802 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d13d      	bne.n	800387e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003810:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800381a:	d111      	bne.n	8003840 <SPI_WaitFlagStateUntilTimeout+0x94>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003824:	d004      	beq.n	8003830 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800382e:	d107      	bne.n	8003840 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800383e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003848:	d10f      	bne.n	800386a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003868:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e017      	b.n	80038ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	3b01      	subs	r3, #1
 800388c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4013      	ands	r3, r2
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	429a      	cmp	r2, r3
 800389c:	bf0c      	ite	eq
 800389e:	2301      	moveq	r3, #1
 80038a0:	2300      	movne	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	461a      	mov	r2, r3
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d19b      	bne.n	80037e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3720      	adds	r7, #32
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20000050 	.word	0x20000050

080038bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2200      	movs	r2, #0
 80038d0:	2180      	movs	r1, #128	@ 0x80
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f7ff ff6a 	bl	80037ac <SPI_WaitFlagStateUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e2:	f043 0220 	orr.w	r2, r3, #32
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e000      	b.n	80038f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e041      	b.n	800398e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fe fcea 	bl	80022f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	4619      	mov	r1, r3
 8003936:	4610      	mov	r0, r2
 8003938:	f000 fa74 	bl	8003e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d001      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e03a      	b.n	8003a26 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a18      	ldr	r2, [pc, #96]	@ (8003a30 <HAL_TIM_Base_Start_IT+0x98>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00e      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0x58>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039da:	d009      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0x58>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a14      	ldr	r2, [pc, #80]	@ (8003a34 <HAL_TIM_Base_Start_IT+0x9c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d004      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0x58>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a13      	ldr	r2, [pc, #76]	@ (8003a38 <HAL_TIM_Base_Start_IT+0xa0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d111      	bne.n	8003a14 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b06      	cmp	r3, #6
 8003a00:	d010      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0201 	orr.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a12:	e007      	b.n	8003a24 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	40012c00 	.word	0x40012c00
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800

08003a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d122      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d11b      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0202 	mvn.w	r2, #2
 8003a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f9b4 	bl	8003dec <HAL_TIM_IC_CaptureCallback>
 8003a84:	e005      	b.n	8003a92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f9a7 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f9b6 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d122      	bne.n	8003aec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d11b      	bne.n	8003aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0204 	mvn.w	r2, #4
 8003abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f98a 	bl	8003dec <HAL_TIM_IC_CaptureCallback>
 8003ad8:	e005      	b.n	8003ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f97d 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f98c 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d122      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d11b      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0208 	mvn.w	r2, #8
 8003b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2204      	movs	r2, #4
 8003b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f960 	bl	8003dec <HAL_TIM_IC_CaptureCallback>
 8003b2c:	e005      	b.n	8003b3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f953 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f962 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	2b10      	cmp	r3, #16
 8003b4c:	d122      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b10      	cmp	r3, #16
 8003b5a:	d11b      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f06f 0210 	mvn.w	r2, #16
 8003b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2208      	movs	r2, #8
 8003b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f936 	bl	8003dec <HAL_TIM_IC_CaptureCallback>
 8003b80:	e005      	b.n	8003b8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f929 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f938 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d10e      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d107      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f06f 0201 	mvn.w	r2, #1
 8003bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fe faec 	bl	8002198 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bca:	2b80      	cmp	r3, #128	@ 0x80
 8003bcc:	d10e      	bne.n	8003bec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd8:	2b80      	cmp	r3, #128	@ 0x80
 8003bda:	d107      	bne.n	8003bec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fa7b 	bl	80040e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf6:	2b40      	cmp	r3, #64	@ 0x40
 8003bf8:	d10e      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c04:	2b40      	cmp	r3, #64	@ 0x40
 8003c06:	d107      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f8fc 	bl	8003e10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d10e      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d107      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0220 	mvn.w	r2, #32
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fa46 	bl	80040d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_TIM_ConfigClockSource+0x1c>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e0b4      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x186>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ca0:	d03e      	beq.n	8003d20 <HAL_TIM_ConfigClockSource+0xd4>
 8003ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ca6:	f200 8087 	bhi.w	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cae:	f000 8086 	beq.w	8003dbe <HAL_TIM_ConfigClockSource+0x172>
 8003cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb6:	d87f      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb8:	2b70      	cmp	r3, #112	@ 0x70
 8003cba:	d01a      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0xa6>
 8003cbc:	2b70      	cmp	r3, #112	@ 0x70
 8003cbe:	d87b      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc0:	2b60      	cmp	r3, #96	@ 0x60
 8003cc2:	d050      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x11a>
 8003cc4:	2b60      	cmp	r3, #96	@ 0x60
 8003cc6:	d877      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc8:	2b50      	cmp	r3, #80	@ 0x50
 8003cca:	d03c      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0xfa>
 8003ccc:	2b50      	cmp	r3, #80	@ 0x50
 8003cce:	d873      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd0:	2b40      	cmp	r3, #64	@ 0x40
 8003cd2:	d058      	beq.n	8003d86 <HAL_TIM_ConfigClockSource+0x13a>
 8003cd4:	2b40      	cmp	r3, #64	@ 0x40
 8003cd6:	d86f      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd8:	2b30      	cmp	r3, #48	@ 0x30
 8003cda:	d064      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x15a>
 8003cdc:	2b30      	cmp	r3, #48	@ 0x30
 8003cde:	d86b      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d060      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d867      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d05c      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x15a>
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d05a      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x15a>
 8003cf0:	e062      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d02:	f000 f968 	bl	8003fd6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	609a      	str	r2, [r3, #8]
      break;
 8003d1e:	e04f      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d30:	f000 f951 	bl	8003fd6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d42:	609a      	str	r2, [r3, #8]
      break;
 8003d44:	e03c      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d52:	461a      	mov	r2, r3
 8003d54:	f000 f8c8 	bl	8003ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2150      	movs	r1, #80	@ 0x50
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f91f 	bl	8003fa2 <TIM_ITRx_SetConfig>
      break;
 8003d64:	e02c      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d72:	461a      	mov	r2, r3
 8003d74:	f000 f8e6 	bl	8003f44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2160      	movs	r1, #96	@ 0x60
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 f90f 	bl	8003fa2 <TIM_ITRx_SetConfig>
      break;
 8003d84:	e01c      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d92:	461a      	mov	r2, r3
 8003d94:	f000 f8a8 	bl	8003ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2140      	movs	r1, #64	@ 0x40
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f8ff 	bl	8003fa2 <TIM_ITRx_SetConfig>
      break;
 8003da4:	e00c      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4619      	mov	r1, r3
 8003db0:	4610      	mov	r0, r2
 8003db2:	f000 f8f6 	bl	8003fa2 <TIM_ITRx_SetConfig>
      break;
 8003db6:	e003      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      break;
 8003dbc:	e000      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr

08003dec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr

08003dfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr

08003e10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr
	...

08003e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a29      	ldr	r2, [pc, #164]	@ (8003edc <TIM_Base_SetConfig+0xb8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00b      	beq.n	8003e54 <TIM_Base_SetConfig+0x30>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e42:	d007      	beq.n	8003e54 <TIM_Base_SetConfig+0x30>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a26      	ldr	r2, [pc, #152]	@ (8003ee0 <TIM_Base_SetConfig+0xbc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <TIM_Base_SetConfig+0x30>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a25      	ldr	r2, [pc, #148]	@ (8003ee4 <TIM_Base_SetConfig+0xc0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d108      	bne.n	8003e66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a1c      	ldr	r2, [pc, #112]	@ (8003edc <TIM_Base_SetConfig+0xb8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00b      	beq.n	8003e86 <TIM_Base_SetConfig+0x62>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e74:	d007      	beq.n	8003e86 <TIM_Base_SetConfig+0x62>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a19      	ldr	r2, [pc, #100]	@ (8003ee0 <TIM_Base_SetConfig+0xbc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d003      	beq.n	8003e86 <TIM_Base_SetConfig+0x62>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a18      	ldr	r2, [pc, #96]	@ (8003ee4 <TIM_Base_SetConfig+0xc0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d108      	bne.n	8003e98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a07      	ldr	r2, [pc, #28]	@ (8003edc <TIM_Base_SetConfig+0xb8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d103      	bne.n	8003ecc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	615a      	str	r2, [r3, #20]
}
 8003ed2:	bf00      	nop
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr
 8003edc:	40012c00 	.word	0x40012c00
 8003ee0:	40000400 	.word	0x40000400
 8003ee4:	40000800 	.word	0x40000800

08003ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	f023 0201 	bic.w	r2, r3, #1
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f023 030a 	bic.w	r3, r3, #10
 8003f24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	621a      	str	r2, [r3, #32]
}
 8003f3a:	bf00      	nop
 8003f3c:	371c      	adds	r7, #28
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f023 0210 	bic.w	r2, r3, #16
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	031b      	lsls	r3, r3, #12
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	621a      	str	r2, [r3, #32]
}
 8003f98:	bf00      	nop
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b085      	sub	sp, #20
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f043 0307 	orr.w	r3, r3, #7
 8003fc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	609a      	str	r2, [r3, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b087      	sub	sp, #28
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	021a      	lsls	r2, r3, #8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	609a      	str	r2, [r3, #8]
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004028:	2302      	movs	r3, #2
 800402a:	e046      	b.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004052:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a16      	ldr	r2, [pc, #88]	@ (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00e      	beq.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004078:	d009      	beq.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a12      	ldr	r2, [pc, #72]	@ (80040c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d004      	beq.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a10      	ldr	r2, [pc, #64]	@ (80040cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d10c      	bne.n	80040a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	4313      	orrs	r3, r2
 800409e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	40000400 	.word	0x40000400
 80040cc:	40000800 	.word	0x40000800

080040d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr

080040e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr

080040f4 <__cvt>:
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040fa:	461d      	mov	r5, r3
 80040fc:	bfbb      	ittet	lt
 80040fe:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004102:	461d      	movlt	r5, r3
 8004104:	2300      	movge	r3, #0
 8004106:	232d      	movlt	r3, #45	@ 0x2d
 8004108:	b088      	sub	sp, #32
 800410a:	4614      	mov	r4, r2
 800410c:	bfb8      	it	lt
 800410e:	4614      	movlt	r4, r2
 8004110:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004112:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004114:	7013      	strb	r3, [r2, #0]
 8004116:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004118:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800411c:	f023 0820 	bic.w	r8, r3, #32
 8004120:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004124:	d005      	beq.n	8004132 <__cvt+0x3e>
 8004126:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800412a:	d100      	bne.n	800412e <__cvt+0x3a>
 800412c:	3601      	adds	r6, #1
 800412e:	2302      	movs	r3, #2
 8004130:	e000      	b.n	8004134 <__cvt+0x40>
 8004132:	2303      	movs	r3, #3
 8004134:	aa07      	add	r2, sp, #28
 8004136:	9204      	str	r2, [sp, #16]
 8004138:	aa06      	add	r2, sp, #24
 800413a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800413e:	e9cd 3600 	strd	r3, r6, [sp]
 8004142:	4622      	mov	r2, r4
 8004144:	462b      	mov	r3, r5
 8004146:	f000 fe83 	bl	8004e50 <_dtoa_r>
 800414a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800414e:	4607      	mov	r7, r0
 8004150:	d119      	bne.n	8004186 <__cvt+0x92>
 8004152:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004154:	07db      	lsls	r3, r3, #31
 8004156:	d50e      	bpl.n	8004176 <__cvt+0x82>
 8004158:	eb00 0906 	add.w	r9, r0, r6
 800415c:	2200      	movs	r2, #0
 800415e:	2300      	movs	r3, #0
 8004160:	4620      	mov	r0, r4
 8004162:	4629      	mov	r1, r5
 8004164:	f7fc fc20 	bl	80009a8 <__aeabi_dcmpeq>
 8004168:	b108      	cbz	r0, 800416e <__cvt+0x7a>
 800416a:	f8cd 901c 	str.w	r9, [sp, #28]
 800416e:	2230      	movs	r2, #48	@ 0x30
 8004170:	9b07      	ldr	r3, [sp, #28]
 8004172:	454b      	cmp	r3, r9
 8004174:	d31e      	bcc.n	80041b4 <__cvt+0xc0>
 8004176:	4638      	mov	r0, r7
 8004178:	9b07      	ldr	r3, [sp, #28]
 800417a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800417c:	1bdb      	subs	r3, r3, r7
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	b008      	add	sp, #32
 8004182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004186:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800418a:	eb00 0906 	add.w	r9, r0, r6
 800418e:	d1e5      	bne.n	800415c <__cvt+0x68>
 8004190:	7803      	ldrb	r3, [r0, #0]
 8004192:	2b30      	cmp	r3, #48	@ 0x30
 8004194:	d10a      	bne.n	80041ac <__cvt+0xb8>
 8004196:	2200      	movs	r2, #0
 8004198:	2300      	movs	r3, #0
 800419a:	4620      	mov	r0, r4
 800419c:	4629      	mov	r1, r5
 800419e:	f7fc fc03 	bl	80009a8 <__aeabi_dcmpeq>
 80041a2:	b918      	cbnz	r0, 80041ac <__cvt+0xb8>
 80041a4:	f1c6 0601 	rsb	r6, r6, #1
 80041a8:	f8ca 6000 	str.w	r6, [sl]
 80041ac:	f8da 3000 	ldr.w	r3, [sl]
 80041b0:	4499      	add	r9, r3
 80041b2:	e7d3      	b.n	800415c <__cvt+0x68>
 80041b4:	1c59      	adds	r1, r3, #1
 80041b6:	9107      	str	r1, [sp, #28]
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	e7d9      	b.n	8004170 <__cvt+0x7c>

080041bc <__exponent>:
 80041bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041be:	2900      	cmp	r1, #0
 80041c0:	bfb6      	itet	lt
 80041c2:	232d      	movlt	r3, #45	@ 0x2d
 80041c4:	232b      	movge	r3, #43	@ 0x2b
 80041c6:	4249      	neglt	r1, r1
 80041c8:	2909      	cmp	r1, #9
 80041ca:	7002      	strb	r2, [r0, #0]
 80041cc:	7043      	strb	r3, [r0, #1]
 80041ce:	dd29      	ble.n	8004224 <__exponent+0x68>
 80041d0:	f10d 0307 	add.w	r3, sp, #7
 80041d4:	461d      	mov	r5, r3
 80041d6:	270a      	movs	r7, #10
 80041d8:	fbb1 f6f7 	udiv	r6, r1, r7
 80041dc:	461a      	mov	r2, r3
 80041de:	fb07 1416 	mls	r4, r7, r6, r1
 80041e2:	3430      	adds	r4, #48	@ 0x30
 80041e4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80041e8:	460c      	mov	r4, r1
 80041ea:	2c63      	cmp	r4, #99	@ 0x63
 80041ec:	4631      	mov	r1, r6
 80041ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80041f2:	dcf1      	bgt.n	80041d8 <__exponent+0x1c>
 80041f4:	3130      	adds	r1, #48	@ 0x30
 80041f6:	1e94      	subs	r4, r2, #2
 80041f8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80041fc:	4623      	mov	r3, r4
 80041fe:	1c41      	adds	r1, r0, #1
 8004200:	42ab      	cmp	r3, r5
 8004202:	d30a      	bcc.n	800421a <__exponent+0x5e>
 8004204:	f10d 0309 	add.w	r3, sp, #9
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	42ac      	cmp	r4, r5
 800420c:	bf88      	it	hi
 800420e:	2300      	movhi	r3, #0
 8004210:	3302      	adds	r3, #2
 8004212:	4403      	add	r3, r0
 8004214:	1a18      	subs	r0, r3, r0
 8004216:	b003      	add	sp, #12
 8004218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800421a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800421e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004222:	e7ed      	b.n	8004200 <__exponent+0x44>
 8004224:	2330      	movs	r3, #48	@ 0x30
 8004226:	3130      	adds	r1, #48	@ 0x30
 8004228:	7083      	strb	r3, [r0, #2]
 800422a:	70c1      	strb	r1, [r0, #3]
 800422c:	1d03      	adds	r3, r0, #4
 800422e:	e7f1      	b.n	8004214 <__exponent+0x58>

08004230 <_printf_float>:
 8004230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004234:	b091      	sub	sp, #68	@ 0x44
 8004236:	460c      	mov	r4, r1
 8004238:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800423c:	4616      	mov	r6, r2
 800423e:	461f      	mov	r7, r3
 8004240:	4605      	mov	r5, r0
 8004242:	f000 fcf5 	bl	8004c30 <_localeconv_r>
 8004246:	6803      	ldr	r3, [r0, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	9308      	str	r3, [sp, #32]
 800424c:	f7fb ff80 	bl	8000150 <strlen>
 8004250:	2300      	movs	r3, #0
 8004252:	930e      	str	r3, [sp, #56]	@ 0x38
 8004254:	f8d8 3000 	ldr.w	r3, [r8]
 8004258:	9009      	str	r0, [sp, #36]	@ 0x24
 800425a:	3307      	adds	r3, #7
 800425c:	f023 0307 	bic.w	r3, r3, #7
 8004260:	f103 0208 	add.w	r2, r3, #8
 8004264:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004268:	f8d4 b000 	ldr.w	fp, [r4]
 800426c:	f8c8 2000 	str.w	r2, [r8]
 8004270:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004274:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004278:	930b      	str	r3, [sp, #44]	@ 0x2c
 800427a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800427e:	f04f 32ff 	mov.w	r2, #4294967295
 8004282:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004286:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800428a:	4b9c      	ldr	r3, [pc, #624]	@ (80044fc <_printf_float+0x2cc>)
 800428c:	f7fc fbbe 	bl	8000a0c <__aeabi_dcmpun>
 8004290:	bb70      	cbnz	r0, 80042f0 <_printf_float+0xc0>
 8004292:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004296:	f04f 32ff 	mov.w	r2, #4294967295
 800429a:	4b98      	ldr	r3, [pc, #608]	@ (80044fc <_printf_float+0x2cc>)
 800429c:	f7fc fb98 	bl	80009d0 <__aeabi_dcmple>
 80042a0:	bb30      	cbnz	r0, 80042f0 <_printf_float+0xc0>
 80042a2:	2200      	movs	r2, #0
 80042a4:	2300      	movs	r3, #0
 80042a6:	4640      	mov	r0, r8
 80042a8:	4649      	mov	r1, r9
 80042aa:	f7fc fb87 	bl	80009bc <__aeabi_dcmplt>
 80042ae:	b110      	cbz	r0, 80042b6 <_printf_float+0x86>
 80042b0:	232d      	movs	r3, #45	@ 0x2d
 80042b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042b6:	4a92      	ldr	r2, [pc, #584]	@ (8004500 <_printf_float+0x2d0>)
 80042b8:	4b92      	ldr	r3, [pc, #584]	@ (8004504 <_printf_float+0x2d4>)
 80042ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80042be:	bf94      	ite	ls
 80042c0:	4690      	movls	r8, r2
 80042c2:	4698      	movhi	r8, r3
 80042c4:	2303      	movs	r3, #3
 80042c6:	f04f 0900 	mov.w	r9, #0
 80042ca:	6123      	str	r3, [r4, #16]
 80042cc:	f02b 0304 	bic.w	r3, fp, #4
 80042d0:	6023      	str	r3, [r4, #0]
 80042d2:	4633      	mov	r3, r6
 80042d4:	4621      	mov	r1, r4
 80042d6:	4628      	mov	r0, r5
 80042d8:	9700      	str	r7, [sp, #0]
 80042da:	aa0f      	add	r2, sp, #60	@ 0x3c
 80042dc:	f000 f9d4 	bl	8004688 <_printf_common>
 80042e0:	3001      	adds	r0, #1
 80042e2:	f040 8090 	bne.w	8004406 <_printf_float+0x1d6>
 80042e6:	f04f 30ff 	mov.w	r0, #4294967295
 80042ea:	b011      	add	sp, #68	@ 0x44
 80042ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042f0:	4642      	mov	r2, r8
 80042f2:	464b      	mov	r3, r9
 80042f4:	4640      	mov	r0, r8
 80042f6:	4649      	mov	r1, r9
 80042f8:	f7fc fb88 	bl	8000a0c <__aeabi_dcmpun>
 80042fc:	b148      	cbz	r0, 8004312 <_printf_float+0xe2>
 80042fe:	464b      	mov	r3, r9
 8004300:	2b00      	cmp	r3, #0
 8004302:	bfb8      	it	lt
 8004304:	232d      	movlt	r3, #45	@ 0x2d
 8004306:	4a80      	ldr	r2, [pc, #512]	@ (8004508 <_printf_float+0x2d8>)
 8004308:	bfb8      	it	lt
 800430a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800430e:	4b7f      	ldr	r3, [pc, #508]	@ (800450c <_printf_float+0x2dc>)
 8004310:	e7d3      	b.n	80042ba <_printf_float+0x8a>
 8004312:	6863      	ldr	r3, [r4, #4]
 8004314:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	d13f      	bne.n	800439c <_printf_float+0x16c>
 800431c:	2306      	movs	r3, #6
 800431e:	6063      	str	r3, [r4, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004326:	6023      	str	r3, [r4, #0]
 8004328:	9206      	str	r2, [sp, #24]
 800432a:	aa0e      	add	r2, sp, #56	@ 0x38
 800432c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004330:	aa0d      	add	r2, sp, #52	@ 0x34
 8004332:	9203      	str	r2, [sp, #12]
 8004334:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004338:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800433c:	6863      	ldr	r3, [r4, #4]
 800433e:	4642      	mov	r2, r8
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	4628      	mov	r0, r5
 8004344:	464b      	mov	r3, r9
 8004346:	910a      	str	r1, [sp, #40]	@ 0x28
 8004348:	f7ff fed4 	bl	80040f4 <__cvt>
 800434c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800434e:	4680      	mov	r8, r0
 8004350:	2947      	cmp	r1, #71	@ 0x47
 8004352:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004354:	d128      	bne.n	80043a8 <_printf_float+0x178>
 8004356:	1cc8      	adds	r0, r1, #3
 8004358:	db02      	blt.n	8004360 <_printf_float+0x130>
 800435a:	6863      	ldr	r3, [r4, #4]
 800435c:	4299      	cmp	r1, r3
 800435e:	dd40      	ble.n	80043e2 <_printf_float+0x1b2>
 8004360:	f1aa 0a02 	sub.w	sl, sl, #2
 8004364:	fa5f fa8a 	uxtb.w	sl, sl
 8004368:	4652      	mov	r2, sl
 800436a:	3901      	subs	r1, #1
 800436c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004370:	910d      	str	r1, [sp, #52]	@ 0x34
 8004372:	f7ff ff23 	bl	80041bc <__exponent>
 8004376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004378:	4681      	mov	r9, r0
 800437a:	1813      	adds	r3, r2, r0
 800437c:	2a01      	cmp	r2, #1
 800437e:	6123      	str	r3, [r4, #16]
 8004380:	dc02      	bgt.n	8004388 <_printf_float+0x158>
 8004382:	6822      	ldr	r2, [r4, #0]
 8004384:	07d2      	lsls	r2, r2, #31
 8004386:	d501      	bpl.n	800438c <_printf_float+0x15c>
 8004388:	3301      	adds	r3, #1
 800438a:	6123      	str	r3, [r4, #16]
 800438c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004390:	2b00      	cmp	r3, #0
 8004392:	d09e      	beq.n	80042d2 <_printf_float+0xa2>
 8004394:	232d      	movs	r3, #45	@ 0x2d
 8004396:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800439a:	e79a      	b.n	80042d2 <_printf_float+0xa2>
 800439c:	2947      	cmp	r1, #71	@ 0x47
 800439e:	d1bf      	bne.n	8004320 <_printf_float+0xf0>
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1bd      	bne.n	8004320 <_printf_float+0xf0>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e7ba      	b.n	800431e <_printf_float+0xee>
 80043a8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80043ac:	d9dc      	bls.n	8004368 <_printf_float+0x138>
 80043ae:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80043b2:	d118      	bne.n	80043e6 <_printf_float+0x1b6>
 80043b4:	2900      	cmp	r1, #0
 80043b6:	6863      	ldr	r3, [r4, #4]
 80043b8:	dd0b      	ble.n	80043d2 <_printf_float+0x1a2>
 80043ba:	6121      	str	r1, [r4, #16]
 80043bc:	b913      	cbnz	r3, 80043c4 <_printf_float+0x194>
 80043be:	6822      	ldr	r2, [r4, #0]
 80043c0:	07d0      	lsls	r0, r2, #31
 80043c2:	d502      	bpl.n	80043ca <_printf_float+0x19a>
 80043c4:	3301      	adds	r3, #1
 80043c6:	440b      	add	r3, r1
 80043c8:	6123      	str	r3, [r4, #16]
 80043ca:	f04f 0900 	mov.w	r9, #0
 80043ce:	65a1      	str	r1, [r4, #88]	@ 0x58
 80043d0:	e7dc      	b.n	800438c <_printf_float+0x15c>
 80043d2:	b913      	cbnz	r3, 80043da <_printf_float+0x1aa>
 80043d4:	6822      	ldr	r2, [r4, #0]
 80043d6:	07d2      	lsls	r2, r2, #31
 80043d8:	d501      	bpl.n	80043de <_printf_float+0x1ae>
 80043da:	3302      	adds	r3, #2
 80043dc:	e7f4      	b.n	80043c8 <_printf_float+0x198>
 80043de:	2301      	movs	r3, #1
 80043e0:	e7f2      	b.n	80043c8 <_printf_float+0x198>
 80043e2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80043e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043e8:	4299      	cmp	r1, r3
 80043ea:	db05      	blt.n	80043f8 <_printf_float+0x1c8>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	6121      	str	r1, [r4, #16]
 80043f0:	07d8      	lsls	r0, r3, #31
 80043f2:	d5ea      	bpl.n	80043ca <_printf_float+0x19a>
 80043f4:	1c4b      	adds	r3, r1, #1
 80043f6:	e7e7      	b.n	80043c8 <_printf_float+0x198>
 80043f8:	2900      	cmp	r1, #0
 80043fa:	bfcc      	ite	gt
 80043fc:	2201      	movgt	r2, #1
 80043fe:	f1c1 0202 	rsble	r2, r1, #2
 8004402:	4413      	add	r3, r2
 8004404:	e7e0      	b.n	80043c8 <_printf_float+0x198>
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	055a      	lsls	r2, r3, #21
 800440a:	d407      	bmi.n	800441c <_printf_float+0x1ec>
 800440c:	6923      	ldr	r3, [r4, #16]
 800440e:	4642      	mov	r2, r8
 8004410:	4631      	mov	r1, r6
 8004412:	4628      	mov	r0, r5
 8004414:	47b8      	blx	r7
 8004416:	3001      	adds	r0, #1
 8004418:	d12b      	bne.n	8004472 <_printf_float+0x242>
 800441a:	e764      	b.n	80042e6 <_printf_float+0xb6>
 800441c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004420:	f240 80dc 	bls.w	80045dc <_printf_float+0x3ac>
 8004424:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004428:	2200      	movs	r2, #0
 800442a:	2300      	movs	r3, #0
 800442c:	f7fc fabc 	bl	80009a8 <__aeabi_dcmpeq>
 8004430:	2800      	cmp	r0, #0
 8004432:	d033      	beq.n	800449c <_printf_float+0x26c>
 8004434:	2301      	movs	r3, #1
 8004436:	4631      	mov	r1, r6
 8004438:	4628      	mov	r0, r5
 800443a:	4a35      	ldr	r2, [pc, #212]	@ (8004510 <_printf_float+0x2e0>)
 800443c:	47b8      	blx	r7
 800443e:	3001      	adds	r0, #1
 8004440:	f43f af51 	beq.w	80042e6 <_printf_float+0xb6>
 8004444:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004448:	4543      	cmp	r3, r8
 800444a:	db02      	blt.n	8004452 <_printf_float+0x222>
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	07d8      	lsls	r0, r3, #31
 8004450:	d50f      	bpl.n	8004472 <_printf_float+0x242>
 8004452:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004456:	4631      	mov	r1, r6
 8004458:	4628      	mov	r0, r5
 800445a:	47b8      	blx	r7
 800445c:	3001      	adds	r0, #1
 800445e:	f43f af42 	beq.w	80042e6 <_printf_float+0xb6>
 8004462:	f04f 0900 	mov.w	r9, #0
 8004466:	f108 38ff 	add.w	r8, r8, #4294967295
 800446a:	f104 0a1a 	add.w	sl, r4, #26
 800446e:	45c8      	cmp	r8, r9
 8004470:	dc09      	bgt.n	8004486 <_printf_float+0x256>
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	079b      	lsls	r3, r3, #30
 8004476:	f100 8102 	bmi.w	800467e <_printf_float+0x44e>
 800447a:	68e0      	ldr	r0, [r4, #12]
 800447c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800447e:	4298      	cmp	r0, r3
 8004480:	bfb8      	it	lt
 8004482:	4618      	movlt	r0, r3
 8004484:	e731      	b.n	80042ea <_printf_float+0xba>
 8004486:	2301      	movs	r3, #1
 8004488:	4652      	mov	r2, sl
 800448a:	4631      	mov	r1, r6
 800448c:	4628      	mov	r0, r5
 800448e:	47b8      	blx	r7
 8004490:	3001      	adds	r0, #1
 8004492:	f43f af28 	beq.w	80042e6 <_printf_float+0xb6>
 8004496:	f109 0901 	add.w	r9, r9, #1
 800449a:	e7e8      	b.n	800446e <_printf_float+0x23e>
 800449c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800449e:	2b00      	cmp	r3, #0
 80044a0:	dc38      	bgt.n	8004514 <_printf_float+0x2e4>
 80044a2:	2301      	movs	r3, #1
 80044a4:	4631      	mov	r1, r6
 80044a6:	4628      	mov	r0, r5
 80044a8:	4a19      	ldr	r2, [pc, #100]	@ (8004510 <_printf_float+0x2e0>)
 80044aa:	47b8      	blx	r7
 80044ac:	3001      	adds	r0, #1
 80044ae:	f43f af1a 	beq.w	80042e6 <_printf_float+0xb6>
 80044b2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80044b6:	ea59 0303 	orrs.w	r3, r9, r3
 80044ba:	d102      	bne.n	80044c2 <_printf_float+0x292>
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	07d9      	lsls	r1, r3, #31
 80044c0:	d5d7      	bpl.n	8004472 <_printf_float+0x242>
 80044c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044c6:	4631      	mov	r1, r6
 80044c8:	4628      	mov	r0, r5
 80044ca:	47b8      	blx	r7
 80044cc:	3001      	adds	r0, #1
 80044ce:	f43f af0a 	beq.w	80042e6 <_printf_float+0xb6>
 80044d2:	f04f 0a00 	mov.w	sl, #0
 80044d6:	f104 0b1a 	add.w	fp, r4, #26
 80044da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044dc:	425b      	negs	r3, r3
 80044de:	4553      	cmp	r3, sl
 80044e0:	dc01      	bgt.n	80044e6 <_printf_float+0x2b6>
 80044e2:	464b      	mov	r3, r9
 80044e4:	e793      	b.n	800440e <_printf_float+0x1de>
 80044e6:	2301      	movs	r3, #1
 80044e8:	465a      	mov	r2, fp
 80044ea:	4631      	mov	r1, r6
 80044ec:	4628      	mov	r0, r5
 80044ee:	47b8      	blx	r7
 80044f0:	3001      	adds	r0, #1
 80044f2:	f43f aef8 	beq.w	80042e6 <_printf_float+0xb6>
 80044f6:	f10a 0a01 	add.w	sl, sl, #1
 80044fa:	e7ee      	b.n	80044da <_printf_float+0x2aa>
 80044fc:	7fefffff 	.word	0x7fefffff
 8004500:	08006eae 	.word	0x08006eae
 8004504:	08006eb2 	.word	0x08006eb2
 8004508:	08006eb6 	.word	0x08006eb6
 800450c:	08006eba 	.word	0x08006eba
 8004510:	08006ebe 	.word	0x08006ebe
 8004514:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004516:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800451a:	4553      	cmp	r3, sl
 800451c:	bfa8      	it	ge
 800451e:	4653      	movge	r3, sl
 8004520:	2b00      	cmp	r3, #0
 8004522:	4699      	mov	r9, r3
 8004524:	dc36      	bgt.n	8004594 <_printf_float+0x364>
 8004526:	f04f 0b00 	mov.w	fp, #0
 800452a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800452e:	f104 021a 	add.w	r2, r4, #26
 8004532:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004534:	930a      	str	r3, [sp, #40]	@ 0x28
 8004536:	eba3 0309 	sub.w	r3, r3, r9
 800453a:	455b      	cmp	r3, fp
 800453c:	dc31      	bgt.n	80045a2 <_printf_float+0x372>
 800453e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004540:	459a      	cmp	sl, r3
 8004542:	dc3a      	bgt.n	80045ba <_printf_float+0x38a>
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	07da      	lsls	r2, r3, #31
 8004548:	d437      	bmi.n	80045ba <_printf_float+0x38a>
 800454a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800454c:	ebaa 0903 	sub.w	r9, sl, r3
 8004550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004552:	ebaa 0303 	sub.w	r3, sl, r3
 8004556:	4599      	cmp	r9, r3
 8004558:	bfa8      	it	ge
 800455a:	4699      	movge	r9, r3
 800455c:	f1b9 0f00 	cmp.w	r9, #0
 8004560:	dc33      	bgt.n	80045ca <_printf_float+0x39a>
 8004562:	f04f 0800 	mov.w	r8, #0
 8004566:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800456a:	f104 0b1a 	add.w	fp, r4, #26
 800456e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004570:	ebaa 0303 	sub.w	r3, sl, r3
 8004574:	eba3 0309 	sub.w	r3, r3, r9
 8004578:	4543      	cmp	r3, r8
 800457a:	f77f af7a 	ble.w	8004472 <_printf_float+0x242>
 800457e:	2301      	movs	r3, #1
 8004580:	465a      	mov	r2, fp
 8004582:	4631      	mov	r1, r6
 8004584:	4628      	mov	r0, r5
 8004586:	47b8      	blx	r7
 8004588:	3001      	adds	r0, #1
 800458a:	f43f aeac 	beq.w	80042e6 <_printf_float+0xb6>
 800458e:	f108 0801 	add.w	r8, r8, #1
 8004592:	e7ec      	b.n	800456e <_printf_float+0x33e>
 8004594:	4642      	mov	r2, r8
 8004596:	4631      	mov	r1, r6
 8004598:	4628      	mov	r0, r5
 800459a:	47b8      	blx	r7
 800459c:	3001      	adds	r0, #1
 800459e:	d1c2      	bne.n	8004526 <_printf_float+0x2f6>
 80045a0:	e6a1      	b.n	80042e6 <_printf_float+0xb6>
 80045a2:	2301      	movs	r3, #1
 80045a4:	4631      	mov	r1, r6
 80045a6:	4628      	mov	r0, r5
 80045a8:	920a      	str	r2, [sp, #40]	@ 0x28
 80045aa:	47b8      	blx	r7
 80045ac:	3001      	adds	r0, #1
 80045ae:	f43f ae9a 	beq.w	80042e6 <_printf_float+0xb6>
 80045b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80045b4:	f10b 0b01 	add.w	fp, fp, #1
 80045b8:	e7bb      	b.n	8004532 <_printf_float+0x302>
 80045ba:	4631      	mov	r1, r6
 80045bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045c0:	4628      	mov	r0, r5
 80045c2:	47b8      	blx	r7
 80045c4:	3001      	adds	r0, #1
 80045c6:	d1c0      	bne.n	800454a <_printf_float+0x31a>
 80045c8:	e68d      	b.n	80042e6 <_printf_float+0xb6>
 80045ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80045cc:	464b      	mov	r3, r9
 80045ce:	4631      	mov	r1, r6
 80045d0:	4628      	mov	r0, r5
 80045d2:	4442      	add	r2, r8
 80045d4:	47b8      	blx	r7
 80045d6:	3001      	adds	r0, #1
 80045d8:	d1c3      	bne.n	8004562 <_printf_float+0x332>
 80045da:	e684      	b.n	80042e6 <_printf_float+0xb6>
 80045dc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80045e0:	f1ba 0f01 	cmp.w	sl, #1
 80045e4:	dc01      	bgt.n	80045ea <_printf_float+0x3ba>
 80045e6:	07db      	lsls	r3, r3, #31
 80045e8:	d536      	bpl.n	8004658 <_printf_float+0x428>
 80045ea:	2301      	movs	r3, #1
 80045ec:	4642      	mov	r2, r8
 80045ee:	4631      	mov	r1, r6
 80045f0:	4628      	mov	r0, r5
 80045f2:	47b8      	blx	r7
 80045f4:	3001      	adds	r0, #1
 80045f6:	f43f ae76 	beq.w	80042e6 <_printf_float+0xb6>
 80045fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045fe:	4631      	mov	r1, r6
 8004600:	4628      	mov	r0, r5
 8004602:	47b8      	blx	r7
 8004604:	3001      	adds	r0, #1
 8004606:	f43f ae6e 	beq.w	80042e6 <_printf_float+0xb6>
 800460a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800460e:	2200      	movs	r2, #0
 8004610:	2300      	movs	r3, #0
 8004612:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004616:	f7fc f9c7 	bl	80009a8 <__aeabi_dcmpeq>
 800461a:	b9c0      	cbnz	r0, 800464e <_printf_float+0x41e>
 800461c:	4653      	mov	r3, sl
 800461e:	f108 0201 	add.w	r2, r8, #1
 8004622:	4631      	mov	r1, r6
 8004624:	4628      	mov	r0, r5
 8004626:	47b8      	blx	r7
 8004628:	3001      	adds	r0, #1
 800462a:	d10c      	bne.n	8004646 <_printf_float+0x416>
 800462c:	e65b      	b.n	80042e6 <_printf_float+0xb6>
 800462e:	2301      	movs	r3, #1
 8004630:	465a      	mov	r2, fp
 8004632:	4631      	mov	r1, r6
 8004634:	4628      	mov	r0, r5
 8004636:	47b8      	blx	r7
 8004638:	3001      	adds	r0, #1
 800463a:	f43f ae54 	beq.w	80042e6 <_printf_float+0xb6>
 800463e:	f108 0801 	add.w	r8, r8, #1
 8004642:	45d0      	cmp	r8, sl
 8004644:	dbf3      	blt.n	800462e <_printf_float+0x3fe>
 8004646:	464b      	mov	r3, r9
 8004648:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800464c:	e6e0      	b.n	8004410 <_printf_float+0x1e0>
 800464e:	f04f 0800 	mov.w	r8, #0
 8004652:	f104 0b1a 	add.w	fp, r4, #26
 8004656:	e7f4      	b.n	8004642 <_printf_float+0x412>
 8004658:	2301      	movs	r3, #1
 800465a:	4642      	mov	r2, r8
 800465c:	e7e1      	b.n	8004622 <_printf_float+0x3f2>
 800465e:	2301      	movs	r3, #1
 8004660:	464a      	mov	r2, r9
 8004662:	4631      	mov	r1, r6
 8004664:	4628      	mov	r0, r5
 8004666:	47b8      	blx	r7
 8004668:	3001      	adds	r0, #1
 800466a:	f43f ae3c 	beq.w	80042e6 <_printf_float+0xb6>
 800466e:	f108 0801 	add.w	r8, r8, #1
 8004672:	68e3      	ldr	r3, [r4, #12]
 8004674:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004676:	1a5b      	subs	r3, r3, r1
 8004678:	4543      	cmp	r3, r8
 800467a:	dcf0      	bgt.n	800465e <_printf_float+0x42e>
 800467c:	e6fd      	b.n	800447a <_printf_float+0x24a>
 800467e:	f04f 0800 	mov.w	r8, #0
 8004682:	f104 0919 	add.w	r9, r4, #25
 8004686:	e7f4      	b.n	8004672 <_printf_float+0x442>

08004688 <_printf_common>:
 8004688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800468c:	4616      	mov	r6, r2
 800468e:	4698      	mov	r8, r3
 8004690:	688a      	ldr	r2, [r1, #8]
 8004692:	690b      	ldr	r3, [r1, #16]
 8004694:	4607      	mov	r7, r0
 8004696:	4293      	cmp	r3, r2
 8004698:	bfb8      	it	lt
 800469a:	4613      	movlt	r3, r2
 800469c:	6033      	str	r3, [r6, #0]
 800469e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046a2:	460c      	mov	r4, r1
 80046a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046a8:	b10a      	cbz	r2, 80046ae <_printf_common+0x26>
 80046aa:	3301      	adds	r3, #1
 80046ac:	6033      	str	r3, [r6, #0]
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	0699      	lsls	r1, r3, #26
 80046b2:	bf42      	ittt	mi
 80046b4:	6833      	ldrmi	r3, [r6, #0]
 80046b6:	3302      	addmi	r3, #2
 80046b8:	6033      	strmi	r3, [r6, #0]
 80046ba:	6825      	ldr	r5, [r4, #0]
 80046bc:	f015 0506 	ands.w	r5, r5, #6
 80046c0:	d106      	bne.n	80046d0 <_printf_common+0x48>
 80046c2:	f104 0a19 	add.w	sl, r4, #25
 80046c6:	68e3      	ldr	r3, [r4, #12]
 80046c8:	6832      	ldr	r2, [r6, #0]
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	42ab      	cmp	r3, r5
 80046ce:	dc2b      	bgt.n	8004728 <_printf_common+0xa0>
 80046d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046d4:	6822      	ldr	r2, [r4, #0]
 80046d6:	3b00      	subs	r3, #0
 80046d8:	bf18      	it	ne
 80046da:	2301      	movne	r3, #1
 80046dc:	0692      	lsls	r2, r2, #26
 80046de:	d430      	bmi.n	8004742 <_printf_common+0xba>
 80046e0:	4641      	mov	r1, r8
 80046e2:	4638      	mov	r0, r7
 80046e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046e8:	47c8      	blx	r9
 80046ea:	3001      	adds	r0, #1
 80046ec:	d023      	beq.n	8004736 <_printf_common+0xae>
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	6922      	ldr	r2, [r4, #16]
 80046f2:	f003 0306 	and.w	r3, r3, #6
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	bf14      	ite	ne
 80046fa:	2500      	movne	r5, #0
 80046fc:	6833      	ldreq	r3, [r6, #0]
 80046fe:	f04f 0600 	mov.w	r6, #0
 8004702:	bf08      	it	eq
 8004704:	68e5      	ldreq	r5, [r4, #12]
 8004706:	f104 041a 	add.w	r4, r4, #26
 800470a:	bf08      	it	eq
 800470c:	1aed      	subeq	r5, r5, r3
 800470e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004712:	bf08      	it	eq
 8004714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004718:	4293      	cmp	r3, r2
 800471a:	bfc4      	itt	gt
 800471c:	1a9b      	subgt	r3, r3, r2
 800471e:	18ed      	addgt	r5, r5, r3
 8004720:	42b5      	cmp	r5, r6
 8004722:	d11a      	bne.n	800475a <_printf_common+0xd2>
 8004724:	2000      	movs	r0, #0
 8004726:	e008      	b.n	800473a <_printf_common+0xb2>
 8004728:	2301      	movs	r3, #1
 800472a:	4652      	mov	r2, sl
 800472c:	4641      	mov	r1, r8
 800472e:	4638      	mov	r0, r7
 8004730:	47c8      	blx	r9
 8004732:	3001      	adds	r0, #1
 8004734:	d103      	bne.n	800473e <_printf_common+0xb6>
 8004736:	f04f 30ff 	mov.w	r0, #4294967295
 800473a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800473e:	3501      	adds	r5, #1
 8004740:	e7c1      	b.n	80046c6 <_printf_common+0x3e>
 8004742:	2030      	movs	r0, #48	@ 0x30
 8004744:	18e1      	adds	r1, r4, r3
 8004746:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004750:	4422      	add	r2, r4
 8004752:	3302      	adds	r3, #2
 8004754:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004758:	e7c2      	b.n	80046e0 <_printf_common+0x58>
 800475a:	2301      	movs	r3, #1
 800475c:	4622      	mov	r2, r4
 800475e:	4641      	mov	r1, r8
 8004760:	4638      	mov	r0, r7
 8004762:	47c8      	blx	r9
 8004764:	3001      	adds	r0, #1
 8004766:	d0e6      	beq.n	8004736 <_printf_common+0xae>
 8004768:	3601      	adds	r6, #1
 800476a:	e7d9      	b.n	8004720 <_printf_common+0x98>

0800476c <_printf_i>:
 800476c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004770:	7e0f      	ldrb	r7, [r1, #24]
 8004772:	4691      	mov	r9, r2
 8004774:	2f78      	cmp	r7, #120	@ 0x78
 8004776:	4680      	mov	r8, r0
 8004778:	460c      	mov	r4, r1
 800477a:	469a      	mov	sl, r3
 800477c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800477e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004782:	d807      	bhi.n	8004794 <_printf_i+0x28>
 8004784:	2f62      	cmp	r7, #98	@ 0x62
 8004786:	d80a      	bhi.n	800479e <_printf_i+0x32>
 8004788:	2f00      	cmp	r7, #0
 800478a:	f000 80d3 	beq.w	8004934 <_printf_i+0x1c8>
 800478e:	2f58      	cmp	r7, #88	@ 0x58
 8004790:	f000 80ba 	beq.w	8004908 <_printf_i+0x19c>
 8004794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004798:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800479c:	e03a      	b.n	8004814 <_printf_i+0xa8>
 800479e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047a2:	2b15      	cmp	r3, #21
 80047a4:	d8f6      	bhi.n	8004794 <_printf_i+0x28>
 80047a6:	a101      	add	r1, pc, #4	@ (adr r1, 80047ac <_printf_i+0x40>)
 80047a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047ac:	08004805 	.word	0x08004805
 80047b0:	08004819 	.word	0x08004819
 80047b4:	08004795 	.word	0x08004795
 80047b8:	08004795 	.word	0x08004795
 80047bc:	08004795 	.word	0x08004795
 80047c0:	08004795 	.word	0x08004795
 80047c4:	08004819 	.word	0x08004819
 80047c8:	08004795 	.word	0x08004795
 80047cc:	08004795 	.word	0x08004795
 80047d0:	08004795 	.word	0x08004795
 80047d4:	08004795 	.word	0x08004795
 80047d8:	0800491b 	.word	0x0800491b
 80047dc:	08004843 	.word	0x08004843
 80047e0:	080048d5 	.word	0x080048d5
 80047e4:	08004795 	.word	0x08004795
 80047e8:	08004795 	.word	0x08004795
 80047ec:	0800493d 	.word	0x0800493d
 80047f0:	08004795 	.word	0x08004795
 80047f4:	08004843 	.word	0x08004843
 80047f8:	08004795 	.word	0x08004795
 80047fc:	08004795 	.word	0x08004795
 8004800:	080048dd 	.word	0x080048dd
 8004804:	6833      	ldr	r3, [r6, #0]
 8004806:	1d1a      	adds	r2, r3, #4
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6032      	str	r2, [r6, #0]
 800480c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004810:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004814:	2301      	movs	r3, #1
 8004816:	e09e      	b.n	8004956 <_printf_i+0x1ea>
 8004818:	6833      	ldr	r3, [r6, #0]
 800481a:	6820      	ldr	r0, [r4, #0]
 800481c:	1d19      	adds	r1, r3, #4
 800481e:	6031      	str	r1, [r6, #0]
 8004820:	0606      	lsls	r6, r0, #24
 8004822:	d501      	bpl.n	8004828 <_printf_i+0xbc>
 8004824:	681d      	ldr	r5, [r3, #0]
 8004826:	e003      	b.n	8004830 <_printf_i+0xc4>
 8004828:	0645      	lsls	r5, r0, #25
 800482a:	d5fb      	bpl.n	8004824 <_printf_i+0xb8>
 800482c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004830:	2d00      	cmp	r5, #0
 8004832:	da03      	bge.n	800483c <_printf_i+0xd0>
 8004834:	232d      	movs	r3, #45	@ 0x2d
 8004836:	426d      	negs	r5, r5
 8004838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800483c:	230a      	movs	r3, #10
 800483e:	4859      	ldr	r0, [pc, #356]	@ (80049a4 <_printf_i+0x238>)
 8004840:	e011      	b.n	8004866 <_printf_i+0xfa>
 8004842:	6821      	ldr	r1, [r4, #0]
 8004844:	6833      	ldr	r3, [r6, #0]
 8004846:	0608      	lsls	r0, r1, #24
 8004848:	f853 5b04 	ldr.w	r5, [r3], #4
 800484c:	d402      	bmi.n	8004854 <_printf_i+0xe8>
 800484e:	0649      	lsls	r1, r1, #25
 8004850:	bf48      	it	mi
 8004852:	b2ad      	uxthmi	r5, r5
 8004854:	2f6f      	cmp	r7, #111	@ 0x6f
 8004856:	6033      	str	r3, [r6, #0]
 8004858:	bf14      	ite	ne
 800485a:	230a      	movne	r3, #10
 800485c:	2308      	moveq	r3, #8
 800485e:	4851      	ldr	r0, [pc, #324]	@ (80049a4 <_printf_i+0x238>)
 8004860:	2100      	movs	r1, #0
 8004862:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004866:	6866      	ldr	r6, [r4, #4]
 8004868:	2e00      	cmp	r6, #0
 800486a:	bfa8      	it	ge
 800486c:	6821      	ldrge	r1, [r4, #0]
 800486e:	60a6      	str	r6, [r4, #8]
 8004870:	bfa4      	itt	ge
 8004872:	f021 0104 	bicge.w	r1, r1, #4
 8004876:	6021      	strge	r1, [r4, #0]
 8004878:	b90d      	cbnz	r5, 800487e <_printf_i+0x112>
 800487a:	2e00      	cmp	r6, #0
 800487c:	d04b      	beq.n	8004916 <_printf_i+0x1aa>
 800487e:	4616      	mov	r6, r2
 8004880:	fbb5 f1f3 	udiv	r1, r5, r3
 8004884:	fb03 5711 	mls	r7, r3, r1, r5
 8004888:	5dc7      	ldrb	r7, [r0, r7]
 800488a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800488e:	462f      	mov	r7, r5
 8004890:	42bb      	cmp	r3, r7
 8004892:	460d      	mov	r5, r1
 8004894:	d9f4      	bls.n	8004880 <_printf_i+0x114>
 8004896:	2b08      	cmp	r3, #8
 8004898:	d10b      	bne.n	80048b2 <_printf_i+0x146>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	07df      	lsls	r7, r3, #31
 800489e:	d508      	bpl.n	80048b2 <_printf_i+0x146>
 80048a0:	6923      	ldr	r3, [r4, #16]
 80048a2:	6861      	ldr	r1, [r4, #4]
 80048a4:	4299      	cmp	r1, r3
 80048a6:	bfde      	ittt	le
 80048a8:	2330      	movle	r3, #48	@ 0x30
 80048aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048b2:	1b92      	subs	r2, r2, r6
 80048b4:	6122      	str	r2, [r4, #16]
 80048b6:	464b      	mov	r3, r9
 80048b8:	4621      	mov	r1, r4
 80048ba:	4640      	mov	r0, r8
 80048bc:	f8cd a000 	str.w	sl, [sp]
 80048c0:	aa03      	add	r2, sp, #12
 80048c2:	f7ff fee1 	bl	8004688 <_printf_common>
 80048c6:	3001      	adds	r0, #1
 80048c8:	d14a      	bne.n	8004960 <_printf_i+0x1f4>
 80048ca:	f04f 30ff 	mov.w	r0, #4294967295
 80048ce:	b004      	add	sp, #16
 80048d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	f043 0320 	orr.w	r3, r3, #32
 80048da:	6023      	str	r3, [r4, #0]
 80048dc:	2778      	movs	r7, #120	@ 0x78
 80048de:	4832      	ldr	r0, [pc, #200]	@ (80049a8 <_printf_i+0x23c>)
 80048e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	6831      	ldr	r1, [r6, #0]
 80048e8:	061f      	lsls	r7, r3, #24
 80048ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80048ee:	d402      	bmi.n	80048f6 <_printf_i+0x18a>
 80048f0:	065f      	lsls	r7, r3, #25
 80048f2:	bf48      	it	mi
 80048f4:	b2ad      	uxthmi	r5, r5
 80048f6:	6031      	str	r1, [r6, #0]
 80048f8:	07d9      	lsls	r1, r3, #31
 80048fa:	bf44      	itt	mi
 80048fc:	f043 0320 	orrmi.w	r3, r3, #32
 8004900:	6023      	strmi	r3, [r4, #0]
 8004902:	b11d      	cbz	r5, 800490c <_printf_i+0x1a0>
 8004904:	2310      	movs	r3, #16
 8004906:	e7ab      	b.n	8004860 <_printf_i+0xf4>
 8004908:	4826      	ldr	r0, [pc, #152]	@ (80049a4 <_printf_i+0x238>)
 800490a:	e7e9      	b.n	80048e0 <_printf_i+0x174>
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	f023 0320 	bic.w	r3, r3, #32
 8004912:	6023      	str	r3, [r4, #0]
 8004914:	e7f6      	b.n	8004904 <_printf_i+0x198>
 8004916:	4616      	mov	r6, r2
 8004918:	e7bd      	b.n	8004896 <_printf_i+0x12a>
 800491a:	6833      	ldr	r3, [r6, #0]
 800491c:	6825      	ldr	r5, [r4, #0]
 800491e:	1d18      	adds	r0, r3, #4
 8004920:	6961      	ldr	r1, [r4, #20]
 8004922:	6030      	str	r0, [r6, #0]
 8004924:	062e      	lsls	r6, r5, #24
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	d501      	bpl.n	800492e <_printf_i+0x1c2>
 800492a:	6019      	str	r1, [r3, #0]
 800492c:	e002      	b.n	8004934 <_printf_i+0x1c8>
 800492e:	0668      	lsls	r0, r5, #25
 8004930:	d5fb      	bpl.n	800492a <_printf_i+0x1be>
 8004932:	8019      	strh	r1, [r3, #0]
 8004934:	2300      	movs	r3, #0
 8004936:	4616      	mov	r6, r2
 8004938:	6123      	str	r3, [r4, #16]
 800493a:	e7bc      	b.n	80048b6 <_printf_i+0x14a>
 800493c:	6833      	ldr	r3, [r6, #0]
 800493e:	2100      	movs	r1, #0
 8004940:	1d1a      	adds	r2, r3, #4
 8004942:	6032      	str	r2, [r6, #0]
 8004944:	681e      	ldr	r6, [r3, #0]
 8004946:	6862      	ldr	r2, [r4, #4]
 8004948:	4630      	mov	r0, r6
 800494a:	f000 f9e8 	bl	8004d1e <memchr>
 800494e:	b108      	cbz	r0, 8004954 <_printf_i+0x1e8>
 8004950:	1b80      	subs	r0, r0, r6
 8004952:	6060      	str	r0, [r4, #4]
 8004954:	6863      	ldr	r3, [r4, #4]
 8004956:	6123      	str	r3, [r4, #16]
 8004958:	2300      	movs	r3, #0
 800495a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800495e:	e7aa      	b.n	80048b6 <_printf_i+0x14a>
 8004960:	4632      	mov	r2, r6
 8004962:	4649      	mov	r1, r9
 8004964:	4640      	mov	r0, r8
 8004966:	6923      	ldr	r3, [r4, #16]
 8004968:	47d0      	blx	sl
 800496a:	3001      	adds	r0, #1
 800496c:	d0ad      	beq.n	80048ca <_printf_i+0x15e>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	079b      	lsls	r3, r3, #30
 8004972:	d413      	bmi.n	800499c <_printf_i+0x230>
 8004974:	68e0      	ldr	r0, [r4, #12]
 8004976:	9b03      	ldr	r3, [sp, #12]
 8004978:	4298      	cmp	r0, r3
 800497a:	bfb8      	it	lt
 800497c:	4618      	movlt	r0, r3
 800497e:	e7a6      	b.n	80048ce <_printf_i+0x162>
 8004980:	2301      	movs	r3, #1
 8004982:	4632      	mov	r2, r6
 8004984:	4649      	mov	r1, r9
 8004986:	4640      	mov	r0, r8
 8004988:	47d0      	blx	sl
 800498a:	3001      	adds	r0, #1
 800498c:	d09d      	beq.n	80048ca <_printf_i+0x15e>
 800498e:	3501      	adds	r5, #1
 8004990:	68e3      	ldr	r3, [r4, #12]
 8004992:	9903      	ldr	r1, [sp, #12]
 8004994:	1a5b      	subs	r3, r3, r1
 8004996:	42ab      	cmp	r3, r5
 8004998:	dcf2      	bgt.n	8004980 <_printf_i+0x214>
 800499a:	e7eb      	b.n	8004974 <_printf_i+0x208>
 800499c:	2500      	movs	r5, #0
 800499e:	f104 0619 	add.w	r6, r4, #25
 80049a2:	e7f5      	b.n	8004990 <_printf_i+0x224>
 80049a4:	08006ec0 	.word	0x08006ec0
 80049a8:	08006ed1 	.word	0x08006ed1

080049ac <std>:
 80049ac:	2300      	movs	r3, #0
 80049ae:	b510      	push	{r4, lr}
 80049b0:	4604      	mov	r4, r0
 80049b2:	e9c0 3300 	strd	r3, r3, [r0]
 80049b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049ba:	6083      	str	r3, [r0, #8]
 80049bc:	8181      	strh	r1, [r0, #12]
 80049be:	6643      	str	r3, [r0, #100]	@ 0x64
 80049c0:	81c2      	strh	r2, [r0, #14]
 80049c2:	6183      	str	r3, [r0, #24]
 80049c4:	4619      	mov	r1, r3
 80049c6:	2208      	movs	r2, #8
 80049c8:	305c      	adds	r0, #92	@ 0x5c
 80049ca:	f000 f928 	bl	8004c1e <memset>
 80049ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004a04 <std+0x58>)
 80049d0:	6224      	str	r4, [r4, #32]
 80049d2:	6263      	str	r3, [r4, #36]	@ 0x24
 80049d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a08 <std+0x5c>)
 80049d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80049d8:	4b0c      	ldr	r3, [pc, #48]	@ (8004a0c <std+0x60>)
 80049da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80049dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a10 <std+0x64>)
 80049de:	6323      	str	r3, [r4, #48]	@ 0x30
 80049e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004a14 <std+0x68>)
 80049e2:	429c      	cmp	r4, r3
 80049e4:	d006      	beq.n	80049f4 <std+0x48>
 80049e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80049ea:	4294      	cmp	r4, r2
 80049ec:	d002      	beq.n	80049f4 <std+0x48>
 80049ee:	33d0      	adds	r3, #208	@ 0xd0
 80049f0:	429c      	cmp	r4, r3
 80049f2:	d105      	bne.n	8004a00 <std+0x54>
 80049f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80049f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049fc:	f000 b98c 	b.w	8004d18 <__retarget_lock_init_recursive>
 8004a00:	bd10      	pop	{r4, pc}
 8004a02:	bf00      	nop
 8004a04:	08004b99 	.word	0x08004b99
 8004a08:	08004bbb 	.word	0x08004bbb
 8004a0c:	08004bf3 	.word	0x08004bf3
 8004a10:	08004c17 	.word	0x08004c17
 8004a14:	200003c8 	.word	0x200003c8

08004a18 <stdio_exit_handler>:
 8004a18:	4a02      	ldr	r2, [pc, #8]	@ (8004a24 <stdio_exit_handler+0xc>)
 8004a1a:	4903      	ldr	r1, [pc, #12]	@ (8004a28 <stdio_exit_handler+0x10>)
 8004a1c:	4803      	ldr	r0, [pc, #12]	@ (8004a2c <stdio_exit_handler+0x14>)
 8004a1e:	f000 b869 	b.w	8004af4 <_fwalk_sglue>
 8004a22:	bf00      	nop
 8004a24:	2000005c 	.word	0x2000005c
 8004a28:	0800668d 	.word	0x0800668d
 8004a2c:	2000006c 	.word	0x2000006c

08004a30 <cleanup_stdio>:
 8004a30:	6841      	ldr	r1, [r0, #4]
 8004a32:	4b0c      	ldr	r3, [pc, #48]	@ (8004a64 <cleanup_stdio+0x34>)
 8004a34:	b510      	push	{r4, lr}
 8004a36:	4299      	cmp	r1, r3
 8004a38:	4604      	mov	r4, r0
 8004a3a:	d001      	beq.n	8004a40 <cleanup_stdio+0x10>
 8004a3c:	f001 fe26 	bl	800668c <_fflush_r>
 8004a40:	68a1      	ldr	r1, [r4, #8]
 8004a42:	4b09      	ldr	r3, [pc, #36]	@ (8004a68 <cleanup_stdio+0x38>)
 8004a44:	4299      	cmp	r1, r3
 8004a46:	d002      	beq.n	8004a4e <cleanup_stdio+0x1e>
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f001 fe1f 	bl	800668c <_fflush_r>
 8004a4e:	68e1      	ldr	r1, [r4, #12]
 8004a50:	4b06      	ldr	r3, [pc, #24]	@ (8004a6c <cleanup_stdio+0x3c>)
 8004a52:	4299      	cmp	r1, r3
 8004a54:	d004      	beq.n	8004a60 <cleanup_stdio+0x30>
 8004a56:	4620      	mov	r0, r4
 8004a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a5c:	f001 be16 	b.w	800668c <_fflush_r>
 8004a60:	bd10      	pop	{r4, pc}
 8004a62:	bf00      	nop
 8004a64:	200003c8 	.word	0x200003c8
 8004a68:	20000430 	.word	0x20000430
 8004a6c:	20000498 	.word	0x20000498

08004a70 <global_stdio_init.part.0>:
 8004a70:	b510      	push	{r4, lr}
 8004a72:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa0 <global_stdio_init.part.0+0x30>)
 8004a74:	4c0b      	ldr	r4, [pc, #44]	@ (8004aa4 <global_stdio_init.part.0+0x34>)
 8004a76:	4a0c      	ldr	r2, [pc, #48]	@ (8004aa8 <global_stdio_init.part.0+0x38>)
 8004a78:	4620      	mov	r0, r4
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	2104      	movs	r1, #4
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f7ff ff94 	bl	80049ac <std>
 8004a84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004a88:	2201      	movs	r2, #1
 8004a8a:	2109      	movs	r1, #9
 8004a8c:	f7ff ff8e 	bl	80049ac <std>
 8004a90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004a94:	2202      	movs	r2, #2
 8004a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a9a:	2112      	movs	r1, #18
 8004a9c:	f7ff bf86 	b.w	80049ac <std>
 8004aa0:	20000500 	.word	0x20000500
 8004aa4:	200003c8 	.word	0x200003c8
 8004aa8:	08004a19 	.word	0x08004a19

08004aac <__sfp_lock_acquire>:
 8004aac:	4801      	ldr	r0, [pc, #4]	@ (8004ab4 <__sfp_lock_acquire+0x8>)
 8004aae:	f000 b934 	b.w	8004d1a <__retarget_lock_acquire_recursive>
 8004ab2:	bf00      	nop
 8004ab4:	20000509 	.word	0x20000509

08004ab8 <__sfp_lock_release>:
 8004ab8:	4801      	ldr	r0, [pc, #4]	@ (8004ac0 <__sfp_lock_release+0x8>)
 8004aba:	f000 b92f 	b.w	8004d1c <__retarget_lock_release_recursive>
 8004abe:	bf00      	nop
 8004ac0:	20000509 	.word	0x20000509

08004ac4 <__sinit>:
 8004ac4:	b510      	push	{r4, lr}
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	f7ff fff0 	bl	8004aac <__sfp_lock_acquire>
 8004acc:	6a23      	ldr	r3, [r4, #32]
 8004ace:	b11b      	cbz	r3, 8004ad8 <__sinit+0x14>
 8004ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ad4:	f7ff bff0 	b.w	8004ab8 <__sfp_lock_release>
 8004ad8:	4b04      	ldr	r3, [pc, #16]	@ (8004aec <__sinit+0x28>)
 8004ada:	6223      	str	r3, [r4, #32]
 8004adc:	4b04      	ldr	r3, [pc, #16]	@ (8004af0 <__sinit+0x2c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f5      	bne.n	8004ad0 <__sinit+0xc>
 8004ae4:	f7ff ffc4 	bl	8004a70 <global_stdio_init.part.0>
 8004ae8:	e7f2      	b.n	8004ad0 <__sinit+0xc>
 8004aea:	bf00      	nop
 8004aec:	08004a31 	.word	0x08004a31
 8004af0:	20000500 	.word	0x20000500

08004af4 <_fwalk_sglue>:
 8004af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004af8:	4607      	mov	r7, r0
 8004afa:	4688      	mov	r8, r1
 8004afc:	4614      	mov	r4, r2
 8004afe:	2600      	movs	r6, #0
 8004b00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b04:	f1b9 0901 	subs.w	r9, r9, #1
 8004b08:	d505      	bpl.n	8004b16 <_fwalk_sglue+0x22>
 8004b0a:	6824      	ldr	r4, [r4, #0]
 8004b0c:	2c00      	cmp	r4, #0
 8004b0e:	d1f7      	bne.n	8004b00 <_fwalk_sglue+0xc>
 8004b10:	4630      	mov	r0, r6
 8004b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b16:	89ab      	ldrh	r3, [r5, #12]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d907      	bls.n	8004b2c <_fwalk_sglue+0x38>
 8004b1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b20:	3301      	adds	r3, #1
 8004b22:	d003      	beq.n	8004b2c <_fwalk_sglue+0x38>
 8004b24:	4629      	mov	r1, r5
 8004b26:	4638      	mov	r0, r7
 8004b28:	47c0      	blx	r8
 8004b2a:	4306      	orrs	r6, r0
 8004b2c:	3568      	adds	r5, #104	@ 0x68
 8004b2e:	e7e9      	b.n	8004b04 <_fwalk_sglue+0x10>

08004b30 <sniprintf>:
 8004b30:	b40c      	push	{r2, r3}
 8004b32:	b530      	push	{r4, r5, lr}
 8004b34:	4b17      	ldr	r3, [pc, #92]	@ (8004b94 <sniprintf+0x64>)
 8004b36:	1e0c      	subs	r4, r1, #0
 8004b38:	681d      	ldr	r5, [r3, #0]
 8004b3a:	b09d      	sub	sp, #116	@ 0x74
 8004b3c:	da08      	bge.n	8004b50 <sniprintf+0x20>
 8004b3e:	238b      	movs	r3, #139	@ 0x8b
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295
 8004b44:	602b      	str	r3, [r5, #0]
 8004b46:	b01d      	add	sp, #116	@ 0x74
 8004b48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b4c:	b002      	add	sp, #8
 8004b4e:	4770      	bx	lr
 8004b50:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004b54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004b58:	bf0c      	ite	eq
 8004b5a:	4623      	moveq	r3, r4
 8004b5c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004b60:	9304      	str	r3, [sp, #16]
 8004b62:	9307      	str	r3, [sp, #28]
 8004b64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b68:	9002      	str	r0, [sp, #8]
 8004b6a:	9006      	str	r0, [sp, #24]
 8004b6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b70:	4628      	mov	r0, r5
 8004b72:	ab21      	add	r3, sp, #132	@ 0x84
 8004b74:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004b76:	a902      	add	r1, sp, #8
 8004b78:	9301      	str	r3, [sp, #4]
 8004b7a:	f001 fc0b 	bl	8006394 <_svfiprintf_r>
 8004b7e:	1c43      	adds	r3, r0, #1
 8004b80:	bfbc      	itt	lt
 8004b82:	238b      	movlt	r3, #139	@ 0x8b
 8004b84:	602b      	strlt	r3, [r5, #0]
 8004b86:	2c00      	cmp	r4, #0
 8004b88:	d0dd      	beq.n	8004b46 <sniprintf+0x16>
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	9b02      	ldr	r3, [sp, #8]
 8004b8e:	701a      	strb	r2, [r3, #0]
 8004b90:	e7d9      	b.n	8004b46 <sniprintf+0x16>
 8004b92:	bf00      	nop
 8004b94:	20000068 	.word	0x20000068

08004b98 <__sread>:
 8004b98:	b510      	push	{r4, lr}
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba0:	f000 f86c 	bl	8004c7c <_read_r>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	bfab      	itete	ge
 8004ba8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004baa:	89a3      	ldrhlt	r3, [r4, #12]
 8004bac:	181b      	addge	r3, r3, r0
 8004bae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004bb2:	bfac      	ite	ge
 8004bb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004bb6:	81a3      	strhlt	r3, [r4, #12]
 8004bb8:	bd10      	pop	{r4, pc}

08004bba <__swrite>:
 8004bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bbe:	461f      	mov	r7, r3
 8004bc0:	898b      	ldrh	r3, [r1, #12]
 8004bc2:	4605      	mov	r5, r0
 8004bc4:	05db      	lsls	r3, r3, #23
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	4616      	mov	r6, r2
 8004bca:	d505      	bpl.n	8004bd8 <__swrite+0x1e>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd4:	f000 f840 	bl	8004c58 <_lseek_r>
 8004bd8:	89a3      	ldrh	r3, [r4, #12]
 8004bda:	4632      	mov	r2, r6
 8004bdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004be0:	81a3      	strh	r3, [r4, #12]
 8004be2:	4628      	mov	r0, r5
 8004be4:	463b      	mov	r3, r7
 8004be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bee:	f000 b857 	b.w	8004ca0 <_write_r>

08004bf2 <__sseek>:
 8004bf2:	b510      	push	{r4, lr}
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bfa:	f000 f82d 	bl	8004c58 <_lseek_r>
 8004bfe:	1c43      	adds	r3, r0, #1
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	bf15      	itete	ne
 8004c04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c0e:	81a3      	strheq	r3, [r4, #12]
 8004c10:	bf18      	it	ne
 8004c12:	81a3      	strhne	r3, [r4, #12]
 8004c14:	bd10      	pop	{r4, pc}

08004c16 <__sclose>:
 8004c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c1a:	f000 b80d 	b.w	8004c38 <_close_r>

08004c1e <memset>:
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4402      	add	r2, r0
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d100      	bne.n	8004c28 <memset+0xa>
 8004c26:	4770      	bx	lr
 8004c28:	f803 1b01 	strb.w	r1, [r3], #1
 8004c2c:	e7f9      	b.n	8004c22 <memset+0x4>
	...

08004c30 <_localeconv_r>:
 8004c30:	4800      	ldr	r0, [pc, #0]	@ (8004c34 <_localeconv_r+0x4>)
 8004c32:	4770      	bx	lr
 8004c34:	200001a8 	.word	0x200001a8

08004c38 <_close_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	4d05      	ldr	r5, [pc, #20]	@ (8004c54 <_close_r+0x1c>)
 8004c3e:	4604      	mov	r4, r0
 8004c40:	4608      	mov	r0, r1
 8004c42:	602b      	str	r3, [r5, #0]
 8004c44:	f7fd fc0d 	bl	8002462 <_close>
 8004c48:	1c43      	adds	r3, r0, #1
 8004c4a:	d102      	bne.n	8004c52 <_close_r+0x1a>
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	b103      	cbz	r3, 8004c52 <_close_r+0x1a>
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	bd38      	pop	{r3, r4, r5, pc}
 8004c54:	20000504 	.word	0x20000504

08004c58 <_lseek_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	4611      	mov	r1, r2
 8004c60:	2200      	movs	r2, #0
 8004c62:	4d05      	ldr	r5, [pc, #20]	@ (8004c78 <_lseek_r+0x20>)
 8004c64:	602a      	str	r2, [r5, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f7fd fc1f 	bl	80024aa <_lseek>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	d102      	bne.n	8004c76 <_lseek_r+0x1e>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	b103      	cbz	r3, 8004c76 <_lseek_r+0x1e>
 8004c74:	6023      	str	r3, [r4, #0]
 8004c76:	bd38      	pop	{r3, r4, r5, pc}
 8004c78:	20000504 	.word	0x20000504

08004c7c <_read_r>:
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	4611      	mov	r1, r2
 8004c84:	2200      	movs	r2, #0
 8004c86:	4d05      	ldr	r5, [pc, #20]	@ (8004c9c <_read_r+0x20>)
 8004c88:	602a      	str	r2, [r5, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f7fd fbb0 	bl	80023f0 <_read>
 8004c90:	1c43      	adds	r3, r0, #1
 8004c92:	d102      	bne.n	8004c9a <_read_r+0x1e>
 8004c94:	682b      	ldr	r3, [r5, #0]
 8004c96:	b103      	cbz	r3, 8004c9a <_read_r+0x1e>
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	bd38      	pop	{r3, r4, r5, pc}
 8004c9c:	20000504 	.word	0x20000504

08004ca0 <_write_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	2200      	movs	r2, #0
 8004caa:	4d05      	ldr	r5, [pc, #20]	@ (8004cc0 <_write_r+0x20>)
 8004cac:	602a      	str	r2, [r5, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f7fd fbbb 	bl	800242a <_write>
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	d102      	bne.n	8004cbe <_write_r+0x1e>
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	b103      	cbz	r3, 8004cbe <_write_r+0x1e>
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	bd38      	pop	{r3, r4, r5, pc}
 8004cc0:	20000504 	.word	0x20000504

08004cc4 <__errno>:
 8004cc4:	4b01      	ldr	r3, [pc, #4]	@ (8004ccc <__errno+0x8>)
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20000068 	.word	0x20000068

08004cd0 <__libc_init_array>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	4d0c      	ldr	r5, [pc, #48]	@ (8004d08 <__libc_init_array+0x38>)
 8004cd6:	4c0d      	ldr	r4, [pc, #52]	@ (8004d0c <__libc_init_array+0x3c>)
 8004cd8:	1b64      	subs	r4, r4, r5
 8004cda:	10a4      	asrs	r4, r4, #2
 8004cdc:	42a6      	cmp	r6, r4
 8004cde:	d109      	bne.n	8004cf4 <__libc_init_array+0x24>
 8004ce0:	f002 f870 	bl	8006dc4 <_init>
 8004ce4:	2600      	movs	r6, #0
 8004ce6:	4d0a      	ldr	r5, [pc, #40]	@ (8004d10 <__libc_init_array+0x40>)
 8004ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8004d14 <__libc_init_array+0x44>)
 8004cea:	1b64      	subs	r4, r4, r5
 8004cec:	10a4      	asrs	r4, r4, #2
 8004cee:	42a6      	cmp	r6, r4
 8004cf0:	d105      	bne.n	8004cfe <__libc_init_array+0x2e>
 8004cf2:	bd70      	pop	{r4, r5, r6, pc}
 8004cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf8:	4798      	blx	r3
 8004cfa:	3601      	adds	r6, #1
 8004cfc:	e7ee      	b.n	8004cdc <__libc_init_array+0xc>
 8004cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d02:	4798      	blx	r3
 8004d04:	3601      	adds	r6, #1
 8004d06:	e7f2      	b.n	8004cee <__libc_init_array+0x1e>
 8004d08:	08007228 	.word	0x08007228
 8004d0c:	08007228 	.word	0x08007228
 8004d10:	08007228 	.word	0x08007228
 8004d14:	0800722c 	.word	0x0800722c

08004d18 <__retarget_lock_init_recursive>:
 8004d18:	4770      	bx	lr

08004d1a <__retarget_lock_acquire_recursive>:
 8004d1a:	4770      	bx	lr

08004d1c <__retarget_lock_release_recursive>:
 8004d1c:	4770      	bx	lr

08004d1e <memchr>:
 8004d1e:	4603      	mov	r3, r0
 8004d20:	b510      	push	{r4, lr}
 8004d22:	b2c9      	uxtb	r1, r1
 8004d24:	4402      	add	r2, r0
 8004d26:	4293      	cmp	r3, r2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	d101      	bne.n	8004d30 <memchr+0x12>
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	e003      	b.n	8004d38 <memchr+0x1a>
 8004d30:	7804      	ldrb	r4, [r0, #0]
 8004d32:	3301      	adds	r3, #1
 8004d34:	428c      	cmp	r4, r1
 8004d36:	d1f6      	bne.n	8004d26 <memchr+0x8>
 8004d38:	bd10      	pop	{r4, pc}

08004d3a <quorem>:
 8004d3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3e:	6903      	ldr	r3, [r0, #16]
 8004d40:	690c      	ldr	r4, [r1, #16]
 8004d42:	4607      	mov	r7, r0
 8004d44:	42a3      	cmp	r3, r4
 8004d46:	db7e      	blt.n	8004e46 <quorem+0x10c>
 8004d48:	3c01      	subs	r4, #1
 8004d4a:	00a3      	lsls	r3, r4, #2
 8004d4c:	f100 0514 	add.w	r5, r0, #20
 8004d50:	f101 0814 	add.w	r8, r1, #20
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d64:	3301      	adds	r3, #1
 8004d66:	429a      	cmp	r2, r3
 8004d68:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d70:	d32e      	bcc.n	8004dd0 <quorem+0x96>
 8004d72:	f04f 0a00 	mov.w	sl, #0
 8004d76:	46c4      	mov	ip, r8
 8004d78:	46ae      	mov	lr, r5
 8004d7a:	46d3      	mov	fp, sl
 8004d7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004d80:	b298      	uxth	r0, r3
 8004d82:	fb06 a000 	mla	r0, r6, r0, sl
 8004d86:	0c1b      	lsrs	r3, r3, #16
 8004d88:	0c02      	lsrs	r2, r0, #16
 8004d8a:	fb06 2303 	mla	r3, r6, r3, r2
 8004d8e:	f8de 2000 	ldr.w	r2, [lr]
 8004d92:	b280      	uxth	r0, r0
 8004d94:	b292      	uxth	r2, r2
 8004d96:	1a12      	subs	r2, r2, r0
 8004d98:	445a      	add	r2, fp
 8004d9a:	f8de 0000 	ldr.w	r0, [lr]
 8004d9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004da8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004dac:	b292      	uxth	r2, r2
 8004dae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004db2:	45e1      	cmp	r9, ip
 8004db4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004db8:	f84e 2b04 	str.w	r2, [lr], #4
 8004dbc:	d2de      	bcs.n	8004d7c <quorem+0x42>
 8004dbe:	9b00      	ldr	r3, [sp, #0]
 8004dc0:	58eb      	ldr	r3, [r5, r3]
 8004dc2:	b92b      	cbnz	r3, 8004dd0 <quorem+0x96>
 8004dc4:	9b01      	ldr	r3, [sp, #4]
 8004dc6:	3b04      	subs	r3, #4
 8004dc8:	429d      	cmp	r5, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	d32f      	bcc.n	8004e2e <quorem+0xf4>
 8004dce:	613c      	str	r4, [r7, #16]
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	f001 f97b 	bl	80060cc <__mcmp>
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	db25      	blt.n	8004e26 <quorem+0xec>
 8004dda:	4629      	mov	r1, r5
 8004ddc:	2000      	movs	r0, #0
 8004dde:	f858 2b04 	ldr.w	r2, [r8], #4
 8004de2:	f8d1 c000 	ldr.w	ip, [r1]
 8004de6:	fa1f fe82 	uxth.w	lr, r2
 8004dea:	fa1f f38c 	uxth.w	r3, ip
 8004dee:	eba3 030e 	sub.w	r3, r3, lr
 8004df2:	4403      	add	r3, r0
 8004df4:	0c12      	lsrs	r2, r2, #16
 8004df6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004dfa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e04:	45c1      	cmp	r9, r8
 8004e06:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004e0a:	f841 3b04 	str.w	r3, [r1], #4
 8004e0e:	d2e6      	bcs.n	8004dde <quorem+0xa4>
 8004e10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e18:	b922      	cbnz	r2, 8004e24 <quorem+0xea>
 8004e1a:	3b04      	subs	r3, #4
 8004e1c:	429d      	cmp	r5, r3
 8004e1e:	461a      	mov	r2, r3
 8004e20:	d30b      	bcc.n	8004e3a <quorem+0x100>
 8004e22:	613c      	str	r4, [r7, #16]
 8004e24:	3601      	adds	r6, #1
 8004e26:	4630      	mov	r0, r6
 8004e28:	b003      	add	sp, #12
 8004e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	3b04      	subs	r3, #4
 8004e32:	2a00      	cmp	r2, #0
 8004e34:	d1cb      	bne.n	8004dce <quorem+0x94>
 8004e36:	3c01      	subs	r4, #1
 8004e38:	e7c6      	b.n	8004dc8 <quorem+0x8e>
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	3b04      	subs	r3, #4
 8004e3e:	2a00      	cmp	r2, #0
 8004e40:	d1ef      	bne.n	8004e22 <quorem+0xe8>
 8004e42:	3c01      	subs	r4, #1
 8004e44:	e7ea      	b.n	8004e1c <quorem+0xe2>
 8004e46:	2000      	movs	r0, #0
 8004e48:	e7ee      	b.n	8004e28 <quorem+0xee>
 8004e4a:	0000      	movs	r0, r0
 8004e4c:	0000      	movs	r0, r0
	...

08004e50 <_dtoa_r>:
 8004e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e54:	4614      	mov	r4, r2
 8004e56:	461d      	mov	r5, r3
 8004e58:	69c7      	ldr	r7, [r0, #28]
 8004e5a:	b097      	sub	sp, #92	@ 0x5c
 8004e5c:	4683      	mov	fp, r0
 8004e5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004e62:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004e64:	b97f      	cbnz	r7, 8004e86 <_dtoa_r+0x36>
 8004e66:	2010      	movs	r0, #16
 8004e68:	f000 fe02 	bl	8005a70 <malloc>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004e72:	b920      	cbnz	r0, 8004e7e <_dtoa_r+0x2e>
 8004e74:	21ef      	movs	r1, #239	@ 0xef
 8004e76:	4ba8      	ldr	r3, [pc, #672]	@ (8005118 <_dtoa_r+0x2c8>)
 8004e78:	48a8      	ldr	r0, [pc, #672]	@ (800511c <_dtoa_r+0x2cc>)
 8004e7a:	f001 fc67 	bl	800674c <__assert_func>
 8004e7e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004e82:	6007      	str	r7, [r0, #0]
 8004e84:	60c7      	str	r7, [r0, #12]
 8004e86:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004e8a:	6819      	ldr	r1, [r3, #0]
 8004e8c:	b159      	cbz	r1, 8004ea6 <_dtoa_r+0x56>
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	2301      	movs	r3, #1
 8004e92:	4093      	lsls	r3, r2
 8004e94:	604a      	str	r2, [r1, #4]
 8004e96:	608b      	str	r3, [r1, #8]
 8004e98:	4658      	mov	r0, fp
 8004e9a:	f000 fedf 	bl	8005c5c <_Bfree>
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	1e2b      	subs	r3, r5, #0
 8004ea8:	bfaf      	iteee	ge
 8004eaa:	2300      	movge	r3, #0
 8004eac:	2201      	movlt	r2, #1
 8004eae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004eb2:	9303      	strlt	r3, [sp, #12]
 8004eb4:	bfa8      	it	ge
 8004eb6:	6033      	strge	r3, [r6, #0]
 8004eb8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004ebc:	4b98      	ldr	r3, [pc, #608]	@ (8005120 <_dtoa_r+0x2d0>)
 8004ebe:	bfb8      	it	lt
 8004ec0:	6032      	strlt	r2, [r6, #0]
 8004ec2:	ea33 0308 	bics.w	r3, r3, r8
 8004ec6:	d112      	bne.n	8004eee <_dtoa_r+0x9e>
 8004ec8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004ecc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004ed4:	4323      	orrs	r3, r4
 8004ed6:	f000 8550 	beq.w	800597a <_dtoa_r+0xb2a>
 8004eda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004edc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005124 <_dtoa_r+0x2d4>
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8552 	beq.w	800598a <_dtoa_r+0xb3a>
 8004ee6:	f10a 0303 	add.w	r3, sl, #3
 8004eea:	f000 bd4c 	b.w	8005986 <_dtoa_r+0xb36>
 8004eee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ef2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004ef6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004efa:	2200      	movs	r2, #0
 8004efc:	2300      	movs	r3, #0
 8004efe:	f7fb fd53 	bl	80009a8 <__aeabi_dcmpeq>
 8004f02:	4607      	mov	r7, r0
 8004f04:	b158      	cbz	r0, 8004f1e <_dtoa_r+0xce>
 8004f06:	2301      	movs	r3, #1
 8004f08:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004f0e:	b113      	cbz	r3, 8004f16 <_dtoa_r+0xc6>
 8004f10:	4b85      	ldr	r3, [pc, #532]	@ (8005128 <_dtoa_r+0x2d8>)
 8004f12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800512c <_dtoa_r+0x2dc>
 8004f1a:	f000 bd36 	b.w	800598a <_dtoa_r+0xb3a>
 8004f1e:	ab14      	add	r3, sp, #80	@ 0x50
 8004f20:	9301      	str	r3, [sp, #4]
 8004f22:	ab15      	add	r3, sp, #84	@ 0x54
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	4658      	mov	r0, fp
 8004f28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004f2c:	f001 f97e 	bl	800622c <__d2b>
 8004f30:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004f34:	4681      	mov	r9, r0
 8004f36:	2e00      	cmp	r6, #0
 8004f38:	d077      	beq.n	800502a <_dtoa_r+0x1da>
 8004f3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f40:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f48:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004f4c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004f50:	9712      	str	r7, [sp, #72]	@ 0x48
 8004f52:	4619      	mov	r1, r3
 8004f54:	2200      	movs	r2, #0
 8004f56:	4b76      	ldr	r3, [pc, #472]	@ (8005130 <_dtoa_r+0x2e0>)
 8004f58:	f7fb f906 	bl	8000168 <__aeabi_dsub>
 8004f5c:	a368      	add	r3, pc, #416	@ (adr r3, 8005100 <_dtoa_r+0x2b0>)
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	f7fb fab9 	bl	80004d8 <__aeabi_dmul>
 8004f66:	a368      	add	r3, pc, #416	@ (adr r3, 8005108 <_dtoa_r+0x2b8>)
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	f7fb f8fe 	bl	800016c <__adddf3>
 8004f70:	4604      	mov	r4, r0
 8004f72:	4630      	mov	r0, r6
 8004f74:	460d      	mov	r5, r1
 8004f76:	f7fb fa45 	bl	8000404 <__aeabi_i2d>
 8004f7a:	a365      	add	r3, pc, #404	@ (adr r3, 8005110 <_dtoa_r+0x2c0>)
 8004f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f80:	f7fb faaa 	bl	80004d8 <__aeabi_dmul>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4620      	mov	r0, r4
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	f7fb f8ee 	bl	800016c <__adddf3>
 8004f90:	4604      	mov	r4, r0
 8004f92:	460d      	mov	r5, r1
 8004f94:	f7fb fd50 	bl	8000a38 <__aeabi_d2iz>
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4607      	mov	r7, r0
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	f7fb fd0b 	bl	80009bc <__aeabi_dcmplt>
 8004fa6:	b140      	cbz	r0, 8004fba <_dtoa_r+0x16a>
 8004fa8:	4638      	mov	r0, r7
 8004faa:	f7fb fa2b 	bl	8000404 <__aeabi_i2d>
 8004fae:	4622      	mov	r2, r4
 8004fb0:	462b      	mov	r3, r5
 8004fb2:	f7fb fcf9 	bl	80009a8 <__aeabi_dcmpeq>
 8004fb6:	b900      	cbnz	r0, 8004fba <_dtoa_r+0x16a>
 8004fb8:	3f01      	subs	r7, #1
 8004fba:	2f16      	cmp	r7, #22
 8004fbc:	d853      	bhi.n	8005066 <_dtoa_r+0x216>
 8004fbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fc2:	4b5c      	ldr	r3, [pc, #368]	@ (8005134 <_dtoa_r+0x2e4>)
 8004fc4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f7fb fcf6 	bl	80009bc <__aeabi_dcmplt>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d04a      	beq.n	800506a <_dtoa_r+0x21a>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	3f01      	subs	r7, #1
 8004fd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004fda:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004fdc:	1b9b      	subs	r3, r3, r6
 8004fde:	1e5a      	subs	r2, r3, #1
 8004fe0:	bf46      	itte	mi
 8004fe2:	f1c3 0801 	rsbmi	r8, r3, #1
 8004fe6:	2300      	movmi	r3, #0
 8004fe8:	f04f 0800 	movpl.w	r8, #0
 8004fec:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fee:	bf48      	it	mi
 8004ff0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004ff2:	2f00      	cmp	r7, #0
 8004ff4:	db3b      	blt.n	800506e <_dtoa_r+0x21e>
 8004ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ff8:	970e      	str	r7, [sp, #56]	@ 0x38
 8004ffa:	443b      	add	r3, r7
 8004ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ffe:	2300      	movs	r3, #0
 8005000:	930a      	str	r3, [sp, #40]	@ 0x28
 8005002:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005004:	2b09      	cmp	r3, #9
 8005006:	d866      	bhi.n	80050d6 <_dtoa_r+0x286>
 8005008:	2b05      	cmp	r3, #5
 800500a:	bfc4      	itt	gt
 800500c:	3b04      	subgt	r3, #4
 800500e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005010:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005012:	bfc8      	it	gt
 8005014:	2400      	movgt	r4, #0
 8005016:	f1a3 0302 	sub.w	r3, r3, #2
 800501a:	bfd8      	it	le
 800501c:	2401      	movle	r4, #1
 800501e:	2b03      	cmp	r3, #3
 8005020:	d864      	bhi.n	80050ec <_dtoa_r+0x29c>
 8005022:	e8df f003 	tbb	[pc, r3]
 8005026:	382b      	.short	0x382b
 8005028:	5636      	.short	0x5636
 800502a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800502e:	441e      	add	r6, r3
 8005030:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005034:	2b20      	cmp	r3, #32
 8005036:	bfc1      	itttt	gt
 8005038:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800503c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005040:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005044:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005048:	bfd6      	itet	le
 800504a:	f1c3 0320 	rsble	r3, r3, #32
 800504e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005052:	fa04 f003 	lslle.w	r0, r4, r3
 8005056:	f7fb f9c5 	bl	80003e4 <__aeabi_ui2d>
 800505a:	2201      	movs	r2, #1
 800505c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005060:	3e01      	subs	r6, #1
 8005062:	9212      	str	r2, [sp, #72]	@ 0x48
 8005064:	e775      	b.n	8004f52 <_dtoa_r+0x102>
 8005066:	2301      	movs	r3, #1
 8005068:	e7b6      	b.n	8004fd8 <_dtoa_r+0x188>
 800506a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800506c:	e7b5      	b.n	8004fda <_dtoa_r+0x18a>
 800506e:	427b      	negs	r3, r7
 8005070:	930a      	str	r3, [sp, #40]	@ 0x28
 8005072:	2300      	movs	r3, #0
 8005074:	eba8 0807 	sub.w	r8, r8, r7
 8005078:	930e      	str	r3, [sp, #56]	@ 0x38
 800507a:	e7c2      	b.n	8005002 <_dtoa_r+0x1b2>
 800507c:	2300      	movs	r3, #0
 800507e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005080:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005082:	2b00      	cmp	r3, #0
 8005084:	dc35      	bgt.n	80050f2 <_dtoa_r+0x2a2>
 8005086:	2301      	movs	r3, #1
 8005088:	461a      	mov	r2, r3
 800508a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800508e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005090:	e00b      	b.n	80050aa <_dtoa_r+0x25a>
 8005092:	2301      	movs	r3, #1
 8005094:	e7f3      	b.n	800507e <_dtoa_r+0x22e>
 8005096:	2300      	movs	r3, #0
 8005098:	930b      	str	r3, [sp, #44]	@ 0x2c
 800509a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800509c:	18fb      	adds	r3, r7, r3
 800509e:	9308      	str	r3, [sp, #32]
 80050a0:	3301      	adds	r3, #1
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	9307      	str	r3, [sp, #28]
 80050a6:	bfb8      	it	lt
 80050a8:	2301      	movlt	r3, #1
 80050aa:	2100      	movs	r1, #0
 80050ac:	2204      	movs	r2, #4
 80050ae:	f8db 001c 	ldr.w	r0, [fp, #28]
 80050b2:	f102 0514 	add.w	r5, r2, #20
 80050b6:	429d      	cmp	r5, r3
 80050b8:	d91f      	bls.n	80050fa <_dtoa_r+0x2aa>
 80050ba:	6041      	str	r1, [r0, #4]
 80050bc:	4658      	mov	r0, fp
 80050be:	f000 fd8d 	bl	8005bdc <_Balloc>
 80050c2:	4682      	mov	sl, r0
 80050c4:	2800      	cmp	r0, #0
 80050c6:	d139      	bne.n	800513c <_dtoa_r+0x2ec>
 80050c8:	4602      	mov	r2, r0
 80050ca:	f240 11af 	movw	r1, #431	@ 0x1af
 80050ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005138 <_dtoa_r+0x2e8>)
 80050d0:	e6d2      	b.n	8004e78 <_dtoa_r+0x28>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e7e0      	b.n	8005098 <_dtoa_r+0x248>
 80050d6:	2401      	movs	r4, #1
 80050d8:	2300      	movs	r3, #0
 80050da:	940b      	str	r4, [sp, #44]	@ 0x2c
 80050dc:	9320      	str	r3, [sp, #128]	@ 0x80
 80050de:	f04f 33ff 	mov.w	r3, #4294967295
 80050e2:	2200      	movs	r2, #0
 80050e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80050e8:	2312      	movs	r3, #18
 80050ea:	e7d0      	b.n	800508e <_dtoa_r+0x23e>
 80050ec:	2301      	movs	r3, #1
 80050ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050f0:	e7f5      	b.n	80050de <_dtoa_r+0x28e>
 80050f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80050f8:	e7d7      	b.n	80050aa <_dtoa_r+0x25a>
 80050fa:	3101      	adds	r1, #1
 80050fc:	0052      	lsls	r2, r2, #1
 80050fe:	e7d8      	b.n	80050b2 <_dtoa_r+0x262>
 8005100:	636f4361 	.word	0x636f4361
 8005104:	3fd287a7 	.word	0x3fd287a7
 8005108:	8b60c8b3 	.word	0x8b60c8b3
 800510c:	3fc68a28 	.word	0x3fc68a28
 8005110:	509f79fb 	.word	0x509f79fb
 8005114:	3fd34413 	.word	0x3fd34413
 8005118:	08006eef 	.word	0x08006eef
 800511c:	08006f06 	.word	0x08006f06
 8005120:	7ff00000 	.word	0x7ff00000
 8005124:	08006eeb 	.word	0x08006eeb
 8005128:	08006ebf 	.word	0x08006ebf
 800512c:	08006ebe 	.word	0x08006ebe
 8005130:	3ff80000 	.word	0x3ff80000
 8005134:	08007000 	.word	0x08007000
 8005138:	08006f5e 	.word	0x08006f5e
 800513c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005140:	6018      	str	r0, [r3, #0]
 8005142:	9b07      	ldr	r3, [sp, #28]
 8005144:	2b0e      	cmp	r3, #14
 8005146:	f200 80a4 	bhi.w	8005292 <_dtoa_r+0x442>
 800514a:	2c00      	cmp	r4, #0
 800514c:	f000 80a1 	beq.w	8005292 <_dtoa_r+0x442>
 8005150:	2f00      	cmp	r7, #0
 8005152:	dd33      	ble.n	80051bc <_dtoa_r+0x36c>
 8005154:	4b86      	ldr	r3, [pc, #536]	@ (8005370 <_dtoa_r+0x520>)
 8005156:	f007 020f 	and.w	r2, r7, #15
 800515a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800515e:	05f8      	lsls	r0, r7, #23
 8005160:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005164:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005168:	ea4f 1427 	mov.w	r4, r7, asr #4
 800516c:	d516      	bpl.n	800519c <_dtoa_r+0x34c>
 800516e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005172:	4b80      	ldr	r3, [pc, #512]	@ (8005374 <_dtoa_r+0x524>)
 8005174:	2603      	movs	r6, #3
 8005176:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800517a:	f7fb fad7 	bl	800072c <__aeabi_ddiv>
 800517e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005182:	f004 040f 	and.w	r4, r4, #15
 8005186:	4d7b      	ldr	r5, [pc, #492]	@ (8005374 <_dtoa_r+0x524>)
 8005188:	b954      	cbnz	r4, 80051a0 <_dtoa_r+0x350>
 800518a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800518e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005192:	f7fb facb 	bl	800072c <__aeabi_ddiv>
 8005196:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800519a:	e028      	b.n	80051ee <_dtoa_r+0x39e>
 800519c:	2602      	movs	r6, #2
 800519e:	e7f2      	b.n	8005186 <_dtoa_r+0x336>
 80051a0:	07e1      	lsls	r1, r4, #31
 80051a2:	d508      	bpl.n	80051b6 <_dtoa_r+0x366>
 80051a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051ac:	f7fb f994 	bl	80004d8 <__aeabi_dmul>
 80051b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051b4:	3601      	adds	r6, #1
 80051b6:	1064      	asrs	r4, r4, #1
 80051b8:	3508      	adds	r5, #8
 80051ba:	e7e5      	b.n	8005188 <_dtoa_r+0x338>
 80051bc:	f000 80d2 	beq.w	8005364 <_dtoa_r+0x514>
 80051c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80051c4:	427c      	negs	r4, r7
 80051c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005370 <_dtoa_r+0x520>)
 80051c8:	f004 020f 	and.w	r2, r4, #15
 80051cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	f7fb f980 	bl	80004d8 <__aeabi_dmul>
 80051d8:	2602      	movs	r6, #2
 80051da:	2300      	movs	r3, #0
 80051dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051e0:	4d64      	ldr	r5, [pc, #400]	@ (8005374 <_dtoa_r+0x524>)
 80051e2:	1124      	asrs	r4, r4, #4
 80051e4:	2c00      	cmp	r4, #0
 80051e6:	f040 80b2 	bne.w	800534e <_dtoa_r+0x4fe>
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1d3      	bne.n	8005196 <_dtoa_r+0x346>
 80051ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80051f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80b7 	beq.w	8005368 <_dtoa_r+0x518>
 80051fa:	2200      	movs	r2, #0
 80051fc:	4620      	mov	r0, r4
 80051fe:	4629      	mov	r1, r5
 8005200:	4b5d      	ldr	r3, [pc, #372]	@ (8005378 <_dtoa_r+0x528>)
 8005202:	f7fb fbdb 	bl	80009bc <__aeabi_dcmplt>
 8005206:	2800      	cmp	r0, #0
 8005208:	f000 80ae 	beq.w	8005368 <_dtoa_r+0x518>
 800520c:	9b07      	ldr	r3, [sp, #28]
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 80aa 	beq.w	8005368 <_dtoa_r+0x518>
 8005214:	9b08      	ldr	r3, [sp, #32]
 8005216:	2b00      	cmp	r3, #0
 8005218:	dd37      	ble.n	800528a <_dtoa_r+0x43a>
 800521a:	1e7b      	subs	r3, r7, #1
 800521c:	4620      	mov	r0, r4
 800521e:	9304      	str	r3, [sp, #16]
 8005220:	2200      	movs	r2, #0
 8005222:	4629      	mov	r1, r5
 8005224:	4b55      	ldr	r3, [pc, #340]	@ (800537c <_dtoa_r+0x52c>)
 8005226:	f7fb f957 	bl	80004d8 <__aeabi_dmul>
 800522a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800522e:	9c08      	ldr	r4, [sp, #32]
 8005230:	3601      	adds	r6, #1
 8005232:	4630      	mov	r0, r6
 8005234:	f7fb f8e6 	bl	8000404 <__aeabi_i2d>
 8005238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800523c:	f7fb f94c 	bl	80004d8 <__aeabi_dmul>
 8005240:	2200      	movs	r2, #0
 8005242:	4b4f      	ldr	r3, [pc, #316]	@ (8005380 <_dtoa_r+0x530>)
 8005244:	f7fa ff92 	bl	800016c <__adddf3>
 8005248:	4605      	mov	r5, r0
 800524a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800524e:	2c00      	cmp	r4, #0
 8005250:	f040 809a 	bne.w	8005388 <_dtoa_r+0x538>
 8005254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005258:	2200      	movs	r2, #0
 800525a:	4b4a      	ldr	r3, [pc, #296]	@ (8005384 <_dtoa_r+0x534>)
 800525c:	f7fa ff84 	bl	8000168 <__aeabi_dsub>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005268:	462a      	mov	r2, r5
 800526a:	4633      	mov	r3, r6
 800526c:	f7fb fbc4 	bl	80009f8 <__aeabi_dcmpgt>
 8005270:	2800      	cmp	r0, #0
 8005272:	f040 828e 	bne.w	8005792 <_dtoa_r+0x942>
 8005276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800527a:	462a      	mov	r2, r5
 800527c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005280:	f7fb fb9c 	bl	80009bc <__aeabi_dcmplt>
 8005284:	2800      	cmp	r0, #0
 8005286:	f040 8127 	bne.w	80054d8 <_dtoa_r+0x688>
 800528a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800528e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005292:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005294:	2b00      	cmp	r3, #0
 8005296:	f2c0 8163 	blt.w	8005560 <_dtoa_r+0x710>
 800529a:	2f0e      	cmp	r7, #14
 800529c:	f300 8160 	bgt.w	8005560 <_dtoa_r+0x710>
 80052a0:	4b33      	ldr	r3, [pc, #204]	@ (8005370 <_dtoa_r+0x520>)
 80052a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80052a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	da03      	bge.n	80052bc <_dtoa_r+0x46c>
 80052b4:	9b07      	ldr	r3, [sp, #28]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f340 8100 	ble.w	80054bc <_dtoa_r+0x66c>
 80052bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80052c0:	4656      	mov	r6, sl
 80052c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052c6:	4620      	mov	r0, r4
 80052c8:	4629      	mov	r1, r5
 80052ca:	f7fb fa2f 	bl	800072c <__aeabi_ddiv>
 80052ce:	f7fb fbb3 	bl	8000a38 <__aeabi_d2iz>
 80052d2:	4680      	mov	r8, r0
 80052d4:	f7fb f896 	bl	8000404 <__aeabi_i2d>
 80052d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052dc:	f7fb f8fc 	bl	80004d8 <__aeabi_dmul>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4620      	mov	r0, r4
 80052e6:	4629      	mov	r1, r5
 80052e8:	f7fa ff3e 	bl	8000168 <__aeabi_dsub>
 80052ec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80052f0:	9d07      	ldr	r5, [sp, #28]
 80052f2:	f806 4b01 	strb.w	r4, [r6], #1
 80052f6:	eba6 040a 	sub.w	r4, r6, sl
 80052fa:	42a5      	cmp	r5, r4
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	f040 8116 	bne.w	8005530 <_dtoa_r+0x6e0>
 8005304:	f7fa ff32 	bl	800016c <__adddf3>
 8005308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800530c:	4604      	mov	r4, r0
 800530e:	460d      	mov	r5, r1
 8005310:	f7fb fb72 	bl	80009f8 <__aeabi_dcmpgt>
 8005314:	2800      	cmp	r0, #0
 8005316:	f040 80f8 	bne.w	800550a <_dtoa_r+0x6ba>
 800531a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800531e:	4620      	mov	r0, r4
 8005320:	4629      	mov	r1, r5
 8005322:	f7fb fb41 	bl	80009a8 <__aeabi_dcmpeq>
 8005326:	b118      	cbz	r0, 8005330 <_dtoa_r+0x4e0>
 8005328:	f018 0f01 	tst.w	r8, #1
 800532c:	f040 80ed 	bne.w	800550a <_dtoa_r+0x6ba>
 8005330:	4649      	mov	r1, r9
 8005332:	4658      	mov	r0, fp
 8005334:	f000 fc92 	bl	8005c5c <_Bfree>
 8005338:	2300      	movs	r3, #0
 800533a:	7033      	strb	r3, [r6, #0]
 800533c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800533e:	3701      	adds	r7, #1
 8005340:	601f      	str	r7, [r3, #0]
 8005342:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8320 	beq.w	800598a <_dtoa_r+0xb3a>
 800534a:	601e      	str	r6, [r3, #0]
 800534c:	e31d      	b.n	800598a <_dtoa_r+0xb3a>
 800534e:	07e2      	lsls	r2, r4, #31
 8005350:	d505      	bpl.n	800535e <_dtoa_r+0x50e>
 8005352:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005356:	f7fb f8bf 	bl	80004d8 <__aeabi_dmul>
 800535a:	2301      	movs	r3, #1
 800535c:	3601      	adds	r6, #1
 800535e:	1064      	asrs	r4, r4, #1
 8005360:	3508      	adds	r5, #8
 8005362:	e73f      	b.n	80051e4 <_dtoa_r+0x394>
 8005364:	2602      	movs	r6, #2
 8005366:	e742      	b.n	80051ee <_dtoa_r+0x39e>
 8005368:	9c07      	ldr	r4, [sp, #28]
 800536a:	9704      	str	r7, [sp, #16]
 800536c:	e761      	b.n	8005232 <_dtoa_r+0x3e2>
 800536e:	bf00      	nop
 8005370:	08007000 	.word	0x08007000
 8005374:	08006fd8 	.word	0x08006fd8
 8005378:	3ff00000 	.word	0x3ff00000
 800537c:	40240000 	.word	0x40240000
 8005380:	401c0000 	.word	0x401c0000
 8005384:	40140000 	.word	0x40140000
 8005388:	4b70      	ldr	r3, [pc, #448]	@ (800554c <_dtoa_r+0x6fc>)
 800538a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800538c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005390:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005394:	4454      	add	r4, sl
 8005396:	2900      	cmp	r1, #0
 8005398:	d045      	beq.n	8005426 <_dtoa_r+0x5d6>
 800539a:	2000      	movs	r0, #0
 800539c:	496c      	ldr	r1, [pc, #432]	@ (8005550 <_dtoa_r+0x700>)
 800539e:	f7fb f9c5 	bl	800072c <__aeabi_ddiv>
 80053a2:	4633      	mov	r3, r6
 80053a4:	462a      	mov	r2, r5
 80053a6:	f7fa fedf 	bl	8000168 <__aeabi_dsub>
 80053aa:	4656      	mov	r6, sl
 80053ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80053b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053b4:	f7fb fb40 	bl	8000a38 <__aeabi_d2iz>
 80053b8:	4605      	mov	r5, r0
 80053ba:	f7fb f823 	bl	8000404 <__aeabi_i2d>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053c6:	f7fa fecf 	bl	8000168 <__aeabi_dsub>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	3530      	adds	r5, #48	@ 0x30
 80053d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053d8:	f806 5b01 	strb.w	r5, [r6], #1
 80053dc:	f7fb faee 	bl	80009bc <__aeabi_dcmplt>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d163      	bne.n	80054ac <_dtoa_r+0x65c>
 80053e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053e8:	2000      	movs	r0, #0
 80053ea:	495a      	ldr	r1, [pc, #360]	@ (8005554 <_dtoa_r+0x704>)
 80053ec:	f7fa febc 	bl	8000168 <__aeabi_dsub>
 80053f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053f4:	f7fb fae2 	bl	80009bc <__aeabi_dcmplt>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	f040 8087 	bne.w	800550c <_dtoa_r+0x6bc>
 80053fe:	42a6      	cmp	r6, r4
 8005400:	f43f af43 	beq.w	800528a <_dtoa_r+0x43a>
 8005404:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005408:	2200      	movs	r2, #0
 800540a:	4b53      	ldr	r3, [pc, #332]	@ (8005558 <_dtoa_r+0x708>)
 800540c:	f7fb f864 	bl	80004d8 <__aeabi_dmul>
 8005410:	2200      	movs	r2, #0
 8005412:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800541a:	4b4f      	ldr	r3, [pc, #316]	@ (8005558 <_dtoa_r+0x708>)
 800541c:	f7fb f85c 	bl	80004d8 <__aeabi_dmul>
 8005420:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005424:	e7c4      	b.n	80053b0 <_dtoa_r+0x560>
 8005426:	4631      	mov	r1, r6
 8005428:	4628      	mov	r0, r5
 800542a:	f7fb f855 	bl	80004d8 <__aeabi_dmul>
 800542e:	4656      	mov	r6, sl
 8005430:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005434:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800543a:	f7fb fafd 	bl	8000a38 <__aeabi_d2iz>
 800543e:	4605      	mov	r5, r0
 8005440:	f7fa ffe0 	bl	8000404 <__aeabi_i2d>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800544c:	f7fa fe8c 	bl	8000168 <__aeabi_dsub>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	3530      	adds	r5, #48	@ 0x30
 8005456:	f806 5b01 	strb.w	r5, [r6], #1
 800545a:	42a6      	cmp	r6, r4
 800545c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	d124      	bne.n	80054b0 <_dtoa_r+0x660>
 8005466:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800546a:	4b39      	ldr	r3, [pc, #228]	@ (8005550 <_dtoa_r+0x700>)
 800546c:	f7fa fe7e 	bl	800016c <__adddf3>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005478:	f7fb fabe 	bl	80009f8 <__aeabi_dcmpgt>
 800547c:	2800      	cmp	r0, #0
 800547e:	d145      	bne.n	800550c <_dtoa_r+0x6bc>
 8005480:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005484:	2000      	movs	r0, #0
 8005486:	4932      	ldr	r1, [pc, #200]	@ (8005550 <_dtoa_r+0x700>)
 8005488:	f7fa fe6e 	bl	8000168 <__aeabi_dsub>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005494:	f7fb fa92 	bl	80009bc <__aeabi_dcmplt>
 8005498:	2800      	cmp	r0, #0
 800549a:	f43f aef6 	beq.w	800528a <_dtoa_r+0x43a>
 800549e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80054a0:	1e73      	subs	r3, r6, #1
 80054a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80054a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80054a8:	2b30      	cmp	r3, #48	@ 0x30
 80054aa:	d0f8      	beq.n	800549e <_dtoa_r+0x64e>
 80054ac:	9f04      	ldr	r7, [sp, #16]
 80054ae:	e73f      	b.n	8005330 <_dtoa_r+0x4e0>
 80054b0:	4b29      	ldr	r3, [pc, #164]	@ (8005558 <_dtoa_r+0x708>)
 80054b2:	f7fb f811 	bl	80004d8 <__aeabi_dmul>
 80054b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054ba:	e7bc      	b.n	8005436 <_dtoa_r+0x5e6>
 80054bc:	d10c      	bne.n	80054d8 <_dtoa_r+0x688>
 80054be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054c2:	2200      	movs	r2, #0
 80054c4:	4b25      	ldr	r3, [pc, #148]	@ (800555c <_dtoa_r+0x70c>)
 80054c6:	f7fb f807 	bl	80004d8 <__aeabi_dmul>
 80054ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054ce:	f7fb fa89 	bl	80009e4 <__aeabi_dcmpge>
 80054d2:	2800      	cmp	r0, #0
 80054d4:	f000 815b 	beq.w	800578e <_dtoa_r+0x93e>
 80054d8:	2400      	movs	r4, #0
 80054da:	4625      	mov	r5, r4
 80054dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054de:	4656      	mov	r6, sl
 80054e0:	43db      	mvns	r3, r3
 80054e2:	9304      	str	r3, [sp, #16]
 80054e4:	2700      	movs	r7, #0
 80054e6:	4621      	mov	r1, r4
 80054e8:	4658      	mov	r0, fp
 80054ea:	f000 fbb7 	bl	8005c5c <_Bfree>
 80054ee:	2d00      	cmp	r5, #0
 80054f0:	d0dc      	beq.n	80054ac <_dtoa_r+0x65c>
 80054f2:	b12f      	cbz	r7, 8005500 <_dtoa_r+0x6b0>
 80054f4:	42af      	cmp	r7, r5
 80054f6:	d003      	beq.n	8005500 <_dtoa_r+0x6b0>
 80054f8:	4639      	mov	r1, r7
 80054fa:	4658      	mov	r0, fp
 80054fc:	f000 fbae 	bl	8005c5c <_Bfree>
 8005500:	4629      	mov	r1, r5
 8005502:	4658      	mov	r0, fp
 8005504:	f000 fbaa 	bl	8005c5c <_Bfree>
 8005508:	e7d0      	b.n	80054ac <_dtoa_r+0x65c>
 800550a:	9704      	str	r7, [sp, #16]
 800550c:	4633      	mov	r3, r6
 800550e:	461e      	mov	r6, r3
 8005510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005514:	2a39      	cmp	r2, #57	@ 0x39
 8005516:	d107      	bne.n	8005528 <_dtoa_r+0x6d8>
 8005518:	459a      	cmp	sl, r3
 800551a:	d1f8      	bne.n	800550e <_dtoa_r+0x6be>
 800551c:	9a04      	ldr	r2, [sp, #16]
 800551e:	3201      	adds	r2, #1
 8005520:	9204      	str	r2, [sp, #16]
 8005522:	2230      	movs	r2, #48	@ 0x30
 8005524:	f88a 2000 	strb.w	r2, [sl]
 8005528:	781a      	ldrb	r2, [r3, #0]
 800552a:	3201      	adds	r2, #1
 800552c:	701a      	strb	r2, [r3, #0]
 800552e:	e7bd      	b.n	80054ac <_dtoa_r+0x65c>
 8005530:	2200      	movs	r2, #0
 8005532:	4b09      	ldr	r3, [pc, #36]	@ (8005558 <_dtoa_r+0x708>)
 8005534:	f7fa ffd0 	bl	80004d8 <__aeabi_dmul>
 8005538:	2200      	movs	r2, #0
 800553a:	2300      	movs	r3, #0
 800553c:	4604      	mov	r4, r0
 800553e:	460d      	mov	r5, r1
 8005540:	f7fb fa32 	bl	80009a8 <__aeabi_dcmpeq>
 8005544:	2800      	cmp	r0, #0
 8005546:	f43f aebc 	beq.w	80052c2 <_dtoa_r+0x472>
 800554a:	e6f1      	b.n	8005330 <_dtoa_r+0x4e0>
 800554c:	08007000 	.word	0x08007000
 8005550:	3fe00000 	.word	0x3fe00000
 8005554:	3ff00000 	.word	0x3ff00000
 8005558:	40240000 	.word	0x40240000
 800555c:	40140000 	.word	0x40140000
 8005560:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005562:	2a00      	cmp	r2, #0
 8005564:	f000 80db 	beq.w	800571e <_dtoa_r+0x8ce>
 8005568:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800556a:	2a01      	cmp	r2, #1
 800556c:	f300 80bf 	bgt.w	80056ee <_dtoa_r+0x89e>
 8005570:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005572:	2a00      	cmp	r2, #0
 8005574:	f000 80b7 	beq.w	80056e6 <_dtoa_r+0x896>
 8005578:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800557c:	4646      	mov	r6, r8
 800557e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005580:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005582:	2101      	movs	r1, #1
 8005584:	441a      	add	r2, r3
 8005586:	4658      	mov	r0, fp
 8005588:	4498      	add	r8, r3
 800558a:	9209      	str	r2, [sp, #36]	@ 0x24
 800558c:	f000 fc1a 	bl	8005dc4 <__i2b>
 8005590:	4605      	mov	r5, r0
 8005592:	b15e      	cbz	r6, 80055ac <_dtoa_r+0x75c>
 8005594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005596:	2b00      	cmp	r3, #0
 8005598:	dd08      	ble.n	80055ac <_dtoa_r+0x75c>
 800559a:	42b3      	cmp	r3, r6
 800559c:	bfa8      	it	ge
 800559e:	4633      	movge	r3, r6
 80055a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055a2:	eba8 0803 	sub.w	r8, r8, r3
 80055a6:	1af6      	subs	r6, r6, r3
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80055ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055ae:	b1f3      	cbz	r3, 80055ee <_dtoa_r+0x79e>
 80055b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 80b7 	beq.w	8005726 <_dtoa_r+0x8d6>
 80055b8:	b18c      	cbz	r4, 80055de <_dtoa_r+0x78e>
 80055ba:	4629      	mov	r1, r5
 80055bc:	4622      	mov	r2, r4
 80055be:	4658      	mov	r0, fp
 80055c0:	f000 fcbe 	bl	8005f40 <__pow5mult>
 80055c4:	464a      	mov	r2, r9
 80055c6:	4601      	mov	r1, r0
 80055c8:	4605      	mov	r5, r0
 80055ca:	4658      	mov	r0, fp
 80055cc:	f000 fc10 	bl	8005df0 <__multiply>
 80055d0:	4649      	mov	r1, r9
 80055d2:	9004      	str	r0, [sp, #16]
 80055d4:	4658      	mov	r0, fp
 80055d6:	f000 fb41 	bl	8005c5c <_Bfree>
 80055da:	9b04      	ldr	r3, [sp, #16]
 80055dc:	4699      	mov	r9, r3
 80055de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055e0:	1b1a      	subs	r2, r3, r4
 80055e2:	d004      	beq.n	80055ee <_dtoa_r+0x79e>
 80055e4:	4649      	mov	r1, r9
 80055e6:	4658      	mov	r0, fp
 80055e8:	f000 fcaa 	bl	8005f40 <__pow5mult>
 80055ec:	4681      	mov	r9, r0
 80055ee:	2101      	movs	r1, #1
 80055f0:	4658      	mov	r0, fp
 80055f2:	f000 fbe7 	bl	8005dc4 <__i2b>
 80055f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055f8:	4604      	mov	r4, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 81c9 	beq.w	8005992 <_dtoa_r+0xb42>
 8005600:	461a      	mov	r2, r3
 8005602:	4601      	mov	r1, r0
 8005604:	4658      	mov	r0, fp
 8005606:	f000 fc9b 	bl	8005f40 <__pow5mult>
 800560a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800560c:	4604      	mov	r4, r0
 800560e:	2b01      	cmp	r3, #1
 8005610:	f300 808f 	bgt.w	8005732 <_dtoa_r+0x8e2>
 8005614:	9b02      	ldr	r3, [sp, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f040 8087 	bne.w	800572a <_dtoa_r+0x8da>
 800561c:	9b03      	ldr	r3, [sp, #12]
 800561e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005622:	2b00      	cmp	r3, #0
 8005624:	f040 8083 	bne.w	800572e <_dtoa_r+0x8de>
 8005628:	9b03      	ldr	r3, [sp, #12]
 800562a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800562e:	0d1b      	lsrs	r3, r3, #20
 8005630:	051b      	lsls	r3, r3, #20
 8005632:	b12b      	cbz	r3, 8005640 <_dtoa_r+0x7f0>
 8005634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005636:	f108 0801 	add.w	r8, r8, #1
 800563a:	3301      	adds	r3, #1
 800563c:	9309      	str	r3, [sp, #36]	@ 0x24
 800563e:	2301      	movs	r3, #1
 8005640:	930a      	str	r3, [sp, #40]	@ 0x28
 8005642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 81aa 	beq.w	800599e <_dtoa_r+0xb4e>
 800564a:	6923      	ldr	r3, [r4, #16]
 800564c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005650:	6918      	ldr	r0, [r3, #16]
 8005652:	f000 fb6b 	bl	8005d2c <__hi0bits>
 8005656:	f1c0 0020 	rsb	r0, r0, #32
 800565a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800565c:	4418      	add	r0, r3
 800565e:	f010 001f 	ands.w	r0, r0, #31
 8005662:	d071      	beq.n	8005748 <_dtoa_r+0x8f8>
 8005664:	f1c0 0320 	rsb	r3, r0, #32
 8005668:	2b04      	cmp	r3, #4
 800566a:	dd65      	ble.n	8005738 <_dtoa_r+0x8e8>
 800566c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800566e:	f1c0 001c 	rsb	r0, r0, #28
 8005672:	4403      	add	r3, r0
 8005674:	4480      	add	r8, r0
 8005676:	4406      	add	r6, r0
 8005678:	9309      	str	r3, [sp, #36]	@ 0x24
 800567a:	f1b8 0f00 	cmp.w	r8, #0
 800567e:	dd05      	ble.n	800568c <_dtoa_r+0x83c>
 8005680:	4649      	mov	r1, r9
 8005682:	4642      	mov	r2, r8
 8005684:	4658      	mov	r0, fp
 8005686:	f000 fcb5 	bl	8005ff4 <__lshift>
 800568a:	4681      	mov	r9, r0
 800568c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800568e:	2b00      	cmp	r3, #0
 8005690:	dd05      	ble.n	800569e <_dtoa_r+0x84e>
 8005692:	4621      	mov	r1, r4
 8005694:	461a      	mov	r2, r3
 8005696:	4658      	mov	r0, fp
 8005698:	f000 fcac 	bl	8005ff4 <__lshift>
 800569c:	4604      	mov	r4, r0
 800569e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d053      	beq.n	800574c <_dtoa_r+0x8fc>
 80056a4:	4621      	mov	r1, r4
 80056a6:	4648      	mov	r0, r9
 80056a8:	f000 fd10 	bl	80060cc <__mcmp>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	da4d      	bge.n	800574c <_dtoa_r+0x8fc>
 80056b0:	1e7b      	subs	r3, r7, #1
 80056b2:	4649      	mov	r1, r9
 80056b4:	9304      	str	r3, [sp, #16]
 80056b6:	220a      	movs	r2, #10
 80056b8:	2300      	movs	r3, #0
 80056ba:	4658      	mov	r0, fp
 80056bc:	f000 faf0 	bl	8005ca0 <__multadd>
 80056c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056c2:	4681      	mov	r9, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 816c 	beq.w	80059a2 <_dtoa_r+0xb52>
 80056ca:	2300      	movs	r3, #0
 80056cc:	4629      	mov	r1, r5
 80056ce:	220a      	movs	r2, #10
 80056d0:	4658      	mov	r0, fp
 80056d2:	f000 fae5 	bl	8005ca0 <__multadd>
 80056d6:	9b08      	ldr	r3, [sp, #32]
 80056d8:	4605      	mov	r5, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	dc61      	bgt.n	80057a2 <_dtoa_r+0x952>
 80056de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	dc3b      	bgt.n	800575c <_dtoa_r+0x90c>
 80056e4:	e05d      	b.n	80057a2 <_dtoa_r+0x952>
 80056e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80056e8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80056ec:	e746      	b.n	800557c <_dtoa_r+0x72c>
 80056ee:	9b07      	ldr	r3, [sp, #28]
 80056f0:	1e5c      	subs	r4, r3, #1
 80056f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056f4:	42a3      	cmp	r3, r4
 80056f6:	bfbf      	itttt	lt
 80056f8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80056fa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80056fc:	1ae3      	sublt	r3, r4, r3
 80056fe:	18d2      	addlt	r2, r2, r3
 8005700:	bfa8      	it	ge
 8005702:	1b1c      	subge	r4, r3, r4
 8005704:	9b07      	ldr	r3, [sp, #28]
 8005706:	bfbe      	ittt	lt
 8005708:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800570a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800570c:	2400      	movlt	r4, #0
 800570e:	2b00      	cmp	r3, #0
 8005710:	bfb5      	itete	lt
 8005712:	eba8 0603 	sublt.w	r6, r8, r3
 8005716:	4646      	movge	r6, r8
 8005718:	2300      	movlt	r3, #0
 800571a:	9b07      	ldrge	r3, [sp, #28]
 800571c:	e730      	b.n	8005580 <_dtoa_r+0x730>
 800571e:	4646      	mov	r6, r8
 8005720:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005722:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005724:	e735      	b.n	8005592 <_dtoa_r+0x742>
 8005726:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005728:	e75c      	b.n	80055e4 <_dtoa_r+0x794>
 800572a:	2300      	movs	r3, #0
 800572c:	e788      	b.n	8005640 <_dtoa_r+0x7f0>
 800572e:	9b02      	ldr	r3, [sp, #8]
 8005730:	e786      	b.n	8005640 <_dtoa_r+0x7f0>
 8005732:	2300      	movs	r3, #0
 8005734:	930a      	str	r3, [sp, #40]	@ 0x28
 8005736:	e788      	b.n	800564a <_dtoa_r+0x7fa>
 8005738:	d09f      	beq.n	800567a <_dtoa_r+0x82a>
 800573a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800573c:	331c      	adds	r3, #28
 800573e:	441a      	add	r2, r3
 8005740:	4498      	add	r8, r3
 8005742:	441e      	add	r6, r3
 8005744:	9209      	str	r2, [sp, #36]	@ 0x24
 8005746:	e798      	b.n	800567a <_dtoa_r+0x82a>
 8005748:	4603      	mov	r3, r0
 800574a:	e7f6      	b.n	800573a <_dtoa_r+0x8ea>
 800574c:	9b07      	ldr	r3, [sp, #28]
 800574e:	9704      	str	r7, [sp, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	dc20      	bgt.n	8005796 <_dtoa_r+0x946>
 8005754:	9308      	str	r3, [sp, #32]
 8005756:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005758:	2b02      	cmp	r3, #2
 800575a:	dd1e      	ble.n	800579a <_dtoa_r+0x94a>
 800575c:	9b08      	ldr	r3, [sp, #32]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f47f aebc 	bne.w	80054dc <_dtoa_r+0x68c>
 8005764:	4621      	mov	r1, r4
 8005766:	2205      	movs	r2, #5
 8005768:	4658      	mov	r0, fp
 800576a:	f000 fa99 	bl	8005ca0 <__multadd>
 800576e:	4601      	mov	r1, r0
 8005770:	4604      	mov	r4, r0
 8005772:	4648      	mov	r0, r9
 8005774:	f000 fcaa 	bl	80060cc <__mcmp>
 8005778:	2800      	cmp	r0, #0
 800577a:	f77f aeaf 	ble.w	80054dc <_dtoa_r+0x68c>
 800577e:	2331      	movs	r3, #49	@ 0x31
 8005780:	4656      	mov	r6, sl
 8005782:	f806 3b01 	strb.w	r3, [r6], #1
 8005786:	9b04      	ldr	r3, [sp, #16]
 8005788:	3301      	adds	r3, #1
 800578a:	9304      	str	r3, [sp, #16]
 800578c:	e6aa      	b.n	80054e4 <_dtoa_r+0x694>
 800578e:	9c07      	ldr	r4, [sp, #28]
 8005790:	9704      	str	r7, [sp, #16]
 8005792:	4625      	mov	r5, r4
 8005794:	e7f3      	b.n	800577e <_dtoa_r+0x92e>
 8005796:	9b07      	ldr	r3, [sp, #28]
 8005798:	9308      	str	r3, [sp, #32]
 800579a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 8104 	beq.w	80059aa <_dtoa_r+0xb5a>
 80057a2:	2e00      	cmp	r6, #0
 80057a4:	dd05      	ble.n	80057b2 <_dtoa_r+0x962>
 80057a6:	4629      	mov	r1, r5
 80057a8:	4632      	mov	r2, r6
 80057aa:	4658      	mov	r0, fp
 80057ac:	f000 fc22 	bl	8005ff4 <__lshift>
 80057b0:	4605      	mov	r5, r0
 80057b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d05a      	beq.n	800586e <_dtoa_r+0xa1e>
 80057b8:	4658      	mov	r0, fp
 80057ba:	6869      	ldr	r1, [r5, #4]
 80057bc:	f000 fa0e 	bl	8005bdc <_Balloc>
 80057c0:	4606      	mov	r6, r0
 80057c2:	b928      	cbnz	r0, 80057d0 <_dtoa_r+0x980>
 80057c4:	4602      	mov	r2, r0
 80057c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80057ca:	4b83      	ldr	r3, [pc, #524]	@ (80059d8 <_dtoa_r+0xb88>)
 80057cc:	f7ff bb54 	b.w	8004e78 <_dtoa_r+0x28>
 80057d0:	692a      	ldr	r2, [r5, #16]
 80057d2:	f105 010c 	add.w	r1, r5, #12
 80057d6:	3202      	adds	r2, #2
 80057d8:	0092      	lsls	r2, r2, #2
 80057da:	300c      	adds	r0, #12
 80057dc:	f000 ffa8 	bl	8006730 <memcpy>
 80057e0:	2201      	movs	r2, #1
 80057e2:	4631      	mov	r1, r6
 80057e4:	4658      	mov	r0, fp
 80057e6:	f000 fc05 	bl	8005ff4 <__lshift>
 80057ea:	462f      	mov	r7, r5
 80057ec:	4605      	mov	r5, r0
 80057ee:	f10a 0301 	add.w	r3, sl, #1
 80057f2:	9307      	str	r3, [sp, #28]
 80057f4:	9b08      	ldr	r3, [sp, #32]
 80057f6:	4453      	add	r3, sl
 80057f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057fa:	9b02      	ldr	r3, [sp, #8]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	930a      	str	r3, [sp, #40]	@ 0x28
 8005802:	9b07      	ldr	r3, [sp, #28]
 8005804:	4621      	mov	r1, r4
 8005806:	3b01      	subs	r3, #1
 8005808:	4648      	mov	r0, r9
 800580a:	9302      	str	r3, [sp, #8]
 800580c:	f7ff fa95 	bl	8004d3a <quorem>
 8005810:	4639      	mov	r1, r7
 8005812:	9008      	str	r0, [sp, #32]
 8005814:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005818:	4648      	mov	r0, r9
 800581a:	f000 fc57 	bl	80060cc <__mcmp>
 800581e:	462a      	mov	r2, r5
 8005820:	9009      	str	r0, [sp, #36]	@ 0x24
 8005822:	4621      	mov	r1, r4
 8005824:	4658      	mov	r0, fp
 8005826:	f000 fc6d 	bl	8006104 <__mdiff>
 800582a:	68c2      	ldr	r2, [r0, #12]
 800582c:	4606      	mov	r6, r0
 800582e:	bb02      	cbnz	r2, 8005872 <_dtoa_r+0xa22>
 8005830:	4601      	mov	r1, r0
 8005832:	4648      	mov	r0, r9
 8005834:	f000 fc4a 	bl	80060cc <__mcmp>
 8005838:	4602      	mov	r2, r0
 800583a:	4631      	mov	r1, r6
 800583c:	4658      	mov	r0, fp
 800583e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005840:	f000 fa0c 	bl	8005c5c <_Bfree>
 8005844:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005846:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005848:	9e07      	ldr	r6, [sp, #28]
 800584a:	ea43 0102 	orr.w	r1, r3, r2
 800584e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005850:	4319      	orrs	r1, r3
 8005852:	d110      	bne.n	8005876 <_dtoa_r+0xa26>
 8005854:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005858:	d029      	beq.n	80058ae <_dtoa_r+0xa5e>
 800585a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800585c:	2b00      	cmp	r3, #0
 800585e:	dd02      	ble.n	8005866 <_dtoa_r+0xa16>
 8005860:	9b08      	ldr	r3, [sp, #32]
 8005862:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005866:	9b02      	ldr	r3, [sp, #8]
 8005868:	f883 8000 	strb.w	r8, [r3]
 800586c:	e63b      	b.n	80054e6 <_dtoa_r+0x696>
 800586e:	4628      	mov	r0, r5
 8005870:	e7bb      	b.n	80057ea <_dtoa_r+0x99a>
 8005872:	2201      	movs	r2, #1
 8005874:	e7e1      	b.n	800583a <_dtoa_r+0x9ea>
 8005876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005878:	2b00      	cmp	r3, #0
 800587a:	db04      	blt.n	8005886 <_dtoa_r+0xa36>
 800587c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800587e:	430b      	orrs	r3, r1
 8005880:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005882:	430b      	orrs	r3, r1
 8005884:	d120      	bne.n	80058c8 <_dtoa_r+0xa78>
 8005886:	2a00      	cmp	r2, #0
 8005888:	dded      	ble.n	8005866 <_dtoa_r+0xa16>
 800588a:	4649      	mov	r1, r9
 800588c:	2201      	movs	r2, #1
 800588e:	4658      	mov	r0, fp
 8005890:	f000 fbb0 	bl	8005ff4 <__lshift>
 8005894:	4621      	mov	r1, r4
 8005896:	4681      	mov	r9, r0
 8005898:	f000 fc18 	bl	80060cc <__mcmp>
 800589c:	2800      	cmp	r0, #0
 800589e:	dc03      	bgt.n	80058a8 <_dtoa_r+0xa58>
 80058a0:	d1e1      	bne.n	8005866 <_dtoa_r+0xa16>
 80058a2:	f018 0f01 	tst.w	r8, #1
 80058a6:	d0de      	beq.n	8005866 <_dtoa_r+0xa16>
 80058a8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80058ac:	d1d8      	bne.n	8005860 <_dtoa_r+0xa10>
 80058ae:	2339      	movs	r3, #57	@ 0x39
 80058b0:	9a02      	ldr	r2, [sp, #8]
 80058b2:	7013      	strb	r3, [r2, #0]
 80058b4:	4633      	mov	r3, r6
 80058b6:	461e      	mov	r6, r3
 80058b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80058bc:	3b01      	subs	r3, #1
 80058be:	2a39      	cmp	r2, #57	@ 0x39
 80058c0:	d052      	beq.n	8005968 <_dtoa_r+0xb18>
 80058c2:	3201      	adds	r2, #1
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	e60e      	b.n	80054e6 <_dtoa_r+0x696>
 80058c8:	2a00      	cmp	r2, #0
 80058ca:	dd07      	ble.n	80058dc <_dtoa_r+0xa8c>
 80058cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80058d0:	d0ed      	beq.n	80058ae <_dtoa_r+0xa5e>
 80058d2:	9a02      	ldr	r2, [sp, #8]
 80058d4:	f108 0301 	add.w	r3, r8, #1
 80058d8:	7013      	strb	r3, [r2, #0]
 80058da:	e604      	b.n	80054e6 <_dtoa_r+0x696>
 80058dc:	9b07      	ldr	r3, [sp, #28]
 80058de:	9a07      	ldr	r2, [sp, #28]
 80058e0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80058e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d028      	beq.n	800593c <_dtoa_r+0xaec>
 80058ea:	4649      	mov	r1, r9
 80058ec:	2300      	movs	r3, #0
 80058ee:	220a      	movs	r2, #10
 80058f0:	4658      	mov	r0, fp
 80058f2:	f000 f9d5 	bl	8005ca0 <__multadd>
 80058f6:	42af      	cmp	r7, r5
 80058f8:	4681      	mov	r9, r0
 80058fa:	f04f 0300 	mov.w	r3, #0
 80058fe:	f04f 020a 	mov.w	r2, #10
 8005902:	4639      	mov	r1, r7
 8005904:	4658      	mov	r0, fp
 8005906:	d107      	bne.n	8005918 <_dtoa_r+0xac8>
 8005908:	f000 f9ca 	bl	8005ca0 <__multadd>
 800590c:	4607      	mov	r7, r0
 800590e:	4605      	mov	r5, r0
 8005910:	9b07      	ldr	r3, [sp, #28]
 8005912:	3301      	adds	r3, #1
 8005914:	9307      	str	r3, [sp, #28]
 8005916:	e774      	b.n	8005802 <_dtoa_r+0x9b2>
 8005918:	f000 f9c2 	bl	8005ca0 <__multadd>
 800591c:	4629      	mov	r1, r5
 800591e:	4607      	mov	r7, r0
 8005920:	2300      	movs	r3, #0
 8005922:	220a      	movs	r2, #10
 8005924:	4658      	mov	r0, fp
 8005926:	f000 f9bb 	bl	8005ca0 <__multadd>
 800592a:	4605      	mov	r5, r0
 800592c:	e7f0      	b.n	8005910 <_dtoa_r+0xac0>
 800592e:	9b08      	ldr	r3, [sp, #32]
 8005930:	2700      	movs	r7, #0
 8005932:	2b00      	cmp	r3, #0
 8005934:	bfcc      	ite	gt
 8005936:	461e      	movgt	r6, r3
 8005938:	2601      	movle	r6, #1
 800593a:	4456      	add	r6, sl
 800593c:	4649      	mov	r1, r9
 800593e:	2201      	movs	r2, #1
 8005940:	4658      	mov	r0, fp
 8005942:	f000 fb57 	bl	8005ff4 <__lshift>
 8005946:	4621      	mov	r1, r4
 8005948:	4681      	mov	r9, r0
 800594a:	f000 fbbf 	bl	80060cc <__mcmp>
 800594e:	2800      	cmp	r0, #0
 8005950:	dcb0      	bgt.n	80058b4 <_dtoa_r+0xa64>
 8005952:	d102      	bne.n	800595a <_dtoa_r+0xb0a>
 8005954:	f018 0f01 	tst.w	r8, #1
 8005958:	d1ac      	bne.n	80058b4 <_dtoa_r+0xa64>
 800595a:	4633      	mov	r3, r6
 800595c:	461e      	mov	r6, r3
 800595e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005962:	2a30      	cmp	r2, #48	@ 0x30
 8005964:	d0fa      	beq.n	800595c <_dtoa_r+0xb0c>
 8005966:	e5be      	b.n	80054e6 <_dtoa_r+0x696>
 8005968:	459a      	cmp	sl, r3
 800596a:	d1a4      	bne.n	80058b6 <_dtoa_r+0xa66>
 800596c:	9b04      	ldr	r3, [sp, #16]
 800596e:	3301      	adds	r3, #1
 8005970:	9304      	str	r3, [sp, #16]
 8005972:	2331      	movs	r3, #49	@ 0x31
 8005974:	f88a 3000 	strb.w	r3, [sl]
 8005978:	e5b5      	b.n	80054e6 <_dtoa_r+0x696>
 800597a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800597c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80059dc <_dtoa_r+0xb8c>
 8005980:	b11b      	cbz	r3, 800598a <_dtoa_r+0xb3a>
 8005982:	f10a 0308 	add.w	r3, sl, #8
 8005986:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	4650      	mov	r0, sl
 800598c:	b017      	add	sp, #92	@ 0x5c
 800598e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005992:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005994:	2b01      	cmp	r3, #1
 8005996:	f77f ae3d 	ble.w	8005614 <_dtoa_r+0x7c4>
 800599a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800599c:	930a      	str	r3, [sp, #40]	@ 0x28
 800599e:	2001      	movs	r0, #1
 80059a0:	e65b      	b.n	800565a <_dtoa_r+0x80a>
 80059a2:	9b08      	ldr	r3, [sp, #32]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f77f aed6 	ble.w	8005756 <_dtoa_r+0x906>
 80059aa:	4656      	mov	r6, sl
 80059ac:	4621      	mov	r1, r4
 80059ae:	4648      	mov	r0, r9
 80059b0:	f7ff f9c3 	bl	8004d3a <quorem>
 80059b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80059b8:	9b08      	ldr	r3, [sp, #32]
 80059ba:	f806 8b01 	strb.w	r8, [r6], #1
 80059be:	eba6 020a 	sub.w	r2, r6, sl
 80059c2:	4293      	cmp	r3, r2
 80059c4:	ddb3      	ble.n	800592e <_dtoa_r+0xade>
 80059c6:	4649      	mov	r1, r9
 80059c8:	2300      	movs	r3, #0
 80059ca:	220a      	movs	r2, #10
 80059cc:	4658      	mov	r0, fp
 80059ce:	f000 f967 	bl	8005ca0 <__multadd>
 80059d2:	4681      	mov	r9, r0
 80059d4:	e7ea      	b.n	80059ac <_dtoa_r+0xb5c>
 80059d6:	bf00      	nop
 80059d8:	08006f5e 	.word	0x08006f5e
 80059dc:	08006ee2 	.word	0x08006ee2

080059e0 <_free_r>:
 80059e0:	b538      	push	{r3, r4, r5, lr}
 80059e2:	4605      	mov	r5, r0
 80059e4:	2900      	cmp	r1, #0
 80059e6:	d040      	beq.n	8005a6a <_free_r+0x8a>
 80059e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059ec:	1f0c      	subs	r4, r1, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bfb8      	it	lt
 80059f2:	18e4      	addlt	r4, r4, r3
 80059f4:	f000 f8e6 	bl	8005bc4 <__malloc_lock>
 80059f8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a6c <_free_r+0x8c>)
 80059fa:	6813      	ldr	r3, [r2, #0]
 80059fc:	b933      	cbnz	r3, 8005a0c <_free_r+0x2c>
 80059fe:	6063      	str	r3, [r4, #4]
 8005a00:	6014      	str	r4, [r2, #0]
 8005a02:	4628      	mov	r0, r5
 8005a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a08:	f000 b8e2 	b.w	8005bd0 <__malloc_unlock>
 8005a0c:	42a3      	cmp	r3, r4
 8005a0e:	d908      	bls.n	8005a22 <_free_r+0x42>
 8005a10:	6820      	ldr	r0, [r4, #0]
 8005a12:	1821      	adds	r1, r4, r0
 8005a14:	428b      	cmp	r3, r1
 8005a16:	bf01      	itttt	eq
 8005a18:	6819      	ldreq	r1, [r3, #0]
 8005a1a:	685b      	ldreq	r3, [r3, #4]
 8005a1c:	1809      	addeq	r1, r1, r0
 8005a1e:	6021      	streq	r1, [r4, #0]
 8005a20:	e7ed      	b.n	80059fe <_free_r+0x1e>
 8005a22:	461a      	mov	r2, r3
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	b10b      	cbz	r3, 8005a2c <_free_r+0x4c>
 8005a28:	42a3      	cmp	r3, r4
 8005a2a:	d9fa      	bls.n	8005a22 <_free_r+0x42>
 8005a2c:	6811      	ldr	r1, [r2, #0]
 8005a2e:	1850      	adds	r0, r2, r1
 8005a30:	42a0      	cmp	r0, r4
 8005a32:	d10b      	bne.n	8005a4c <_free_r+0x6c>
 8005a34:	6820      	ldr	r0, [r4, #0]
 8005a36:	4401      	add	r1, r0
 8005a38:	1850      	adds	r0, r2, r1
 8005a3a:	4283      	cmp	r3, r0
 8005a3c:	6011      	str	r1, [r2, #0]
 8005a3e:	d1e0      	bne.n	8005a02 <_free_r+0x22>
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	4408      	add	r0, r1
 8005a46:	6010      	str	r0, [r2, #0]
 8005a48:	6053      	str	r3, [r2, #4]
 8005a4a:	e7da      	b.n	8005a02 <_free_r+0x22>
 8005a4c:	d902      	bls.n	8005a54 <_free_r+0x74>
 8005a4e:	230c      	movs	r3, #12
 8005a50:	602b      	str	r3, [r5, #0]
 8005a52:	e7d6      	b.n	8005a02 <_free_r+0x22>
 8005a54:	6820      	ldr	r0, [r4, #0]
 8005a56:	1821      	adds	r1, r4, r0
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	bf01      	itttt	eq
 8005a5c:	6819      	ldreq	r1, [r3, #0]
 8005a5e:	685b      	ldreq	r3, [r3, #4]
 8005a60:	1809      	addeq	r1, r1, r0
 8005a62:	6021      	streq	r1, [r4, #0]
 8005a64:	6063      	str	r3, [r4, #4]
 8005a66:	6054      	str	r4, [r2, #4]
 8005a68:	e7cb      	b.n	8005a02 <_free_r+0x22>
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	20000510 	.word	0x20000510

08005a70 <malloc>:
 8005a70:	4b02      	ldr	r3, [pc, #8]	@ (8005a7c <malloc+0xc>)
 8005a72:	4601      	mov	r1, r0
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	f000 b825 	b.w	8005ac4 <_malloc_r>
 8005a7a:	bf00      	nop
 8005a7c:	20000068 	.word	0x20000068

08005a80 <sbrk_aligned>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	4e0f      	ldr	r6, [pc, #60]	@ (8005ac0 <sbrk_aligned+0x40>)
 8005a84:	460c      	mov	r4, r1
 8005a86:	6831      	ldr	r1, [r6, #0]
 8005a88:	4605      	mov	r5, r0
 8005a8a:	b911      	cbnz	r1, 8005a92 <sbrk_aligned+0x12>
 8005a8c:	f000 fe40 	bl	8006710 <_sbrk_r>
 8005a90:	6030      	str	r0, [r6, #0]
 8005a92:	4621      	mov	r1, r4
 8005a94:	4628      	mov	r0, r5
 8005a96:	f000 fe3b 	bl	8006710 <_sbrk_r>
 8005a9a:	1c43      	adds	r3, r0, #1
 8005a9c:	d103      	bne.n	8005aa6 <sbrk_aligned+0x26>
 8005a9e:	f04f 34ff 	mov.w	r4, #4294967295
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	bd70      	pop	{r4, r5, r6, pc}
 8005aa6:	1cc4      	adds	r4, r0, #3
 8005aa8:	f024 0403 	bic.w	r4, r4, #3
 8005aac:	42a0      	cmp	r0, r4
 8005aae:	d0f8      	beq.n	8005aa2 <sbrk_aligned+0x22>
 8005ab0:	1a21      	subs	r1, r4, r0
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f000 fe2c 	bl	8006710 <_sbrk_r>
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d1f2      	bne.n	8005aa2 <sbrk_aligned+0x22>
 8005abc:	e7ef      	b.n	8005a9e <sbrk_aligned+0x1e>
 8005abe:	bf00      	nop
 8005ac0:	2000050c 	.word	0x2000050c

08005ac4 <_malloc_r>:
 8005ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ac8:	1ccd      	adds	r5, r1, #3
 8005aca:	f025 0503 	bic.w	r5, r5, #3
 8005ace:	3508      	adds	r5, #8
 8005ad0:	2d0c      	cmp	r5, #12
 8005ad2:	bf38      	it	cc
 8005ad4:	250c      	movcc	r5, #12
 8005ad6:	2d00      	cmp	r5, #0
 8005ad8:	4606      	mov	r6, r0
 8005ada:	db01      	blt.n	8005ae0 <_malloc_r+0x1c>
 8005adc:	42a9      	cmp	r1, r5
 8005ade:	d904      	bls.n	8005aea <_malloc_r+0x26>
 8005ae0:	230c      	movs	r3, #12
 8005ae2:	6033      	str	r3, [r6, #0]
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bc0 <_malloc_r+0xfc>
 8005aee:	f000 f869 	bl	8005bc4 <__malloc_lock>
 8005af2:	f8d8 3000 	ldr.w	r3, [r8]
 8005af6:	461c      	mov	r4, r3
 8005af8:	bb44      	cbnz	r4, 8005b4c <_malloc_r+0x88>
 8005afa:	4629      	mov	r1, r5
 8005afc:	4630      	mov	r0, r6
 8005afe:	f7ff ffbf 	bl	8005a80 <sbrk_aligned>
 8005b02:	1c43      	adds	r3, r0, #1
 8005b04:	4604      	mov	r4, r0
 8005b06:	d158      	bne.n	8005bba <_malloc_r+0xf6>
 8005b08:	f8d8 4000 	ldr.w	r4, [r8]
 8005b0c:	4627      	mov	r7, r4
 8005b0e:	2f00      	cmp	r7, #0
 8005b10:	d143      	bne.n	8005b9a <_malloc_r+0xd6>
 8005b12:	2c00      	cmp	r4, #0
 8005b14:	d04b      	beq.n	8005bae <_malloc_r+0xea>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	4639      	mov	r1, r7
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	eb04 0903 	add.w	r9, r4, r3
 8005b20:	f000 fdf6 	bl	8006710 <_sbrk_r>
 8005b24:	4581      	cmp	r9, r0
 8005b26:	d142      	bne.n	8005bae <_malloc_r+0xea>
 8005b28:	6821      	ldr	r1, [r4, #0]
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	1a6d      	subs	r5, r5, r1
 8005b2e:	4629      	mov	r1, r5
 8005b30:	f7ff ffa6 	bl	8005a80 <sbrk_aligned>
 8005b34:	3001      	adds	r0, #1
 8005b36:	d03a      	beq.n	8005bae <_malloc_r+0xea>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	442b      	add	r3, r5
 8005b3c:	6023      	str	r3, [r4, #0]
 8005b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	bb62      	cbnz	r2, 8005ba0 <_malloc_r+0xdc>
 8005b46:	f8c8 7000 	str.w	r7, [r8]
 8005b4a:	e00f      	b.n	8005b6c <_malloc_r+0xa8>
 8005b4c:	6822      	ldr	r2, [r4, #0]
 8005b4e:	1b52      	subs	r2, r2, r5
 8005b50:	d420      	bmi.n	8005b94 <_malloc_r+0xd0>
 8005b52:	2a0b      	cmp	r2, #11
 8005b54:	d917      	bls.n	8005b86 <_malloc_r+0xc2>
 8005b56:	1961      	adds	r1, r4, r5
 8005b58:	42a3      	cmp	r3, r4
 8005b5a:	6025      	str	r5, [r4, #0]
 8005b5c:	bf18      	it	ne
 8005b5e:	6059      	strne	r1, [r3, #4]
 8005b60:	6863      	ldr	r3, [r4, #4]
 8005b62:	bf08      	it	eq
 8005b64:	f8c8 1000 	streq.w	r1, [r8]
 8005b68:	5162      	str	r2, [r4, r5]
 8005b6a:	604b      	str	r3, [r1, #4]
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	f000 f82f 	bl	8005bd0 <__malloc_unlock>
 8005b72:	f104 000b 	add.w	r0, r4, #11
 8005b76:	1d23      	adds	r3, r4, #4
 8005b78:	f020 0007 	bic.w	r0, r0, #7
 8005b7c:	1ac2      	subs	r2, r0, r3
 8005b7e:	bf1c      	itt	ne
 8005b80:	1a1b      	subne	r3, r3, r0
 8005b82:	50a3      	strne	r3, [r4, r2]
 8005b84:	e7af      	b.n	8005ae6 <_malloc_r+0x22>
 8005b86:	6862      	ldr	r2, [r4, #4]
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	bf0c      	ite	eq
 8005b8c:	f8c8 2000 	streq.w	r2, [r8]
 8005b90:	605a      	strne	r2, [r3, #4]
 8005b92:	e7eb      	b.n	8005b6c <_malloc_r+0xa8>
 8005b94:	4623      	mov	r3, r4
 8005b96:	6864      	ldr	r4, [r4, #4]
 8005b98:	e7ae      	b.n	8005af8 <_malloc_r+0x34>
 8005b9a:	463c      	mov	r4, r7
 8005b9c:	687f      	ldr	r7, [r7, #4]
 8005b9e:	e7b6      	b.n	8005b0e <_malloc_r+0x4a>
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	d1fb      	bne.n	8005ba0 <_malloc_r+0xdc>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	6053      	str	r3, [r2, #4]
 8005bac:	e7de      	b.n	8005b6c <_malloc_r+0xa8>
 8005bae:	230c      	movs	r3, #12
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	6033      	str	r3, [r6, #0]
 8005bb4:	f000 f80c 	bl	8005bd0 <__malloc_unlock>
 8005bb8:	e794      	b.n	8005ae4 <_malloc_r+0x20>
 8005bba:	6005      	str	r5, [r0, #0]
 8005bbc:	e7d6      	b.n	8005b6c <_malloc_r+0xa8>
 8005bbe:	bf00      	nop
 8005bc0:	20000510 	.word	0x20000510

08005bc4 <__malloc_lock>:
 8005bc4:	4801      	ldr	r0, [pc, #4]	@ (8005bcc <__malloc_lock+0x8>)
 8005bc6:	f7ff b8a8 	b.w	8004d1a <__retarget_lock_acquire_recursive>
 8005bca:	bf00      	nop
 8005bcc:	20000508 	.word	0x20000508

08005bd0 <__malloc_unlock>:
 8005bd0:	4801      	ldr	r0, [pc, #4]	@ (8005bd8 <__malloc_unlock+0x8>)
 8005bd2:	f7ff b8a3 	b.w	8004d1c <__retarget_lock_release_recursive>
 8005bd6:	bf00      	nop
 8005bd8:	20000508 	.word	0x20000508

08005bdc <_Balloc>:
 8005bdc:	b570      	push	{r4, r5, r6, lr}
 8005bde:	69c6      	ldr	r6, [r0, #28]
 8005be0:	4604      	mov	r4, r0
 8005be2:	460d      	mov	r5, r1
 8005be4:	b976      	cbnz	r6, 8005c04 <_Balloc+0x28>
 8005be6:	2010      	movs	r0, #16
 8005be8:	f7ff ff42 	bl	8005a70 <malloc>
 8005bec:	4602      	mov	r2, r0
 8005bee:	61e0      	str	r0, [r4, #28]
 8005bf0:	b920      	cbnz	r0, 8005bfc <_Balloc+0x20>
 8005bf2:	216b      	movs	r1, #107	@ 0x6b
 8005bf4:	4b17      	ldr	r3, [pc, #92]	@ (8005c54 <_Balloc+0x78>)
 8005bf6:	4818      	ldr	r0, [pc, #96]	@ (8005c58 <_Balloc+0x7c>)
 8005bf8:	f000 fda8 	bl	800674c <__assert_func>
 8005bfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c00:	6006      	str	r6, [r0, #0]
 8005c02:	60c6      	str	r6, [r0, #12]
 8005c04:	69e6      	ldr	r6, [r4, #28]
 8005c06:	68f3      	ldr	r3, [r6, #12]
 8005c08:	b183      	cbz	r3, 8005c2c <_Balloc+0x50>
 8005c0a:	69e3      	ldr	r3, [r4, #28]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c12:	b9b8      	cbnz	r0, 8005c44 <_Balloc+0x68>
 8005c14:	2101      	movs	r1, #1
 8005c16:	fa01 f605 	lsl.w	r6, r1, r5
 8005c1a:	1d72      	adds	r2, r6, #5
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	0092      	lsls	r2, r2, #2
 8005c20:	f000 fdb2 	bl	8006788 <_calloc_r>
 8005c24:	b160      	cbz	r0, 8005c40 <_Balloc+0x64>
 8005c26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c2a:	e00e      	b.n	8005c4a <_Balloc+0x6e>
 8005c2c:	2221      	movs	r2, #33	@ 0x21
 8005c2e:	2104      	movs	r1, #4
 8005c30:	4620      	mov	r0, r4
 8005c32:	f000 fda9 	bl	8006788 <_calloc_r>
 8005c36:	69e3      	ldr	r3, [r4, #28]
 8005c38:	60f0      	str	r0, [r6, #12]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e4      	bne.n	8005c0a <_Balloc+0x2e>
 8005c40:	2000      	movs	r0, #0
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	6802      	ldr	r2, [r0, #0]
 8005c46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c50:	e7f7      	b.n	8005c42 <_Balloc+0x66>
 8005c52:	bf00      	nop
 8005c54:	08006eef 	.word	0x08006eef
 8005c58:	08006f6f 	.word	0x08006f6f

08005c5c <_Bfree>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	69c6      	ldr	r6, [r0, #28]
 8005c60:	4605      	mov	r5, r0
 8005c62:	460c      	mov	r4, r1
 8005c64:	b976      	cbnz	r6, 8005c84 <_Bfree+0x28>
 8005c66:	2010      	movs	r0, #16
 8005c68:	f7ff ff02 	bl	8005a70 <malloc>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	61e8      	str	r0, [r5, #28]
 8005c70:	b920      	cbnz	r0, 8005c7c <_Bfree+0x20>
 8005c72:	218f      	movs	r1, #143	@ 0x8f
 8005c74:	4b08      	ldr	r3, [pc, #32]	@ (8005c98 <_Bfree+0x3c>)
 8005c76:	4809      	ldr	r0, [pc, #36]	@ (8005c9c <_Bfree+0x40>)
 8005c78:	f000 fd68 	bl	800674c <__assert_func>
 8005c7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c80:	6006      	str	r6, [r0, #0]
 8005c82:	60c6      	str	r6, [r0, #12]
 8005c84:	b13c      	cbz	r4, 8005c96 <_Bfree+0x3a>
 8005c86:	69eb      	ldr	r3, [r5, #28]
 8005c88:	6862      	ldr	r2, [r4, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c90:	6021      	str	r1, [r4, #0]
 8005c92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	08006eef 	.word	0x08006eef
 8005c9c:	08006f6f 	.word	0x08006f6f

08005ca0 <__multadd>:
 8005ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca4:	4607      	mov	r7, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	461e      	mov	r6, r3
 8005caa:	2000      	movs	r0, #0
 8005cac:	690d      	ldr	r5, [r1, #16]
 8005cae:	f101 0c14 	add.w	ip, r1, #20
 8005cb2:	f8dc 3000 	ldr.w	r3, [ip]
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	b299      	uxth	r1, r3
 8005cba:	fb02 6101 	mla	r1, r2, r1, r6
 8005cbe:	0c1e      	lsrs	r6, r3, #16
 8005cc0:	0c0b      	lsrs	r3, r1, #16
 8005cc2:	fb02 3306 	mla	r3, r2, r6, r3
 8005cc6:	b289      	uxth	r1, r1
 8005cc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ccc:	4285      	cmp	r5, r0
 8005cce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005cd2:	f84c 1b04 	str.w	r1, [ip], #4
 8005cd6:	dcec      	bgt.n	8005cb2 <__multadd+0x12>
 8005cd8:	b30e      	cbz	r6, 8005d1e <__multadd+0x7e>
 8005cda:	68a3      	ldr	r3, [r4, #8]
 8005cdc:	42ab      	cmp	r3, r5
 8005cde:	dc19      	bgt.n	8005d14 <__multadd+0x74>
 8005ce0:	6861      	ldr	r1, [r4, #4]
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	3101      	adds	r1, #1
 8005ce6:	f7ff ff79 	bl	8005bdc <_Balloc>
 8005cea:	4680      	mov	r8, r0
 8005cec:	b928      	cbnz	r0, 8005cfa <__multadd+0x5a>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	21ba      	movs	r1, #186	@ 0xba
 8005cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8005d24 <__multadd+0x84>)
 8005cf4:	480c      	ldr	r0, [pc, #48]	@ (8005d28 <__multadd+0x88>)
 8005cf6:	f000 fd29 	bl	800674c <__assert_func>
 8005cfa:	6922      	ldr	r2, [r4, #16]
 8005cfc:	f104 010c 	add.w	r1, r4, #12
 8005d00:	3202      	adds	r2, #2
 8005d02:	0092      	lsls	r2, r2, #2
 8005d04:	300c      	adds	r0, #12
 8005d06:	f000 fd13 	bl	8006730 <memcpy>
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	f7ff ffa5 	bl	8005c5c <_Bfree>
 8005d12:	4644      	mov	r4, r8
 8005d14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d18:	3501      	adds	r5, #1
 8005d1a:	615e      	str	r6, [r3, #20]
 8005d1c:	6125      	str	r5, [r4, #16]
 8005d1e:	4620      	mov	r0, r4
 8005d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d24:	08006f5e 	.word	0x08006f5e
 8005d28:	08006f6f 	.word	0x08006f6f

08005d2c <__hi0bits>:
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005d32:	bf3a      	itte	cc
 8005d34:	0403      	lslcc	r3, r0, #16
 8005d36:	2010      	movcc	r0, #16
 8005d38:	2000      	movcs	r0, #0
 8005d3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d3e:	bf3c      	itt	cc
 8005d40:	021b      	lslcc	r3, r3, #8
 8005d42:	3008      	addcc	r0, #8
 8005d44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d48:	bf3c      	itt	cc
 8005d4a:	011b      	lslcc	r3, r3, #4
 8005d4c:	3004      	addcc	r0, #4
 8005d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d52:	bf3c      	itt	cc
 8005d54:	009b      	lslcc	r3, r3, #2
 8005d56:	3002      	addcc	r0, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	db05      	blt.n	8005d68 <__hi0bits+0x3c>
 8005d5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005d60:	f100 0001 	add.w	r0, r0, #1
 8005d64:	bf08      	it	eq
 8005d66:	2020      	moveq	r0, #32
 8005d68:	4770      	bx	lr

08005d6a <__lo0bits>:
 8005d6a:	6803      	ldr	r3, [r0, #0]
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	f013 0007 	ands.w	r0, r3, #7
 8005d72:	d00b      	beq.n	8005d8c <__lo0bits+0x22>
 8005d74:	07d9      	lsls	r1, r3, #31
 8005d76:	d421      	bmi.n	8005dbc <__lo0bits+0x52>
 8005d78:	0798      	lsls	r0, r3, #30
 8005d7a:	bf49      	itett	mi
 8005d7c:	085b      	lsrmi	r3, r3, #1
 8005d7e:	089b      	lsrpl	r3, r3, #2
 8005d80:	2001      	movmi	r0, #1
 8005d82:	6013      	strmi	r3, [r2, #0]
 8005d84:	bf5c      	itt	pl
 8005d86:	2002      	movpl	r0, #2
 8005d88:	6013      	strpl	r3, [r2, #0]
 8005d8a:	4770      	bx	lr
 8005d8c:	b299      	uxth	r1, r3
 8005d8e:	b909      	cbnz	r1, 8005d94 <__lo0bits+0x2a>
 8005d90:	2010      	movs	r0, #16
 8005d92:	0c1b      	lsrs	r3, r3, #16
 8005d94:	b2d9      	uxtb	r1, r3
 8005d96:	b909      	cbnz	r1, 8005d9c <__lo0bits+0x32>
 8005d98:	3008      	adds	r0, #8
 8005d9a:	0a1b      	lsrs	r3, r3, #8
 8005d9c:	0719      	lsls	r1, r3, #28
 8005d9e:	bf04      	itt	eq
 8005da0:	091b      	lsreq	r3, r3, #4
 8005da2:	3004      	addeq	r0, #4
 8005da4:	0799      	lsls	r1, r3, #30
 8005da6:	bf04      	itt	eq
 8005da8:	089b      	lsreq	r3, r3, #2
 8005daa:	3002      	addeq	r0, #2
 8005dac:	07d9      	lsls	r1, r3, #31
 8005dae:	d403      	bmi.n	8005db8 <__lo0bits+0x4e>
 8005db0:	085b      	lsrs	r3, r3, #1
 8005db2:	f100 0001 	add.w	r0, r0, #1
 8005db6:	d003      	beq.n	8005dc0 <__lo0bits+0x56>
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	4770      	bx	lr
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	4770      	bx	lr
 8005dc0:	2020      	movs	r0, #32
 8005dc2:	4770      	bx	lr

08005dc4 <__i2b>:
 8005dc4:	b510      	push	{r4, lr}
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	2101      	movs	r1, #1
 8005dca:	f7ff ff07 	bl	8005bdc <_Balloc>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	b928      	cbnz	r0, 8005dde <__i2b+0x1a>
 8005dd2:	f240 1145 	movw	r1, #325	@ 0x145
 8005dd6:	4b04      	ldr	r3, [pc, #16]	@ (8005de8 <__i2b+0x24>)
 8005dd8:	4804      	ldr	r0, [pc, #16]	@ (8005dec <__i2b+0x28>)
 8005dda:	f000 fcb7 	bl	800674c <__assert_func>
 8005dde:	2301      	movs	r3, #1
 8005de0:	6144      	str	r4, [r0, #20]
 8005de2:	6103      	str	r3, [r0, #16]
 8005de4:	bd10      	pop	{r4, pc}
 8005de6:	bf00      	nop
 8005de8:	08006f5e 	.word	0x08006f5e
 8005dec:	08006f6f 	.word	0x08006f6f

08005df0 <__multiply>:
 8005df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	4614      	mov	r4, r2
 8005df6:	690a      	ldr	r2, [r1, #16]
 8005df8:	6923      	ldr	r3, [r4, #16]
 8005dfa:	460f      	mov	r7, r1
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	bfa2      	ittt	ge
 8005e00:	4623      	movge	r3, r4
 8005e02:	460c      	movge	r4, r1
 8005e04:	461f      	movge	r7, r3
 8005e06:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005e0a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005e0e:	68a3      	ldr	r3, [r4, #8]
 8005e10:	6861      	ldr	r1, [r4, #4]
 8005e12:	eb0a 0609 	add.w	r6, sl, r9
 8005e16:	42b3      	cmp	r3, r6
 8005e18:	b085      	sub	sp, #20
 8005e1a:	bfb8      	it	lt
 8005e1c:	3101      	addlt	r1, #1
 8005e1e:	f7ff fedd 	bl	8005bdc <_Balloc>
 8005e22:	b930      	cbnz	r0, 8005e32 <__multiply+0x42>
 8005e24:	4602      	mov	r2, r0
 8005e26:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005e2a:	4b43      	ldr	r3, [pc, #268]	@ (8005f38 <__multiply+0x148>)
 8005e2c:	4843      	ldr	r0, [pc, #268]	@ (8005f3c <__multiply+0x14c>)
 8005e2e:	f000 fc8d 	bl	800674c <__assert_func>
 8005e32:	f100 0514 	add.w	r5, r0, #20
 8005e36:	462b      	mov	r3, r5
 8005e38:	2200      	movs	r2, #0
 8005e3a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e3e:	4543      	cmp	r3, r8
 8005e40:	d321      	bcc.n	8005e86 <__multiply+0x96>
 8005e42:	f107 0114 	add.w	r1, r7, #20
 8005e46:	f104 0214 	add.w	r2, r4, #20
 8005e4a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005e4e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005e52:	9302      	str	r3, [sp, #8]
 8005e54:	1b13      	subs	r3, r2, r4
 8005e56:	3b15      	subs	r3, #21
 8005e58:	f023 0303 	bic.w	r3, r3, #3
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	f104 0715 	add.w	r7, r4, #21
 8005e62:	42ba      	cmp	r2, r7
 8005e64:	bf38      	it	cc
 8005e66:	2304      	movcc	r3, #4
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	9b02      	ldr	r3, [sp, #8]
 8005e6c:	9103      	str	r1, [sp, #12]
 8005e6e:	428b      	cmp	r3, r1
 8005e70:	d80c      	bhi.n	8005e8c <__multiply+0x9c>
 8005e72:	2e00      	cmp	r6, #0
 8005e74:	dd03      	ble.n	8005e7e <__multiply+0x8e>
 8005e76:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d05a      	beq.n	8005f34 <__multiply+0x144>
 8005e7e:	6106      	str	r6, [r0, #16]
 8005e80:	b005      	add	sp, #20
 8005e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e86:	f843 2b04 	str.w	r2, [r3], #4
 8005e8a:	e7d8      	b.n	8005e3e <__multiply+0x4e>
 8005e8c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005e90:	f1ba 0f00 	cmp.w	sl, #0
 8005e94:	d023      	beq.n	8005ede <__multiply+0xee>
 8005e96:	46a9      	mov	r9, r5
 8005e98:	f04f 0c00 	mov.w	ip, #0
 8005e9c:	f104 0e14 	add.w	lr, r4, #20
 8005ea0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005ea4:	f8d9 3000 	ldr.w	r3, [r9]
 8005ea8:	fa1f fb87 	uxth.w	fp, r7
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	fb0a 330b 	mla	r3, sl, fp, r3
 8005eb2:	4463      	add	r3, ip
 8005eb4:	f8d9 c000 	ldr.w	ip, [r9]
 8005eb8:	0c3f      	lsrs	r7, r7, #16
 8005eba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005ebe:	fb0a c707 	mla	r7, sl, r7, ip
 8005ec2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ecc:	4572      	cmp	r2, lr
 8005ece:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005ed2:	f849 3b04 	str.w	r3, [r9], #4
 8005ed6:	d8e3      	bhi.n	8005ea0 <__multiply+0xb0>
 8005ed8:	9b01      	ldr	r3, [sp, #4]
 8005eda:	f845 c003 	str.w	ip, [r5, r3]
 8005ede:	9b03      	ldr	r3, [sp, #12]
 8005ee0:	3104      	adds	r1, #4
 8005ee2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005ee6:	f1b9 0f00 	cmp.w	r9, #0
 8005eea:	d021      	beq.n	8005f30 <__multiply+0x140>
 8005eec:	46ae      	mov	lr, r5
 8005eee:	f04f 0a00 	mov.w	sl, #0
 8005ef2:	682b      	ldr	r3, [r5, #0]
 8005ef4:	f104 0c14 	add.w	ip, r4, #20
 8005ef8:	f8bc b000 	ldrh.w	fp, [ip]
 8005efc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	fb09 770b 	mla	r7, r9, fp, r7
 8005f06:	4457      	add	r7, sl
 8005f08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005f0c:	f84e 3b04 	str.w	r3, [lr], #4
 8005f10:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005f14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f18:	f8be 3000 	ldrh.w	r3, [lr]
 8005f1c:	4562      	cmp	r2, ip
 8005f1e:	fb09 330a 	mla	r3, r9, sl, r3
 8005f22:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005f26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f2a:	d8e5      	bhi.n	8005ef8 <__multiply+0x108>
 8005f2c:	9f01      	ldr	r7, [sp, #4]
 8005f2e:	51eb      	str	r3, [r5, r7]
 8005f30:	3504      	adds	r5, #4
 8005f32:	e79a      	b.n	8005e6a <__multiply+0x7a>
 8005f34:	3e01      	subs	r6, #1
 8005f36:	e79c      	b.n	8005e72 <__multiply+0x82>
 8005f38:	08006f5e 	.word	0x08006f5e
 8005f3c:	08006f6f 	.word	0x08006f6f

08005f40 <__pow5mult>:
 8005f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f44:	4615      	mov	r5, r2
 8005f46:	f012 0203 	ands.w	r2, r2, #3
 8005f4a:	4607      	mov	r7, r0
 8005f4c:	460e      	mov	r6, r1
 8005f4e:	d007      	beq.n	8005f60 <__pow5mult+0x20>
 8005f50:	4c25      	ldr	r4, [pc, #148]	@ (8005fe8 <__pow5mult+0xa8>)
 8005f52:	3a01      	subs	r2, #1
 8005f54:	2300      	movs	r3, #0
 8005f56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f5a:	f7ff fea1 	bl	8005ca0 <__multadd>
 8005f5e:	4606      	mov	r6, r0
 8005f60:	10ad      	asrs	r5, r5, #2
 8005f62:	d03d      	beq.n	8005fe0 <__pow5mult+0xa0>
 8005f64:	69fc      	ldr	r4, [r7, #28]
 8005f66:	b97c      	cbnz	r4, 8005f88 <__pow5mult+0x48>
 8005f68:	2010      	movs	r0, #16
 8005f6a:	f7ff fd81 	bl	8005a70 <malloc>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	61f8      	str	r0, [r7, #28]
 8005f72:	b928      	cbnz	r0, 8005f80 <__pow5mult+0x40>
 8005f74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005f78:	4b1c      	ldr	r3, [pc, #112]	@ (8005fec <__pow5mult+0xac>)
 8005f7a:	481d      	ldr	r0, [pc, #116]	@ (8005ff0 <__pow5mult+0xb0>)
 8005f7c:	f000 fbe6 	bl	800674c <__assert_func>
 8005f80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f84:	6004      	str	r4, [r0, #0]
 8005f86:	60c4      	str	r4, [r0, #12]
 8005f88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005f8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f90:	b94c      	cbnz	r4, 8005fa6 <__pow5mult+0x66>
 8005f92:	f240 2171 	movw	r1, #625	@ 0x271
 8005f96:	4638      	mov	r0, r7
 8005f98:	f7ff ff14 	bl	8005dc4 <__i2b>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	f8c8 0008 	str.w	r0, [r8, #8]
 8005fa4:	6003      	str	r3, [r0, #0]
 8005fa6:	f04f 0900 	mov.w	r9, #0
 8005faa:	07eb      	lsls	r3, r5, #31
 8005fac:	d50a      	bpl.n	8005fc4 <__pow5mult+0x84>
 8005fae:	4631      	mov	r1, r6
 8005fb0:	4622      	mov	r2, r4
 8005fb2:	4638      	mov	r0, r7
 8005fb4:	f7ff ff1c 	bl	8005df0 <__multiply>
 8005fb8:	4680      	mov	r8, r0
 8005fba:	4631      	mov	r1, r6
 8005fbc:	4638      	mov	r0, r7
 8005fbe:	f7ff fe4d 	bl	8005c5c <_Bfree>
 8005fc2:	4646      	mov	r6, r8
 8005fc4:	106d      	asrs	r5, r5, #1
 8005fc6:	d00b      	beq.n	8005fe0 <__pow5mult+0xa0>
 8005fc8:	6820      	ldr	r0, [r4, #0]
 8005fca:	b938      	cbnz	r0, 8005fdc <__pow5mult+0x9c>
 8005fcc:	4622      	mov	r2, r4
 8005fce:	4621      	mov	r1, r4
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	f7ff ff0d 	bl	8005df0 <__multiply>
 8005fd6:	6020      	str	r0, [r4, #0]
 8005fd8:	f8c0 9000 	str.w	r9, [r0]
 8005fdc:	4604      	mov	r4, r0
 8005fde:	e7e4      	b.n	8005faa <__pow5mult+0x6a>
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fe6:	bf00      	nop
 8005fe8:	08006fc8 	.word	0x08006fc8
 8005fec:	08006eef 	.word	0x08006eef
 8005ff0:	08006f6f 	.word	0x08006f6f

08005ff4 <__lshift>:
 8005ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	4607      	mov	r7, r0
 8005ffc:	4691      	mov	r9, r2
 8005ffe:	6923      	ldr	r3, [r4, #16]
 8006000:	6849      	ldr	r1, [r1, #4]
 8006002:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006006:	68a3      	ldr	r3, [r4, #8]
 8006008:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800600c:	f108 0601 	add.w	r6, r8, #1
 8006010:	42b3      	cmp	r3, r6
 8006012:	db0b      	blt.n	800602c <__lshift+0x38>
 8006014:	4638      	mov	r0, r7
 8006016:	f7ff fde1 	bl	8005bdc <_Balloc>
 800601a:	4605      	mov	r5, r0
 800601c:	b948      	cbnz	r0, 8006032 <__lshift+0x3e>
 800601e:	4602      	mov	r2, r0
 8006020:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006024:	4b27      	ldr	r3, [pc, #156]	@ (80060c4 <__lshift+0xd0>)
 8006026:	4828      	ldr	r0, [pc, #160]	@ (80060c8 <__lshift+0xd4>)
 8006028:	f000 fb90 	bl	800674c <__assert_func>
 800602c:	3101      	adds	r1, #1
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	e7ee      	b.n	8006010 <__lshift+0x1c>
 8006032:	2300      	movs	r3, #0
 8006034:	f100 0114 	add.w	r1, r0, #20
 8006038:	f100 0210 	add.w	r2, r0, #16
 800603c:	4618      	mov	r0, r3
 800603e:	4553      	cmp	r3, sl
 8006040:	db33      	blt.n	80060aa <__lshift+0xb6>
 8006042:	6920      	ldr	r0, [r4, #16]
 8006044:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006048:	f104 0314 	add.w	r3, r4, #20
 800604c:	f019 091f 	ands.w	r9, r9, #31
 8006050:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006054:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006058:	d02b      	beq.n	80060b2 <__lshift+0xbe>
 800605a:	468a      	mov	sl, r1
 800605c:	2200      	movs	r2, #0
 800605e:	f1c9 0e20 	rsb	lr, r9, #32
 8006062:	6818      	ldr	r0, [r3, #0]
 8006064:	fa00 f009 	lsl.w	r0, r0, r9
 8006068:	4310      	orrs	r0, r2
 800606a:	f84a 0b04 	str.w	r0, [sl], #4
 800606e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006072:	459c      	cmp	ip, r3
 8006074:	fa22 f20e 	lsr.w	r2, r2, lr
 8006078:	d8f3      	bhi.n	8006062 <__lshift+0x6e>
 800607a:	ebac 0304 	sub.w	r3, ip, r4
 800607e:	3b15      	subs	r3, #21
 8006080:	f023 0303 	bic.w	r3, r3, #3
 8006084:	3304      	adds	r3, #4
 8006086:	f104 0015 	add.w	r0, r4, #21
 800608a:	4584      	cmp	ip, r0
 800608c:	bf38      	it	cc
 800608e:	2304      	movcc	r3, #4
 8006090:	50ca      	str	r2, [r1, r3]
 8006092:	b10a      	cbz	r2, 8006098 <__lshift+0xa4>
 8006094:	f108 0602 	add.w	r6, r8, #2
 8006098:	3e01      	subs	r6, #1
 800609a:	4638      	mov	r0, r7
 800609c:	4621      	mov	r1, r4
 800609e:	612e      	str	r6, [r5, #16]
 80060a0:	f7ff fddc 	bl	8005c5c <_Bfree>
 80060a4:	4628      	mov	r0, r5
 80060a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80060ae:	3301      	adds	r3, #1
 80060b0:	e7c5      	b.n	800603e <__lshift+0x4a>
 80060b2:	3904      	subs	r1, #4
 80060b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80060b8:	459c      	cmp	ip, r3
 80060ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80060be:	d8f9      	bhi.n	80060b4 <__lshift+0xc0>
 80060c0:	e7ea      	b.n	8006098 <__lshift+0xa4>
 80060c2:	bf00      	nop
 80060c4:	08006f5e 	.word	0x08006f5e
 80060c8:	08006f6f 	.word	0x08006f6f

080060cc <__mcmp>:
 80060cc:	4603      	mov	r3, r0
 80060ce:	690a      	ldr	r2, [r1, #16]
 80060d0:	6900      	ldr	r0, [r0, #16]
 80060d2:	b530      	push	{r4, r5, lr}
 80060d4:	1a80      	subs	r0, r0, r2
 80060d6:	d10e      	bne.n	80060f6 <__mcmp+0x2a>
 80060d8:	3314      	adds	r3, #20
 80060da:	3114      	adds	r1, #20
 80060dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80060e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80060e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80060e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80060ec:	4295      	cmp	r5, r2
 80060ee:	d003      	beq.n	80060f8 <__mcmp+0x2c>
 80060f0:	d205      	bcs.n	80060fe <__mcmp+0x32>
 80060f2:	f04f 30ff 	mov.w	r0, #4294967295
 80060f6:	bd30      	pop	{r4, r5, pc}
 80060f8:	42a3      	cmp	r3, r4
 80060fa:	d3f3      	bcc.n	80060e4 <__mcmp+0x18>
 80060fc:	e7fb      	b.n	80060f6 <__mcmp+0x2a>
 80060fe:	2001      	movs	r0, #1
 8006100:	e7f9      	b.n	80060f6 <__mcmp+0x2a>
	...

08006104 <__mdiff>:
 8006104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006108:	4689      	mov	r9, r1
 800610a:	4606      	mov	r6, r0
 800610c:	4611      	mov	r1, r2
 800610e:	4648      	mov	r0, r9
 8006110:	4614      	mov	r4, r2
 8006112:	f7ff ffdb 	bl	80060cc <__mcmp>
 8006116:	1e05      	subs	r5, r0, #0
 8006118:	d112      	bne.n	8006140 <__mdiff+0x3c>
 800611a:	4629      	mov	r1, r5
 800611c:	4630      	mov	r0, r6
 800611e:	f7ff fd5d 	bl	8005bdc <_Balloc>
 8006122:	4602      	mov	r2, r0
 8006124:	b928      	cbnz	r0, 8006132 <__mdiff+0x2e>
 8006126:	f240 2137 	movw	r1, #567	@ 0x237
 800612a:	4b3e      	ldr	r3, [pc, #248]	@ (8006224 <__mdiff+0x120>)
 800612c:	483e      	ldr	r0, [pc, #248]	@ (8006228 <__mdiff+0x124>)
 800612e:	f000 fb0d 	bl	800674c <__assert_func>
 8006132:	2301      	movs	r3, #1
 8006134:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006138:	4610      	mov	r0, r2
 800613a:	b003      	add	sp, #12
 800613c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006140:	bfbc      	itt	lt
 8006142:	464b      	movlt	r3, r9
 8006144:	46a1      	movlt	r9, r4
 8006146:	4630      	mov	r0, r6
 8006148:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800614c:	bfba      	itte	lt
 800614e:	461c      	movlt	r4, r3
 8006150:	2501      	movlt	r5, #1
 8006152:	2500      	movge	r5, #0
 8006154:	f7ff fd42 	bl	8005bdc <_Balloc>
 8006158:	4602      	mov	r2, r0
 800615a:	b918      	cbnz	r0, 8006164 <__mdiff+0x60>
 800615c:	f240 2145 	movw	r1, #581	@ 0x245
 8006160:	4b30      	ldr	r3, [pc, #192]	@ (8006224 <__mdiff+0x120>)
 8006162:	e7e3      	b.n	800612c <__mdiff+0x28>
 8006164:	f100 0b14 	add.w	fp, r0, #20
 8006168:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800616c:	f109 0310 	add.w	r3, r9, #16
 8006170:	60c5      	str	r5, [r0, #12]
 8006172:	f04f 0c00 	mov.w	ip, #0
 8006176:	f109 0514 	add.w	r5, r9, #20
 800617a:	46d9      	mov	r9, fp
 800617c:	6926      	ldr	r6, [r4, #16]
 800617e:	f104 0e14 	add.w	lr, r4, #20
 8006182:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006186:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800618a:	9301      	str	r3, [sp, #4]
 800618c:	9b01      	ldr	r3, [sp, #4]
 800618e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006192:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006196:	b281      	uxth	r1, r0
 8006198:	9301      	str	r3, [sp, #4]
 800619a:	fa1f f38a 	uxth.w	r3, sl
 800619e:	1a5b      	subs	r3, r3, r1
 80061a0:	0c00      	lsrs	r0, r0, #16
 80061a2:	4463      	add	r3, ip
 80061a4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80061a8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80061b2:	4576      	cmp	r6, lr
 80061b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80061b8:	f849 3b04 	str.w	r3, [r9], #4
 80061bc:	d8e6      	bhi.n	800618c <__mdiff+0x88>
 80061be:	1b33      	subs	r3, r6, r4
 80061c0:	3b15      	subs	r3, #21
 80061c2:	f023 0303 	bic.w	r3, r3, #3
 80061c6:	3415      	adds	r4, #21
 80061c8:	3304      	adds	r3, #4
 80061ca:	42a6      	cmp	r6, r4
 80061cc:	bf38      	it	cc
 80061ce:	2304      	movcc	r3, #4
 80061d0:	441d      	add	r5, r3
 80061d2:	445b      	add	r3, fp
 80061d4:	461e      	mov	r6, r3
 80061d6:	462c      	mov	r4, r5
 80061d8:	4544      	cmp	r4, r8
 80061da:	d30e      	bcc.n	80061fa <__mdiff+0xf6>
 80061dc:	f108 0103 	add.w	r1, r8, #3
 80061e0:	1b49      	subs	r1, r1, r5
 80061e2:	f021 0103 	bic.w	r1, r1, #3
 80061e6:	3d03      	subs	r5, #3
 80061e8:	45a8      	cmp	r8, r5
 80061ea:	bf38      	it	cc
 80061ec:	2100      	movcc	r1, #0
 80061ee:	440b      	add	r3, r1
 80061f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80061f4:	b199      	cbz	r1, 800621e <__mdiff+0x11a>
 80061f6:	6117      	str	r7, [r2, #16]
 80061f8:	e79e      	b.n	8006138 <__mdiff+0x34>
 80061fa:	46e6      	mov	lr, ip
 80061fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8006200:	fa1f fc81 	uxth.w	ip, r1
 8006204:	44f4      	add	ip, lr
 8006206:	0c08      	lsrs	r0, r1, #16
 8006208:	4471      	add	r1, lr
 800620a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800620e:	b289      	uxth	r1, r1
 8006210:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006214:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006218:	f846 1b04 	str.w	r1, [r6], #4
 800621c:	e7dc      	b.n	80061d8 <__mdiff+0xd4>
 800621e:	3f01      	subs	r7, #1
 8006220:	e7e6      	b.n	80061f0 <__mdiff+0xec>
 8006222:	bf00      	nop
 8006224:	08006f5e 	.word	0x08006f5e
 8006228:	08006f6f 	.word	0x08006f6f

0800622c <__d2b>:
 800622c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006230:	2101      	movs	r1, #1
 8006232:	4690      	mov	r8, r2
 8006234:	4699      	mov	r9, r3
 8006236:	9e08      	ldr	r6, [sp, #32]
 8006238:	f7ff fcd0 	bl	8005bdc <_Balloc>
 800623c:	4604      	mov	r4, r0
 800623e:	b930      	cbnz	r0, 800624e <__d2b+0x22>
 8006240:	4602      	mov	r2, r0
 8006242:	f240 310f 	movw	r1, #783	@ 0x30f
 8006246:	4b23      	ldr	r3, [pc, #140]	@ (80062d4 <__d2b+0xa8>)
 8006248:	4823      	ldr	r0, [pc, #140]	@ (80062d8 <__d2b+0xac>)
 800624a:	f000 fa7f 	bl	800674c <__assert_func>
 800624e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006252:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006256:	b10d      	cbz	r5, 800625c <__d2b+0x30>
 8006258:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800625c:	9301      	str	r3, [sp, #4]
 800625e:	f1b8 0300 	subs.w	r3, r8, #0
 8006262:	d024      	beq.n	80062ae <__d2b+0x82>
 8006264:	4668      	mov	r0, sp
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	f7ff fd7f 	bl	8005d6a <__lo0bits>
 800626c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006270:	b1d8      	cbz	r0, 80062aa <__d2b+0x7e>
 8006272:	f1c0 0320 	rsb	r3, r0, #32
 8006276:	fa02 f303 	lsl.w	r3, r2, r3
 800627a:	430b      	orrs	r3, r1
 800627c:	40c2      	lsrs	r2, r0
 800627e:	6163      	str	r3, [r4, #20]
 8006280:	9201      	str	r2, [sp, #4]
 8006282:	9b01      	ldr	r3, [sp, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	bf0c      	ite	eq
 8006288:	2201      	moveq	r2, #1
 800628a:	2202      	movne	r2, #2
 800628c:	61a3      	str	r3, [r4, #24]
 800628e:	6122      	str	r2, [r4, #16]
 8006290:	b1ad      	cbz	r5, 80062be <__d2b+0x92>
 8006292:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006296:	4405      	add	r5, r0
 8006298:	6035      	str	r5, [r6, #0]
 800629a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800629e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062a0:	6018      	str	r0, [r3, #0]
 80062a2:	4620      	mov	r0, r4
 80062a4:	b002      	add	sp, #8
 80062a6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80062aa:	6161      	str	r1, [r4, #20]
 80062ac:	e7e9      	b.n	8006282 <__d2b+0x56>
 80062ae:	a801      	add	r0, sp, #4
 80062b0:	f7ff fd5b 	bl	8005d6a <__lo0bits>
 80062b4:	9b01      	ldr	r3, [sp, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	6163      	str	r3, [r4, #20]
 80062ba:	3020      	adds	r0, #32
 80062bc:	e7e7      	b.n	800628e <__d2b+0x62>
 80062be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80062c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80062c6:	6030      	str	r0, [r6, #0]
 80062c8:	6918      	ldr	r0, [r3, #16]
 80062ca:	f7ff fd2f 	bl	8005d2c <__hi0bits>
 80062ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80062d2:	e7e4      	b.n	800629e <__d2b+0x72>
 80062d4:	08006f5e 	.word	0x08006f5e
 80062d8:	08006f6f 	.word	0x08006f6f

080062dc <__ssputs_r>:
 80062dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062e0:	461f      	mov	r7, r3
 80062e2:	688e      	ldr	r6, [r1, #8]
 80062e4:	4682      	mov	sl, r0
 80062e6:	42be      	cmp	r6, r7
 80062e8:	460c      	mov	r4, r1
 80062ea:	4690      	mov	r8, r2
 80062ec:	680b      	ldr	r3, [r1, #0]
 80062ee:	d82d      	bhi.n	800634c <__ssputs_r+0x70>
 80062f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80062f8:	d026      	beq.n	8006348 <__ssputs_r+0x6c>
 80062fa:	6965      	ldr	r5, [r4, #20]
 80062fc:	6909      	ldr	r1, [r1, #16]
 80062fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006302:	eba3 0901 	sub.w	r9, r3, r1
 8006306:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800630a:	1c7b      	adds	r3, r7, #1
 800630c:	444b      	add	r3, r9
 800630e:	106d      	asrs	r5, r5, #1
 8006310:	429d      	cmp	r5, r3
 8006312:	bf38      	it	cc
 8006314:	461d      	movcc	r5, r3
 8006316:	0553      	lsls	r3, r2, #21
 8006318:	d527      	bpl.n	800636a <__ssputs_r+0x8e>
 800631a:	4629      	mov	r1, r5
 800631c:	f7ff fbd2 	bl	8005ac4 <_malloc_r>
 8006320:	4606      	mov	r6, r0
 8006322:	b360      	cbz	r0, 800637e <__ssputs_r+0xa2>
 8006324:	464a      	mov	r2, r9
 8006326:	6921      	ldr	r1, [r4, #16]
 8006328:	f000 fa02 	bl	8006730 <memcpy>
 800632c:	89a3      	ldrh	r3, [r4, #12]
 800632e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006336:	81a3      	strh	r3, [r4, #12]
 8006338:	6126      	str	r6, [r4, #16]
 800633a:	444e      	add	r6, r9
 800633c:	6026      	str	r6, [r4, #0]
 800633e:	463e      	mov	r6, r7
 8006340:	6165      	str	r5, [r4, #20]
 8006342:	eba5 0509 	sub.w	r5, r5, r9
 8006346:	60a5      	str	r5, [r4, #8]
 8006348:	42be      	cmp	r6, r7
 800634a:	d900      	bls.n	800634e <__ssputs_r+0x72>
 800634c:	463e      	mov	r6, r7
 800634e:	4632      	mov	r2, r6
 8006350:	4641      	mov	r1, r8
 8006352:	6820      	ldr	r0, [r4, #0]
 8006354:	f000 f9c2 	bl	80066dc <memmove>
 8006358:	2000      	movs	r0, #0
 800635a:	68a3      	ldr	r3, [r4, #8]
 800635c:	1b9b      	subs	r3, r3, r6
 800635e:	60a3      	str	r3, [r4, #8]
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	4433      	add	r3, r6
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636a:	462a      	mov	r2, r5
 800636c:	f000 fa32 	bl	80067d4 <_realloc_r>
 8006370:	4606      	mov	r6, r0
 8006372:	2800      	cmp	r0, #0
 8006374:	d1e0      	bne.n	8006338 <__ssputs_r+0x5c>
 8006376:	4650      	mov	r0, sl
 8006378:	6921      	ldr	r1, [r4, #16]
 800637a:	f7ff fb31 	bl	80059e0 <_free_r>
 800637e:	230c      	movs	r3, #12
 8006380:	f8ca 3000 	str.w	r3, [sl]
 8006384:	89a3      	ldrh	r3, [r4, #12]
 8006386:	f04f 30ff 	mov.w	r0, #4294967295
 800638a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800638e:	81a3      	strh	r3, [r4, #12]
 8006390:	e7e9      	b.n	8006366 <__ssputs_r+0x8a>
	...

08006394 <_svfiprintf_r>:
 8006394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006398:	4698      	mov	r8, r3
 800639a:	898b      	ldrh	r3, [r1, #12]
 800639c:	4607      	mov	r7, r0
 800639e:	061b      	lsls	r3, r3, #24
 80063a0:	460d      	mov	r5, r1
 80063a2:	4614      	mov	r4, r2
 80063a4:	b09d      	sub	sp, #116	@ 0x74
 80063a6:	d510      	bpl.n	80063ca <_svfiprintf_r+0x36>
 80063a8:	690b      	ldr	r3, [r1, #16]
 80063aa:	b973      	cbnz	r3, 80063ca <_svfiprintf_r+0x36>
 80063ac:	2140      	movs	r1, #64	@ 0x40
 80063ae:	f7ff fb89 	bl	8005ac4 <_malloc_r>
 80063b2:	6028      	str	r0, [r5, #0]
 80063b4:	6128      	str	r0, [r5, #16]
 80063b6:	b930      	cbnz	r0, 80063c6 <_svfiprintf_r+0x32>
 80063b8:	230c      	movs	r3, #12
 80063ba:	603b      	str	r3, [r7, #0]
 80063bc:	f04f 30ff 	mov.w	r0, #4294967295
 80063c0:	b01d      	add	sp, #116	@ 0x74
 80063c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c6:	2340      	movs	r3, #64	@ 0x40
 80063c8:	616b      	str	r3, [r5, #20]
 80063ca:	2300      	movs	r3, #0
 80063cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80063ce:	2320      	movs	r3, #32
 80063d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063d4:	2330      	movs	r3, #48	@ 0x30
 80063d6:	f04f 0901 	mov.w	r9, #1
 80063da:	f8cd 800c 	str.w	r8, [sp, #12]
 80063de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006578 <_svfiprintf_r+0x1e4>
 80063e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80063e6:	4623      	mov	r3, r4
 80063e8:	469a      	mov	sl, r3
 80063ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063ee:	b10a      	cbz	r2, 80063f4 <_svfiprintf_r+0x60>
 80063f0:	2a25      	cmp	r2, #37	@ 0x25
 80063f2:	d1f9      	bne.n	80063e8 <_svfiprintf_r+0x54>
 80063f4:	ebba 0b04 	subs.w	fp, sl, r4
 80063f8:	d00b      	beq.n	8006412 <_svfiprintf_r+0x7e>
 80063fa:	465b      	mov	r3, fp
 80063fc:	4622      	mov	r2, r4
 80063fe:	4629      	mov	r1, r5
 8006400:	4638      	mov	r0, r7
 8006402:	f7ff ff6b 	bl	80062dc <__ssputs_r>
 8006406:	3001      	adds	r0, #1
 8006408:	f000 80a7 	beq.w	800655a <_svfiprintf_r+0x1c6>
 800640c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800640e:	445a      	add	r2, fp
 8006410:	9209      	str	r2, [sp, #36]	@ 0x24
 8006412:	f89a 3000 	ldrb.w	r3, [sl]
 8006416:	2b00      	cmp	r3, #0
 8006418:	f000 809f 	beq.w	800655a <_svfiprintf_r+0x1c6>
 800641c:	2300      	movs	r3, #0
 800641e:	f04f 32ff 	mov.w	r2, #4294967295
 8006422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006426:	f10a 0a01 	add.w	sl, sl, #1
 800642a:	9304      	str	r3, [sp, #16]
 800642c:	9307      	str	r3, [sp, #28]
 800642e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006432:	931a      	str	r3, [sp, #104]	@ 0x68
 8006434:	4654      	mov	r4, sl
 8006436:	2205      	movs	r2, #5
 8006438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800643c:	484e      	ldr	r0, [pc, #312]	@ (8006578 <_svfiprintf_r+0x1e4>)
 800643e:	f7fe fc6e 	bl	8004d1e <memchr>
 8006442:	9a04      	ldr	r2, [sp, #16]
 8006444:	b9d8      	cbnz	r0, 800647e <_svfiprintf_r+0xea>
 8006446:	06d0      	lsls	r0, r2, #27
 8006448:	bf44      	itt	mi
 800644a:	2320      	movmi	r3, #32
 800644c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006450:	0711      	lsls	r1, r2, #28
 8006452:	bf44      	itt	mi
 8006454:	232b      	movmi	r3, #43	@ 0x2b
 8006456:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800645a:	f89a 3000 	ldrb.w	r3, [sl]
 800645e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006460:	d015      	beq.n	800648e <_svfiprintf_r+0xfa>
 8006462:	4654      	mov	r4, sl
 8006464:	2000      	movs	r0, #0
 8006466:	f04f 0c0a 	mov.w	ip, #10
 800646a:	9a07      	ldr	r2, [sp, #28]
 800646c:	4621      	mov	r1, r4
 800646e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006472:	3b30      	subs	r3, #48	@ 0x30
 8006474:	2b09      	cmp	r3, #9
 8006476:	d94b      	bls.n	8006510 <_svfiprintf_r+0x17c>
 8006478:	b1b0      	cbz	r0, 80064a8 <_svfiprintf_r+0x114>
 800647a:	9207      	str	r2, [sp, #28]
 800647c:	e014      	b.n	80064a8 <_svfiprintf_r+0x114>
 800647e:	eba0 0308 	sub.w	r3, r0, r8
 8006482:	fa09 f303 	lsl.w	r3, r9, r3
 8006486:	4313      	orrs	r3, r2
 8006488:	46a2      	mov	sl, r4
 800648a:	9304      	str	r3, [sp, #16]
 800648c:	e7d2      	b.n	8006434 <_svfiprintf_r+0xa0>
 800648e:	9b03      	ldr	r3, [sp, #12]
 8006490:	1d19      	adds	r1, r3, #4
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	9103      	str	r1, [sp, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	bfbb      	ittet	lt
 800649a:	425b      	neglt	r3, r3
 800649c:	f042 0202 	orrlt.w	r2, r2, #2
 80064a0:	9307      	strge	r3, [sp, #28]
 80064a2:	9307      	strlt	r3, [sp, #28]
 80064a4:	bfb8      	it	lt
 80064a6:	9204      	strlt	r2, [sp, #16]
 80064a8:	7823      	ldrb	r3, [r4, #0]
 80064aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80064ac:	d10a      	bne.n	80064c4 <_svfiprintf_r+0x130>
 80064ae:	7863      	ldrb	r3, [r4, #1]
 80064b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80064b2:	d132      	bne.n	800651a <_svfiprintf_r+0x186>
 80064b4:	9b03      	ldr	r3, [sp, #12]
 80064b6:	3402      	adds	r4, #2
 80064b8:	1d1a      	adds	r2, r3, #4
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	9203      	str	r2, [sp, #12]
 80064be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064c2:	9305      	str	r3, [sp, #20]
 80064c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800657c <_svfiprintf_r+0x1e8>
 80064c8:	2203      	movs	r2, #3
 80064ca:	4650      	mov	r0, sl
 80064cc:	7821      	ldrb	r1, [r4, #0]
 80064ce:	f7fe fc26 	bl	8004d1e <memchr>
 80064d2:	b138      	cbz	r0, 80064e4 <_svfiprintf_r+0x150>
 80064d4:	2240      	movs	r2, #64	@ 0x40
 80064d6:	9b04      	ldr	r3, [sp, #16]
 80064d8:	eba0 000a 	sub.w	r0, r0, sl
 80064dc:	4082      	lsls	r2, r0
 80064de:	4313      	orrs	r3, r2
 80064e0:	3401      	adds	r4, #1
 80064e2:	9304      	str	r3, [sp, #16]
 80064e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064e8:	2206      	movs	r2, #6
 80064ea:	4825      	ldr	r0, [pc, #148]	@ (8006580 <_svfiprintf_r+0x1ec>)
 80064ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80064f0:	f7fe fc15 	bl	8004d1e <memchr>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d036      	beq.n	8006566 <_svfiprintf_r+0x1d2>
 80064f8:	4b22      	ldr	r3, [pc, #136]	@ (8006584 <_svfiprintf_r+0x1f0>)
 80064fa:	bb1b      	cbnz	r3, 8006544 <_svfiprintf_r+0x1b0>
 80064fc:	9b03      	ldr	r3, [sp, #12]
 80064fe:	3307      	adds	r3, #7
 8006500:	f023 0307 	bic.w	r3, r3, #7
 8006504:	3308      	adds	r3, #8
 8006506:	9303      	str	r3, [sp, #12]
 8006508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800650a:	4433      	add	r3, r6
 800650c:	9309      	str	r3, [sp, #36]	@ 0x24
 800650e:	e76a      	b.n	80063e6 <_svfiprintf_r+0x52>
 8006510:	460c      	mov	r4, r1
 8006512:	2001      	movs	r0, #1
 8006514:	fb0c 3202 	mla	r2, ip, r2, r3
 8006518:	e7a8      	b.n	800646c <_svfiprintf_r+0xd8>
 800651a:	2300      	movs	r3, #0
 800651c:	f04f 0c0a 	mov.w	ip, #10
 8006520:	4619      	mov	r1, r3
 8006522:	3401      	adds	r4, #1
 8006524:	9305      	str	r3, [sp, #20]
 8006526:	4620      	mov	r0, r4
 8006528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800652c:	3a30      	subs	r2, #48	@ 0x30
 800652e:	2a09      	cmp	r2, #9
 8006530:	d903      	bls.n	800653a <_svfiprintf_r+0x1a6>
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0c6      	beq.n	80064c4 <_svfiprintf_r+0x130>
 8006536:	9105      	str	r1, [sp, #20]
 8006538:	e7c4      	b.n	80064c4 <_svfiprintf_r+0x130>
 800653a:	4604      	mov	r4, r0
 800653c:	2301      	movs	r3, #1
 800653e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006542:	e7f0      	b.n	8006526 <_svfiprintf_r+0x192>
 8006544:	ab03      	add	r3, sp, #12
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	462a      	mov	r2, r5
 800654a:	4638      	mov	r0, r7
 800654c:	4b0e      	ldr	r3, [pc, #56]	@ (8006588 <_svfiprintf_r+0x1f4>)
 800654e:	a904      	add	r1, sp, #16
 8006550:	f7fd fe6e 	bl	8004230 <_printf_float>
 8006554:	1c42      	adds	r2, r0, #1
 8006556:	4606      	mov	r6, r0
 8006558:	d1d6      	bne.n	8006508 <_svfiprintf_r+0x174>
 800655a:	89ab      	ldrh	r3, [r5, #12]
 800655c:	065b      	lsls	r3, r3, #25
 800655e:	f53f af2d 	bmi.w	80063bc <_svfiprintf_r+0x28>
 8006562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006564:	e72c      	b.n	80063c0 <_svfiprintf_r+0x2c>
 8006566:	ab03      	add	r3, sp, #12
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	462a      	mov	r2, r5
 800656c:	4638      	mov	r0, r7
 800656e:	4b06      	ldr	r3, [pc, #24]	@ (8006588 <_svfiprintf_r+0x1f4>)
 8006570:	a904      	add	r1, sp, #16
 8006572:	f7fe f8fb 	bl	800476c <_printf_i>
 8006576:	e7ed      	b.n	8006554 <_svfiprintf_r+0x1c0>
 8006578:	080070c8 	.word	0x080070c8
 800657c:	080070ce 	.word	0x080070ce
 8006580:	080070d2 	.word	0x080070d2
 8006584:	08004231 	.word	0x08004231
 8006588:	080062dd 	.word	0x080062dd

0800658c <__sflush_r>:
 800658c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	0716      	lsls	r6, r2, #28
 8006594:	4605      	mov	r5, r0
 8006596:	460c      	mov	r4, r1
 8006598:	d454      	bmi.n	8006644 <__sflush_r+0xb8>
 800659a:	684b      	ldr	r3, [r1, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	dc02      	bgt.n	80065a6 <__sflush_r+0x1a>
 80065a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	dd48      	ble.n	8006638 <__sflush_r+0xac>
 80065a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065a8:	2e00      	cmp	r6, #0
 80065aa:	d045      	beq.n	8006638 <__sflush_r+0xac>
 80065ac:	2300      	movs	r3, #0
 80065ae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80065b2:	682f      	ldr	r7, [r5, #0]
 80065b4:	6a21      	ldr	r1, [r4, #32]
 80065b6:	602b      	str	r3, [r5, #0]
 80065b8:	d030      	beq.n	800661c <__sflush_r+0x90>
 80065ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80065bc:	89a3      	ldrh	r3, [r4, #12]
 80065be:	0759      	lsls	r1, r3, #29
 80065c0:	d505      	bpl.n	80065ce <__sflush_r+0x42>
 80065c2:	6863      	ldr	r3, [r4, #4]
 80065c4:	1ad2      	subs	r2, r2, r3
 80065c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80065c8:	b10b      	cbz	r3, 80065ce <__sflush_r+0x42>
 80065ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80065cc:	1ad2      	subs	r2, r2, r3
 80065ce:	2300      	movs	r3, #0
 80065d0:	4628      	mov	r0, r5
 80065d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065d4:	6a21      	ldr	r1, [r4, #32]
 80065d6:	47b0      	blx	r6
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	89a3      	ldrh	r3, [r4, #12]
 80065dc:	d106      	bne.n	80065ec <__sflush_r+0x60>
 80065de:	6829      	ldr	r1, [r5, #0]
 80065e0:	291d      	cmp	r1, #29
 80065e2:	d82b      	bhi.n	800663c <__sflush_r+0xb0>
 80065e4:	4a28      	ldr	r2, [pc, #160]	@ (8006688 <__sflush_r+0xfc>)
 80065e6:	410a      	asrs	r2, r1
 80065e8:	07d6      	lsls	r6, r2, #31
 80065ea:	d427      	bmi.n	800663c <__sflush_r+0xb0>
 80065ec:	2200      	movs	r2, #0
 80065ee:	6062      	str	r2, [r4, #4]
 80065f0:	6922      	ldr	r2, [r4, #16]
 80065f2:	04d9      	lsls	r1, r3, #19
 80065f4:	6022      	str	r2, [r4, #0]
 80065f6:	d504      	bpl.n	8006602 <__sflush_r+0x76>
 80065f8:	1c42      	adds	r2, r0, #1
 80065fa:	d101      	bne.n	8006600 <__sflush_r+0x74>
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	b903      	cbnz	r3, 8006602 <__sflush_r+0x76>
 8006600:	6560      	str	r0, [r4, #84]	@ 0x54
 8006602:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006604:	602f      	str	r7, [r5, #0]
 8006606:	b1b9      	cbz	r1, 8006638 <__sflush_r+0xac>
 8006608:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800660c:	4299      	cmp	r1, r3
 800660e:	d002      	beq.n	8006616 <__sflush_r+0x8a>
 8006610:	4628      	mov	r0, r5
 8006612:	f7ff f9e5 	bl	80059e0 <_free_r>
 8006616:	2300      	movs	r3, #0
 8006618:	6363      	str	r3, [r4, #52]	@ 0x34
 800661a:	e00d      	b.n	8006638 <__sflush_r+0xac>
 800661c:	2301      	movs	r3, #1
 800661e:	4628      	mov	r0, r5
 8006620:	47b0      	blx	r6
 8006622:	4602      	mov	r2, r0
 8006624:	1c50      	adds	r0, r2, #1
 8006626:	d1c9      	bne.n	80065bc <__sflush_r+0x30>
 8006628:	682b      	ldr	r3, [r5, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0c6      	beq.n	80065bc <__sflush_r+0x30>
 800662e:	2b1d      	cmp	r3, #29
 8006630:	d001      	beq.n	8006636 <__sflush_r+0xaa>
 8006632:	2b16      	cmp	r3, #22
 8006634:	d11d      	bne.n	8006672 <__sflush_r+0xe6>
 8006636:	602f      	str	r7, [r5, #0]
 8006638:	2000      	movs	r0, #0
 800663a:	e021      	b.n	8006680 <__sflush_r+0xf4>
 800663c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006640:	b21b      	sxth	r3, r3
 8006642:	e01a      	b.n	800667a <__sflush_r+0xee>
 8006644:	690f      	ldr	r7, [r1, #16]
 8006646:	2f00      	cmp	r7, #0
 8006648:	d0f6      	beq.n	8006638 <__sflush_r+0xac>
 800664a:	0793      	lsls	r3, r2, #30
 800664c:	bf18      	it	ne
 800664e:	2300      	movne	r3, #0
 8006650:	680e      	ldr	r6, [r1, #0]
 8006652:	bf08      	it	eq
 8006654:	694b      	ldreq	r3, [r1, #20]
 8006656:	1bf6      	subs	r6, r6, r7
 8006658:	600f      	str	r7, [r1, #0]
 800665a:	608b      	str	r3, [r1, #8]
 800665c:	2e00      	cmp	r6, #0
 800665e:	ddeb      	ble.n	8006638 <__sflush_r+0xac>
 8006660:	4633      	mov	r3, r6
 8006662:	463a      	mov	r2, r7
 8006664:	4628      	mov	r0, r5
 8006666:	6a21      	ldr	r1, [r4, #32]
 8006668:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800666c:	47e0      	blx	ip
 800666e:	2800      	cmp	r0, #0
 8006670:	dc07      	bgt.n	8006682 <__sflush_r+0xf6>
 8006672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800667a:	f04f 30ff 	mov.w	r0, #4294967295
 800667e:	81a3      	strh	r3, [r4, #12]
 8006680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006682:	4407      	add	r7, r0
 8006684:	1a36      	subs	r6, r6, r0
 8006686:	e7e9      	b.n	800665c <__sflush_r+0xd0>
 8006688:	dfbffffe 	.word	0xdfbffffe

0800668c <_fflush_r>:
 800668c:	b538      	push	{r3, r4, r5, lr}
 800668e:	690b      	ldr	r3, [r1, #16]
 8006690:	4605      	mov	r5, r0
 8006692:	460c      	mov	r4, r1
 8006694:	b913      	cbnz	r3, 800669c <_fflush_r+0x10>
 8006696:	2500      	movs	r5, #0
 8006698:	4628      	mov	r0, r5
 800669a:	bd38      	pop	{r3, r4, r5, pc}
 800669c:	b118      	cbz	r0, 80066a6 <_fflush_r+0x1a>
 800669e:	6a03      	ldr	r3, [r0, #32]
 80066a0:	b90b      	cbnz	r3, 80066a6 <_fflush_r+0x1a>
 80066a2:	f7fe fa0f 	bl	8004ac4 <__sinit>
 80066a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0f3      	beq.n	8006696 <_fflush_r+0xa>
 80066ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80066b0:	07d0      	lsls	r0, r2, #31
 80066b2:	d404      	bmi.n	80066be <_fflush_r+0x32>
 80066b4:	0599      	lsls	r1, r3, #22
 80066b6:	d402      	bmi.n	80066be <_fflush_r+0x32>
 80066b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066ba:	f7fe fb2e 	bl	8004d1a <__retarget_lock_acquire_recursive>
 80066be:	4628      	mov	r0, r5
 80066c0:	4621      	mov	r1, r4
 80066c2:	f7ff ff63 	bl	800658c <__sflush_r>
 80066c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066c8:	4605      	mov	r5, r0
 80066ca:	07da      	lsls	r2, r3, #31
 80066cc:	d4e4      	bmi.n	8006698 <_fflush_r+0xc>
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	059b      	lsls	r3, r3, #22
 80066d2:	d4e1      	bmi.n	8006698 <_fflush_r+0xc>
 80066d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066d6:	f7fe fb21 	bl	8004d1c <__retarget_lock_release_recursive>
 80066da:	e7dd      	b.n	8006698 <_fflush_r+0xc>

080066dc <memmove>:
 80066dc:	4288      	cmp	r0, r1
 80066de:	b510      	push	{r4, lr}
 80066e0:	eb01 0402 	add.w	r4, r1, r2
 80066e4:	d902      	bls.n	80066ec <memmove+0x10>
 80066e6:	4284      	cmp	r4, r0
 80066e8:	4623      	mov	r3, r4
 80066ea:	d807      	bhi.n	80066fc <memmove+0x20>
 80066ec:	1e43      	subs	r3, r0, #1
 80066ee:	42a1      	cmp	r1, r4
 80066f0:	d008      	beq.n	8006704 <memmove+0x28>
 80066f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066fa:	e7f8      	b.n	80066ee <memmove+0x12>
 80066fc:	4601      	mov	r1, r0
 80066fe:	4402      	add	r2, r0
 8006700:	428a      	cmp	r2, r1
 8006702:	d100      	bne.n	8006706 <memmove+0x2a>
 8006704:	bd10      	pop	{r4, pc}
 8006706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800670a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800670e:	e7f7      	b.n	8006700 <memmove+0x24>

08006710 <_sbrk_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	2300      	movs	r3, #0
 8006714:	4d05      	ldr	r5, [pc, #20]	@ (800672c <_sbrk_r+0x1c>)
 8006716:	4604      	mov	r4, r0
 8006718:	4608      	mov	r0, r1
 800671a:	602b      	str	r3, [r5, #0]
 800671c:	f7fb fed2 	bl	80024c4 <_sbrk>
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	d102      	bne.n	800672a <_sbrk_r+0x1a>
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	b103      	cbz	r3, 800672a <_sbrk_r+0x1a>
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	bd38      	pop	{r3, r4, r5, pc}
 800672c:	20000504 	.word	0x20000504

08006730 <memcpy>:
 8006730:	440a      	add	r2, r1
 8006732:	4291      	cmp	r1, r2
 8006734:	f100 33ff 	add.w	r3, r0, #4294967295
 8006738:	d100      	bne.n	800673c <memcpy+0xc>
 800673a:	4770      	bx	lr
 800673c:	b510      	push	{r4, lr}
 800673e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006742:	4291      	cmp	r1, r2
 8006744:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006748:	d1f9      	bne.n	800673e <memcpy+0xe>
 800674a:	bd10      	pop	{r4, pc}

0800674c <__assert_func>:
 800674c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800674e:	4614      	mov	r4, r2
 8006750:	461a      	mov	r2, r3
 8006752:	4b09      	ldr	r3, [pc, #36]	@ (8006778 <__assert_func+0x2c>)
 8006754:	4605      	mov	r5, r0
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68d8      	ldr	r0, [r3, #12]
 800675a:	b954      	cbnz	r4, 8006772 <__assert_func+0x26>
 800675c:	4b07      	ldr	r3, [pc, #28]	@ (800677c <__assert_func+0x30>)
 800675e:	461c      	mov	r4, r3
 8006760:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006764:	9100      	str	r1, [sp, #0]
 8006766:	462b      	mov	r3, r5
 8006768:	4905      	ldr	r1, [pc, #20]	@ (8006780 <__assert_func+0x34>)
 800676a:	f000 f86f 	bl	800684c <fiprintf>
 800676e:	f000 f87f 	bl	8006870 <abort>
 8006772:	4b04      	ldr	r3, [pc, #16]	@ (8006784 <__assert_func+0x38>)
 8006774:	e7f4      	b.n	8006760 <__assert_func+0x14>
 8006776:	bf00      	nop
 8006778:	20000068 	.word	0x20000068
 800677c:	0800711e 	.word	0x0800711e
 8006780:	080070f0 	.word	0x080070f0
 8006784:	080070e3 	.word	0x080070e3

08006788 <_calloc_r>:
 8006788:	b570      	push	{r4, r5, r6, lr}
 800678a:	fba1 5402 	umull	r5, r4, r1, r2
 800678e:	b93c      	cbnz	r4, 80067a0 <_calloc_r+0x18>
 8006790:	4629      	mov	r1, r5
 8006792:	f7ff f997 	bl	8005ac4 <_malloc_r>
 8006796:	4606      	mov	r6, r0
 8006798:	b928      	cbnz	r0, 80067a6 <_calloc_r+0x1e>
 800679a:	2600      	movs	r6, #0
 800679c:	4630      	mov	r0, r6
 800679e:	bd70      	pop	{r4, r5, r6, pc}
 80067a0:	220c      	movs	r2, #12
 80067a2:	6002      	str	r2, [r0, #0]
 80067a4:	e7f9      	b.n	800679a <_calloc_r+0x12>
 80067a6:	462a      	mov	r2, r5
 80067a8:	4621      	mov	r1, r4
 80067aa:	f7fe fa38 	bl	8004c1e <memset>
 80067ae:	e7f5      	b.n	800679c <_calloc_r+0x14>

080067b0 <__ascii_mbtowc>:
 80067b0:	b082      	sub	sp, #8
 80067b2:	b901      	cbnz	r1, 80067b6 <__ascii_mbtowc+0x6>
 80067b4:	a901      	add	r1, sp, #4
 80067b6:	b142      	cbz	r2, 80067ca <__ascii_mbtowc+0x1a>
 80067b8:	b14b      	cbz	r3, 80067ce <__ascii_mbtowc+0x1e>
 80067ba:	7813      	ldrb	r3, [r2, #0]
 80067bc:	600b      	str	r3, [r1, #0]
 80067be:	7812      	ldrb	r2, [r2, #0]
 80067c0:	1e10      	subs	r0, r2, #0
 80067c2:	bf18      	it	ne
 80067c4:	2001      	movne	r0, #1
 80067c6:	b002      	add	sp, #8
 80067c8:	4770      	bx	lr
 80067ca:	4610      	mov	r0, r2
 80067cc:	e7fb      	b.n	80067c6 <__ascii_mbtowc+0x16>
 80067ce:	f06f 0001 	mvn.w	r0, #1
 80067d2:	e7f8      	b.n	80067c6 <__ascii_mbtowc+0x16>

080067d4 <_realloc_r>:
 80067d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d8:	4680      	mov	r8, r0
 80067da:	4615      	mov	r5, r2
 80067dc:	460c      	mov	r4, r1
 80067de:	b921      	cbnz	r1, 80067ea <_realloc_r+0x16>
 80067e0:	4611      	mov	r1, r2
 80067e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067e6:	f7ff b96d 	b.w	8005ac4 <_malloc_r>
 80067ea:	b92a      	cbnz	r2, 80067f8 <_realloc_r+0x24>
 80067ec:	f7ff f8f8 	bl	80059e0 <_free_r>
 80067f0:	2400      	movs	r4, #0
 80067f2:	4620      	mov	r0, r4
 80067f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f8:	f000 f841 	bl	800687e <_malloc_usable_size_r>
 80067fc:	4285      	cmp	r5, r0
 80067fe:	4606      	mov	r6, r0
 8006800:	d802      	bhi.n	8006808 <_realloc_r+0x34>
 8006802:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006806:	d8f4      	bhi.n	80067f2 <_realloc_r+0x1e>
 8006808:	4629      	mov	r1, r5
 800680a:	4640      	mov	r0, r8
 800680c:	f7ff f95a 	bl	8005ac4 <_malloc_r>
 8006810:	4607      	mov	r7, r0
 8006812:	2800      	cmp	r0, #0
 8006814:	d0ec      	beq.n	80067f0 <_realloc_r+0x1c>
 8006816:	42b5      	cmp	r5, r6
 8006818:	462a      	mov	r2, r5
 800681a:	4621      	mov	r1, r4
 800681c:	bf28      	it	cs
 800681e:	4632      	movcs	r2, r6
 8006820:	f7ff ff86 	bl	8006730 <memcpy>
 8006824:	4621      	mov	r1, r4
 8006826:	4640      	mov	r0, r8
 8006828:	f7ff f8da 	bl	80059e0 <_free_r>
 800682c:	463c      	mov	r4, r7
 800682e:	e7e0      	b.n	80067f2 <_realloc_r+0x1e>

08006830 <__ascii_wctomb>:
 8006830:	4603      	mov	r3, r0
 8006832:	4608      	mov	r0, r1
 8006834:	b141      	cbz	r1, 8006848 <__ascii_wctomb+0x18>
 8006836:	2aff      	cmp	r2, #255	@ 0xff
 8006838:	d904      	bls.n	8006844 <__ascii_wctomb+0x14>
 800683a:	228a      	movs	r2, #138	@ 0x8a
 800683c:	f04f 30ff 	mov.w	r0, #4294967295
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	4770      	bx	lr
 8006844:	2001      	movs	r0, #1
 8006846:	700a      	strb	r2, [r1, #0]
 8006848:	4770      	bx	lr
	...

0800684c <fiprintf>:
 800684c:	b40e      	push	{r1, r2, r3}
 800684e:	b503      	push	{r0, r1, lr}
 8006850:	4601      	mov	r1, r0
 8006852:	ab03      	add	r3, sp, #12
 8006854:	4805      	ldr	r0, [pc, #20]	@ (800686c <fiprintf+0x20>)
 8006856:	f853 2b04 	ldr.w	r2, [r3], #4
 800685a:	6800      	ldr	r0, [r0, #0]
 800685c:	9301      	str	r3, [sp, #4]
 800685e:	f000 f83d 	bl	80068dc <_vfiprintf_r>
 8006862:	b002      	add	sp, #8
 8006864:	f85d eb04 	ldr.w	lr, [sp], #4
 8006868:	b003      	add	sp, #12
 800686a:	4770      	bx	lr
 800686c:	20000068 	.word	0x20000068

08006870 <abort>:
 8006870:	2006      	movs	r0, #6
 8006872:	b508      	push	{r3, lr}
 8006874:	f000 fa06 	bl	8006c84 <raise>
 8006878:	2001      	movs	r0, #1
 800687a:	f7fb fdae 	bl	80023da <_exit>

0800687e <_malloc_usable_size_r>:
 800687e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006882:	1f18      	subs	r0, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	bfbc      	itt	lt
 8006888:	580b      	ldrlt	r3, [r1, r0]
 800688a:	18c0      	addlt	r0, r0, r3
 800688c:	4770      	bx	lr

0800688e <__sfputc_r>:
 800688e:	6893      	ldr	r3, [r2, #8]
 8006890:	b410      	push	{r4}
 8006892:	3b01      	subs	r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	6093      	str	r3, [r2, #8]
 8006898:	da07      	bge.n	80068aa <__sfputc_r+0x1c>
 800689a:	6994      	ldr	r4, [r2, #24]
 800689c:	42a3      	cmp	r3, r4
 800689e:	db01      	blt.n	80068a4 <__sfputc_r+0x16>
 80068a0:	290a      	cmp	r1, #10
 80068a2:	d102      	bne.n	80068aa <__sfputc_r+0x1c>
 80068a4:	bc10      	pop	{r4}
 80068a6:	f000 b931 	b.w	8006b0c <__swbuf_r>
 80068aa:	6813      	ldr	r3, [r2, #0]
 80068ac:	1c58      	adds	r0, r3, #1
 80068ae:	6010      	str	r0, [r2, #0]
 80068b0:	7019      	strb	r1, [r3, #0]
 80068b2:	4608      	mov	r0, r1
 80068b4:	bc10      	pop	{r4}
 80068b6:	4770      	bx	lr

080068b8 <__sfputs_r>:
 80068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ba:	4606      	mov	r6, r0
 80068bc:	460f      	mov	r7, r1
 80068be:	4614      	mov	r4, r2
 80068c0:	18d5      	adds	r5, r2, r3
 80068c2:	42ac      	cmp	r4, r5
 80068c4:	d101      	bne.n	80068ca <__sfputs_r+0x12>
 80068c6:	2000      	movs	r0, #0
 80068c8:	e007      	b.n	80068da <__sfputs_r+0x22>
 80068ca:	463a      	mov	r2, r7
 80068cc:	4630      	mov	r0, r6
 80068ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068d2:	f7ff ffdc 	bl	800688e <__sfputc_r>
 80068d6:	1c43      	adds	r3, r0, #1
 80068d8:	d1f3      	bne.n	80068c2 <__sfputs_r+0xa>
 80068da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080068dc <_vfiprintf_r>:
 80068dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e0:	460d      	mov	r5, r1
 80068e2:	4614      	mov	r4, r2
 80068e4:	4698      	mov	r8, r3
 80068e6:	4606      	mov	r6, r0
 80068e8:	b09d      	sub	sp, #116	@ 0x74
 80068ea:	b118      	cbz	r0, 80068f4 <_vfiprintf_r+0x18>
 80068ec:	6a03      	ldr	r3, [r0, #32]
 80068ee:	b90b      	cbnz	r3, 80068f4 <_vfiprintf_r+0x18>
 80068f0:	f7fe f8e8 	bl	8004ac4 <__sinit>
 80068f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80068f6:	07d9      	lsls	r1, r3, #31
 80068f8:	d405      	bmi.n	8006906 <_vfiprintf_r+0x2a>
 80068fa:	89ab      	ldrh	r3, [r5, #12]
 80068fc:	059a      	lsls	r2, r3, #22
 80068fe:	d402      	bmi.n	8006906 <_vfiprintf_r+0x2a>
 8006900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006902:	f7fe fa0a 	bl	8004d1a <__retarget_lock_acquire_recursive>
 8006906:	89ab      	ldrh	r3, [r5, #12]
 8006908:	071b      	lsls	r3, r3, #28
 800690a:	d501      	bpl.n	8006910 <_vfiprintf_r+0x34>
 800690c:	692b      	ldr	r3, [r5, #16]
 800690e:	b99b      	cbnz	r3, 8006938 <_vfiprintf_r+0x5c>
 8006910:	4629      	mov	r1, r5
 8006912:	4630      	mov	r0, r6
 8006914:	f000 f938 	bl	8006b88 <__swsetup_r>
 8006918:	b170      	cbz	r0, 8006938 <_vfiprintf_r+0x5c>
 800691a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800691c:	07dc      	lsls	r4, r3, #31
 800691e:	d504      	bpl.n	800692a <_vfiprintf_r+0x4e>
 8006920:	f04f 30ff 	mov.w	r0, #4294967295
 8006924:	b01d      	add	sp, #116	@ 0x74
 8006926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692a:	89ab      	ldrh	r3, [r5, #12]
 800692c:	0598      	lsls	r0, r3, #22
 800692e:	d4f7      	bmi.n	8006920 <_vfiprintf_r+0x44>
 8006930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006932:	f7fe f9f3 	bl	8004d1c <__retarget_lock_release_recursive>
 8006936:	e7f3      	b.n	8006920 <_vfiprintf_r+0x44>
 8006938:	2300      	movs	r3, #0
 800693a:	9309      	str	r3, [sp, #36]	@ 0x24
 800693c:	2320      	movs	r3, #32
 800693e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006942:	2330      	movs	r3, #48	@ 0x30
 8006944:	f04f 0901 	mov.w	r9, #1
 8006948:	f8cd 800c 	str.w	r8, [sp, #12]
 800694c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006af8 <_vfiprintf_r+0x21c>
 8006950:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006954:	4623      	mov	r3, r4
 8006956:	469a      	mov	sl, r3
 8006958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800695c:	b10a      	cbz	r2, 8006962 <_vfiprintf_r+0x86>
 800695e:	2a25      	cmp	r2, #37	@ 0x25
 8006960:	d1f9      	bne.n	8006956 <_vfiprintf_r+0x7a>
 8006962:	ebba 0b04 	subs.w	fp, sl, r4
 8006966:	d00b      	beq.n	8006980 <_vfiprintf_r+0xa4>
 8006968:	465b      	mov	r3, fp
 800696a:	4622      	mov	r2, r4
 800696c:	4629      	mov	r1, r5
 800696e:	4630      	mov	r0, r6
 8006970:	f7ff ffa2 	bl	80068b8 <__sfputs_r>
 8006974:	3001      	adds	r0, #1
 8006976:	f000 80a7 	beq.w	8006ac8 <_vfiprintf_r+0x1ec>
 800697a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800697c:	445a      	add	r2, fp
 800697e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006980:	f89a 3000 	ldrb.w	r3, [sl]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 809f 	beq.w	8006ac8 <_vfiprintf_r+0x1ec>
 800698a:	2300      	movs	r3, #0
 800698c:	f04f 32ff 	mov.w	r2, #4294967295
 8006990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006994:	f10a 0a01 	add.w	sl, sl, #1
 8006998:	9304      	str	r3, [sp, #16]
 800699a:	9307      	str	r3, [sp, #28]
 800699c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80069a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80069a2:	4654      	mov	r4, sl
 80069a4:	2205      	movs	r2, #5
 80069a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069aa:	4853      	ldr	r0, [pc, #332]	@ (8006af8 <_vfiprintf_r+0x21c>)
 80069ac:	f7fe f9b7 	bl	8004d1e <memchr>
 80069b0:	9a04      	ldr	r2, [sp, #16]
 80069b2:	b9d8      	cbnz	r0, 80069ec <_vfiprintf_r+0x110>
 80069b4:	06d1      	lsls	r1, r2, #27
 80069b6:	bf44      	itt	mi
 80069b8:	2320      	movmi	r3, #32
 80069ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069be:	0713      	lsls	r3, r2, #28
 80069c0:	bf44      	itt	mi
 80069c2:	232b      	movmi	r3, #43	@ 0x2b
 80069c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069c8:	f89a 3000 	ldrb.w	r3, [sl]
 80069cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80069ce:	d015      	beq.n	80069fc <_vfiprintf_r+0x120>
 80069d0:	4654      	mov	r4, sl
 80069d2:	2000      	movs	r0, #0
 80069d4:	f04f 0c0a 	mov.w	ip, #10
 80069d8:	9a07      	ldr	r2, [sp, #28]
 80069da:	4621      	mov	r1, r4
 80069dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069e0:	3b30      	subs	r3, #48	@ 0x30
 80069e2:	2b09      	cmp	r3, #9
 80069e4:	d94b      	bls.n	8006a7e <_vfiprintf_r+0x1a2>
 80069e6:	b1b0      	cbz	r0, 8006a16 <_vfiprintf_r+0x13a>
 80069e8:	9207      	str	r2, [sp, #28]
 80069ea:	e014      	b.n	8006a16 <_vfiprintf_r+0x13a>
 80069ec:	eba0 0308 	sub.w	r3, r0, r8
 80069f0:	fa09 f303 	lsl.w	r3, r9, r3
 80069f4:	4313      	orrs	r3, r2
 80069f6:	46a2      	mov	sl, r4
 80069f8:	9304      	str	r3, [sp, #16]
 80069fa:	e7d2      	b.n	80069a2 <_vfiprintf_r+0xc6>
 80069fc:	9b03      	ldr	r3, [sp, #12]
 80069fe:	1d19      	adds	r1, r3, #4
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	9103      	str	r1, [sp, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	bfbb      	ittet	lt
 8006a08:	425b      	neglt	r3, r3
 8006a0a:	f042 0202 	orrlt.w	r2, r2, #2
 8006a0e:	9307      	strge	r3, [sp, #28]
 8006a10:	9307      	strlt	r3, [sp, #28]
 8006a12:	bfb8      	it	lt
 8006a14:	9204      	strlt	r2, [sp, #16]
 8006a16:	7823      	ldrb	r3, [r4, #0]
 8006a18:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a1a:	d10a      	bne.n	8006a32 <_vfiprintf_r+0x156>
 8006a1c:	7863      	ldrb	r3, [r4, #1]
 8006a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a20:	d132      	bne.n	8006a88 <_vfiprintf_r+0x1ac>
 8006a22:	9b03      	ldr	r3, [sp, #12]
 8006a24:	3402      	adds	r4, #2
 8006a26:	1d1a      	adds	r2, r3, #4
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	9203      	str	r2, [sp, #12]
 8006a2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a30:	9305      	str	r3, [sp, #20]
 8006a32:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006afc <_vfiprintf_r+0x220>
 8006a36:	2203      	movs	r2, #3
 8006a38:	4650      	mov	r0, sl
 8006a3a:	7821      	ldrb	r1, [r4, #0]
 8006a3c:	f7fe f96f 	bl	8004d1e <memchr>
 8006a40:	b138      	cbz	r0, 8006a52 <_vfiprintf_r+0x176>
 8006a42:	2240      	movs	r2, #64	@ 0x40
 8006a44:	9b04      	ldr	r3, [sp, #16]
 8006a46:	eba0 000a 	sub.w	r0, r0, sl
 8006a4a:	4082      	lsls	r2, r0
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	3401      	adds	r4, #1
 8006a50:	9304      	str	r3, [sp, #16]
 8006a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a56:	2206      	movs	r2, #6
 8006a58:	4829      	ldr	r0, [pc, #164]	@ (8006b00 <_vfiprintf_r+0x224>)
 8006a5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a5e:	f7fe f95e 	bl	8004d1e <memchr>
 8006a62:	2800      	cmp	r0, #0
 8006a64:	d03f      	beq.n	8006ae6 <_vfiprintf_r+0x20a>
 8006a66:	4b27      	ldr	r3, [pc, #156]	@ (8006b04 <_vfiprintf_r+0x228>)
 8006a68:	bb1b      	cbnz	r3, 8006ab2 <_vfiprintf_r+0x1d6>
 8006a6a:	9b03      	ldr	r3, [sp, #12]
 8006a6c:	3307      	adds	r3, #7
 8006a6e:	f023 0307 	bic.w	r3, r3, #7
 8006a72:	3308      	adds	r3, #8
 8006a74:	9303      	str	r3, [sp, #12]
 8006a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a78:	443b      	add	r3, r7
 8006a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a7c:	e76a      	b.n	8006954 <_vfiprintf_r+0x78>
 8006a7e:	460c      	mov	r4, r1
 8006a80:	2001      	movs	r0, #1
 8006a82:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a86:	e7a8      	b.n	80069da <_vfiprintf_r+0xfe>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f04f 0c0a 	mov.w	ip, #10
 8006a8e:	4619      	mov	r1, r3
 8006a90:	3401      	adds	r4, #1
 8006a92:	9305      	str	r3, [sp, #20]
 8006a94:	4620      	mov	r0, r4
 8006a96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a9a:	3a30      	subs	r2, #48	@ 0x30
 8006a9c:	2a09      	cmp	r2, #9
 8006a9e:	d903      	bls.n	8006aa8 <_vfiprintf_r+0x1cc>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0c6      	beq.n	8006a32 <_vfiprintf_r+0x156>
 8006aa4:	9105      	str	r1, [sp, #20]
 8006aa6:	e7c4      	b.n	8006a32 <_vfiprintf_r+0x156>
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	2301      	movs	r3, #1
 8006aac:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ab0:	e7f0      	b.n	8006a94 <_vfiprintf_r+0x1b8>
 8006ab2:	ab03      	add	r3, sp, #12
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	462a      	mov	r2, r5
 8006ab8:	4630      	mov	r0, r6
 8006aba:	4b13      	ldr	r3, [pc, #76]	@ (8006b08 <_vfiprintf_r+0x22c>)
 8006abc:	a904      	add	r1, sp, #16
 8006abe:	f7fd fbb7 	bl	8004230 <_printf_float>
 8006ac2:	4607      	mov	r7, r0
 8006ac4:	1c78      	adds	r0, r7, #1
 8006ac6:	d1d6      	bne.n	8006a76 <_vfiprintf_r+0x19a>
 8006ac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006aca:	07d9      	lsls	r1, r3, #31
 8006acc:	d405      	bmi.n	8006ada <_vfiprintf_r+0x1fe>
 8006ace:	89ab      	ldrh	r3, [r5, #12]
 8006ad0:	059a      	lsls	r2, r3, #22
 8006ad2:	d402      	bmi.n	8006ada <_vfiprintf_r+0x1fe>
 8006ad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ad6:	f7fe f921 	bl	8004d1c <__retarget_lock_release_recursive>
 8006ada:	89ab      	ldrh	r3, [r5, #12]
 8006adc:	065b      	lsls	r3, r3, #25
 8006ade:	f53f af1f 	bmi.w	8006920 <_vfiprintf_r+0x44>
 8006ae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ae4:	e71e      	b.n	8006924 <_vfiprintf_r+0x48>
 8006ae6:	ab03      	add	r3, sp, #12
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	462a      	mov	r2, r5
 8006aec:	4630      	mov	r0, r6
 8006aee:	4b06      	ldr	r3, [pc, #24]	@ (8006b08 <_vfiprintf_r+0x22c>)
 8006af0:	a904      	add	r1, sp, #16
 8006af2:	f7fd fe3b 	bl	800476c <_printf_i>
 8006af6:	e7e4      	b.n	8006ac2 <_vfiprintf_r+0x1e6>
 8006af8:	080070c8 	.word	0x080070c8
 8006afc:	080070ce 	.word	0x080070ce
 8006b00:	080070d2 	.word	0x080070d2
 8006b04:	08004231 	.word	0x08004231
 8006b08:	080068b9 	.word	0x080068b9

08006b0c <__swbuf_r>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	460e      	mov	r6, r1
 8006b10:	4614      	mov	r4, r2
 8006b12:	4605      	mov	r5, r0
 8006b14:	b118      	cbz	r0, 8006b1e <__swbuf_r+0x12>
 8006b16:	6a03      	ldr	r3, [r0, #32]
 8006b18:	b90b      	cbnz	r3, 8006b1e <__swbuf_r+0x12>
 8006b1a:	f7fd ffd3 	bl	8004ac4 <__sinit>
 8006b1e:	69a3      	ldr	r3, [r4, #24]
 8006b20:	60a3      	str	r3, [r4, #8]
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	071a      	lsls	r2, r3, #28
 8006b26:	d501      	bpl.n	8006b2c <__swbuf_r+0x20>
 8006b28:	6923      	ldr	r3, [r4, #16]
 8006b2a:	b943      	cbnz	r3, 8006b3e <__swbuf_r+0x32>
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 f82a 	bl	8006b88 <__swsetup_r>
 8006b34:	b118      	cbz	r0, 8006b3e <__swbuf_r+0x32>
 8006b36:	f04f 37ff 	mov.w	r7, #4294967295
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	6922      	ldr	r2, [r4, #16]
 8006b42:	b2f6      	uxtb	r6, r6
 8006b44:	1a98      	subs	r0, r3, r2
 8006b46:	6963      	ldr	r3, [r4, #20]
 8006b48:	4637      	mov	r7, r6
 8006b4a:	4283      	cmp	r3, r0
 8006b4c:	dc05      	bgt.n	8006b5a <__swbuf_r+0x4e>
 8006b4e:	4621      	mov	r1, r4
 8006b50:	4628      	mov	r0, r5
 8006b52:	f7ff fd9b 	bl	800668c <_fflush_r>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d1ed      	bne.n	8006b36 <__swbuf_r+0x2a>
 8006b5a:	68a3      	ldr	r3, [r4, #8]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	60a3      	str	r3, [r4, #8]
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	1c5a      	adds	r2, r3, #1
 8006b64:	6022      	str	r2, [r4, #0]
 8006b66:	701e      	strb	r6, [r3, #0]
 8006b68:	6962      	ldr	r2, [r4, #20]
 8006b6a:	1c43      	adds	r3, r0, #1
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d004      	beq.n	8006b7a <__swbuf_r+0x6e>
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	07db      	lsls	r3, r3, #31
 8006b74:	d5e1      	bpl.n	8006b3a <__swbuf_r+0x2e>
 8006b76:	2e0a      	cmp	r6, #10
 8006b78:	d1df      	bne.n	8006b3a <__swbuf_r+0x2e>
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f7ff fd85 	bl	800668c <_fflush_r>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d0d9      	beq.n	8006b3a <__swbuf_r+0x2e>
 8006b86:	e7d6      	b.n	8006b36 <__swbuf_r+0x2a>

08006b88 <__swsetup_r>:
 8006b88:	b538      	push	{r3, r4, r5, lr}
 8006b8a:	4b29      	ldr	r3, [pc, #164]	@ (8006c30 <__swsetup_r+0xa8>)
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	6818      	ldr	r0, [r3, #0]
 8006b90:	460c      	mov	r4, r1
 8006b92:	b118      	cbz	r0, 8006b9c <__swsetup_r+0x14>
 8006b94:	6a03      	ldr	r3, [r0, #32]
 8006b96:	b90b      	cbnz	r3, 8006b9c <__swsetup_r+0x14>
 8006b98:	f7fd ff94 	bl	8004ac4 <__sinit>
 8006b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ba0:	0719      	lsls	r1, r3, #28
 8006ba2:	d422      	bmi.n	8006bea <__swsetup_r+0x62>
 8006ba4:	06da      	lsls	r2, r3, #27
 8006ba6:	d407      	bmi.n	8006bb8 <__swsetup_r+0x30>
 8006ba8:	2209      	movs	r2, #9
 8006baa:	602a      	str	r2, [r5, #0]
 8006bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb4:	81a3      	strh	r3, [r4, #12]
 8006bb6:	e033      	b.n	8006c20 <__swsetup_r+0x98>
 8006bb8:	0758      	lsls	r0, r3, #29
 8006bba:	d512      	bpl.n	8006be2 <__swsetup_r+0x5a>
 8006bbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bbe:	b141      	cbz	r1, 8006bd2 <__swsetup_r+0x4a>
 8006bc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bc4:	4299      	cmp	r1, r3
 8006bc6:	d002      	beq.n	8006bce <__swsetup_r+0x46>
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f7fe ff09 	bl	80059e0 <_free_r>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006bd8:	81a3      	strh	r3, [r4, #12]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	6063      	str	r3, [r4, #4]
 8006bde:	6923      	ldr	r3, [r4, #16]
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	89a3      	ldrh	r3, [r4, #12]
 8006be4:	f043 0308 	orr.w	r3, r3, #8
 8006be8:	81a3      	strh	r3, [r4, #12]
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	b94b      	cbnz	r3, 8006c02 <__swsetup_r+0x7a>
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bf8:	d003      	beq.n	8006c02 <__swsetup_r+0x7a>
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f000 f882 	bl	8006d06 <__smakebuf_r>
 8006c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c06:	f013 0201 	ands.w	r2, r3, #1
 8006c0a:	d00a      	beq.n	8006c22 <__swsetup_r+0x9a>
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	60a2      	str	r2, [r4, #8]
 8006c10:	6962      	ldr	r2, [r4, #20]
 8006c12:	4252      	negs	r2, r2
 8006c14:	61a2      	str	r2, [r4, #24]
 8006c16:	6922      	ldr	r2, [r4, #16]
 8006c18:	b942      	cbnz	r2, 8006c2c <__swsetup_r+0xa4>
 8006c1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c1e:	d1c5      	bne.n	8006bac <__swsetup_r+0x24>
 8006c20:	bd38      	pop	{r3, r4, r5, pc}
 8006c22:	0799      	lsls	r1, r3, #30
 8006c24:	bf58      	it	pl
 8006c26:	6962      	ldrpl	r2, [r4, #20]
 8006c28:	60a2      	str	r2, [r4, #8]
 8006c2a:	e7f4      	b.n	8006c16 <__swsetup_r+0x8e>
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	e7f7      	b.n	8006c20 <__swsetup_r+0x98>
 8006c30:	20000068 	.word	0x20000068

08006c34 <_raise_r>:
 8006c34:	291f      	cmp	r1, #31
 8006c36:	b538      	push	{r3, r4, r5, lr}
 8006c38:	4605      	mov	r5, r0
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	d904      	bls.n	8006c48 <_raise_r+0x14>
 8006c3e:	2316      	movs	r3, #22
 8006c40:	6003      	str	r3, [r0, #0]
 8006c42:	f04f 30ff 	mov.w	r0, #4294967295
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006c4a:	b112      	cbz	r2, 8006c52 <_raise_r+0x1e>
 8006c4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c50:	b94b      	cbnz	r3, 8006c66 <_raise_r+0x32>
 8006c52:	4628      	mov	r0, r5
 8006c54:	f000 f830 	bl	8006cb8 <_getpid_r>
 8006c58:	4622      	mov	r2, r4
 8006c5a:	4601      	mov	r1, r0
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c62:	f000 b817 	b.w	8006c94 <_kill_r>
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d00a      	beq.n	8006c80 <_raise_r+0x4c>
 8006c6a:	1c59      	adds	r1, r3, #1
 8006c6c:	d103      	bne.n	8006c76 <_raise_r+0x42>
 8006c6e:	2316      	movs	r3, #22
 8006c70:	6003      	str	r3, [r0, #0]
 8006c72:	2001      	movs	r0, #1
 8006c74:	e7e7      	b.n	8006c46 <_raise_r+0x12>
 8006c76:	2100      	movs	r1, #0
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006c7e:	4798      	blx	r3
 8006c80:	2000      	movs	r0, #0
 8006c82:	e7e0      	b.n	8006c46 <_raise_r+0x12>

08006c84 <raise>:
 8006c84:	4b02      	ldr	r3, [pc, #8]	@ (8006c90 <raise+0xc>)
 8006c86:	4601      	mov	r1, r0
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	f7ff bfd3 	b.w	8006c34 <_raise_r>
 8006c8e:	bf00      	nop
 8006c90:	20000068 	.word	0x20000068

08006c94 <_kill_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	2300      	movs	r3, #0
 8006c98:	4d06      	ldr	r5, [pc, #24]	@ (8006cb4 <_kill_r+0x20>)
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	602b      	str	r3, [r5, #0]
 8006ca2:	f7fb fb8a 	bl	80023ba <_kill>
 8006ca6:	1c43      	adds	r3, r0, #1
 8006ca8:	d102      	bne.n	8006cb0 <_kill_r+0x1c>
 8006caa:	682b      	ldr	r3, [r5, #0]
 8006cac:	b103      	cbz	r3, 8006cb0 <_kill_r+0x1c>
 8006cae:	6023      	str	r3, [r4, #0]
 8006cb0:	bd38      	pop	{r3, r4, r5, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000504 	.word	0x20000504

08006cb8 <_getpid_r>:
 8006cb8:	f7fb bb78 	b.w	80023ac <_getpid>

08006cbc <__swhatbuf_r>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc4:	4615      	mov	r5, r2
 8006cc6:	2900      	cmp	r1, #0
 8006cc8:	461e      	mov	r6, r3
 8006cca:	b096      	sub	sp, #88	@ 0x58
 8006ccc:	da0c      	bge.n	8006ce8 <__swhatbuf_r+0x2c>
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006cd6:	bf14      	ite	ne
 8006cd8:	2340      	movne	r3, #64	@ 0x40
 8006cda:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006cde:	2000      	movs	r0, #0
 8006ce0:	6031      	str	r1, [r6, #0]
 8006ce2:	602b      	str	r3, [r5, #0]
 8006ce4:	b016      	add	sp, #88	@ 0x58
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
 8006ce8:	466a      	mov	r2, sp
 8006cea:	f000 f849 	bl	8006d80 <_fstat_r>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	dbed      	blt.n	8006cce <__swhatbuf_r+0x12>
 8006cf2:	9901      	ldr	r1, [sp, #4]
 8006cf4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006cf8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006cfc:	4259      	negs	r1, r3
 8006cfe:	4159      	adcs	r1, r3
 8006d00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d04:	e7eb      	b.n	8006cde <__swhatbuf_r+0x22>

08006d06 <__smakebuf_r>:
 8006d06:	898b      	ldrh	r3, [r1, #12]
 8006d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d0a:	079d      	lsls	r5, r3, #30
 8006d0c:	4606      	mov	r6, r0
 8006d0e:	460c      	mov	r4, r1
 8006d10:	d507      	bpl.n	8006d22 <__smakebuf_r+0x1c>
 8006d12:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d16:	6023      	str	r3, [r4, #0]
 8006d18:	6123      	str	r3, [r4, #16]
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	6163      	str	r3, [r4, #20]
 8006d1e:	b003      	add	sp, #12
 8006d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d22:	466a      	mov	r2, sp
 8006d24:	ab01      	add	r3, sp, #4
 8006d26:	f7ff ffc9 	bl	8006cbc <__swhatbuf_r>
 8006d2a:	9f00      	ldr	r7, [sp, #0]
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	4639      	mov	r1, r7
 8006d30:	4630      	mov	r0, r6
 8006d32:	f7fe fec7 	bl	8005ac4 <_malloc_r>
 8006d36:	b948      	cbnz	r0, 8006d4c <__smakebuf_r+0x46>
 8006d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d3c:	059a      	lsls	r2, r3, #22
 8006d3e:	d4ee      	bmi.n	8006d1e <__smakebuf_r+0x18>
 8006d40:	f023 0303 	bic.w	r3, r3, #3
 8006d44:	f043 0302 	orr.w	r3, r3, #2
 8006d48:	81a3      	strh	r3, [r4, #12]
 8006d4a:	e7e2      	b.n	8006d12 <__smakebuf_r+0xc>
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d56:	81a3      	strh	r3, [r4, #12]
 8006d58:	9b01      	ldr	r3, [sp, #4]
 8006d5a:	6020      	str	r0, [r4, #0]
 8006d5c:	b15b      	cbz	r3, 8006d76 <__smakebuf_r+0x70>
 8006d5e:	4630      	mov	r0, r6
 8006d60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d64:	f000 f81e 	bl	8006da4 <_isatty_r>
 8006d68:	b128      	cbz	r0, 8006d76 <__smakebuf_r+0x70>
 8006d6a:	89a3      	ldrh	r3, [r4, #12]
 8006d6c:	f023 0303 	bic.w	r3, r3, #3
 8006d70:	f043 0301 	orr.w	r3, r3, #1
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	431d      	orrs	r5, r3
 8006d7a:	81a5      	strh	r5, [r4, #12]
 8006d7c:	e7cf      	b.n	8006d1e <__smakebuf_r+0x18>
	...

08006d80 <_fstat_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	2300      	movs	r3, #0
 8006d84:	4d06      	ldr	r5, [pc, #24]	@ (8006da0 <_fstat_r+0x20>)
 8006d86:	4604      	mov	r4, r0
 8006d88:	4608      	mov	r0, r1
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	602b      	str	r3, [r5, #0]
 8006d8e:	f7fb fb73 	bl	8002478 <_fstat>
 8006d92:	1c43      	adds	r3, r0, #1
 8006d94:	d102      	bne.n	8006d9c <_fstat_r+0x1c>
 8006d96:	682b      	ldr	r3, [r5, #0]
 8006d98:	b103      	cbz	r3, 8006d9c <_fstat_r+0x1c>
 8006d9a:	6023      	str	r3, [r4, #0]
 8006d9c:	bd38      	pop	{r3, r4, r5, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000504 	.word	0x20000504

08006da4 <_isatty_r>:
 8006da4:	b538      	push	{r3, r4, r5, lr}
 8006da6:	2300      	movs	r3, #0
 8006da8:	4d05      	ldr	r5, [pc, #20]	@ (8006dc0 <_isatty_r+0x1c>)
 8006daa:	4604      	mov	r4, r0
 8006dac:	4608      	mov	r0, r1
 8006dae:	602b      	str	r3, [r5, #0]
 8006db0:	f7fb fb71 	bl	8002496 <_isatty>
 8006db4:	1c43      	adds	r3, r0, #1
 8006db6:	d102      	bne.n	8006dbe <_isatty_r+0x1a>
 8006db8:	682b      	ldr	r3, [r5, #0]
 8006dba:	b103      	cbz	r3, 8006dbe <_isatty_r+0x1a>
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	bd38      	pop	{r3, r4, r5, pc}
 8006dc0:	20000504 	.word	0x20000504

08006dc4 <_init>:
 8006dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc6:	bf00      	nop
 8006dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dca:	bc08      	pop	{r3}
 8006dcc:	469e      	mov	lr, r3
 8006dce:	4770      	bx	lr

08006dd0 <_fini>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	bf00      	nop
 8006dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd6:	bc08      	pop	{r3}
 8006dd8:	469e      	mov	lr, r3
 8006dda:	4770      	bx	lr
