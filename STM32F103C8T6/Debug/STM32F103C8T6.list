
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026e0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080027ec  080027ec  000037ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002824  08002824  00004018  2**0
                  CONTENTS
  4 .ARM          00000000  08002824  08002824  00004018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002824  08002824  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002824  08002824  00003824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002828  08002828  00003828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  0800282c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000018  08002844  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08002844  0000419c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d4c  00000000  00000000  00004041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb5  00000000  00000000  0000dd8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0000f948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008fe  00000000  00000000  000104f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176bb  00000000  00000000  00010dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdd3  00000000  00000000  000284a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000896f1  00000000  00000000  0003427c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd96d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003028  00000000  00000000  000bd9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000c09d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	080027d4 	.word	0x080027d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	080027d4 	.word	0x080027d4

0800014c <KeyPad_Scan>:
    /* Set all rows to high */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
}

/* Scan the 4x5 keypad and return the pressed key value */
uint8_t KeyPad_Scan(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    uint32_t currentMillis = HAL_GetTick();
 8000152:	f000 fdfd 	bl	8000d50 <HAL_GetTick>
 8000156:	6038      	str	r0, [r7, #0]

    if (currentMillis - lastDebounceTime < DEBOUNCE_DELAY) {
 8000158:	4b24      	ldr	r3, [pc, #144]	@ (80001ec <KeyPad_Scan+0xa0>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	683a      	ldr	r2, [r7, #0]
 800015e:	1ad3      	subs	r3, r2, r3
 8000160:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000164:	d201      	bcs.n	800016a <KeyPad_Scan+0x1e>
        return 0xFF;
 8000166:	23ff      	movs	r3, #255	@ 0xff
 8000168:	e03b      	b.n	80001e2 <KeyPad_Scan+0x96>
    }

    for (uint8_t row = 0; row < 4; row++) {
 800016a:	2300      	movs	r3, #0
 800016c:	71fb      	strb	r3, [r7, #7]
 800016e:	e034      	b.n	80001da <KeyPad_Scan+0x8e>
        /* Set all rows low */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000170:	2200      	movs	r2, #0
 8000172:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000176:	481e      	ldr	r0, [pc, #120]	@ (80001f0 <KeyPad_Scan+0xa4>)
 8000178:	f001 f89d 	bl	80012b6 <HAL_GPIO_WritePin>

        /* Set the current row high */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 << row, GPIO_PIN_SET);
 800017c:	79fb      	ldrb	r3, [r7, #7]
 800017e:	2240      	movs	r2, #64	@ 0x40
 8000180:	fa02 f303 	lsl.w	r3, r2, r3
 8000184:	b29b      	uxth	r3, r3
 8000186:	2201      	movs	r2, #1
 8000188:	4619      	mov	r1, r3
 800018a:	4819      	ldr	r0, [pc, #100]	@ (80001f0 <KeyPad_Scan+0xa4>)
 800018c:	f001 f893 	bl	80012b6 <HAL_GPIO_WritePin>

        /* Read each column */
        for (uint8_t col = 0; col < 5; col++) {
 8000190:	2300      	movs	r3, #0
 8000192:	71bb      	strb	r3, [r7, #6]
 8000194:	e01b      	b.n	80001ce <KeyPad_Scan+0x82>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 << col) == GPIO_PIN_SET) {
 8000196:	79bb      	ldrb	r3, [r7, #6]
 8000198:	2201      	movs	r2, #1
 800019a:	fa02 f303 	lsl.w	r3, r2, r3
 800019e:	b29b      	uxth	r3, r3
 80001a0:	4619      	mov	r1, r3
 80001a2:	4813      	ldr	r0, [pc, #76]	@ (80001f0 <KeyPad_Scan+0xa4>)
 80001a4:	f001 f870 	bl	8001288 <HAL_GPIO_ReadPin>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b01      	cmp	r3, #1
 80001ac:	d10c      	bne.n	80001c8 <KeyPad_Scan+0x7c>
                lastDebounceTime = currentMillis;
 80001ae:	4a0f      	ldr	r2, [pc, #60]	@ (80001ec <KeyPad_Scan+0xa0>)
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	6013      	str	r3, [r2, #0]
                return keyMap[row][col];
 80001b4:	79fa      	ldrb	r2, [r7, #7]
 80001b6:	79b9      	ldrb	r1, [r7, #6]
 80001b8:	480e      	ldr	r0, [pc, #56]	@ (80001f4 <KeyPad_Scan+0xa8>)
 80001ba:	4613      	mov	r3, r2
 80001bc:	009b      	lsls	r3, r3, #2
 80001be:	4413      	add	r3, r2
 80001c0:	4403      	add	r3, r0
 80001c2:	440b      	add	r3, r1
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	e00c      	b.n	80001e2 <KeyPad_Scan+0x96>
        for (uint8_t col = 0; col < 5; col++) {
 80001c8:	79bb      	ldrb	r3, [r7, #6]
 80001ca:	3301      	adds	r3, #1
 80001cc:	71bb      	strb	r3, [r7, #6]
 80001ce:	79bb      	ldrb	r3, [r7, #6]
 80001d0:	2b04      	cmp	r3, #4
 80001d2:	d9e0      	bls.n	8000196 <KeyPad_Scan+0x4a>
    for (uint8_t row = 0; row < 4; row++) {
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	3301      	adds	r3, #1
 80001d8:	71fb      	strb	r3, [r7, #7]
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	2b03      	cmp	r3, #3
 80001de:	d9c7      	bls.n	8000170 <KeyPad_Scan+0x24>
            }
        }
    }

    return 0xFF;
 80001e0:	23ff      	movs	r3, #255	@ 0xff
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	20000034 	.word	0x20000034
 80001f0:	40010c00 	.word	0x40010c00
 80001f4:	080027ec 	.word	0x080027ec

080001f8 <ShiftOut_SPI>:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
}
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Pull STCP (Latch) low
 8000202:	2200      	movs	r2, #0
 8000204:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000208:	480a      	ldr	r0, [pc, #40]	@ (8000234 <ShiftOut_SPI+0x3c>)
 800020a:	f001 f854 	bl	80012b6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, 300); // Transmit data
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	b29a      	uxth	r2, r3
 8000212:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000216:	6879      	ldr	r1, [r7, #4]
 8000218:	4807      	ldr	r0, [pc, #28]	@ (8000238 <ShiftOut_SPI+0x40>)
 800021a:	f001 fcc7 	bl	8001bac <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Pull STCP (Latch) high
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <ShiftOut_SPI+0x3c>)
 8000226:	f001 f846 	bl	80012b6 <HAL_GPIO_WritePin>

}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40010c00 	.word	0x40010c00
 8000238:	20000090 	.word	0x20000090

0800023c <SevenSegLEDsHandler>:
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // Pull STCP (Latch) low
    HAL_SPI_Transmit(&hspi1, data, size, 300); // Transmit data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // Pull STCP (Latch) high
}

uint8_t* SevenSegLEDsHandler(uint32_t* buffer, uint8_t scan_state) {
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	460b      	mov	r3, r1
 8000246:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    switch (scan_state) {
 8000248:	78fb      	ldrb	r3, [r7, #3]
 800024a:	2b05      	cmp	r3, #5
 800024c:	f200 815d 	bhi.w	800050a <SevenSegLEDsHandler+0x2ce>
 8000250:	a201      	add	r2, pc, #4	@ (adr r2, 8000258 <SevenSegLEDsHandler+0x1c>)
 8000252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000256:	bf00      	nop
 8000258:	08000271 	.word	0x08000271
 800025c:	080002cb 	.word	0x080002cb
 8000260:	0800033d 	.word	0x0800033d
 8000264:	080003af 	.word	0x080003af
 8000268:	08000421 	.word	0x08000421
 800026c:	08000493 	.word	0x08000493
        case 0:
            output[0] = buffer[0] % 10;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	6819      	ldr	r1, [r3, #0]
 8000274:	4ba8      	ldr	r3, [pc, #672]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 8000276:	fba3 2301 	umull	r2, r3, r3, r1
 800027a:	08da      	lsrs	r2, r3, #3
 800027c:	4613      	mov	r3, r2
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	4413      	add	r3, r2
 8000282:	005b      	lsls	r3, r3, #1
 8000284:	1aca      	subs	r2, r1, r3
 8000286:	b2d2      	uxtb	r2, r2
 8000288:	4ba4      	ldr	r3, [pc, #656]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 800028a:	701a      	strb	r2, [r3, #0]
            output[1] = buffer[1] % 10;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	3304      	adds	r3, #4
 8000290:	6819      	ldr	r1, [r3, #0]
 8000292:	4ba1      	ldr	r3, [pc, #644]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 8000294:	fba3 2301 	umull	r2, r3, r3, r1
 8000298:	08da      	lsrs	r2, r3, #3
 800029a:	4613      	mov	r3, r2
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	4413      	add	r3, r2
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	1aca      	subs	r2, r1, r3
 80002a4:	b2d2      	uxtb	r2, r2
 80002a6:	4b9d      	ldr	r3, [pc, #628]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 80002a8:	705a      	strb	r2, [r3, #1]
            output[2] = buffer[2] % 10;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	3308      	adds	r3, #8
 80002ae:	6819      	ldr	r1, [r3, #0]
 80002b0:	4b99      	ldr	r3, [pc, #612]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 80002b2:	fba3 2301 	umull	r2, r3, r3, r1
 80002b6:	08da      	lsrs	r2, r3, #3
 80002b8:	4613      	mov	r3, r2
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	4413      	add	r3, r2
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	1aca      	subs	r2, r1, r3
 80002c2:	b2d2      	uxtb	r2, r2
 80002c4:	4b95      	ldr	r3, [pc, #596]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 80002c6:	709a      	strb	r2, [r3, #2]
            break;
 80002c8:	e11f      	b.n	800050a <SevenSegLEDsHandler+0x2ce>
        case 1:
            output[0] = (buffer[0] / 10) % 10;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a92      	ldr	r2, [pc, #584]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 80002d0:	fba2 2303 	umull	r2, r3, r2, r3
 80002d4:	08d9      	lsrs	r1, r3, #3
 80002d6:	4b90      	ldr	r3, [pc, #576]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 80002d8:	fba3 2301 	umull	r2, r3, r3, r1
 80002dc:	08da      	lsrs	r2, r3, #3
 80002de:	4613      	mov	r3, r2
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	4413      	add	r3, r2
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	1aca      	subs	r2, r1, r3
 80002e8:	b2d2      	uxtb	r2, r2
 80002ea:	4b8c      	ldr	r3, [pc, #560]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 80002ec:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10) % 10;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	3304      	adds	r3, #4
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a88      	ldr	r2, [pc, #544]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 80002f6:	fba2 2303 	umull	r2, r3, r2, r3
 80002fa:	08d9      	lsrs	r1, r3, #3
 80002fc:	4b86      	ldr	r3, [pc, #536]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 80002fe:	fba3 2301 	umull	r2, r3, r3, r1
 8000302:	08da      	lsrs	r2, r3, #3
 8000304:	4613      	mov	r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	4413      	add	r3, r2
 800030a:	005b      	lsls	r3, r3, #1
 800030c:	1aca      	subs	r2, r1, r3
 800030e:	b2d2      	uxtb	r2, r2
 8000310:	4b82      	ldr	r3, [pc, #520]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 8000312:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10) % 10;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	3308      	adds	r3, #8
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a7f      	ldr	r2, [pc, #508]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 800031c:	fba2 2303 	umull	r2, r3, r2, r3
 8000320:	08d9      	lsrs	r1, r3, #3
 8000322:	4b7d      	ldr	r3, [pc, #500]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 8000324:	fba3 2301 	umull	r2, r3, r3, r1
 8000328:	08da      	lsrs	r2, r3, #3
 800032a:	4613      	mov	r3, r2
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	4413      	add	r3, r2
 8000330:	005b      	lsls	r3, r3, #1
 8000332:	1aca      	subs	r2, r1, r3
 8000334:	b2d2      	uxtb	r2, r2
 8000336:	4b79      	ldr	r3, [pc, #484]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 8000338:	709a      	strb	r2, [r3, #2]
            break;
 800033a:	e0e6      	b.n	800050a <SevenSegLEDsHandler+0x2ce>
        case 2:
            output[0] = (buffer[0] / 100) % 10;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a77      	ldr	r2, [pc, #476]	@ (8000520 <SevenSegLEDsHandler+0x2e4>)
 8000342:	fba2 2303 	umull	r2, r3, r2, r3
 8000346:	0959      	lsrs	r1, r3, #5
 8000348:	4b73      	ldr	r3, [pc, #460]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 800034a:	fba3 2301 	umull	r2, r3, r3, r1
 800034e:	08da      	lsrs	r2, r3, #3
 8000350:	4613      	mov	r3, r2
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	4413      	add	r3, r2
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	1aca      	subs	r2, r1, r3
 800035a:	b2d2      	uxtb	r2, r2
 800035c:	4b6f      	ldr	r3, [pc, #444]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 800035e:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100) % 10;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3304      	adds	r3, #4
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a6e      	ldr	r2, [pc, #440]	@ (8000520 <SevenSegLEDsHandler+0x2e4>)
 8000368:	fba2 2303 	umull	r2, r3, r2, r3
 800036c:	0959      	lsrs	r1, r3, #5
 800036e:	4b6a      	ldr	r3, [pc, #424]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 8000370:	fba3 2301 	umull	r2, r3, r3, r1
 8000374:	08da      	lsrs	r2, r3, #3
 8000376:	4613      	mov	r3, r2
 8000378:	009b      	lsls	r3, r3, #2
 800037a:	4413      	add	r3, r2
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	1aca      	subs	r2, r1, r3
 8000380:	b2d2      	uxtb	r2, r2
 8000382:	4b66      	ldr	r3, [pc, #408]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 8000384:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100) % 10;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	3308      	adds	r3, #8
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a64      	ldr	r2, [pc, #400]	@ (8000520 <SevenSegLEDsHandler+0x2e4>)
 800038e:	fba2 2303 	umull	r2, r3, r2, r3
 8000392:	0959      	lsrs	r1, r3, #5
 8000394:	4b60      	ldr	r3, [pc, #384]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 8000396:	fba3 2301 	umull	r2, r3, r3, r1
 800039a:	08da      	lsrs	r2, r3, #3
 800039c:	4613      	mov	r3, r2
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	4413      	add	r3, r2
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	1aca      	subs	r2, r1, r3
 80003a6:	b2d2      	uxtb	r2, r2
 80003a8:	4b5c      	ldr	r3, [pc, #368]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 80003aa:	709a      	strb	r2, [r3, #2]
            break;
 80003ac:	e0ad      	b.n	800050a <SevenSegLEDsHandler+0x2ce>
        case 3:
            output[0] = (buffer[0] / 1000) % 10;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a5c      	ldr	r2, [pc, #368]	@ (8000524 <SevenSegLEDsHandler+0x2e8>)
 80003b4:	fba2 2303 	umull	r2, r3, r2, r3
 80003b8:	0999      	lsrs	r1, r3, #6
 80003ba:	4b57      	ldr	r3, [pc, #348]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 80003bc:	fba3 2301 	umull	r2, r3, r3, r1
 80003c0:	08da      	lsrs	r2, r3, #3
 80003c2:	4613      	mov	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	4413      	add	r3, r2
 80003c8:	005b      	lsls	r3, r3, #1
 80003ca:	1aca      	subs	r2, r1, r3
 80003cc:	b2d2      	uxtb	r2, r2
 80003ce:	4b53      	ldr	r3, [pc, #332]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 80003d0:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 1000) % 10;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3304      	adds	r3, #4
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a52      	ldr	r2, [pc, #328]	@ (8000524 <SevenSegLEDsHandler+0x2e8>)
 80003da:	fba2 2303 	umull	r2, r3, r2, r3
 80003de:	0999      	lsrs	r1, r3, #6
 80003e0:	4b4d      	ldr	r3, [pc, #308]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 80003e2:	fba3 2301 	umull	r2, r3, r3, r1
 80003e6:	08da      	lsrs	r2, r3, #3
 80003e8:	4613      	mov	r3, r2
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	4413      	add	r3, r2
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	1aca      	subs	r2, r1, r3
 80003f2:	b2d2      	uxtb	r2, r2
 80003f4:	4b49      	ldr	r3, [pc, #292]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 80003f6:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 1000) % 10;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3308      	adds	r3, #8
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a49      	ldr	r2, [pc, #292]	@ (8000524 <SevenSegLEDsHandler+0x2e8>)
 8000400:	fba2 2303 	umull	r2, r3, r2, r3
 8000404:	0999      	lsrs	r1, r3, #6
 8000406:	4b44      	ldr	r3, [pc, #272]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 8000408:	fba3 2301 	umull	r2, r3, r3, r1
 800040c:	08da      	lsrs	r2, r3, #3
 800040e:	4613      	mov	r3, r2
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	4413      	add	r3, r2
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	1aca      	subs	r2, r1, r3
 8000418:	b2d2      	uxtb	r2, r2
 800041a:	4b40      	ldr	r3, [pc, #256]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 800041c:	709a      	strb	r2, [r3, #2]
            break;
 800041e:	e074      	b.n	800050a <SevenSegLEDsHandler+0x2ce>
        case 4:
            output[0] = (buffer[0] / 10000) % 10;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a40      	ldr	r2, [pc, #256]	@ (8000528 <SevenSegLEDsHandler+0x2ec>)
 8000426:	fba2 2303 	umull	r2, r3, r2, r3
 800042a:	0b59      	lsrs	r1, r3, #13
 800042c:	4b3a      	ldr	r3, [pc, #232]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 800042e:	fba3 2301 	umull	r2, r3, r3, r1
 8000432:	08da      	lsrs	r2, r3, #3
 8000434:	4613      	mov	r3, r2
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	4413      	add	r3, r2
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	1aca      	subs	r2, r1, r3
 800043e:	b2d2      	uxtb	r2, r2
 8000440:	4b36      	ldr	r3, [pc, #216]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 8000442:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10000) % 10;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3304      	adds	r3, #4
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a37      	ldr	r2, [pc, #220]	@ (8000528 <SevenSegLEDsHandler+0x2ec>)
 800044c:	fba2 2303 	umull	r2, r3, r2, r3
 8000450:	0b59      	lsrs	r1, r3, #13
 8000452:	4b31      	ldr	r3, [pc, #196]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 8000454:	fba3 2301 	umull	r2, r3, r3, r1
 8000458:	08da      	lsrs	r2, r3, #3
 800045a:	4613      	mov	r3, r2
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	4413      	add	r3, r2
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	1aca      	subs	r2, r1, r3
 8000464:	b2d2      	uxtb	r2, r2
 8000466:	4b2d      	ldr	r3, [pc, #180]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 8000468:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10000) % 10;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	3308      	adds	r3, #8
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a2d      	ldr	r2, [pc, #180]	@ (8000528 <SevenSegLEDsHandler+0x2ec>)
 8000472:	fba2 2303 	umull	r2, r3, r2, r3
 8000476:	0b59      	lsrs	r1, r3, #13
 8000478:	4b27      	ldr	r3, [pc, #156]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 800047a:	fba3 2301 	umull	r2, r3, r3, r1
 800047e:	08da      	lsrs	r2, r3, #3
 8000480:	4613      	mov	r3, r2
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	4413      	add	r3, r2
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	1aca      	subs	r2, r1, r3
 800048a:	b2d2      	uxtb	r2, r2
 800048c:	4b23      	ldr	r3, [pc, #140]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 800048e:	709a      	strb	r2, [r3, #2]
            break;
 8000490:	e03b      	b.n	800050a <SevenSegLEDsHandler+0x2ce>
        case 5:
            output[0] = (buffer[0] / 100000) % 10;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	095b      	lsrs	r3, r3, #5
 8000498:	4a24      	ldr	r2, [pc, #144]	@ (800052c <SevenSegLEDsHandler+0x2f0>)
 800049a:	fba2 2303 	umull	r2, r3, r2, r3
 800049e:	09d9      	lsrs	r1, r3, #7
 80004a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 80004a2:	fba3 2301 	umull	r2, r3, r3, r1
 80004a6:	08da      	lsrs	r2, r3, #3
 80004a8:	4613      	mov	r3, r2
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	4413      	add	r3, r2
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	1aca      	subs	r2, r1, r3
 80004b2:	b2d2      	uxtb	r2, r2
 80004b4:	4b19      	ldr	r3, [pc, #100]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 80004b6:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100000) % 10;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3304      	adds	r3, #4
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	095b      	lsrs	r3, r3, #5
 80004c0:	4a1a      	ldr	r2, [pc, #104]	@ (800052c <SevenSegLEDsHandler+0x2f0>)
 80004c2:	fba2 2303 	umull	r2, r3, r2, r3
 80004c6:	09d9      	lsrs	r1, r3, #7
 80004c8:	4b13      	ldr	r3, [pc, #76]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 80004ca:	fba3 2301 	umull	r2, r3, r3, r1
 80004ce:	08da      	lsrs	r2, r3, #3
 80004d0:	4613      	mov	r3, r2
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	4413      	add	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	1aca      	subs	r2, r1, r3
 80004da:	b2d2      	uxtb	r2, r2
 80004dc:	4b0f      	ldr	r3, [pc, #60]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 80004de:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100000) % 10;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	3308      	adds	r3, #8
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	095b      	lsrs	r3, r3, #5
 80004e8:	4a10      	ldr	r2, [pc, #64]	@ (800052c <SevenSegLEDsHandler+0x2f0>)
 80004ea:	fba2 2303 	umull	r2, r3, r2, r3
 80004ee:	09d9      	lsrs	r1, r3, #7
 80004f0:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <SevenSegLEDsHandler+0x2dc>)
 80004f2:	fba3 2301 	umull	r2, r3, r3, r1
 80004f6:	08da      	lsrs	r2, r3, #3
 80004f8:	4613      	mov	r3, r2
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4413      	add	r3, r2
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	1aca      	subs	r2, r1, r3
 8000502:	b2d2      	uxtb	r2, r2
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
 8000506:	709a      	strb	r2, [r3, #2]
            break;
 8000508:	bf00      	nop
    }
    return output;
 800050a:	4b04      	ldr	r3, [pc, #16]	@ (800051c <SevenSegLEDsHandler+0x2e0>)
}
 800050c:	4618      	mov	r0, r3
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	cccccccd 	.word	0xcccccccd
 800051c:	20000144 	.word	0x20000144
 8000520:	51eb851f 	.word	0x51eb851f
 8000524:	10624dd3 	.word	0x10624dd3
 8000528:	d1b71759 	.word	0xd1b71759
 800052c:	0a7c5ac5 	.word	0x0a7c5ac5

08000530 <SevenSegLEDsScan>:

void SevenSegLEDsScan(){
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
	uint8_t* curr_digit=SevenSegLEDsHandler(SevenSegBuffer,SevenSegScanState);
 8000536:	4b32      	ldr	r3, [pc, #200]	@ (8000600 <SevenSegLEDsScan+0xd0>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	4619      	mov	r1, r3
 800053c:	4831      	ldr	r0, [pc, #196]	@ (8000604 <SevenSegLEDsScan+0xd4>)
 800053e:	f7ff fe7d 	bl	800023c <SevenSegLEDsHandler>
 8000542:	60b8      	str	r0, [r7, #8]
	uint8_t curr_scan;
	switch (SevenSegScanState) {
 8000544:	4b2e      	ldr	r3, [pc, #184]	@ (8000600 <SevenSegLEDsScan+0xd0>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b05      	cmp	r3, #5
 800054a:	d833      	bhi.n	80005b4 <SevenSegLEDsScan+0x84>
 800054c:	a201      	add	r2, pc, #4	@ (adr r2, 8000554 <SevenSegLEDsScan+0x24>)
 800054e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000552:	bf00      	nop
 8000554:	0800056d 	.word	0x0800056d
 8000558:	08000579 	.word	0x08000579
 800055c:	08000585 	.word	0x08000585
 8000560:	08000591 	.word	0x08000591
 8000564:	0800059d 	.word	0x0800059d
 8000568:	080005a9 	.word	0x080005a9
		case 0:
			curr_scan=0b00100000;
 800056c:	2320      	movs	r3, #32
 800056e:	73fb      	strb	r3, [r7, #15]
			SevenSegScanState=1;
 8000570:	4b23      	ldr	r3, [pc, #140]	@ (8000600 <SevenSegLEDsScan+0xd0>)
 8000572:	2201      	movs	r2, #1
 8000574:	701a      	strb	r2, [r3, #0]
			break;
 8000576:	e023      	b.n	80005c0 <SevenSegLEDsScan+0x90>
		case 1:
			curr_scan=0b00010000;
 8000578:	2310      	movs	r3, #16
 800057a:	73fb      	strb	r3, [r7, #15]
			SevenSegScanState=2;
 800057c:	4b20      	ldr	r3, [pc, #128]	@ (8000600 <SevenSegLEDsScan+0xd0>)
 800057e:	2202      	movs	r2, #2
 8000580:	701a      	strb	r2, [r3, #0]
			break;
 8000582:	e01d      	b.n	80005c0 <SevenSegLEDsScan+0x90>
		case 2:
			curr_scan=0b00001000;
 8000584:	2308      	movs	r3, #8
 8000586:	73fb      	strb	r3, [r7, #15]
			SevenSegScanState=3;
 8000588:	4b1d      	ldr	r3, [pc, #116]	@ (8000600 <SevenSegLEDsScan+0xd0>)
 800058a:	2203      	movs	r2, #3
 800058c:	701a      	strb	r2, [r3, #0]
			break;
 800058e:	e017      	b.n	80005c0 <SevenSegLEDsScan+0x90>
		case 3:
			curr_scan=0b00000100;
 8000590:	2304      	movs	r3, #4
 8000592:	73fb      	strb	r3, [r7, #15]
			SevenSegScanState=4;
 8000594:	4b1a      	ldr	r3, [pc, #104]	@ (8000600 <SevenSegLEDsScan+0xd0>)
 8000596:	2204      	movs	r2, #4
 8000598:	701a      	strb	r2, [r3, #0]
			break;
 800059a:	e011      	b.n	80005c0 <SevenSegLEDsScan+0x90>
		case 4:
			curr_scan=0b00000010;
 800059c:	2302      	movs	r3, #2
 800059e:	73fb      	strb	r3, [r7, #15]
			SevenSegScanState=5;
 80005a0:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <SevenSegLEDsScan+0xd0>)
 80005a2:	2205      	movs	r2, #5
 80005a4:	701a      	strb	r2, [r3, #0]
			break;
 80005a6:	e00b      	b.n	80005c0 <SevenSegLEDsScan+0x90>
		case 5:
			curr_scan=0b00000001;
 80005a8:	2301      	movs	r3, #1
 80005aa:	73fb      	strb	r3, [r7, #15]
			SevenSegScanState=0;
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <SevenSegLEDsScan+0xd0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
			break;
 80005b2:	e005      	b.n	80005c0 <SevenSegLEDsScan+0x90>
		default:
			curr_scan=0b00000001;
 80005b4:	2301      	movs	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
			SevenSegScanState=0;
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <SevenSegLEDsScan+0xd0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
			break;
 80005be:	bf00      	nop
	}
	uint8_t led_buffer[]={curr_scan,digitMap[curr_digit[2]],digitMap[curr_digit[1]],digitMap[curr_digit[0]]};
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	713b      	strb	r3, [r7, #4]
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	3302      	adds	r3, #2
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <SevenSegLEDsScan+0xd8>)
 80005ce:	5c9b      	ldrb	r3, [r3, r2]
 80005d0:	717b      	strb	r3, [r7, #5]
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	3301      	adds	r3, #1
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <SevenSegLEDsScan+0xd8>)
 80005dc:	5c9b      	ldrb	r3, [r3, r2]
 80005de:	71bb      	strb	r3, [r7, #6]
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <SevenSegLEDsScan+0xd8>)
 80005e8:	5c9b      	ldrb	r3, [r3, r2]
 80005ea:	71fb      	strb	r3, [r7, #7]
	ShiftOut_SPI(led_buffer, 4);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2104      	movs	r1, #4
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fe01 	bl	80001f8 <ShiftOut_SPI>
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000134 	.word	0x20000134
 8000604:	20000138 	.word	0x20000138
 8000608:	20000000 	.word	0x20000000

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fb45 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f861 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f953 	bl	80008c4 <MX_GPIO_Init>
  MX_SPI2_Init();
 800061e:	f000 f8cf 	bl	80007c0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000622:	f000 f903 	bl	800082c <MX_TIM2_Init>
  MX_SPI1_Init();
 8000626:	f000 f895 	bl	8000754 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800062a:	4826      	ldr	r0, [pc, #152]	@ (80006c4 <main+0xb8>)
 800062c:	f001 fcf8 	bl	8002020 <HAL_TIM_Base_Start_IT>
  setTimer(0,100);
 8000630:	2164      	movs	r1, #100	@ 0x64
 8000632:	2000      	movs	r0, #0
 8000634:	f000 fac6 	bl	8000bc4 <setTimer>
  setTimer(1,100);
 8000638:	2164      	movs	r1, #100	@ 0x64
 800063a:	2001      	movs	r0, #1
 800063c:	f000 fac2 	bl	8000bc4 <setTimer>
  setTimer(2,100);
 8000640:	2164      	movs	r1, #100	@ 0x64
 8000642:	2002      	movs	r0, #2
 8000644:	f000 fabe 	bl	8000bc4 <setTimer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {
	  // TIMER 0 /////////////////////////////////////
	  if(timer_flag[0]==1){
 8000648:	4b1f      	ldr	r3, [pc, #124]	@ (80006c8 <main+0xbc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d105      	bne.n	800065c <main+0x50>

		  SevenSegLEDsScan();
 8000650:	f7ff ff6e 	bl	8000530 <SevenSegLEDsScan>
		  setTimer(0,5);
 8000654:	2105      	movs	r1, #5
 8000656:	2000      	movs	r0, #0
 8000658:	f000 fab4 	bl	8000bc4 <setTimer>
	  }

	  // TIMER 1 /////////////////////////////////////
	  if(timer_flag[1]==1){
 800065c:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <main+0xbc>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d1f1      	bne.n	8000648 <main+0x3c>
		  //////////////////////////////////////////////////TODO (1) IF USING LCD/////////////////////////////////////////////////////////
		  //////////////////////////////////////////////TODO (2) IF TESTING 3X6 LEDS//////////////////////////////////////////////////////
		  keyPressed = KeyPad_Scan();
 8000664:	f7ff fd72 	bl	800014c <KeyPad_Scan>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <main+0xc0>)
 800066e:	701a      	strb	r2, [r3, #0]
		  if(keyPressed<10){
 8000670:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <main+0xc0>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b09      	cmp	r3, #9
 8000676:	d815      	bhi.n	80006a4 <main+0x98>
//			  uint32_t temp=lcd_num*10+keyPressed; //  			TODO (1) UNCOMMENT IF USING LCD
			  uint32_t temp=SevenSegBuffer[0]*10+keyPressed; //	TODO (2) UNCOMMENT IF TESTING 3X6 LEDS
 8000678:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <main+0xc4>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4613      	mov	r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	461a      	mov	r2, r3
 8000686:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <main+0xc0>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4413      	add	r3, r2
 800068c:	607b      	str	r3, [r7, #4]
			  if(temp<=99999999){
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a10      	ldr	r2, [pc, #64]	@ (80006d4 <main+0xc8>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d811      	bhi.n	80006ba <main+0xae>
				  lcd_num=temp;
 8000696:	4a10      	ldr	r2, [pc, #64]	@ (80006d8 <main+0xcc>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6013      	str	r3, [r2, #0]
//				  Update_LCD(lcd_num); // 						TODO (1) UNCOMMENT IF USING LCD
				  SevenSegBuffer[0]=temp; //					TODO (2) UNCOMMENT IF TESTING 3X6 LEDS
 800069c:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <main+0xc4>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	e00a      	b.n	80006ba <main+0xae>
			  }
		  }
		  else if(keyPressed>=10 &&keyPressed<100){
 80006a4:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <main+0xc0>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b09      	cmp	r3, #9
 80006aa:	d906      	bls.n	80006ba <main+0xae>
 80006ac:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <main+0xc0>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b63      	cmp	r3, #99	@ 0x63
 80006b2:	d802      	bhi.n	80006ba <main+0xae>
//			  lcd_num=0; //										TODO (1) UNCOMMENT IF USING LCD
//			  Update_LCD(lcd_num); // 							TODO (1) UNCOMMENT IF USING LCD
			  SevenSegBuffer[0]=0; //							TODO (2) UNCOMMENT IF TESTING 3X6 LEDS
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <main+0xc4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]

		  }
		  setTimer(1,10);
 80006ba:	210a      	movs	r1, #10
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 fa81 	bl	8000bc4 <setTimer>
	  if(timer_flag[0]==1){
 80006c2:	e7c1      	b.n	8000648 <main+0x3c>
 80006c4:	200000e8 	.word	0x200000e8
 80006c8:	20000170 	.word	0x20000170
 80006cc:	2000000a 	.word	0x2000000a
 80006d0:	20000138 	.word	0x20000138
 80006d4:	05f5e0ff 	.word	0x05f5e0ff
 80006d8:	20000130 	.word	0x20000130

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b090      	sub	sp, #64	@ 0x40
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0318 	add.w	r3, r7, #24
 80006e6:	2228      	movs	r2, #40	@ 0x28
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 f846 	bl	800277c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fe:	2302      	movs	r3, #2
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000702:	2301      	movs	r3, #1
 8000704:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000706:	2310      	movs	r3, #16
 8000708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070a:	2300      	movs	r3, #0
 800070c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fde8 	bl	80012e8 <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800071e:	f000 f94b 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f001 f856 	bl	80017ec <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000746:	f000 f937 	bl	80009b8 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3740      	adds	r7, #64	@ 0x40
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000758:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <MX_SPI1_Init+0x64>)
 800075a:	4a18      	ldr	r2, [pc, #96]	@ (80007bc <MX_SPI1_Init+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075e:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000760:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000764:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000784:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000786:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800078c:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_SPI1_Init+0x64>)
 80007a0:	220a      	movs	r2, #10
 80007a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <MX_SPI1_Init+0x64>)
 80007a6:	f001 f97d 	bl	8001aa4 <HAL_SPI_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b0:	f000 f902 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000038 	.word	0x20000038
 80007bc:	40013000 	.word	0x40013000

080007c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007c6:	4a18      	ldr	r2, [pc, #96]	@ (8000828 <MX_SPI2_Init+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007ca:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007d2:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fe:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_SPI2_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000804:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <MX_SPI2_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_SPI2_Init+0x64>)
 800080c:	220a      	movs	r2, #10
 800080e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	@ (8000824 <MX_SPI2_Init+0x64>)
 8000812:	f001 f947 	bl	8001aa4 <HAL_SPI_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800081c:	f000 f8cc 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000090 	.word	0x20000090
 8000828:	40003800 	.word	0x40003800

0800082c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000848:	4b1d      	ldr	r3, [pc, #116]	@ (80008c0 <MX_TIM2_Init+0x94>)
 800084a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800084e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <MX_TIM2_Init+0x94>)
 8000852:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000856:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000858:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <MX_TIM2_Init+0x94>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800085e:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_TIM2_Init+0x94>)
 8000860:	2209      	movs	r2, #9
 8000862:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000864:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <MX_TIM2_Init+0x94>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086a:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_TIM2_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000870:	4813      	ldr	r0, [pc, #76]	@ (80008c0 <MX_TIM2_Init+0x94>)
 8000872:	f001 fb85 	bl	8001f80 <HAL_TIM_Base_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800087c:	f000 f89c 	bl	80009b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000880:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000884:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4619      	mov	r1, r3
 800088c:	480c      	ldr	r0, [pc, #48]	@ (80008c0 <MX_TIM2_Init+0x94>)
 800088e:	f001 fd21 	bl	80022d4 <HAL_TIM_ConfigClockSource>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000898:	f000 f88e 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089c:	2300      	movs	r3, #0
 800089e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a4:	463b      	mov	r3, r7
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_TIM2_Init+0x94>)
 80008aa:	f001 fef7 	bl	800269c <HAL_TIMEx_MasterConfigSynchronization>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008b4:	f000 f880 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000e8 	.word	0x200000e8

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000998 <MX_GPIO_Init+0xd4>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a2e      	ldr	r2, [pc, #184]	@ (8000998 <MX_GPIO_Init+0xd4>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000998 <MX_GPIO_Init+0xd4>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f0:	4b29      	ldr	r3, [pc, #164]	@ (8000998 <MX_GPIO_Init+0xd4>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a28      	ldr	r2, [pc, #160]	@ (8000998 <MX_GPIO_Init+0xd4>)
 80008f6:	f043 0308 	orr.w	r3, r3, #8
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <MX_GPIO_Init+0xd4>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0308 	and.w	r3, r3, #8
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2140      	movs	r1, #64	@ 0x40
 800090c:	4823      	ldr	r0, [pc, #140]	@ (800099c <MX_GPIO_Init+0xd8>)
 800090e:	f000 fcd2 	bl	80012b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8000912:	2200      	movs	r2, #0
 8000914:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8000918:	4821      	ldr	r0, [pc, #132]	@ (80009a0 <MX_GPIO_Init+0xdc>)
 800091a:	f000 fccc 	bl	80012b6 <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Latch_SPI1_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin;
 800091e:	2340      	movs	r3, #64	@ 0x40
 8000920:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2302      	movs	r3, #2
 800092c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI1_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	4619      	mov	r1, r3
 8000934:	4819      	ldr	r0, [pc, #100]	@ (800099c <MX_GPIO_Init+0xd8>)
 8000936:	f000 fb23 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800093a:	231f      	movs	r3, #31
 800093c:	60bb      	str	r3, [r7, #8]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000942:	2302      	movs	r3, #2
 8000944:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	4619      	mov	r1, r3
 800094c:	4814      	ldr	r0, [pc, #80]	@ (80009a0 <MX_GPIO_Init+0xdc>)
 800094e:	f000 fb17 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : Latch_SPI_Pin */
  GPIO_InitStruct.Pin = Latch_SPI_Pin;
 8000952:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000956:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	4619      	mov	r1, r3
 800096a:	480d      	ldr	r0, [pc, #52]	@ (80009a0 <MX_GPIO_Init+0xdc>)
 800096c:	f000 fb08 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin OUT2_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin;
 8000970:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000974:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2302      	movs	r3, #2
 8000980:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_GPIO_Init+0xdc>)
 800098a:	f000 faf9 	bl	8000f80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000
 800099c:	40010800 	.word	0x40010800
 80009a0:	40010c00 	.word	0x40010c00

080009a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	timerRun();
 80009ac:	f000 f922 	bl	8000bf4 <timerRun>

}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <Error_Handler+0x8>

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <HAL_MspInit+0x5c>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a14      	ldr	r2, [pc, #80]	@ (8000a20 <HAL_MspInit+0x5c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6193      	str	r3, [r2, #24]
 80009d6:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <HAL_MspInit+0x5c>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <HAL_MspInit+0x5c>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a20 <HAL_MspInit+0x5c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ec:	61d3      	str	r3, [r2, #28]
 80009ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <HAL_MspInit+0x5c>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <HAL_MspInit+0x60>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <HAL_MspInit+0x60>)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40010000 	.word	0x40010000

08000a28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0318 	add.w	r3, r7, #24
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a2b      	ldr	r2, [pc, #172]	@ (8000af0 <HAL_SPI_MspInit+0xc8>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d124      	bne.n	8000a92 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a48:	4b2a      	ldr	r3, [pc, #168]	@ (8000af4 <HAL_SPI_MspInit+0xcc>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a29      	ldr	r2, [pc, #164]	@ (8000af4 <HAL_SPI_MspInit+0xcc>)
 8000a4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b27      	ldr	r3, [pc, #156]	@ (8000af4 <HAL_SPI_MspInit+0xcc>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b24      	ldr	r3, [pc, #144]	@ (8000af4 <HAL_SPI_MspInit+0xcc>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a23      	ldr	r2, [pc, #140]	@ (8000af4 <HAL_SPI_MspInit+0xcc>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b21      	ldr	r3, [pc, #132]	@ (8000af4 <HAL_SPI_MspInit+0xcc>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a78:	23a0      	movs	r3, #160	@ 0xa0
 8000a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0318 	add.w	r3, r7, #24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	481b      	ldr	r0, [pc, #108]	@ (8000af8 <HAL_SPI_MspInit+0xd0>)
 8000a8c:	f000 fa78 	bl	8000f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a90:	e029      	b.n	8000ae6 <HAL_SPI_MspInit+0xbe>
  else if(hspi->Instance==SPI2)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a19      	ldr	r2, [pc, #100]	@ (8000afc <HAL_SPI_MspInit+0xd4>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d124      	bne.n	8000ae6 <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a9c:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <HAL_SPI_MspInit+0xcc>)
 8000a9e:	69db      	ldr	r3, [r3, #28]
 8000aa0:	4a14      	ldr	r2, [pc, #80]	@ (8000af4 <HAL_SPI_MspInit+0xcc>)
 8000aa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa6:	61d3      	str	r3, [r2, #28]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <HAL_SPI_MspInit+0xcc>)
 8000aaa:	69db      	ldr	r3, [r3, #28]
 8000aac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <HAL_SPI_MspInit+0xcc>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8000af4 <HAL_SPI_MspInit+0xcc>)
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <HAL_SPI_MspInit+0xcc>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000acc:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 0318 	add.w	r3, r7, #24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4807      	ldr	r0, [pc, #28]	@ (8000b00 <HAL_SPI_MspInit+0xd8>)
 8000ae2:	f000 fa4d 	bl	8000f80 <HAL_GPIO_Init>
}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	@ 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40013000 	.word	0x40013000
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010800 	.word	0x40010800
 8000afc:	40003800 	.word	0x40003800
 8000b00:	40010c00 	.word	0x40010c00

08000b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b14:	d113      	bne.n	8000b3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b16:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <HAL_TIM_Base_MspInit+0x44>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b48 <HAL_TIM_Base_MspInit+0x44>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <HAL_TIM_Base_MspInit+0x44>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2101      	movs	r1, #1
 8000b32:	201c      	movs	r0, #28
 8000b34:	f000 f9ed 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b38:	201c      	movs	r0, #28
 8000b3a:	f000 fa06 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <NMI_Handler+0x4>

08000b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <MemManage_Handler+0x4>

08000b64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 f8c6 	bl	8000d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ba8:	4802      	ldr	r0, [pc, #8]	@ (8000bb4 <TIM2_IRQHandler+0x10>)
 8000baa:	f001 fa8b 	bl	80020c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000e8 	.word	0x200000e8

08000bb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <setTimer>:

#define TIMERNUM 10
int timer_counter[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};
int timer_flag[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};

void setTimer(int INDEX,int duration){
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
	timer_counter[INDEX]=duration;
 8000bce:	4907      	ldr	r1, [pc, #28]	@ (8000bec <setTimer+0x28>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[INDEX]=0;
 8000bd8:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <setTimer+0x2c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	20000148 	.word	0x20000148
 8000bf0:	20000170 	.word	0x20000170

08000bf4 <timerRun>:

void timerRun(){
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
	for(int i=0;i<TIMERNUM;i++){
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	e01c      	b.n	8000c3a <timerRun+0x46>
		if(timer_counter[i] > 0){
 8000c00:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <timerRun+0x58>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	dd13      	ble.n	8000c34 <timerRun+0x40>
			timer_counter[i]--;
 8000c0c:	4a0f      	ldr	r2, [pc, #60]	@ (8000c4c <timerRun+0x58>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c14:	1e5a      	subs	r2, r3, #1
 8000c16:	490d      	ldr	r1, [pc, #52]	@ (8000c4c <timerRun+0x58>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <=0){
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c4c <timerRun+0x58>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	dc04      	bgt.n	8000c34 <timerRun+0x40>
				timer_flag[i]=1;
 8000c2a:	4a09      	ldr	r2, [pc, #36]	@ (8000c50 <timerRun+0x5c>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2101      	movs	r1, #1
 8000c30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<TIMERNUM;i++){
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3301      	adds	r3, #1
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b09      	cmp	r3, #9
 8000c3e:	dddf      	ble.n	8000c00 <timerRun+0xc>
			}
		}
	}
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	20000148 	.word	0x20000148
 8000c50:	20000170 	.word	0x20000170

08000c54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c54:	f7ff ffb0 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c58:	480b      	ldr	r0, [pc, #44]	@ (8000c88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c5a:	490c      	ldr	r1, [pc, #48]	@ (8000c8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a09      	ldr	r2, [pc, #36]	@ (8000c94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c70:	4c09      	ldr	r4, [pc, #36]	@ (8000c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f001 fd85 	bl	800278c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c82:	f7ff fcc3 	bl	800060c <main>
  bx lr
 8000c86:	4770      	bx	lr
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000c90:	0800282c 	.word	0x0800282c
  ldr r2, =_sbss
 8000c94:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000c98:	2000019c 	.word	0x2000019c

08000c9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC1_2_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <HAL_Init+0x28>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	@ (8000cc8 <HAL_Init+0x28>)
 8000caa:	f043 0310 	orr.w	r3, r3, #16
 8000cae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f923 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb6:	200f      	movs	r0, #15
 8000cb8:	f000 f808 	bl	8000ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbc:	f7ff fe82 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40022000 	.word	0x40022000

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <HAL_InitTick+0x54>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <HAL_InitTick+0x58>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f93b 	bl	8000f66 <HAL_SYSTICK_Config>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00e      	b.n	8000d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d80a      	bhi.n	8000d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d08:	f000 f903 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d0c:	4a06      	ldr	r2, [pc, #24]	@ (8000d28 <HAL_InitTick+0x5c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e000      	b.n	8000d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000000c 	.word	0x2000000c
 8000d24:	20000014 	.word	0x20000014
 8000d28:	20000010 	.word	0x20000010

08000d2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <HAL_IncTick+0x1c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <HAL_IncTick+0x20>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a03      	ldr	r2, [pc, #12]	@ (8000d4c <HAL_IncTick+0x20>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	20000014 	.word	0x20000014
 8000d4c:	20000198 	.word	0x20000198

08000d50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b02      	ldr	r3, [pc, #8]	@ (8000d60 <HAL_GetTick+0x10>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	20000198 	.word	0x20000198

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4906      	ldr	r1, [pc, #24]	@ (8000dfc <__NVIC_EnableIRQ+0x34>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	@ (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	@ (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	@ 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	@ 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000edc:	f7ff ff90 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff2d 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff42 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff90 	bl	8000e54 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5f 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff35 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffa2 	bl	8000eb8 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b08b      	sub	sp, #44	@ 0x2c
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f92:	e169      	b.n	8001268 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f94:	2201      	movs	r2, #1
 8000f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	f040 8158 	bne.w	8001262 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	4a9a      	ldr	r2, [pc, #616]	@ (8001220 <HAL_GPIO_Init+0x2a0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d05e      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fbc:	4a98      	ldr	r2, [pc, #608]	@ (8001220 <HAL_GPIO_Init+0x2a0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d875      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000fc2:	4a98      	ldr	r2, [pc, #608]	@ (8001224 <HAL_GPIO_Init+0x2a4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d058      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fc8:	4a96      	ldr	r2, [pc, #600]	@ (8001224 <HAL_GPIO_Init+0x2a4>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d86f      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000fce:	4a96      	ldr	r2, [pc, #600]	@ (8001228 <HAL_GPIO_Init+0x2a8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d052      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fd4:	4a94      	ldr	r2, [pc, #592]	@ (8001228 <HAL_GPIO_Init+0x2a8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d869      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000fda:	4a94      	ldr	r2, [pc, #592]	@ (800122c <HAL_GPIO_Init+0x2ac>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d04c      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fe0:	4a92      	ldr	r2, [pc, #584]	@ (800122c <HAL_GPIO_Init+0x2ac>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d863      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000fe6:	4a92      	ldr	r2, [pc, #584]	@ (8001230 <HAL_GPIO_Init+0x2b0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d046      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fec:	4a90      	ldr	r2, [pc, #576]	@ (8001230 <HAL_GPIO_Init+0x2b0>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d85d      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000ff2:	2b12      	cmp	r3, #18
 8000ff4:	d82a      	bhi.n	800104c <HAL_GPIO_Init+0xcc>
 8000ff6:	2b12      	cmp	r3, #18
 8000ff8:	d859      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8001000 <HAL_GPIO_Init+0x80>)
 8000ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001000:	0800107b 	.word	0x0800107b
 8001004:	08001055 	.word	0x08001055
 8001008:	08001067 	.word	0x08001067
 800100c:	080010a9 	.word	0x080010a9
 8001010:	080010af 	.word	0x080010af
 8001014:	080010af 	.word	0x080010af
 8001018:	080010af 	.word	0x080010af
 800101c:	080010af 	.word	0x080010af
 8001020:	080010af 	.word	0x080010af
 8001024:	080010af 	.word	0x080010af
 8001028:	080010af 	.word	0x080010af
 800102c:	080010af 	.word	0x080010af
 8001030:	080010af 	.word	0x080010af
 8001034:	080010af 	.word	0x080010af
 8001038:	080010af 	.word	0x080010af
 800103c:	080010af 	.word	0x080010af
 8001040:	080010af 	.word	0x080010af
 8001044:	0800105d 	.word	0x0800105d
 8001048:	08001071 	.word	0x08001071
 800104c:	4a79      	ldr	r2, [pc, #484]	@ (8001234 <HAL_GPIO_Init+0x2b4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001052:	e02c      	b.n	80010ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	623b      	str	r3, [r7, #32]
          break;
 800105a:	e029      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	3304      	adds	r3, #4
 8001062:	623b      	str	r3, [r7, #32]
          break;
 8001064:	e024      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	3308      	adds	r3, #8
 800106c:	623b      	str	r3, [r7, #32]
          break;
 800106e:	e01f      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	330c      	adds	r3, #12
 8001076:	623b      	str	r3, [r7, #32]
          break;
 8001078:	e01a      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d102      	bne.n	8001088 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001082:	2304      	movs	r3, #4
 8001084:	623b      	str	r3, [r7, #32]
          break;
 8001086:	e013      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d105      	bne.n	800109c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001090:	2308      	movs	r3, #8
 8001092:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69fa      	ldr	r2, [r7, #28]
 8001098:	611a      	str	r2, [r3, #16]
          break;
 800109a:	e009      	b.n	80010b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800109c:	2308      	movs	r3, #8
 800109e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	615a      	str	r2, [r3, #20]
          break;
 80010a6:	e003      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
          break;
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          break;
 80010ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	2bff      	cmp	r3, #255	@ 0xff
 80010b4:	d801      	bhi.n	80010ba <HAL_GPIO_Init+0x13a>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	e001      	b.n	80010be <HAL_GPIO_Init+0x13e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3304      	adds	r3, #4
 80010be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	2bff      	cmp	r3, #255	@ 0xff
 80010c4:	d802      	bhi.n	80010cc <HAL_GPIO_Init+0x14c>
 80010c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	e002      	b.n	80010d2 <HAL_GPIO_Init+0x152>
 80010cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ce:	3b08      	subs	r3, #8
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	210f      	movs	r1, #15
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	401a      	ands	r2, r3
 80010e4:	6a39      	ldr	r1, [r7, #32]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	431a      	orrs	r2, r3
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 80b1 	beq.w	8001262 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001100:	4b4d      	ldr	r3, [pc, #308]	@ (8001238 <HAL_GPIO_Init+0x2b8>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a4c      	ldr	r2, [pc, #304]	@ (8001238 <HAL_GPIO_Init+0x2b8>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b4a      	ldr	r3, [pc, #296]	@ (8001238 <HAL_GPIO_Init+0x2b8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001118:	4a48      	ldr	r2, [pc, #288]	@ (800123c <HAL_GPIO_Init+0x2bc>)
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001124:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	220f      	movs	r2, #15
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4013      	ands	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a40      	ldr	r2, [pc, #256]	@ (8001240 <HAL_GPIO_Init+0x2c0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d013      	beq.n	800116c <HAL_GPIO_Init+0x1ec>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a3f      	ldr	r2, [pc, #252]	@ (8001244 <HAL_GPIO_Init+0x2c4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d00d      	beq.n	8001168 <HAL_GPIO_Init+0x1e8>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a3e      	ldr	r2, [pc, #248]	@ (8001248 <HAL_GPIO_Init+0x2c8>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d007      	beq.n	8001164 <HAL_GPIO_Init+0x1e4>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a3d      	ldr	r2, [pc, #244]	@ (800124c <HAL_GPIO_Init+0x2cc>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d101      	bne.n	8001160 <HAL_GPIO_Init+0x1e0>
 800115c:	2303      	movs	r3, #3
 800115e:	e006      	b.n	800116e <HAL_GPIO_Init+0x1ee>
 8001160:	2304      	movs	r3, #4
 8001162:	e004      	b.n	800116e <HAL_GPIO_Init+0x1ee>
 8001164:	2302      	movs	r3, #2
 8001166:	e002      	b.n	800116e <HAL_GPIO_Init+0x1ee>
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <HAL_GPIO_Init+0x1ee>
 800116c:	2300      	movs	r3, #0
 800116e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001170:	f002 0203 	and.w	r2, r2, #3
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	4093      	lsls	r3, r2
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800117e:	492f      	ldr	r1, [pc, #188]	@ (800123c <HAL_GPIO_Init+0x2bc>)
 8001180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d006      	beq.n	80011a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001198:	4b2d      	ldr	r3, [pc, #180]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	492c      	ldr	r1, [pc, #176]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	608b      	str	r3, [r1, #8]
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	4928      	ldr	r1, [pc, #160]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d006      	beq.n	80011ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011c0:	4b23      	ldr	r3, [pc, #140]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	4922      	ldr	r1, [pc, #136]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	60cb      	str	r3, [r1, #12]
 80011cc:	e006      	b.n	80011dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ce:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	491e      	ldr	r1, [pc, #120]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011d8:	4013      	ands	r3, r2
 80011da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	4918      	ldr	r1, [pc, #96]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]
 80011f4:	e006      	b.n	8001204 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011f6:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	4914      	ldr	r1, [pc, #80]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 8001200:	4013      	ands	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d021      	beq.n	8001254 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	490e      	ldr	r1, [pc, #56]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	600b      	str	r3, [r1, #0]
 800121c:	e021      	b.n	8001262 <HAL_GPIO_Init+0x2e2>
 800121e:	bf00      	nop
 8001220:	10320000 	.word	0x10320000
 8001224:	10310000 	.word	0x10310000
 8001228:	10220000 	.word	0x10220000
 800122c:	10210000 	.word	0x10210000
 8001230:	10120000 	.word	0x10120000
 8001234:	10110000 	.word	0x10110000
 8001238:	40021000 	.word	0x40021000
 800123c:	40010000 	.word	0x40010000
 8001240:	40010800 	.word	0x40010800
 8001244:	40010c00 	.word	0x40010c00
 8001248:	40011000 	.word	0x40011000
 800124c:	40011400 	.word	0x40011400
 8001250:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <HAL_GPIO_Init+0x304>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	43db      	mvns	r3, r3
 800125c:	4909      	ldr	r1, [pc, #36]	@ (8001284 <HAL_GPIO_Init+0x304>)
 800125e:	4013      	ands	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001264:	3301      	adds	r3, #1
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126e:	fa22 f303 	lsr.w	r3, r2, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	f47f ae8e 	bne.w	8000f94 <HAL_GPIO_Init+0x14>
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	372c      	adds	r7, #44	@ 0x2c
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	40010400 	.word	0x40010400

08001288 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	887b      	ldrh	r3, [r7, #2]
 800129a:	4013      	ands	r3, r2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012a0:	2301      	movs	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	e001      	b.n	80012aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	460b      	mov	r3, r1
 80012c0:	807b      	strh	r3, [r7, #2]
 80012c2:	4613      	mov	r3, r2
 80012c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c6:	787b      	ldrb	r3, [r7, #1]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012cc:	887a      	ldrh	r2, [r7, #2]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012d2:	e003      	b.n	80012dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	041a      	lsls	r2, r3, #16
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	611a      	str	r2, [r3, #16]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e272      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 8087 	beq.w	8001416 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001308:	4b92      	ldr	r3, [pc, #584]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 030c 	and.w	r3, r3, #12
 8001310:	2b04      	cmp	r3, #4
 8001312:	d00c      	beq.n	800132e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001314:	4b8f      	ldr	r3, [pc, #572]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b08      	cmp	r3, #8
 800131e:	d112      	bne.n	8001346 <HAL_RCC_OscConfig+0x5e>
 8001320:	4b8c      	ldr	r3, [pc, #560]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800132c:	d10b      	bne.n	8001346 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132e:	4b89      	ldr	r3, [pc, #548]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d06c      	beq.n	8001414 <HAL_RCC_OscConfig+0x12c>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d168      	bne.n	8001414 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e24c      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800134e:	d106      	bne.n	800135e <HAL_RCC_OscConfig+0x76>
 8001350:	4b80      	ldr	r3, [pc, #512]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a7f      	ldr	r2, [pc, #508]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	e02e      	b.n	80013bc <HAL_RCC_OscConfig+0xd4>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x98>
 8001366:	4b7b      	ldr	r3, [pc, #492]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a7a      	ldr	r2, [pc, #488]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 800136c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b78      	ldr	r3, [pc, #480]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a77      	ldr	r2, [pc, #476]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001378:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e01d      	b.n	80013bc <HAL_RCC_OscConfig+0xd4>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0xbc>
 800138a:	4b72      	ldr	r3, [pc, #456]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a71      	ldr	r2, [pc, #452]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001390:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	4b6f      	ldr	r3, [pc, #444]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a6e      	ldr	r2, [pc, #440]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 800139c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e00b      	b.n	80013bc <HAL_RCC_OscConfig+0xd4>
 80013a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b68      	ldr	r3, [pc, #416]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a67      	ldr	r2, [pc, #412]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d013      	beq.n	80013ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fcc4 	bl	8000d50 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013cc:	f7ff fcc0 	bl	8000d50 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	@ 0x64
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e200      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	4b5d      	ldr	r3, [pc, #372]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0xe4>
 80013ea:	e014      	b.n	8001416 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fcb0 	bl	8000d50 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fcac 	bl	8000d50 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	@ 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e1ec      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001406:	4b53      	ldr	r3, [pc, #332]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x10c>
 8001412:	e000      	b.n	8001416 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d063      	beq.n	80014ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001422:	4b4c      	ldr	r3, [pc, #304]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00b      	beq.n	8001446 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800142e:	4b49      	ldr	r3, [pc, #292]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b08      	cmp	r3, #8
 8001438:	d11c      	bne.n	8001474 <HAL_RCC_OscConfig+0x18c>
 800143a:	4b46      	ldr	r3, [pc, #280]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d116      	bne.n	8001474 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001446:	4b43      	ldr	r3, [pc, #268]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d005      	beq.n	800145e <HAL_RCC_OscConfig+0x176>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d001      	beq.n	800145e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e1c0      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145e:	4b3d      	ldr	r3, [pc, #244]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4939      	ldr	r1, [pc, #228]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 800146e:	4313      	orrs	r3, r2
 8001470:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001472:	e03a      	b.n	80014ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d020      	beq.n	80014be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800147c:	4b36      	ldr	r3, [pc, #216]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001482:	f7ff fc65 	bl	8000d50 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148a:	f7ff fc61 	bl	8000d50 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e1a1      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149c:	4b2d      	ldr	r3, [pc, #180]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	4927      	ldr	r1, [pc, #156]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	600b      	str	r3, [r1, #0]
 80014bc:	e015      	b.n	80014ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014be:	4b26      	ldr	r3, [pc, #152]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fc44 	bl	8000d50 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014cc:	f7ff fc40 	bl	8000d50 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e180      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014de:	4b1d      	ldr	r3, [pc, #116]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d03a      	beq.n	800156c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d019      	beq.n	8001532 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fe:	4b17      	ldr	r3, [pc, #92]	@ (800155c <HAL_RCC_OscConfig+0x274>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001504:	f7ff fc24 	bl	8000d50 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800150c:	f7ff fc20 	bl	8000d50 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e160      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151e:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800152a:	2001      	movs	r0, #1
 800152c:	f000 fa9c 	bl	8001a68 <RCC_Delay>
 8001530:	e01c      	b.n	800156c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001532:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <HAL_RCC_OscConfig+0x274>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001538:	f7ff fc0a 	bl	8000d50 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153e:	e00f      	b.n	8001560 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001540:	f7ff fc06 	bl	8000d50 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d908      	bls.n	8001560 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e146      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	42420000 	.word	0x42420000
 800155c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001560:	4b92      	ldr	r3, [pc, #584]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1e9      	bne.n	8001540 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80a6 	beq.w	80016c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157e:	4b8b      	ldr	r3, [pc, #556]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10d      	bne.n	80015a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	4b88      	ldr	r3, [pc, #544]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a87      	ldr	r2, [pc, #540]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001594:	61d3      	str	r3, [r2, #28]
 8001596:	4b85      	ldr	r3, [pc, #532]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015a2:	2301      	movs	r3, #1
 80015a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a6:	4b82      	ldr	r3, [pc, #520]	@ (80017b0 <HAL_RCC_OscConfig+0x4c8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d118      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b2:	4b7f      	ldr	r3, [pc, #508]	@ (80017b0 <HAL_RCC_OscConfig+0x4c8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a7e      	ldr	r2, [pc, #504]	@ (80017b0 <HAL_RCC_OscConfig+0x4c8>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015be:	f7ff fbc7 	bl	8000d50 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c6:	f7ff fbc3 	bl	8000d50 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b64      	cmp	r3, #100	@ 0x64
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e103      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	4b75      	ldr	r3, [pc, #468]	@ (80017b0 <HAL_RCC_OscConfig+0x4c8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d106      	bne.n	80015fa <HAL_RCC_OscConfig+0x312>
 80015ec:	4b6f      	ldr	r3, [pc, #444]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4a6e      	ldr	r2, [pc, #440]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6213      	str	r3, [r2, #32]
 80015f8:	e02d      	b.n	8001656 <HAL_RCC_OscConfig+0x36e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x334>
 8001602:	4b6a      	ldr	r3, [pc, #424]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	4a69      	ldr	r2, [pc, #420]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	6213      	str	r3, [r2, #32]
 800160e:	4b67      	ldr	r3, [pc, #412]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4a66      	ldr	r2, [pc, #408]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001614:	f023 0304 	bic.w	r3, r3, #4
 8001618:	6213      	str	r3, [r2, #32]
 800161a:	e01c      	b.n	8001656 <HAL_RCC_OscConfig+0x36e>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b05      	cmp	r3, #5
 8001622:	d10c      	bne.n	800163e <HAL_RCC_OscConfig+0x356>
 8001624:	4b61      	ldr	r3, [pc, #388]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4a60      	ldr	r2, [pc, #384]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 800162a:	f043 0304 	orr.w	r3, r3, #4
 800162e:	6213      	str	r3, [r2, #32]
 8001630:	4b5e      	ldr	r3, [pc, #376]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4a5d      	ldr	r2, [pc, #372]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6213      	str	r3, [r2, #32]
 800163c:	e00b      	b.n	8001656 <HAL_RCC_OscConfig+0x36e>
 800163e:	4b5b      	ldr	r3, [pc, #364]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4a5a      	ldr	r2, [pc, #360]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6213      	str	r3, [r2, #32]
 800164a:	4b58      	ldr	r3, [pc, #352]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4a57      	ldr	r2, [pc, #348]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001650:	f023 0304 	bic.w	r3, r3, #4
 8001654:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d015      	beq.n	800168a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165e:	f7ff fb77 	bl	8000d50 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001664:	e00a      	b.n	800167c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7ff fb73 	bl	8000d50 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001674:	4293      	cmp	r3, r2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e0b1      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167c:	4b4b      	ldr	r3, [pc, #300]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0ee      	beq.n	8001666 <HAL_RCC_OscConfig+0x37e>
 8001688:	e014      	b.n	80016b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168a:	f7ff fb61 	bl	8000d50 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001690:	e00a      	b.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001692:	f7ff fb5d 	bl	8000d50 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e09b      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a8:	4b40      	ldr	r3, [pc, #256]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1ee      	bne.n	8001692 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d105      	bne.n	80016c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ba:	4b3c      	ldr	r3, [pc, #240]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a3b      	ldr	r2, [pc, #236]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 8087 	beq.w	80017de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d0:	4b36      	ldr	r3, [pc, #216]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d061      	beq.n	80017a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d146      	bne.n	8001772 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e4:	4b33      	ldr	r3, [pc, #204]	@ (80017b4 <HAL_RCC_OscConfig+0x4cc>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7ff fb31 	bl	8000d50 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f2:	f7ff fb2d 	bl	8000d50 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e06d      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001704:	4b29      	ldr	r3, [pc, #164]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f0      	bne.n	80016f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001718:	d108      	bne.n	800172c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800171a:	4b24      	ldr	r3, [pc, #144]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	4921      	ldr	r1, [pc, #132]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800172c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a19      	ldr	r1, [r3, #32]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173c:	430b      	orrs	r3, r1
 800173e:	491b      	ldr	r1, [pc, #108]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001744:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <HAL_RCC_OscConfig+0x4cc>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7ff fb01 	bl	8000d50 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001752:	f7ff fafd 	bl	8000d50 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e03d      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x46a>
 8001770:	e035      	b.n	80017de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001772:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <HAL_RCC_OscConfig+0x4cc>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff faea 	bl	8000d50 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff fae6 	bl	8000d50 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e026      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x498>
 800179e:	e01e      	b.n	80017de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d107      	bne.n	80017b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e019      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40007000 	.word	0x40007000
 80017b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017b8:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <HAL_RCC_OscConfig+0x500>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d001      	beq.n	80017de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000

080017ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0d0      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001800:	4b6a      	ldr	r3, [pc, #424]	@ (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d910      	bls.n	8001830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b67      	ldr	r3, [pc, #412]	@ (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 0207 	bic.w	r2, r3, #7
 8001816:	4965      	ldr	r1, [pc, #404]	@ (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b63      	ldr	r3, [pc, #396]	@ (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0b8      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d020      	beq.n	800187e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001848:	4b59      	ldr	r3, [pc, #356]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a58      	ldr	r2, [pc, #352]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001852:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001860:	4b53      	ldr	r3, [pc, #332]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4a52      	ldr	r2, [pc, #328]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800186a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800186c:	4b50      	ldr	r3, [pc, #320]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	494d      	ldr	r1, [pc, #308]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d040      	beq.n	800190c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	4b47      	ldr	r3, [pc, #284]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d115      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e07f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d107      	bne.n	80018ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018aa:	4b41      	ldr	r3, [pc, #260]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e073      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ba:	4b3d      	ldr	r3, [pc, #244]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e06b      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ca:	4b39      	ldr	r3, [pc, #228]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f023 0203 	bic.w	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4936      	ldr	r1, [pc, #216]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018dc:	f7ff fa38 	bl	8000d50 <HAL_GetTick>
 80018e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e4:	f7ff fa34 	bl	8000d50 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e053      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	4b2d      	ldr	r3, [pc, #180]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 020c 	and.w	r2, r3, #12
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	429a      	cmp	r2, r3
 800190a:	d1eb      	bne.n	80018e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800190c:	4b27      	ldr	r3, [pc, #156]	@ (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d210      	bcs.n	800193c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 0207 	bic.w	r2, r3, #7
 8001922:	4922      	ldr	r1, [pc, #136]	@ (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e032      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001948:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4916      	ldr	r1, [pc, #88]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	4313      	orrs	r3, r2
 8001958:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d009      	beq.n	800197a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001966:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	490e      	ldr	r1, [pc, #56]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800197a:	f000 f821 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 800197e:	4602      	mov	r2, r0
 8001980:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	490a      	ldr	r1, [pc, #40]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 800198c:	5ccb      	ldrb	r3, [r1, r3]
 800198e:	fa22 f303 	lsr.w	r3, r2, r3
 8001992:	4a09      	ldr	r2, [pc, #36]	@ (80019b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <HAL_RCC_ClockConfig+0x1d0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff f996 	bl	8000ccc <HAL_InitTick>

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40022000 	.word	0x40022000
 80019b0:	40021000 	.word	0x40021000
 80019b4:	08002800 	.word	0x08002800
 80019b8:	2000000c 	.word	0x2000000c
 80019bc:	20000010 	.word	0x20000010

080019c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019da:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x94>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d002      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0x30>
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d003      	beq.n	80019f6 <HAL_RCC_GetSysClockFreq+0x36>
 80019ee:	e027      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019f0:	4b19      	ldr	r3, [pc, #100]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x98>)
 80019f2:	613b      	str	r3, [r7, #16]
      break;
 80019f4:	e027      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	0c9b      	lsrs	r3, r3, #18
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	4a17      	ldr	r2, [pc, #92]	@ (8001a5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a00:	5cd3      	ldrb	r3, [r2, r3]
 8001a02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d010      	beq.n	8001a30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a0e:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	0c5b      	lsrs	r3, r3, #17
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	4a11      	ldr	r2, [pc, #68]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a1a:	5cd3      	ldrb	r3, [r2, r3]
 8001a1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a0d      	ldr	r2, [pc, #52]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a22:	fb03 f202 	mul.w	r2, r3, r2
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e004      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a0c      	ldr	r2, [pc, #48]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a34:	fb02 f303 	mul.w	r3, r2, r3
 8001a38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	613b      	str	r3, [r7, #16]
      break;
 8001a3e:	e002      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a42:	613b      	str	r3, [r7, #16]
      break;
 8001a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a46:	693b      	ldr	r3, [r7, #16]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	371c      	adds	r7, #28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	007a1200 	.word	0x007a1200
 8001a5c:	08002810 	.word	0x08002810
 8001a60:	08002820 	.word	0x08002820
 8001a64:	003d0900 	.word	0x003d0900

08001a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a70:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <RCC_Delay+0x34>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <RCC_Delay+0x38>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0a5b      	lsrs	r3, r3, #9
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a84:	bf00      	nop
  }
  while (Delay --);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1e5a      	subs	r2, r3, #1
 8001a8a:	60fa      	str	r2, [r7, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f9      	bne.n	8001a84 <RCC_Delay+0x1c>
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	2000000c 	.word	0x2000000c
 8001aa0:	10624dd3 	.word	0x10624dd3

08001aa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e076      	b.n	8001ba4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d108      	bne.n	8001ad0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ac6:	d009      	beq.n	8001adc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
 8001ace:	e005      	b.n	8001adc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7fe ff96 	bl	8000a28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b60:	ea42 0103 	orr.w	r1, r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	0c1a      	lsrs	r2, r3, #16
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f002 0204 	and.w	r2, r2, #4
 8001b82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	69da      	ldr	r2, [r3, #28]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_SPI_Transmit+0x22>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e12d      	b.n	8001e2a <HAL_SPI_Transmit+0x27e>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bd6:	f7ff f8bb 	bl	8000d50 <HAL_GetTick>
 8001bda:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d002      	beq.n	8001bf2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001bec:	2302      	movs	r3, #2
 8001bee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001bf0:	e116      	b.n	8001e20 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <HAL_SPI_Transmit+0x52>
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c02:	e10d      	b.n	8001e20 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2203      	movs	r2, #3
 8001c08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	88fa      	ldrh	r2, [r7, #6]
 8001c1c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	88fa      	ldrh	r2, [r7, #6]
 8001c22:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c4a:	d10f      	bne.n	8001c6c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c76:	2b40      	cmp	r3, #64	@ 0x40
 8001c78:	d007      	beq.n	8001c8a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c92:	d14f      	bne.n	8001d34 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <HAL_SPI_Transmit+0xf6>
 8001c9c:	8afb      	ldrh	r3, [r7, #22]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d142      	bne.n	8001d28 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	881a      	ldrh	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	1c9a      	adds	r2, r3, #2
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001cc6:	e02f      	b.n	8001d28 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d112      	bne.n	8001cfc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	881a      	ldrh	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	1c9a      	adds	r2, r3, #2
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001cfa:	e015      	b.n	8001d28 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cfc:	f7ff f828 	bl	8000d50 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d803      	bhi.n	8001d14 <HAL_SPI_Transmit+0x168>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d12:	d102      	bne.n	8001d1a <HAL_SPI_Transmit+0x16e>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001d26:	e07b      	b.n	8001e20 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1ca      	bne.n	8001cc8 <HAL_SPI_Transmit+0x11c>
 8001d32:	e050      	b.n	8001dd6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <HAL_SPI_Transmit+0x196>
 8001d3c:	8afb      	ldrh	r3, [r7, #22]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d144      	bne.n	8001dcc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	330c      	adds	r3, #12
 8001d4c:	7812      	ldrb	r2, [r2, #0]
 8001d4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001d68:	e030      	b.n	8001dcc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d113      	bne.n	8001da0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	330c      	adds	r3, #12
 8001d82:	7812      	ldrb	r2, [r2, #0]
 8001d84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001d9e:	e015      	b.n	8001dcc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001da0:	f7fe ffd6 	bl	8000d50 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d803      	bhi.n	8001db8 <HAL_SPI_Transmit+0x20c>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001db6:	d102      	bne.n	8001dbe <HAL_SPI_Transmit+0x212>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001dca:	e029      	b.n	8001e20 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1c9      	bne.n	8001d6a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	6839      	ldr	r1, [r7, #0]
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f8b2 	bl	8001f44 <SPI_EndRxTxTransaction>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2220      	movs	r2, #32
 8001dea:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10a      	bne.n	8001e0a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	77fb      	strb	r3, [r7, #31]
 8001e16:	e003      	b.n	8001e20 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001e28:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	4613      	mov	r3, r2
 8001e42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e44:	f7fe ff84 	bl	8000d50 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	4413      	add	r3, r2
 8001e52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e54:	f7fe ff7c 	bl	8000d50 <HAL_GetTick>
 8001e58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e5a:	4b39      	ldr	r3, [pc, #228]	@ (8001f40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	015b      	lsls	r3, r3, #5
 8001e60:	0d1b      	lsrs	r3, r3, #20
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	fb02 f303 	mul.w	r3, r2, r3
 8001e68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e6a:	e054      	b.n	8001f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e72:	d050      	beq.n	8001f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e74:	f7fe ff6c 	bl	8000d50 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d902      	bls.n	8001e8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d13d      	bne.n	8001f06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001e98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ea2:	d111      	bne.n	8001ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001eac:	d004      	beq.n	8001eb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eb6:	d107      	bne.n	8001ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ec6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ed0:	d10f      	bne.n	8001ef2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ef0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e017      	b.n	8001f36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	bf0c      	ite	eq
 8001f26:	2301      	moveq	r3, #1
 8001f28:	2300      	movne	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d19b      	bne.n	8001e6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3720      	adds	r7, #32
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	2000000c 	.word	0x2000000c

08001f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2200      	movs	r2, #0
 8001f58:	2180      	movs	r1, #128	@ 0x80
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f7ff ff6a 	bl	8001e34 <SPI_WaitFlagStateUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f6a:	f043 0220 	orr.w	r2, r3, #32
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e000      	b.n	8001f78 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e041      	b.n	8002016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe fdac 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f000 fa74 	bl	80024ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b01      	cmp	r3, #1
 8002032:	d001      	beq.n	8002038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e03a      	b.n	80020ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a18      	ldr	r2, [pc, #96]	@ (80020b8 <HAL_TIM_Base_Start_IT+0x98>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00e      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x58>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002062:	d009      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x58>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a14      	ldr	r2, [pc, #80]	@ (80020bc <HAL_TIM_Base_Start_IT+0x9c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d004      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x58>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a13      	ldr	r2, [pc, #76]	@ (80020c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d111      	bne.n	800209c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b06      	cmp	r3, #6
 8002088:	d010      	beq.n	80020ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209a:	e007      	b.n	80020ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	40012c00 	.word	0x40012c00
 80020bc:	40000400 	.word	0x40000400
 80020c0:	40000800 	.word	0x40000800

080020c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d122      	bne.n	8002120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d11b      	bne.n	8002120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0202 	mvn.w	r2, #2
 80020f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f9b4 	bl	8002474 <HAL_TIM_IC_CaptureCallback>
 800210c:	e005      	b.n	800211a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f9a7 	bl	8002462 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f9b6 	bl	8002486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b04      	cmp	r3, #4
 800212c:	d122      	bne.n	8002174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b04      	cmp	r3, #4
 800213a:	d11b      	bne.n	8002174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0204 	mvn.w	r2, #4
 8002144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2202      	movs	r2, #2
 800214a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f98a 	bl	8002474 <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f97d 	bl	8002462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f98c 	bl	8002486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b08      	cmp	r3, #8
 8002180:	d122      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b08      	cmp	r3, #8
 800218e:	d11b      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0208 	mvn.w	r2, #8
 8002198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2204      	movs	r2, #4
 800219e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f960 	bl	8002474 <HAL_TIM_IC_CaptureCallback>
 80021b4:	e005      	b.n	80021c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f953 	bl	8002462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f962 	bl	8002486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d122      	bne.n	800221c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d11b      	bne.n	800221c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0210 	mvn.w	r2, #16
 80021ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2208      	movs	r2, #8
 80021f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f936 	bl	8002474 <HAL_TIM_IC_CaptureCallback>
 8002208:	e005      	b.n	8002216 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f929 	bl	8002462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f938 	bl	8002486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b01      	cmp	r3, #1
 8002228:	d10e      	bne.n	8002248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	d107      	bne.n	8002248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0201 	mvn.w	r2, #1
 8002240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe fbae 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002252:	2b80      	cmp	r3, #128	@ 0x80
 8002254:	d10e      	bne.n	8002274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002260:	2b80      	cmp	r3, #128	@ 0x80
 8002262:	d107      	bne.n	8002274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800226c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fa7b 	bl	800276a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800227e:	2b40      	cmp	r3, #64	@ 0x40
 8002280:	d10e      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800228c:	2b40      	cmp	r3, #64	@ 0x40
 800228e:	d107      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f8fc 	bl	8002498 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	d10e      	bne.n	80022cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d107      	bne.n	80022cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0220 	mvn.w	r2, #32
 80022c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fa46 	bl	8002758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_TIM_ConfigClockSource+0x1c>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e0b4      	b.n	800245a <HAL_TIM_ConfigClockSource+0x186>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800230e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002328:	d03e      	beq.n	80023a8 <HAL_TIM_ConfigClockSource+0xd4>
 800232a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800232e:	f200 8087 	bhi.w	8002440 <HAL_TIM_ConfigClockSource+0x16c>
 8002332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002336:	f000 8086 	beq.w	8002446 <HAL_TIM_ConfigClockSource+0x172>
 800233a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800233e:	d87f      	bhi.n	8002440 <HAL_TIM_ConfigClockSource+0x16c>
 8002340:	2b70      	cmp	r3, #112	@ 0x70
 8002342:	d01a      	beq.n	800237a <HAL_TIM_ConfigClockSource+0xa6>
 8002344:	2b70      	cmp	r3, #112	@ 0x70
 8002346:	d87b      	bhi.n	8002440 <HAL_TIM_ConfigClockSource+0x16c>
 8002348:	2b60      	cmp	r3, #96	@ 0x60
 800234a:	d050      	beq.n	80023ee <HAL_TIM_ConfigClockSource+0x11a>
 800234c:	2b60      	cmp	r3, #96	@ 0x60
 800234e:	d877      	bhi.n	8002440 <HAL_TIM_ConfigClockSource+0x16c>
 8002350:	2b50      	cmp	r3, #80	@ 0x50
 8002352:	d03c      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0xfa>
 8002354:	2b50      	cmp	r3, #80	@ 0x50
 8002356:	d873      	bhi.n	8002440 <HAL_TIM_ConfigClockSource+0x16c>
 8002358:	2b40      	cmp	r3, #64	@ 0x40
 800235a:	d058      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x13a>
 800235c:	2b40      	cmp	r3, #64	@ 0x40
 800235e:	d86f      	bhi.n	8002440 <HAL_TIM_ConfigClockSource+0x16c>
 8002360:	2b30      	cmp	r3, #48	@ 0x30
 8002362:	d064      	beq.n	800242e <HAL_TIM_ConfigClockSource+0x15a>
 8002364:	2b30      	cmp	r3, #48	@ 0x30
 8002366:	d86b      	bhi.n	8002440 <HAL_TIM_ConfigClockSource+0x16c>
 8002368:	2b20      	cmp	r3, #32
 800236a:	d060      	beq.n	800242e <HAL_TIM_ConfigClockSource+0x15a>
 800236c:	2b20      	cmp	r3, #32
 800236e:	d867      	bhi.n	8002440 <HAL_TIM_ConfigClockSource+0x16c>
 8002370:	2b00      	cmp	r3, #0
 8002372:	d05c      	beq.n	800242e <HAL_TIM_ConfigClockSource+0x15a>
 8002374:	2b10      	cmp	r3, #16
 8002376:	d05a      	beq.n	800242e <HAL_TIM_ConfigClockSource+0x15a>
 8002378:	e062      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800238a:	f000 f968 	bl	800265e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800239c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	609a      	str	r2, [r3, #8]
      break;
 80023a6:	e04f      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023b8:	f000 f951 	bl	800265e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023ca:	609a      	str	r2, [r3, #8]
      break;
 80023cc:	e03c      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023da:	461a      	mov	r2, r3
 80023dc:	f000 f8c8 	bl	8002570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2150      	movs	r1, #80	@ 0x50
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f91f 	bl	800262a <TIM_ITRx_SetConfig>
      break;
 80023ec:	e02c      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023fa:	461a      	mov	r2, r3
 80023fc:	f000 f8e6 	bl	80025cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2160      	movs	r1, #96	@ 0x60
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f90f 	bl	800262a <TIM_ITRx_SetConfig>
      break;
 800240c:	e01c      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800241a:	461a      	mov	r2, r3
 800241c:	f000 f8a8 	bl	8002570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2140      	movs	r1, #64	@ 0x40
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f8ff 	bl	800262a <TIM_ITRx_SetConfig>
      break;
 800242c:	e00c      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4619      	mov	r1, r3
 8002438:	4610      	mov	r0, r2
 800243a:	f000 f8f6 	bl	800262a <TIM_ITRx_SetConfig>
      break;
 800243e:	e003      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
      break;
 8002444:	e000      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002458:	7bfb      	ldrb	r3, [r7, #15]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
	...

080024ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a29      	ldr	r2, [pc, #164]	@ (8002564 <TIM_Base_SetConfig+0xb8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00b      	beq.n	80024dc <TIM_Base_SetConfig+0x30>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ca:	d007      	beq.n	80024dc <TIM_Base_SetConfig+0x30>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a26      	ldr	r2, [pc, #152]	@ (8002568 <TIM_Base_SetConfig+0xbc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d003      	beq.n	80024dc <TIM_Base_SetConfig+0x30>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a25      	ldr	r2, [pc, #148]	@ (800256c <TIM_Base_SetConfig+0xc0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d108      	bne.n	80024ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002564 <TIM_Base_SetConfig+0xb8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d00b      	beq.n	800250e <TIM_Base_SetConfig+0x62>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024fc:	d007      	beq.n	800250e <TIM_Base_SetConfig+0x62>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a19      	ldr	r2, [pc, #100]	@ (8002568 <TIM_Base_SetConfig+0xbc>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d003      	beq.n	800250e <TIM_Base_SetConfig+0x62>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a18      	ldr	r2, [pc, #96]	@ (800256c <TIM_Base_SetConfig+0xc0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d108      	bne.n	8002520 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	4313      	orrs	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a07      	ldr	r2, [pc, #28]	@ (8002564 <TIM_Base_SetConfig+0xb8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d103      	bne.n	8002554 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	615a      	str	r2, [r3, #20]
}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	40012c00 	.word	0x40012c00
 8002568:	40000400 	.word	0x40000400
 800256c:	40000800 	.word	0x40000800

08002570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	f023 0201 	bic.w	r2, r3, #1
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800259a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f023 030a 	bic.w	r3, r3, #10
 80025ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	621a      	str	r2, [r3, #32]
}
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	f023 0210 	bic.w	r2, r3, #16
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80025f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	031b      	lsls	r3, r3, #12
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002608:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	621a      	str	r2, [r3, #32]
}
 8002620:	bf00      	nop
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	f043 0307 	orr.w	r3, r3, #7
 800264c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	609a      	str	r2, [r3, #8]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800265e:	b480      	push	{r7}
 8002660:	b087      	sub	sp, #28
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002678:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	021a      	lsls	r2, r3, #8
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	431a      	orrs	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	4313      	orrs	r3, r2
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	609a      	str	r2, [r3, #8]
}
 8002692:	bf00      	nop
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e046      	b.n	8002742 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a16      	ldr	r2, [pc, #88]	@ (800274c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00e      	beq.n	8002716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002700:	d009      	beq.n	8002716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d004      	beq.n	8002716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a10      	ldr	r2, [pc, #64]	@ (8002754 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d10c      	bne.n	8002730 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800271c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	4313      	orrs	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40000400 	.word	0x40000400
 8002754:	40000800 	.word	0x40000800

08002758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <memset>:
 800277c:	4603      	mov	r3, r0
 800277e:	4402      	add	r2, r0
 8002780:	4293      	cmp	r3, r2
 8002782:	d100      	bne.n	8002786 <memset+0xa>
 8002784:	4770      	bx	lr
 8002786:	f803 1b01 	strb.w	r1, [r3], #1
 800278a:	e7f9      	b.n	8002780 <memset+0x4>

0800278c <__libc_init_array>:
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	2600      	movs	r6, #0
 8002790:	4d0c      	ldr	r5, [pc, #48]	@ (80027c4 <__libc_init_array+0x38>)
 8002792:	4c0d      	ldr	r4, [pc, #52]	@ (80027c8 <__libc_init_array+0x3c>)
 8002794:	1b64      	subs	r4, r4, r5
 8002796:	10a4      	asrs	r4, r4, #2
 8002798:	42a6      	cmp	r6, r4
 800279a:	d109      	bne.n	80027b0 <__libc_init_array+0x24>
 800279c:	f000 f81a 	bl	80027d4 <_init>
 80027a0:	2600      	movs	r6, #0
 80027a2:	4d0a      	ldr	r5, [pc, #40]	@ (80027cc <__libc_init_array+0x40>)
 80027a4:	4c0a      	ldr	r4, [pc, #40]	@ (80027d0 <__libc_init_array+0x44>)
 80027a6:	1b64      	subs	r4, r4, r5
 80027a8:	10a4      	asrs	r4, r4, #2
 80027aa:	42a6      	cmp	r6, r4
 80027ac:	d105      	bne.n	80027ba <__libc_init_array+0x2e>
 80027ae:	bd70      	pop	{r4, r5, r6, pc}
 80027b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b4:	4798      	blx	r3
 80027b6:	3601      	adds	r6, #1
 80027b8:	e7ee      	b.n	8002798 <__libc_init_array+0xc>
 80027ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80027be:	4798      	blx	r3
 80027c0:	3601      	adds	r6, #1
 80027c2:	e7f2      	b.n	80027aa <__libc_init_array+0x1e>
 80027c4:	08002824 	.word	0x08002824
 80027c8:	08002824 	.word	0x08002824
 80027cc:	08002824 	.word	0x08002824
 80027d0:	08002828 	.word	0x08002828

080027d4 <_init>:
 80027d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d6:	bf00      	nop
 80027d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027da:	bc08      	pop	{r3}
 80027dc:	469e      	mov	lr, r3
 80027de:	4770      	bx	lr

080027e0 <_fini>:
 80027e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e2:	bf00      	nop
 80027e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e6:	bc08      	pop	{r3}
 80027e8:	469e      	mov	lr, r3
 80027ea:	4770      	bx	lr
