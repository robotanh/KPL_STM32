
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001750  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800185c  0800185c  0000285c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001880  08001880  00003018  2**0
                  CONTENTS
  4 .ARM          00000000  08001880  08001880  00003018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001880  08001880  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001880  08001880  00002880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001884  08001884  00002884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08001888  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000018  080018a0  00003018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080018a0  00003090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049fc  00000000  00000000  00003041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011db  00000000  00000000  00007a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c8  00000000  00000000  00008c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000446  00000000  00000000  000091e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001677e  00000000  00000000  00009626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006861  00000000  00000000  0001fda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081086  00000000  00000000  00026605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a768b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001600  00000000  00000000  000a76d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000a8cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08001844 	.word	0x08001844

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08001844 	.word	0x08001844

0800014c <ShiftOut>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ShiftOut(uint8_t data)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000156:	2200      	movs	r2, #0
 8000158:	2140      	movs	r1, #64	@ 0x40
 800015a:	481b      	ldr	r0, [pc, #108]	@ (80001c8 <ShiftOut+0x7c>)
 800015c:	f000 fce2 	bl	8000b24 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++){
 8000160:	2300      	movs	r3, #0
 8000162:	60fb      	str	r3, [r7, #12]
 8000164:	e024      	b.n	80001b0 <ShiftOut+0x64>
		temp = data & (0x80 >> i);
 8000166:	2280      	movs	r2, #128	@ 0x80
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	fa42 f303 	asr.w	r3, r2, r3
 800016e:	b25a      	sxtb	r2, r3
 8000170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000174:	4013      	ands	r3, r2
 8000176:	b25b      	sxtb	r3, r3
 8000178:	72fb      	strb	r3, [r7, #11]
		if(temp == 0) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800017a:	7afb      	ldrb	r3, [r7, #11]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d105      	bne.n	800018c <ShiftOut+0x40>
 8000180:	2200      	movs	r2, #0
 8000182:	2180      	movs	r1, #128	@ 0x80
 8000184:	4810      	ldr	r0, [pc, #64]	@ (80001c8 <ShiftOut+0x7c>)
 8000186:	f000 fccd 	bl	8000b24 <HAL_GPIO_WritePin>
 800018a:	e004      	b.n	8000196 <ShiftOut+0x4a>
		else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 800018c:	2201      	movs	r2, #1
 800018e:	2180      	movs	r1, #128	@ 0x80
 8000190:	480d      	ldr	r0, [pc, #52]	@ (80001c8 <ShiftOut+0x7c>)
 8000192:	f000 fcc7 	bl	8000b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000196:	2201      	movs	r2, #1
 8000198:	2120      	movs	r1, #32
 800019a:	480b      	ldr	r0, [pc, #44]	@ (80001c8 <ShiftOut+0x7c>)
 800019c:	f000 fcc2 	bl	8000b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2120      	movs	r1, #32
 80001a4:	4808      	ldr	r0, [pc, #32]	@ (80001c8 <ShiftOut+0x7c>)
 80001a6:	f000 fcbd 	bl	8000b24 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++){
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	3301      	adds	r3, #1
 80001ae:	60fb      	str	r3, [r7, #12]
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	2b07      	cmp	r3, #7
 80001b4:	ddd7      	ble.n	8000166 <ShiftOut+0x1a>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80001b6:	2201      	movs	r2, #1
 80001b8:	2140      	movs	r1, #64	@ 0x40
 80001ba:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <ShiftOut+0x7c>)
 80001bc:	f000 fcb2 	bl	8000b24 <HAL_GPIO_WritePin>
}
 80001c0:	bf00      	nop
 80001c2:	3710      	adds	r7, #16
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	40010800 	.word	0x40010800

080001cc <ShiftOut_SPI>:
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Pull STCP (Latch) low
 80001d6:	2200      	movs	r2, #0
 80001d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001dc:	480a      	ldr	r0, [pc, #40]	@ (8000208 <ShiftOut_SPI+0x3c>)
 80001de:	f000 fca1 	bl	8000b24 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, 300); // Transmit data
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	b29a      	uxth	r2, r3
 80001e6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80001ea:	6879      	ldr	r1, [r7, #4]
 80001ec:	4807      	ldr	r0, [pc, #28]	@ (800020c <ShiftOut_SPI+0x40>)
 80001ee:	f001 f913 	bl	8001418 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Pull STCP (Latch) high
 80001f2:	2201      	movs	r2, #1
 80001f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001f8:	4803      	ldr	r0, [pc, #12]	@ (8000208 <ShiftOut_SPI+0x3c>)
 80001fa:	f000 fc93 	bl	8000b24 <HAL_GPIO_WritePin>
}
 80001fe:	bf00      	nop
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40010c00 	.word	0x40010c00
 800020c:	20000034 	.word	0x20000034

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000216:	f000 f9bb 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021a:	f000 f815 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021e:	f000 f885 	bl	800032c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000222:	f000 f84d 	bl	80002c0 <MX_SPI2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */
	  uint8_t data = digitMapWithDP[2]; // Data to display '1' with DP
 8000226:	4b07      	ldr	r3, [pc, #28]	@ (8000244 <main+0x34>)
 8000228:	789b      	ldrb	r3, [r3, #2]
 800022a:	71fb      	strb	r3, [r7, #7]
	 	      ShiftOut_SPI(&data, 1);
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	2101      	movs	r1, #1
 8000230:	4618      	mov	r0, r3
 8000232:	f7ff ffcb 	bl	80001cc <ShiftOut_SPI>
	 	  	  ShiftOut(digitMapWithDP[1]);
 8000236:	4b03      	ldr	r3, [pc, #12]	@ (8000244 <main+0x34>)
 8000238:	785b      	ldrb	r3, [r3, #1]
 800023a:	4618      	mov	r0, r3
 800023c:	f7ff ff86 	bl	800014c <ShiftOut>
  while (1) {
 8000240:	bf00      	nop
 8000242:	e7f0      	b.n	8000226 <main+0x16>
 8000244:	20000000 	.word	0x20000000

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b090      	sub	sp, #64	@ 0x40
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2228      	movs	r2, #40	@ 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fac8 	bl	80017ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026a:	2302      	movs	r3, #2
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	2310      	movs	r3, #16
 8000274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000276:	2300      	movs	r3, #0
 8000278:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	4618      	mov	r0, r3
 8000280:	f000 fc68 	bl	8000b54 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800028a:	f000 f8b1 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000292:	2300      	movs	r3, #0
 8000294:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 fed6 	bl	8001058 <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002b2:	f000 f89d 	bl	80003f0 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3740      	adds	r7, #64	@ 0x40
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80002c4:	4b17      	ldr	r3, [pc, #92]	@ (8000324 <MX_SPI2_Init+0x64>)
 80002c6:	4a18      	ldr	r2, [pc, #96]	@ (8000328 <MX_SPI2_Init+0x68>)
 80002c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80002ca:	4b16      	ldr	r3, [pc, #88]	@ (8000324 <MX_SPI2_Init+0x64>)
 80002cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80002d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80002d2:	4b14      	ldr	r3, [pc, #80]	@ (8000324 <MX_SPI2_Init+0x64>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80002d8:	4b12      	ldr	r3, [pc, #72]	@ (8000324 <MX_SPI2_Init+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002de:	4b11      	ldr	r3, [pc, #68]	@ (8000324 <MX_SPI2_Init+0x64>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000324 <MX_SPI2_Init+0x64>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <MX_SPI2_Init+0x64>)
 80002ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <MX_SPI2_Init+0x64>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000324 <MX_SPI2_Init+0x64>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002fe:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <MX_SPI2_Init+0x64>)
 8000300:	2200      	movs	r2, #0
 8000302:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000304:	4b07      	ldr	r3, [pc, #28]	@ (8000324 <MX_SPI2_Init+0x64>)
 8000306:	2200      	movs	r2, #0
 8000308:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800030a:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <MX_SPI2_Init+0x64>)
 800030c:	220a      	movs	r2, #10
 800030e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000310:	4804      	ldr	r0, [pc, #16]	@ (8000324 <MX_SPI2_Init+0x64>)
 8000312:	f000 fffd 	bl	8001310 <HAL_SPI_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800031c:	f000 f868 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000034 	.word	0x20000034
 8000328:	40003800 	.word	0x40003800

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	f107 0308 	add.w	r3, r7, #8
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000340:	4b28      	ldr	r3, [pc, #160]	@ (80003e4 <MX_GPIO_Init+0xb8>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a27      	ldr	r2, [pc, #156]	@ (80003e4 <MX_GPIO_Init+0xb8>)
 8000346:	f043 0304 	orr.w	r3, r3, #4
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b25      	ldr	r3, [pc, #148]	@ (80003e4 <MX_GPIO_Init+0xb8>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0304 	and.w	r3, r3, #4
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000358:	4b22      	ldr	r3, [pc, #136]	@ (80003e4 <MX_GPIO_Init+0xb8>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a21      	ldr	r2, [pc, #132]	@ (80003e4 <MX_GPIO_Init+0xb8>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b1f      	ldr	r3, [pc, #124]	@ (80003e4 <MX_GPIO_Init+0xb8>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0308 	and.w	r3, r3, #8
 800036c:	603b      	str	r3, [r7, #0]
 800036e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|Latch_Pin|DATA_Pin, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	21e0      	movs	r1, #224	@ 0xe0
 8000374:	481c      	ldr	r0, [pc, #112]	@ (80003e8 <MX_GPIO_Init+0xbc>)
 8000376:	f000 fbd5 	bl	8000b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Latch_SPI_GPIO_Port, Latch_SPI_Pin, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000380:	481a      	ldr	r0, [pc, #104]	@ (80003ec <MX_GPIO_Init+0xc0>)
 8000382:	f000 fbcf 	bl	8000b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CLK_Pin */
  GPIO_InitStruct.Pin = CLK_Pin;
 8000386:	2320      	movs	r3, #32
 8000388:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038a:	2301      	movs	r3, #1
 800038c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000392:	2303      	movs	r3, #3
 8000394:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8000396:	f107 0308 	add.w	r3, r7, #8
 800039a:	4619      	mov	r1, r3
 800039c:	4812      	ldr	r0, [pc, #72]	@ (80003e8 <MX_GPIO_Init+0xbc>)
 800039e:	f000 fa3d 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_Pin DATA_Pin */
  GPIO_InitStruct.Pin = Latch_Pin|DATA_Pin;
 80003a2:	23c0      	movs	r3, #192	@ 0xc0
 80003a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2302      	movs	r3, #2
 80003b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	f107 0308 	add.w	r3, r7, #8
 80003b6:	4619      	mov	r1, r3
 80003b8:	480b      	ldr	r0, [pc, #44]	@ (80003e8 <MX_GPIO_Init+0xbc>)
 80003ba:	f000 fa2f 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : Latch_SPI_Pin */
  GPIO_InitStruct.Pin = Latch_SPI_Pin;
 80003be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80003c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c4:	2301      	movs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003cc:	2303      	movs	r3, #3
 80003ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI_GPIO_Port, &GPIO_InitStruct);
 80003d0:	f107 0308 	add.w	r3, r7, #8
 80003d4:	4619      	mov	r1, r3
 80003d6:	4805      	ldr	r0, [pc, #20]	@ (80003ec <MX_GPIO_Init+0xc0>)
 80003d8:	f000 fa20 	bl	800081c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003dc:	bf00      	nop
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40010800 	.word	0x40010800
 80003ec:	40010c00 	.word	0x40010c00

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <Error_Handler+0x8>

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000402:	4b15      	ldr	r3, [pc, #84]	@ (8000458 <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a14      	ldr	r2, [pc, #80]	@ (8000458 <HAL_MspInit+0x5c>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b12      	ldr	r3, [pc, #72]	@ (8000458 <HAL_MspInit+0x5c>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	@ (8000458 <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a0e      	ldr	r2, [pc, #56]	@ (8000458 <HAL_MspInit+0x5c>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <HAL_MspInit+0x5c>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000432:	4b0a      	ldr	r3, [pc, #40]	@ (800045c <HAL_MspInit+0x60>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	4a04      	ldr	r2, [pc, #16]	@ (800045c <HAL_MspInit+0x60>)
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000
 800045c:	40010000 	.word	0x40010000

08000460 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a16      	ldr	r2, [pc, #88]	@ (80004d4 <HAL_SPI_MspInit+0x74>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d124      	bne.n	80004ca <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000480:	4b15      	ldr	r3, [pc, #84]	@ (80004d8 <HAL_SPI_MspInit+0x78>)
 8000482:	69db      	ldr	r3, [r3, #28]
 8000484:	4a14      	ldr	r2, [pc, #80]	@ (80004d8 <HAL_SPI_MspInit+0x78>)
 8000486:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800048a:	61d3      	str	r3, [r2, #28]
 800048c:	4b12      	ldr	r3, [pc, #72]	@ (80004d8 <HAL_SPI_MspInit+0x78>)
 800048e:	69db      	ldr	r3, [r3, #28]
 8000490:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000498:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <HAL_SPI_MspInit+0x78>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a0e      	ldr	r2, [pc, #56]	@ (80004d8 <HAL_SPI_MspInit+0x78>)
 800049e:	f043 0308 	orr.w	r3, r3, #8
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <HAL_SPI_MspInit+0x78>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0308 	and.w	r3, r3, #8
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80004b0:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80004b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b6:	2302      	movs	r3, #2
 80004b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ba:	2303      	movs	r3, #3
 80004bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	4619      	mov	r1, r3
 80004c4:	4805      	ldr	r0, [pc, #20]	@ (80004dc <HAL_SPI_MspInit+0x7c>)
 80004c6:	f000 f9a9 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80004ca:	bf00      	nop
 80004cc:	3720      	adds	r7, #32
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40003800 	.word	0x40003800
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010c00 	.word	0x40010c00

080004e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <NMI_Handler+0x4>

080004e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <HardFault_Handler+0x4>

080004f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <MemManage_Handler+0x4>

080004f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <BusFault_Handler+0x4>

08000500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <UsageFault_Handler+0x4>

08000508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr

08000514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000530:	f000 f874 	bl	800061c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}

08000538 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000544:	f7ff fff8 	bl	8000538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000548:	480b      	ldr	r0, [pc, #44]	@ (8000578 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800054a:	490c      	ldr	r1, [pc, #48]	@ (800057c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800054c:	4a0c      	ldr	r2, [pc, #48]	@ (8000580 <LoopFillZerobss+0x16>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000550:	e002      	b.n	8000558 <LoopCopyDataInit>

08000552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000556:	3304      	adds	r3, #4

08000558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800055c:	d3f9      	bcc.n	8000552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055e:	4a09      	ldr	r2, [pc, #36]	@ (8000584 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000560:	4c09      	ldr	r4, [pc, #36]	@ (8000588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000564:	e001      	b.n	800056a <LoopFillZerobss>

08000566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000568:	3204      	adds	r2, #4

0800056a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800056c:	d3fb      	bcc.n	8000566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800056e:	f001 f945 	bl	80017fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000572:	f7ff fe4d 	bl	8000210 <main>
  bx lr
 8000576:	4770      	bx	lr
  ldr r0, =_sdata
 8000578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800057c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000580:	08001888 	.word	0x08001888
  ldr r2, =_sbss
 8000584:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000588:	20000090 	.word	0x20000090

0800058c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800058c:	e7fe      	b.n	800058c <ADC1_2_IRQHandler>
	...

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000594:	4b08      	ldr	r3, [pc, #32]	@ (80005b8 <HAL_Init+0x28>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a07      	ldr	r2, [pc, #28]	@ (80005b8 <HAL_Init+0x28>)
 800059a:	f043 0310 	orr.w	r3, r3, #16
 800059e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a0:	2003      	movs	r0, #3
 80005a2:	f000 f907 	bl	80007b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a6:	200f      	movs	r0, #15
 80005a8:	f000 f808 	bl	80005bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005ac:	f7ff ff26 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b0:	2300      	movs	r3, #0
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40022000 	.word	0x40022000

080005bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c4:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <HAL_InitTick+0x54>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <HAL_InitTick+0x58>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4619      	mov	r1, r3
 80005ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f911 	bl	8000802 <HAL_SYSTICK_Config>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
 80005e8:	e00e      	b.n	8000608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b0f      	cmp	r3, #15
 80005ee:	d80a      	bhi.n	8000606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f0:	2200      	movs	r2, #0
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	f04f 30ff 	mov.w	r0, #4294967295
 80005f8:	f000 f8e7 	bl	80007ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005fc:	4a06      	ldr	r2, [pc, #24]	@ (8000618 <HAL_InitTick+0x5c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000602:	2300      	movs	r3, #0
 8000604:	e000      	b.n	8000608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	2000000c 	.word	0x2000000c
 8000614:	20000014 	.word	0x20000014
 8000618:	20000010 	.word	0x20000010

0800061c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000620:	4b05      	ldr	r3, [pc, #20]	@ (8000638 <HAL_IncTick+0x1c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	@ (800063c <HAL_IncTick+0x20>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4413      	add	r3, r2
 800062c:	4a03      	ldr	r2, [pc, #12]	@ (800063c <HAL_IncTick+0x20>)
 800062e:	6013      	str	r3, [r2, #0]
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	20000014 	.word	0x20000014
 800063c:	2000008c 	.word	0x2000008c

08000640 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return uwTick;
 8000644:	4b02      	ldr	r3, [pc, #8]	@ (8000650 <HAL_GetTick+0x10>)
 8000646:	681b      	ldr	r3, [r3, #0]
}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	2000008c 	.word	0x2000008c

08000654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f003 0307 	and.w	r3, r3, #7
 8000662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000664:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <__NVIC_SetPriorityGrouping+0x44>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000670:	4013      	ands	r3, r2
 8000672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800067c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000686:	4a04      	ldr	r2, [pc, #16]	@ (8000698 <__NVIC_SetPriorityGrouping+0x44>)
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	60d3      	str	r3, [r2, #12]
}
 800068c:	bf00      	nop
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a0:	4b04      	ldr	r3, [pc, #16]	@ (80006b4 <__NVIC_GetPriorityGrouping+0x18>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	f003 0307 	and.w	r3, r3, #7
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db0a      	blt.n	80006e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	490c      	ldr	r1, [pc, #48]	@ (8000704 <__NVIC_SetPriority+0x4c>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e0:	e00a      	b.n	80006f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4908      	ldr	r1, [pc, #32]	@ (8000708 <__NVIC_SetPriority+0x50>)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	3b04      	subs	r3, #4
 80006f0:	0112      	lsls	r2, r2, #4
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	440b      	add	r3, r1
 80006f6:	761a      	strb	r2, [r3, #24]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000e100 	.word	0xe000e100
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070c:	b480      	push	{r7}
 800070e:	b089      	sub	sp, #36	@ 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	f1c3 0307 	rsb	r3, r3, #7
 8000726:	2b04      	cmp	r3, #4
 8000728:	bf28      	it	cs
 800072a:	2304      	movcs	r3, #4
 800072c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3304      	adds	r3, #4
 8000732:	2b06      	cmp	r3, #6
 8000734:	d902      	bls.n	800073c <NVIC_EncodePriority+0x30>
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3b03      	subs	r3, #3
 800073a:	e000      	b.n	800073e <NVIC_EncodePriority+0x32>
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	f04f 32ff 	mov.w	r2, #4294967295
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	43da      	mvns	r2, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	401a      	ands	r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000754:	f04f 31ff 	mov.w	r1, #4294967295
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43d9      	mvns	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	4313      	orrs	r3, r2
         );
}
 8000766:	4618      	mov	r0, r3
 8000768:	3724      	adds	r7, #36	@ 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3b01      	subs	r3, #1
 800077c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000780:	d301      	bcc.n	8000786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000782:	2301      	movs	r3, #1
 8000784:	e00f      	b.n	80007a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000786:	4a0a      	ldr	r2, [pc, #40]	@ (80007b0 <SysTick_Config+0x40>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3b01      	subs	r3, #1
 800078c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800078e:	210f      	movs	r1, #15
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f7ff ff90 	bl	80006b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000798:	4b05      	ldr	r3, [pc, #20]	@ (80007b0 <SysTick_Config+0x40>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079e:	4b04      	ldr	r3, [pc, #16]	@ (80007b0 <SysTick_Config+0x40>)
 80007a0:	2207      	movs	r2, #7
 80007a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	e000e010 	.word	0xe000e010

080007b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff49 	bl	8000654 <__NVIC_SetPriorityGrouping>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007dc:	f7ff ff5e 	bl	800069c <__NVIC_GetPriorityGrouping>
 80007e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	6978      	ldr	r0, [r7, #20]
 80007e8:	f7ff ff90 	bl	800070c <NVIC_EncodePriority>
 80007ec:	4602      	mov	r2, r0
 80007ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff5f 	bl	80006b8 <__NVIC_SetPriority>
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ffb0 	bl	8000770 <SysTick_Config>
 8000810:	4603      	mov	r3, r0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800081c:	b480      	push	{r7}
 800081e:	b08b      	sub	sp, #44	@ 0x2c
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800082e:	e169      	b.n	8000b04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000830:	2201      	movs	r2, #1
 8000832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	69fa      	ldr	r2, [r7, #28]
 8000840:	4013      	ands	r3, r2
 8000842:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	429a      	cmp	r2, r3
 800084a:	f040 8158 	bne.w	8000afe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	4a9a      	ldr	r2, [pc, #616]	@ (8000abc <HAL_GPIO_Init+0x2a0>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d05e      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 8000858:	4a98      	ldr	r2, [pc, #608]	@ (8000abc <HAL_GPIO_Init+0x2a0>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d875      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 800085e:	4a98      	ldr	r2, [pc, #608]	@ (8000ac0 <HAL_GPIO_Init+0x2a4>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d058      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 8000864:	4a96      	ldr	r2, [pc, #600]	@ (8000ac0 <HAL_GPIO_Init+0x2a4>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d86f      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 800086a:	4a96      	ldr	r2, [pc, #600]	@ (8000ac4 <HAL_GPIO_Init+0x2a8>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d052      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 8000870:	4a94      	ldr	r2, [pc, #592]	@ (8000ac4 <HAL_GPIO_Init+0x2a8>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d869      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 8000876:	4a94      	ldr	r2, [pc, #592]	@ (8000ac8 <HAL_GPIO_Init+0x2ac>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d04c      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 800087c:	4a92      	ldr	r2, [pc, #584]	@ (8000ac8 <HAL_GPIO_Init+0x2ac>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d863      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 8000882:	4a92      	ldr	r2, [pc, #584]	@ (8000acc <HAL_GPIO_Init+0x2b0>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d046      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 8000888:	4a90      	ldr	r2, [pc, #576]	@ (8000acc <HAL_GPIO_Init+0x2b0>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d85d      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 800088e:	2b12      	cmp	r3, #18
 8000890:	d82a      	bhi.n	80008e8 <HAL_GPIO_Init+0xcc>
 8000892:	2b12      	cmp	r3, #18
 8000894:	d859      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 8000896:	a201      	add	r2, pc, #4	@ (adr r2, 800089c <HAL_GPIO_Init+0x80>)
 8000898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800089c:	08000917 	.word	0x08000917
 80008a0:	080008f1 	.word	0x080008f1
 80008a4:	08000903 	.word	0x08000903
 80008a8:	08000945 	.word	0x08000945
 80008ac:	0800094b 	.word	0x0800094b
 80008b0:	0800094b 	.word	0x0800094b
 80008b4:	0800094b 	.word	0x0800094b
 80008b8:	0800094b 	.word	0x0800094b
 80008bc:	0800094b 	.word	0x0800094b
 80008c0:	0800094b 	.word	0x0800094b
 80008c4:	0800094b 	.word	0x0800094b
 80008c8:	0800094b 	.word	0x0800094b
 80008cc:	0800094b 	.word	0x0800094b
 80008d0:	0800094b 	.word	0x0800094b
 80008d4:	0800094b 	.word	0x0800094b
 80008d8:	0800094b 	.word	0x0800094b
 80008dc:	0800094b 	.word	0x0800094b
 80008e0:	080008f9 	.word	0x080008f9
 80008e4:	0800090d 	.word	0x0800090d
 80008e8:	4a79      	ldr	r2, [pc, #484]	@ (8000ad0 <HAL_GPIO_Init+0x2b4>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d013      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ee:	e02c      	b.n	800094a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	623b      	str	r3, [r7, #32]
          break;
 80008f6:	e029      	b.n	800094c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	3304      	adds	r3, #4
 80008fe:	623b      	str	r3, [r7, #32]
          break;
 8000900:	e024      	b.n	800094c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	3308      	adds	r3, #8
 8000908:	623b      	str	r3, [r7, #32]
          break;
 800090a:	e01f      	b.n	800094c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	330c      	adds	r3, #12
 8000912:	623b      	str	r3, [r7, #32]
          break;
 8000914:	e01a      	b.n	800094c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d102      	bne.n	8000924 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800091e:	2304      	movs	r3, #4
 8000920:	623b      	str	r3, [r7, #32]
          break;
 8000922:	e013      	b.n	800094c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d105      	bne.n	8000938 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800092c:	2308      	movs	r3, #8
 800092e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	611a      	str	r2, [r3, #16]
          break;
 8000936:	e009      	b.n	800094c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000938:	2308      	movs	r3, #8
 800093a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	69fa      	ldr	r2, [r7, #28]
 8000940:	615a      	str	r2, [r3, #20]
          break;
 8000942:	e003      	b.n	800094c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
          break;
 8000948:	e000      	b.n	800094c <HAL_GPIO_Init+0x130>
          break;
 800094a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	2bff      	cmp	r3, #255	@ 0xff
 8000950:	d801      	bhi.n	8000956 <HAL_GPIO_Init+0x13a>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	e001      	b.n	800095a <HAL_GPIO_Init+0x13e>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3304      	adds	r3, #4
 800095a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	2bff      	cmp	r3, #255	@ 0xff
 8000960:	d802      	bhi.n	8000968 <HAL_GPIO_Init+0x14c>
 8000962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	e002      	b.n	800096e <HAL_GPIO_Init+0x152>
 8000968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096a:	3b08      	subs	r3, #8
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	210f      	movs	r1, #15
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	fa01 f303 	lsl.w	r3, r1, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	401a      	ands	r2, r3
 8000980:	6a39      	ldr	r1, [r7, #32]
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	fa01 f303 	lsl.w	r3, r1, r3
 8000988:	431a      	orrs	r2, r3
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000996:	2b00      	cmp	r3, #0
 8000998:	f000 80b1 	beq.w	8000afe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800099c:	4b4d      	ldr	r3, [pc, #308]	@ (8000ad4 <HAL_GPIO_Init+0x2b8>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a4c      	ldr	r2, [pc, #304]	@ (8000ad4 <HAL_GPIO_Init+0x2b8>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b4a      	ldr	r3, [pc, #296]	@ (8000ad4 <HAL_GPIO_Init+0x2b8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009b4:	4a48      	ldr	r2, [pc, #288]	@ (8000ad8 <HAL_GPIO_Init+0x2bc>)
 80009b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b8:	089b      	lsrs	r3, r3, #2
 80009ba:	3302      	adds	r3, #2
 80009bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	220f      	movs	r2, #15
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	4013      	ands	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a40      	ldr	r2, [pc, #256]	@ (8000adc <HAL_GPIO_Init+0x2c0>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d013      	beq.n	8000a08 <HAL_GPIO_Init+0x1ec>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a3f      	ldr	r2, [pc, #252]	@ (8000ae0 <HAL_GPIO_Init+0x2c4>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d00d      	beq.n	8000a04 <HAL_GPIO_Init+0x1e8>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a3e      	ldr	r2, [pc, #248]	@ (8000ae4 <HAL_GPIO_Init+0x2c8>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d007      	beq.n	8000a00 <HAL_GPIO_Init+0x1e4>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a3d      	ldr	r2, [pc, #244]	@ (8000ae8 <HAL_GPIO_Init+0x2cc>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d101      	bne.n	80009fc <HAL_GPIO_Init+0x1e0>
 80009f8:	2303      	movs	r3, #3
 80009fa:	e006      	b.n	8000a0a <HAL_GPIO_Init+0x1ee>
 80009fc:	2304      	movs	r3, #4
 80009fe:	e004      	b.n	8000a0a <HAL_GPIO_Init+0x1ee>
 8000a00:	2302      	movs	r3, #2
 8000a02:	e002      	b.n	8000a0a <HAL_GPIO_Init+0x1ee>
 8000a04:	2301      	movs	r3, #1
 8000a06:	e000      	b.n	8000a0a <HAL_GPIO_Init+0x1ee>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a0c:	f002 0203 	and.w	r2, r2, #3
 8000a10:	0092      	lsls	r2, r2, #2
 8000a12:	4093      	lsls	r3, r2
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a1a:	492f      	ldr	r1, [pc, #188]	@ (8000ad8 <HAL_GPIO_Init+0x2bc>)
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	3302      	adds	r3, #2
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d006      	beq.n	8000a42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a34:	4b2d      	ldr	r3, [pc, #180]	@ (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	492c      	ldr	r1, [pc, #176]	@ (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	608b      	str	r3, [r1, #8]
 8000a40:	e006      	b.n	8000a50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a42:	4b2a      	ldr	r3, [pc, #168]	@ (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a44:	689a      	ldr	r2, [r3, #8]
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	4928      	ldr	r1, [pc, #160]	@ (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d006      	beq.n	8000a6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a5c:	4b23      	ldr	r3, [pc, #140]	@ (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	4922      	ldr	r1, [pc, #136]	@ (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	60cb      	str	r3, [r1, #12]
 8000a68:	e006      	b.n	8000a78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a6a:	4b20      	ldr	r3, [pc, #128]	@ (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a6c:	68da      	ldr	r2, [r3, #12]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	491e      	ldr	r1, [pc, #120]	@ (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a74:	4013      	ands	r3, r2
 8000a76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d006      	beq.n	8000a92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a84:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	4918      	ldr	r1, [pc, #96]	@ (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	604b      	str	r3, [r1, #4]
 8000a90:	e006      	b.n	8000aa0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	4914      	ldr	r1, [pc, #80]	@ (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d021      	beq.n	8000af0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <HAL_GPIO_Init+0x2d0>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	490e      	ldr	r1, [pc, #56]	@ (8000aec <HAL_GPIO_Init+0x2d0>)
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	600b      	str	r3, [r1, #0]
 8000ab8:	e021      	b.n	8000afe <HAL_GPIO_Init+0x2e2>
 8000aba:	bf00      	nop
 8000abc:	10320000 	.word	0x10320000
 8000ac0:	10310000 	.word	0x10310000
 8000ac4:	10220000 	.word	0x10220000
 8000ac8:	10210000 	.word	0x10210000
 8000acc:	10120000 	.word	0x10120000
 8000ad0:	10110000 	.word	0x10110000
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010000 	.word	0x40010000
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	40010c00 	.word	0x40010c00
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	40011400 	.word	0x40011400
 8000aec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000af0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <HAL_GPIO_Init+0x304>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	43db      	mvns	r3, r3
 8000af8:	4909      	ldr	r1, [pc, #36]	@ (8000b20 <HAL_GPIO_Init+0x304>)
 8000afa:	4013      	ands	r3, r2
 8000afc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f47f ae8e 	bne.w	8000830 <HAL_GPIO_Init+0x14>
  }
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	372c      	adds	r7, #44	@ 0x2c
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40010400 	.word	0x40010400

08000b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]
 8000b30:	4613      	mov	r3, r2
 8000b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b34:	787b      	ldrb	r3, [r7, #1]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b40:	e003      	b.n	8000b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	041a      	lsls	r2, r3, #16
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	611a      	str	r2, [r3, #16]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e272      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 8087 	beq.w	8000c82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b74:	4b92      	ldr	r3, [pc, #584]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 030c 	and.w	r3, r3, #12
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d00c      	beq.n	8000b9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b80:	4b8f      	ldr	r3, [pc, #572]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 030c 	and.w	r3, r3, #12
 8000b88:	2b08      	cmp	r3, #8
 8000b8a:	d112      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x5e>
 8000b8c:	4b8c      	ldr	r3, [pc, #560]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b98:	d10b      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b9a:	4b89      	ldr	r3, [pc, #548]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d06c      	beq.n	8000c80 <HAL_RCC_OscConfig+0x12c>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d168      	bne.n	8000c80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e24c      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bba:	d106      	bne.n	8000bca <HAL_RCC_OscConfig+0x76>
 8000bbc:	4b80      	ldr	r3, [pc, #512]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a7f      	ldr	r2, [pc, #508]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e02e      	b.n	8000c28 <HAL_RCC_OscConfig+0xd4>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d10c      	bne.n	8000bec <HAL_RCC_OscConfig+0x98>
 8000bd2:	4b7b      	ldr	r3, [pc, #492]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a7a      	ldr	r2, [pc, #488]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	4b78      	ldr	r3, [pc, #480]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a77      	ldr	r2, [pc, #476]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000be4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	e01d      	b.n	8000c28 <HAL_RCC_OscConfig+0xd4>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000bf4:	d10c      	bne.n	8000c10 <HAL_RCC_OscConfig+0xbc>
 8000bf6:	4b72      	ldr	r3, [pc, #456]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a71      	ldr	r2, [pc, #452]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	4b6f      	ldr	r3, [pc, #444]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a6e      	ldr	r2, [pc, #440]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e00b      	b.n	8000c28 <HAL_RCC_OscConfig+0xd4>
 8000c10:	4b6b      	ldr	r3, [pc, #428]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a6a      	ldr	r2, [pc, #424]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	4b68      	ldr	r3, [pc, #416]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a67      	ldr	r2, [pc, #412]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d013      	beq.n	8000c58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c30:	f7ff fd06 	bl	8000640 <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c38:	f7ff fd02 	bl	8000640 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b64      	cmp	r3, #100	@ 0x64
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e200      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c4a:	4b5d      	ldr	r3, [pc, #372]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f0      	beq.n	8000c38 <HAL_RCC_OscConfig+0xe4>
 8000c56:	e014      	b.n	8000c82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c58:	f7ff fcf2 	bl	8000640 <HAL_GetTick>
 8000c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c5e:	e008      	b.n	8000c72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c60:	f7ff fcee 	bl	8000640 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b64      	cmp	r3, #100	@ 0x64
 8000c6c:	d901      	bls.n	8000c72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e1ec      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c72:	4b53      	ldr	r3, [pc, #332]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f0      	bne.n	8000c60 <HAL_RCC_OscConfig+0x10c>
 8000c7e:	e000      	b.n	8000c82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d063      	beq.n	8000d56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c8e:	4b4c      	ldr	r3, [pc, #304]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 030c 	and.w	r3, r3, #12
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00b      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c9a:	4b49      	ldr	r3, [pc, #292]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 030c 	and.w	r3, r3, #12
 8000ca2:	2b08      	cmp	r3, #8
 8000ca4:	d11c      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x18c>
 8000ca6:	4b46      	ldr	r3, [pc, #280]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d116      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb2:	4b43      	ldr	r3, [pc, #268]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d005      	beq.n	8000cca <HAL_RCC_OscConfig+0x176>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d001      	beq.n	8000cca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e1c0      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cca:	4b3d      	ldr	r3, [pc, #244]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4939      	ldr	r1, [pc, #228]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cde:	e03a      	b.n	8000d56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d020      	beq.n	8000d2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ce8:	4b36      	ldr	r3, [pc, #216]	@ (8000dc4 <HAL_RCC_OscConfig+0x270>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cee:	f7ff fca7 	bl	8000640 <HAL_GetTick>
 8000cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf4:	e008      	b.n	8000d08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cf6:	f7ff fca3 	bl	8000640 <HAL_GetTick>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d901      	bls.n	8000d08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d04:	2303      	movs	r3, #3
 8000d06:	e1a1      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d08:	4b2d      	ldr	r3, [pc, #180]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0f0      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d14:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	4927      	ldr	r1, [pc, #156]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	4313      	orrs	r3, r2
 8000d26:	600b      	str	r3, [r1, #0]
 8000d28:	e015      	b.n	8000d56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d2a:	4b26      	ldr	r3, [pc, #152]	@ (8000dc4 <HAL_RCC_OscConfig+0x270>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d30:	f7ff fc86 	bl	8000640 <HAL_GetTick>
 8000d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d36:	e008      	b.n	8000d4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d38:	f7ff fc82 	bl	8000640 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e180      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f0      	bne.n	8000d38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d03a      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d019      	beq.n	8000d9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d6a:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <HAL_RCC_OscConfig+0x274>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d70:	f7ff fc66 	bl	8000640 <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d78:	f7ff fc62 	bl	8000640 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e160      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f0      	beq.n	8000d78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d96:	2001      	movs	r0, #1
 8000d98:	f000 fa9c 	bl	80012d4 <RCC_Delay>
 8000d9c:	e01c      	b.n	8000dd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_RCC_OscConfig+0x274>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da4:	f7ff fc4c 	bl	8000640 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000daa:	e00f      	b.n	8000dcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dac:	f7ff fc48 	bl	8000640 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d908      	bls.n	8000dcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e146      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	42420000 	.word	0x42420000
 8000dc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dcc:	4b92      	ldr	r3, [pc, #584]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1e9      	bne.n	8000dac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 80a6 	beq.w	8000f32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dea:	4b8b      	ldr	r3, [pc, #556]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10d      	bne.n	8000e12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b88      	ldr	r3, [pc, #544]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a87      	ldr	r2, [pc, #540]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	4b85      	ldr	r3, [pc, #532]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e12:	4b82      	ldr	r3, [pc, #520]	@ (800101c <HAL_RCC_OscConfig+0x4c8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d118      	bne.n	8000e50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e1e:	4b7f      	ldr	r3, [pc, #508]	@ (800101c <HAL_RCC_OscConfig+0x4c8>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a7e      	ldr	r2, [pc, #504]	@ (800101c <HAL_RCC_OscConfig+0x4c8>)
 8000e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e2a:	f7ff fc09 	bl	8000640 <HAL_GetTick>
 8000e2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e32:	f7ff fc05 	bl	8000640 <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b64      	cmp	r3, #100	@ 0x64
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e103      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e44:	4b75      	ldr	r3, [pc, #468]	@ (800101c <HAL_RCC_OscConfig+0x4c8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f0      	beq.n	8000e32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d106      	bne.n	8000e66 <HAL_RCC_OscConfig+0x312>
 8000e58:	4b6f      	ldr	r3, [pc, #444]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e5a:	6a1b      	ldr	r3, [r3, #32]
 8000e5c:	4a6e      	ldr	r2, [pc, #440]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6213      	str	r3, [r2, #32]
 8000e64:	e02d      	b.n	8000ec2 <HAL_RCC_OscConfig+0x36e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10c      	bne.n	8000e88 <HAL_RCC_OscConfig+0x334>
 8000e6e:	4b6a      	ldr	r3, [pc, #424]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	4a69      	ldr	r2, [pc, #420]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e74:	f023 0301 	bic.w	r3, r3, #1
 8000e78:	6213      	str	r3, [r2, #32]
 8000e7a:	4b67      	ldr	r3, [pc, #412]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e7c:	6a1b      	ldr	r3, [r3, #32]
 8000e7e:	4a66      	ldr	r2, [pc, #408]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e80:	f023 0304 	bic.w	r3, r3, #4
 8000e84:	6213      	str	r3, [r2, #32]
 8000e86:	e01c      	b.n	8000ec2 <HAL_RCC_OscConfig+0x36e>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	2b05      	cmp	r3, #5
 8000e8e:	d10c      	bne.n	8000eaa <HAL_RCC_OscConfig+0x356>
 8000e90:	4b61      	ldr	r3, [pc, #388]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	4a60      	ldr	r2, [pc, #384]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6213      	str	r3, [r2, #32]
 8000e9c:	4b5e      	ldr	r3, [pc, #376]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e9e:	6a1b      	ldr	r3, [r3, #32]
 8000ea0:	4a5d      	ldr	r2, [pc, #372]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6213      	str	r3, [r2, #32]
 8000ea8:	e00b      	b.n	8000ec2 <HAL_RCC_OscConfig+0x36e>
 8000eaa:	4b5b      	ldr	r3, [pc, #364]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	6a1b      	ldr	r3, [r3, #32]
 8000eae:	4a5a      	ldr	r2, [pc, #360]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	6213      	str	r3, [r2, #32]
 8000eb6:	4b58      	ldr	r3, [pc, #352]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	4a57      	ldr	r2, [pc, #348]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	f023 0304 	bic.w	r3, r3, #4
 8000ec0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d015      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eca:	f7ff fbb9 	bl	8000640 <HAL_GetTick>
 8000ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed0:	e00a      	b.n	8000ee8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ed2:	f7ff fbb5 	bl	8000640 <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e0b1      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee8:	4b4b      	ldr	r3, [pc, #300]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0ee      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x37e>
 8000ef4:	e014      	b.n	8000f20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef6:	f7ff fba3 	bl	8000640 <HAL_GetTick>
 8000efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000efc:	e00a      	b.n	8000f14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000efe:	f7ff fb9f 	bl	8000640 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e09b      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f14:	4b40      	ldr	r3, [pc, #256]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1ee      	bne.n	8000efe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f20:	7dfb      	ldrb	r3, [r7, #23]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d105      	bne.n	8000f32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f26:	4b3c      	ldr	r3, [pc, #240]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a3b      	ldr	r2, [pc, #236]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 8087 	beq.w	800104a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f3c:	4b36      	ldr	r3, [pc, #216]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 030c 	and.w	r3, r3, #12
 8000f44:	2b08      	cmp	r3, #8
 8000f46:	d061      	beq.n	800100c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d146      	bne.n	8000fde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f50:	4b33      	ldr	r3, [pc, #204]	@ (8001020 <HAL_RCC_OscConfig+0x4cc>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f56:	f7ff fb73 	bl	8000640 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f5e:	f7ff fb6f 	bl	8000640 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e06d      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f70:	4b29      	ldr	r3, [pc, #164]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f0      	bne.n	8000f5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f84:	d108      	bne.n	8000f98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f86:	4b24      	ldr	r3, [pc, #144]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	4921      	ldr	r1, [pc, #132]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	4313      	orrs	r3, r2
 8000f96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f98:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a19      	ldr	r1, [r3, #32]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa8:	430b      	orrs	r3, r1
 8000faa:	491b      	ldr	r1, [pc, #108]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <HAL_RCC_OscConfig+0x4cc>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb6:	f7ff fb43 	bl	8000640 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fbe:	f7ff fb3f 	bl	8000640 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e03d      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f0      	beq.n	8000fbe <HAL_RCC_OscConfig+0x46a>
 8000fdc:	e035      	b.n	800104a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <HAL_RCC_OscConfig+0x4cc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fb2c 	bl	8000640 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fec:	f7ff fb28 	bl	8000640 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e026      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f0      	bne.n	8000fec <HAL_RCC_OscConfig+0x498>
 800100a:	e01e      	b.n	800104a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d107      	bne.n	8001024 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e019      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
 8001018:	40021000 	.word	0x40021000
 800101c:	40007000 	.word	0x40007000
 8001020:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001024:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <HAL_RCC_OscConfig+0x500>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	429a      	cmp	r2, r3
 8001036:	d106      	bne.n	8001046 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001042:	429a      	cmp	r2, r3
 8001044:	d001      	beq.n	800104a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e0d0      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800106c:	4b6a      	ldr	r3, [pc, #424]	@ (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d910      	bls.n	800109c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107a:	4b67      	ldr	r3, [pc, #412]	@ (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f023 0207 	bic.w	r2, r3, #7
 8001082:	4965      	ldr	r1, [pc, #404]	@ (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	4313      	orrs	r3, r2
 8001088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d001      	beq.n	800109c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e0b8      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d020      	beq.n	80010ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010b4:	4b59      	ldr	r3, [pc, #356]	@ (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	4a58      	ldr	r2, [pc, #352]	@ (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80010be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010cc:	4b53      	ldr	r3, [pc, #332]	@ (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4a52      	ldr	r2, [pc, #328]	@ (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010d2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80010d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d8:	4b50      	ldr	r3, [pc, #320]	@ (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	494d      	ldr	r1, [pc, #308]	@ (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d040      	beq.n	8001178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d107      	bne.n	800110e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	4b47      	ldr	r3, [pc, #284]	@ (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d115      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e07f      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d107      	bne.n	8001126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001116:	4b41      	ldr	r3, [pc, #260]	@ (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d109      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e073      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	4b3d      	ldr	r3, [pc, #244]	@ (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e06b      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001136:	4b39      	ldr	r3, [pc, #228]	@ (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f023 0203 	bic.w	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4936      	ldr	r1, [pc, #216]	@ (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	4313      	orrs	r3, r2
 8001146:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001148:	f7ff fa7a 	bl	8000640 <HAL_GetTick>
 800114c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114e:	e00a      	b.n	8001166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001150:	f7ff fa76 	bl	8000640 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800115e:	4293      	cmp	r3, r2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e053      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001166:	4b2d      	ldr	r3, [pc, #180]	@ (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 020c 	and.w	r2, r3, #12
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	429a      	cmp	r2, r3
 8001176:	d1eb      	bne.n	8001150 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001178:	4b27      	ldr	r3, [pc, #156]	@ (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d210      	bcs.n	80011a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001186:	4b24      	ldr	r3, [pc, #144]	@ (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f023 0207 	bic.w	r2, r3, #7
 800118e:	4922      	ldr	r1, [pc, #136]	@ (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001196:	4b20      	ldr	r3, [pc, #128]	@ (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d001      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e032      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d008      	beq.n	80011c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011b4:	4b19      	ldr	r3, [pc, #100]	@ (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	4916      	ldr	r1, [pc, #88]	@ (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d009      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011d2:	4b12      	ldr	r3, [pc, #72]	@ (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	490e      	ldr	r1, [pc, #56]	@ (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011e6:	f000 f821 	bl	800122c <HAL_RCC_GetSysClockFreq>
 80011ea:	4602      	mov	r2, r0
 80011ec:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	091b      	lsrs	r3, r3, #4
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	490a      	ldr	r1, [pc, #40]	@ (8001220 <HAL_RCC_ClockConfig+0x1c8>)
 80011f8:	5ccb      	ldrb	r3, [r1, r3]
 80011fa:	fa22 f303 	lsr.w	r3, r2, r3
 80011fe:	4a09      	ldr	r2, [pc, #36]	@ (8001224 <HAL_RCC_ClockConfig+0x1cc>)
 8001200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <HAL_RCC_ClockConfig+0x1d0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f9d8 	bl	80005bc <HAL_InitTick>

  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40022000 	.word	0x40022000
 800121c:	40021000 	.word	0x40021000
 8001220:	0800185c 	.word	0x0800185c
 8001224:	2000000c 	.word	0x2000000c
 8001228:	20000010 	.word	0x20000010

0800122c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800122c:	b480      	push	{r7}
 800122e:	b087      	sub	sp, #28
 8001230:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001246:	4b1e      	ldr	r3, [pc, #120]	@ (80012c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 030c 	and.w	r3, r3, #12
 8001252:	2b04      	cmp	r3, #4
 8001254:	d002      	beq.n	800125c <HAL_RCC_GetSysClockFreq+0x30>
 8001256:	2b08      	cmp	r3, #8
 8001258:	d003      	beq.n	8001262 <HAL_RCC_GetSysClockFreq+0x36>
 800125a:	e027      	b.n	80012ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800125c:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800125e:	613b      	str	r3, [r7, #16]
      break;
 8001260:	e027      	b.n	80012b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	0c9b      	lsrs	r3, r3, #18
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	4a17      	ldr	r2, [pc, #92]	@ (80012c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800126c:	5cd3      	ldrb	r3, [r2, r3]
 800126e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d010      	beq.n	800129c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	0c5b      	lsrs	r3, r3, #17
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	4a11      	ldr	r2, [pc, #68]	@ (80012cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001286:	5cd3      	ldrb	r3, [r2, r3]
 8001288:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a0d      	ldr	r2, [pc, #52]	@ (80012c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800128e:	fb03 f202 	mul.w	r2, r3, r2
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	fbb2 f3f3 	udiv	r3, r2, r3
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e004      	b.n	80012a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a0c      	ldr	r2, [pc, #48]	@ (80012d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012a0:	fb02 f303 	mul.w	r3, r2, r3
 80012a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	613b      	str	r3, [r7, #16]
      break;
 80012aa:	e002      	b.n	80012b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012ac:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ae:	613b      	str	r3, [r7, #16]
      break;
 80012b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012b2:	693b      	ldr	r3, [r7, #16]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000
 80012c4:	007a1200 	.word	0x007a1200
 80012c8:	0800186c 	.word	0x0800186c
 80012cc:	0800187c 	.word	0x0800187c
 80012d0:	003d0900 	.word	0x003d0900

080012d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <RCC_Delay+0x34>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <RCC_Delay+0x38>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	0a5b      	lsrs	r3, r3, #9
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	fb02 f303 	mul.w	r3, r2, r3
 80012ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012f0:	bf00      	nop
  }
  while (Delay --);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1e5a      	subs	r2, r3, #1
 80012f6:	60fa      	str	r2, [r7, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f9      	bne.n	80012f0 <RCC_Delay+0x1c>
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	2000000c 	.word	0x2000000c
 800130c:	10624dd3 	.word	0x10624dd3

08001310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e076      	b.n	8001410 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001326:	2b00      	cmp	r3, #0
 8001328:	d108      	bne.n	800133c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001332:	d009      	beq.n	8001348 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
 800133a:	e005      	b.n	8001348 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d106      	bne.n	8001368 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff f87c 	bl	8000460 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2202      	movs	r2, #2
 800136c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800137e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013cc:	ea42 0103 	orr.w	r1, r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	0c1a      	lsrs	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f002 0204 	and.w	r2, r2, #4
 80013ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	69da      	ldr	r2, [r3, #28]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	4613      	mov	r3, r2
 8001426:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <HAL_SPI_Transmit+0x22>
 8001436:	2302      	movs	r3, #2
 8001438:	e12d      	b.n	8001696 <HAL_SPI_Transmit+0x27e>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001442:	f7ff f8fd 	bl	8000640 <HAL_GetTick>
 8001446:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b01      	cmp	r3, #1
 8001456:	d002      	beq.n	800145e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001458:	2302      	movs	r3, #2
 800145a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800145c:	e116      	b.n	800168c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d002      	beq.n	800146a <HAL_SPI_Transmit+0x52>
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800146e:	e10d      	b.n	800168c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2203      	movs	r2, #3
 8001474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	88fa      	ldrh	r2, [r7, #6]
 8001488:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	88fa      	ldrh	r2, [r7, #6]
 800148e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2200      	movs	r2, #0
 8001494:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80014b6:	d10f      	bne.n	80014d8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80014c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80014d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014e2:	2b40      	cmp	r3, #64	@ 0x40
 80014e4:	d007      	beq.n	80014f6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80014fe:	d14f      	bne.n	80015a0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <HAL_SPI_Transmit+0xf6>
 8001508:	8afb      	ldrh	r3, [r7, #22]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d142      	bne.n	8001594 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	881a      	ldrh	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	1c9a      	adds	r2, r3, #2
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001528:	b29b      	uxth	r3, r3
 800152a:	3b01      	subs	r3, #1
 800152c:	b29a      	uxth	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001532:	e02f      	b.n	8001594 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b02      	cmp	r3, #2
 8001540:	d112      	bne.n	8001568 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	881a      	ldrh	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	1c9a      	adds	r2, r3, #2
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800155c:	b29b      	uxth	r3, r3
 800155e:	3b01      	subs	r3, #1
 8001560:	b29a      	uxth	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001566:	e015      	b.n	8001594 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001568:	f7ff f86a 	bl	8000640 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d803      	bhi.n	8001580 <HAL_SPI_Transmit+0x168>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157e:	d102      	bne.n	8001586 <HAL_SPI_Transmit+0x16e>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d106      	bne.n	8001594 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001592:	e07b      	b.n	800168c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001598:	b29b      	uxth	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1ca      	bne.n	8001534 <HAL_SPI_Transmit+0x11c>
 800159e:	e050      	b.n	8001642 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HAL_SPI_Transmit+0x196>
 80015a8:	8afb      	ldrh	r3, [r7, #22]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d144      	bne.n	8001638 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	330c      	adds	r3, #12
 80015b8:	7812      	ldrb	r2, [r2, #0]
 80015ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	3b01      	subs	r3, #1
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80015d4:	e030      	b.n	8001638 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d113      	bne.n	800160c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	330c      	adds	r3, #12
 80015ee:	7812      	ldrb	r2, [r2, #0]
 80015f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001600:	b29b      	uxth	r3, r3
 8001602:	3b01      	subs	r3, #1
 8001604:	b29a      	uxth	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	86da      	strh	r2, [r3, #54]	@ 0x36
 800160a:	e015      	b.n	8001638 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800160c:	f7ff f818 	bl	8000640 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d803      	bhi.n	8001624 <HAL_SPI_Transmit+0x20c>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001622:	d102      	bne.n	800162a <HAL_SPI_Transmit+0x212>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d106      	bne.n	8001638 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001636:	e029      	b.n	800168c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800163c:	b29b      	uxth	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1c9      	bne.n	80015d6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	6839      	ldr	r1, [r7, #0]
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 f8b2 	bl	80017b0 <SPI_EndRxTxTransaction>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2220      	movs	r2, #32
 8001656:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10a      	bne.n	8001676 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	77fb      	strb	r3, [r7, #31]
 8001682:	e003      	b.n	800168c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001694:	7ffb      	ldrb	r3, [r7, #31]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	4613      	mov	r3, r2
 80016ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80016b0:	f7fe ffc6 	bl	8000640 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b8:	1a9b      	subs	r3, r3, r2
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80016c0:	f7fe ffbe 	bl	8000640 <HAL_GetTick>
 80016c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80016c6:	4b39      	ldr	r3, [pc, #228]	@ (80017ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	015b      	lsls	r3, r3, #5
 80016cc:	0d1b      	lsrs	r3, r3, #20
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80016d6:	e054      	b.n	8001782 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016de:	d050      	beq.n	8001782 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80016e0:	f7fe ffae 	bl	8000640 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d902      	bls.n	80016f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d13d      	bne.n	8001772 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001704:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800170e:	d111      	bne.n	8001734 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001718:	d004      	beq.n	8001724 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001722:	d107      	bne.n	8001734 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001732:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800173c:	d10f      	bne.n	800175e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800175c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e017      	b.n	80017a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3b01      	subs	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4013      	ands	r3, r2
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	429a      	cmp	r2, r3
 8001790:	bf0c      	ite	eq
 8001792:	2301      	moveq	r3, #1
 8001794:	2300      	movne	r3, #0
 8001796:	b2db      	uxtb	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	429a      	cmp	r2, r3
 800179e:	d19b      	bne.n	80016d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000000c 	.word	0x2000000c

080017b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2200      	movs	r2, #0
 80017c4:	2180      	movs	r1, #128	@ 0x80
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f7ff ff6a 	bl	80016a0 <SPI_WaitFlagStateUntilTimeout>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d6:	f043 0220 	orr.w	r2, r3, #32
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e000      	b.n	80017e4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <memset>:
 80017ec:	4603      	mov	r3, r0
 80017ee:	4402      	add	r2, r0
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d100      	bne.n	80017f6 <memset+0xa>
 80017f4:	4770      	bx	lr
 80017f6:	f803 1b01 	strb.w	r1, [r3], #1
 80017fa:	e7f9      	b.n	80017f0 <memset+0x4>

080017fc <__libc_init_array>:
 80017fc:	b570      	push	{r4, r5, r6, lr}
 80017fe:	2600      	movs	r6, #0
 8001800:	4d0c      	ldr	r5, [pc, #48]	@ (8001834 <__libc_init_array+0x38>)
 8001802:	4c0d      	ldr	r4, [pc, #52]	@ (8001838 <__libc_init_array+0x3c>)
 8001804:	1b64      	subs	r4, r4, r5
 8001806:	10a4      	asrs	r4, r4, #2
 8001808:	42a6      	cmp	r6, r4
 800180a:	d109      	bne.n	8001820 <__libc_init_array+0x24>
 800180c:	f000 f81a 	bl	8001844 <_init>
 8001810:	2600      	movs	r6, #0
 8001812:	4d0a      	ldr	r5, [pc, #40]	@ (800183c <__libc_init_array+0x40>)
 8001814:	4c0a      	ldr	r4, [pc, #40]	@ (8001840 <__libc_init_array+0x44>)
 8001816:	1b64      	subs	r4, r4, r5
 8001818:	10a4      	asrs	r4, r4, #2
 800181a:	42a6      	cmp	r6, r4
 800181c:	d105      	bne.n	800182a <__libc_init_array+0x2e>
 800181e:	bd70      	pop	{r4, r5, r6, pc}
 8001820:	f855 3b04 	ldr.w	r3, [r5], #4
 8001824:	4798      	blx	r3
 8001826:	3601      	adds	r6, #1
 8001828:	e7ee      	b.n	8001808 <__libc_init_array+0xc>
 800182a:	f855 3b04 	ldr.w	r3, [r5], #4
 800182e:	4798      	blx	r3
 8001830:	3601      	adds	r6, #1
 8001832:	e7f2      	b.n	800181a <__libc_init_array+0x1e>
 8001834:	08001880 	.word	0x08001880
 8001838:	08001880 	.word	0x08001880
 800183c:	08001880 	.word	0x08001880
 8001840:	08001884 	.word	0x08001884

08001844 <_init>:
 8001844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001846:	bf00      	nop
 8001848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800184a:	bc08      	pop	{r3}
 800184c:	469e      	mov	lr, r3
 800184e:	4770      	bx	lr

08001850 <_fini>:
 8001850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001852:	bf00      	nop
 8001854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001856:	bc08      	pop	{r3}
 8001858:	469e      	mov	lr, r3
 800185a:	4770      	bx	lr
