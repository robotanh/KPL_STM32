
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000280c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002918  08002918  00003918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002950  08002950  00004034  2**0
                  CONTENTS
  4 .ARM          00000000  08002950  08002950  00004034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002950  08002950  00004034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002950  08002950  00003950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002954  08002954  00003954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08002958  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000034  0800298c  00004034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  0800298c  000041b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d80  00000000  00000000  0000405d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc6  00000000  00000000  0000dddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0000f9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008fe  00000000  00000000  00010550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176bb  00000000  00000000  00010e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c351  00000000  00000000  00028509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000896ea  00000000  00000000  0003485a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bdf44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003028  00000000  00000000  000bdf88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000c0fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08002900 	.word	0x08002900

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08002900 	.word	0x08002900

0800014c <KeyPad_Scan>:
    /* Set all rows to high */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
}

/* Scan the 4x5 keypad and return the pressed key value */
uint8_t KeyPad_Scan(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    uint32_t currentMillis = HAL_GetTick();
 8000152:	f000 fe93 	bl	8000e7c <HAL_GetTick>
 8000156:	6038      	str	r0, [r7, #0]

    if (currentMillis - lastDebounceTime < DEBOUNCE_DELAY) {
 8000158:	4b24      	ldr	r3, [pc, #144]	@ (80001ec <KeyPad_Scan+0xa0>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	683a      	ldr	r2, [r7, #0]
 800015e:	1ad3      	subs	r3, r2, r3
 8000160:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000164:	d201      	bcs.n	800016a <KeyPad_Scan+0x1e>
        return 0xFF;
 8000166:	23ff      	movs	r3, #255	@ 0xff
 8000168:	e03b      	b.n	80001e2 <KeyPad_Scan+0x96>
    }

    for (uint8_t row = 0; row < 4; row++) {
 800016a:	2300      	movs	r3, #0
 800016c:	71fb      	strb	r3, [r7, #7]
 800016e:	e034      	b.n	80001da <KeyPad_Scan+0x8e>
        /* Set all rows low */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000170:	2200      	movs	r2, #0
 8000172:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000176:	481e      	ldr	r0, [pc, #120]	@ (80001f0 <KeyPad_Scan+0xa4>)
 8000178:	f001 f933 	bl	80013e2 <HAL_GPIO_WritePin>

        /* Set the current row high */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 << row, GPIO_PIN_SET);
 800017c:	79fb      	ldrb	r3, [r7, #7]
 800017e:	2240      	movs	r2, #64	@ 0x40
 8000180:	fa02 f303 	lsl.w	r3, r2, r3
 8000184:	b29b      	uxth	r3, r3
 8000186:	2201      	movs	r2, #1
 8000188:	4619      	mov	r1, r3
 800018a:	4819      	ldr	r0, [pc, #100]	@ (80001f0 <KeyPad_Scan+0xa4>)
 800018c:	f001 f929 	bl	80013e2 <HAL_GPIO_WritePin>

        /* Read each column */
        for (uint8_t col = 0; col < 5; col++) {
 8000190:	2300      	movs	r3, #0
 8000192:	71bb      	strb	r3, [r7, #6]
 8000194:	e01b      	b.n	80001ce <KeyPad_Scan+0x82>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 << col) == GPIO_PIN_SET) {
 8000196:	79bb      	ldrb	r3, [r7, #6]
 8000198:	2201      	movs	r2, #1
 800019a:	fa02 f303 	lsl.w	r3, r2, r3
 800019e:	b29b      	uxth	r3, r3
 80001a0:	4619      	mov	r1, r3
 80001a2:	4813      	ldr	r0, [pc, #76]	@ (80001f0 <KeyPad_Scan+0xa4>)
 80001a4:	f001 f906 	bl	80013b4 <HAL_GPIO_ReadPin>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b01      	cmp	r3, #1
 80001ac:	d10c      	bne.n	80001c8 <KeyPad_Scan+0x7c>
                lastDebounceTime = currentMillis;
 80001ae:	4a0f      	ldr	r2, [pc, #60]	@ (80001ec <KeyPad_Scan+0xa0>)
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	6013      	str	r3, [r2, #0]
                return keyMap[row][col];
 80001b4:	79fa      	ldrb	r2, [r7, #7]
 80001b6:	79b9      	ldrb	r1, [r7, #6]
 80001b8:	480e      	ldr	r0, [pc, #56]	@ (80001f4 <KeyPad_Scan+0xa8>)
 80001ba:	4613      	mov	r3, r2
 80001bc:	009b      	lsls	r3, r3, #2
 80001be:	4413      	add	r3, r2
 80001c0:	4403      	add	r3, r0
 80001c2:	440b      	add	r3, r1
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	e00c      	b.n	80001e2 <KeyPad_Scan+0x96>
        for (uint8_t col = 0; col < 5; col++) {
 80001c8:	79bb      	ldrb	r3, [r7, #6]
 80001ca:	3301      	adds	r3, #1
 80001cc:	71bb      	strb	r3, [r7, #6]
 80001ce:	79bb      	ldrb	r3, [r7, #6]
 80001d0:	2b04      	cmp	r3, #4
 80001d2:	d9e0      	bls.n	8000196 <KeyPad_Scan+0x4a>
    for (uint8_t row = 0; row < 4; row++) {
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	3301      	adds	r3, #1
 80001d8:	71fb      	strb	r3, [r7, #7]
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	2b03      	cmp	r3, #3
 80001de:	d9c7      	bls.n	8000170 <KeyPad_Scan+0x24>
            }
        }
    }

    return 0xFF;
 80001e0:	23ff      	movs	r3, #255	@ 0xff
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	20000050 	.word	0x20000050
 80001f0:	40010c00 	.word	0x40010c00
 80001f4:	08002918 	.word	0x08002918

080001f8 <ShiftOut_SPI>:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
}
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Pull STCP (Latch) low
 8000202:	2200      	movs	r2, #0
 8000204:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000208:	480a      	ldr	r0, [pc, #40]	@ (8000234 <ShiftOut_SPI+0x3c>)
 800020a:	f001 f8ea 	bl	80013e2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, 300); // Transmit data
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	b29a      	uxth	r2, r3
 8000212:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000216:	6879      	ldr	r1, [r7, #4]
 8000218:	4807      	ldr	r0, [pc, #28]	@ (8000238 <ShiftOut_SPI+0x40>)
 800021a:	f001 fd5d 	bl	8001cd8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Pull STCP (Latch) high
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <ShiftOut_SPI+0x3c>)
 8000226:	f001 f8dc 	bl	80013e2 <HAL_GPIO_WritePin>

}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40010c00 	.word	0x40010c00
 8000238:	200000ac 	.word	0x200000ac

0800023c <ShiftOut_LCD>:

void ShiftOut_LCD(uint8_t *data, size_t size)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // Pull STCP (Latch) low
 8000246:	2200      	movs	r2, #0
 8000248:	2140      	movs	r1, #64	@ 0x40
 800024a:	480a      	ldr	r0, [pc, #40]	@ (8000274 <ShiftOut_LCD+0x38>)
 800024c:	f001 f8c9 	bl	80013e2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, size, 300); // Transmit data
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	b29a      	uxth	r2, r3
 8000254:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000258:	6879      	ldr	r1, [r7, #4]
 800025a:	4807      	ldr	r0, [pc, #28]	@ (8000278 <ShiftOut_LCD+0x3c>)
 800025c:	f001 fd3c 	bl	8001cd8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // Pull STCP (Latch) high
 8000260:	2201      	movs	r2, #1
 8000262:	2140      	movs	r1, #64	@ 0x40
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <ShiftOut_LCD+0x38>)
 8000266:	f001 f8bc 	bl	80013e2 <HAL_GPIO_WritePin>
}
 800026a:	bf00      	nop
 800026c:	3708      	adds	r7, #8
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40010800 	.word	0x40010800
 8000278:	20000054 	.word	0x20000054

0800027c <SevenSegLEDsHandler>:

uint8_t* SevenSegLEDsHandler(uint32_t* buffer, uint8_t scan_state) {
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	460b      	mov	r3, r1
 8000286:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    switch (scan_state) {
 8000288:	78fb      	ldrb	r3, [r7, #3]
 800028a:	2b05      	cmp	r3, #5
 800028c:	f200 815d 	bhi.w	800054a <SevenSegLEDsHandler+0x2ce>
 8000290:	a201      	add	r2, pc, #4	@ (adr r2, 8000298 <SevenSegLEDsHandler+0x1c>)
 8000292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000296:	bf00      	nop
 8000298:	080002b1 	.word	0x080002b1
 800029c:	0800030b 	.word	0x0800030b
 80002a0:	0800037d 	.word	0x0800037d
 80002a4:	080003ef 	.word	0x080003ef
 80002a8:	08000461 	.word	0x08000461
 80002ac:	080004d3 	.word	0x080004d3
        case 0:
            output[0] = buffer[0] % 10;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	6819      	ldr	r1, [r3, #0]
 80002b4:	4ba8      	ldr	r3, [pc, #672]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 80002b6:	fba3 2301 	umull	r2, r3, r3, r1
 80002ba:	08da      	lsrs	r2, r3, #3
 80002bc:	4613      	mov	r3, r2
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	4413      	add	r3, r2
 80002c2:	005b      	lsls	r3, r3, #1
 80002c4:	1aca      	subs	r2, r1, r3
 80002c6:	b2d2      	uxtb	r2, r2
 80002c8:	4ba4      	ldr	r3, [pc, #656]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 80002ca:	701a      	strb	r2, [r3, #0]
            output[1] = buffer[1] % 10;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3304      	adds	r3, #4
 80002d0:	6819      	ldr	r1, [r3, #0]
 80002d2:	4ba1      	ldr	r3, [pc, #644]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 80002d4:	fba3 2301 	umull	r2, r3, r3, r1
 80002d8:	08da      	lsrs	r2, r3, #3
 80002da:	4613      	mov	r3, r2
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	4413      	add	r3, r2
 80002e0:	005b      	lsls	r3, r3, #1
 80002e2:	1aca      	subs	r2, r1, r3
 80002e4:	b2d2      	uxtb	r2, r2
 80002e6:	4b9d      	ldr	r3, [pc, #628]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 80002e8:	705a      	strb	r2, [r3, #1]
            output[2] = buffer[2] % 10;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	3308      	adds	r3, #8
 80002ee:	6819      	ldr	r1, [r3, #0]
 80002f0:	4b99      	ldr	r3, [pc, #612]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 80002f2:	fba3 2301 	umull	r2, r3, r3, r1
 80002f6:	08da      	lsrs	r2, r3, #3
 80002f8:	4613      	mov	r3, r2
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	4413      	add	r3, r2
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	1aca      	subs	r2, r1, r3
 8000302:	b2d2      	uxtb	r2, r2
 8000304:	4b95      	ldr	r3, [pc, #596]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 8000306:	709a      	strb	r2, [r3, #2]
            break;
 8000308:	e11f      	b.n	800054a <SevenSegLEDsHandler+0x2ce>
        case 1:
            output[0] = (buffer[0] / 10) % 10;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a92      	ldr	r2, [pc, #584]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 8000310:	fba2 2303 	umull	r2, r3, r2, r3
 8000314:	08d9      	lsrs	r1, r3, #3
 8000316:	4b90      	ldr	r3, [pc, #576]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 8000318:	fba3 2301 	umull	r2, r3, r3, r1
 800031c:	08da      	lsrs	r2, r3, #3
 800031e:	4613      	mov	r3, r2
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	4413      	add	r3, r2
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	1aca      	subs	r2, r1, r3
 8000328:	b2d2      	uxtb	r2, r2
 800032a:	4b8c      	ldr	r3, [pc, #560]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 800032c:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10) % 10;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	3304      	adds	r3, #4
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a88      	ldr	r2, [pc, #544]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 8000336:	fba2 2303 	umull	r2, r3, r2, r3
 800033a:	08d9      	lsrs	r1, r3, #3
 800033c:	4b86      	ldr	r3, [pc, #536]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 800033e:	fba3 2301 	umull	r2, r3, r3, r1
 8000342:	08da      	lsrs	r2, r3, #3
 8000344:	4613      	mov	r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	4413      	add	r3, r2
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	1aca      	subs	r2, r1, r3
 800034e:	b2d2      	uxtb	r2, r2
 8000350:	4b82      	ldr	r3, [pc, #520]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 8000352:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10) % 10;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3308      	adds	r3, #8
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a7f      	ldr	r2, [pc, #508]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 800035c:	fba2 2303 	umull	r2, r3, r2, r3
 8000360:	08d9      	lsrs	r1, r3, #3
 8000362:	4b7d      	ldr	r3, [pc, #500]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 8000364:	fba3 2301 	umull	r2, r3, r3, r1
 8000368:	08da      	lsrs	r2, r3, #3
 800036a:	4613      	mov	r3, r2
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	4413      	add	r3, r2
 8000370:	005b      	lsls	r3, r3, #1
 8000372:	1aca      	subs	r2, r1, r3
 8000374:	b2d2      	uxtb	r2, r2
 8000376:	4b79      	ldr	r3, [pc, #484]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 8000378:	709a      	strb	r2, [r3, #2]
            break;
 800037a:	e0e6      	b.n	800054a <SevenSegLEDsHandler+0x2ce>
        case 2:
            output[0] = (buffer[0] / 100) % 10;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a77      	ldr	r2, [pc, #476]	@ (8000560 <SevenSegLEDsHandler+0x2e4>)
 8000382:	fba2 2303 	umull	r2, r3, r2, r3
 8000386:	0959      	lsrs	r1, r3, #5
 8000388:	4b73      	ldr	r3, [pc, #460]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 800038a:	fba3 2301 	umull	r2, r3, r3, r1
 800038e:	08da      	lsrs	r2, r3, #3
 8000390:	4613      	mov	r3, r2
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	4413      	add	r3, r2
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	1aca      	subs	r2, r1, r3
 800039a:	b2d2      	uxtb	r2, r2
 800039c:	4b6f      	ldr	r3, [pc, #444]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 800039e:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100) % 10;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	3304      	adds	r3, #4
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a6e      	ldr	r2, [pc, #440]	@ (8000560 <SevenSegLEDsHandler+0x2e4>)
 80003a8:	fba2 2303 	umull	r2, r3, r2, r3
 80003ac:	0959      	lsrs	r1, r3, #5
 80003ae:	4b6a      	ldr	r3, [pc, #424]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 80003b0:	fba3 2301 	umull	r2, r3, r3, r1
 80003b4:	08da      	lsrs	r2, r3, #3
 80003b6:	4613      	mov	r3, r2
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	4413      	add	r3, r2
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	1aca      	subs	r2, r1, r3
 80003c0:	b2d2      	uxtb	r2, r2
 80003c2:	4b66      	ldr	r3, [pc, #408]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 80003c4:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100) % 10;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	3308      	adds	r3, #8
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a64      	ldr	r2, [pc, #400]	@ (8000560 <SevenSegLEDsHandler+0x2e4>)
 80003ce:	fba2 2303 	umull	r2, r3, r2, r3
 80003d2:	0959      	lsrs	r1, r3, #5
 80003d4:	4b60      	ldr	r3, [pc, #384]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 80003d6:	fba3 2301 	umull	r2, r3, r3, r1
 80003da:	08da      	lsrs	r2, r3, #3
 80003dc:	4613      	mov	r3, r2
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	4413      	add	r3, r2
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	1aca      	subs	r2, r1, r3
 80003e6:	b2d2      	uxtb	r2, r2
 80003e8:	4b5c      	ldr	r3, [pc, #368]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 80003ea:	709a      	strb	r2, [r3, #2]
            break;
 80003ec:	e0ad      	b.n	800054a <SevenSegLEDsHandler+0x2ce>
        case 3:
            output[0] = (buffer[0] / 1000) % 10;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a5c      	ldr	r2, [pc, #368]	@ (8000564 <SevenSegLEDsHandler+0x2e8>)
 80003f4:	fba2 2303 	umull	r2, r3, r2, r3
 80003f8:	0999      	lsrs	r1, r3, #6
 80003fa:	4b57      	ldr	r3, [pc, #348]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 80003fc:	fba3 2301 	umull	r2, r3, r3, r1
 8000400:	08da      	lsrs	r2, r3, #3
 8000402:	4613      	mov	r3, r2
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	4413      	add	r3, r2
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	1aca      	subs	r2, r1, r3
 800040c:	b2d2      	uxtb	r2, r2
 800040e:	4b53      	ldr	r3, [pc, #332]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 8000410:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 1000) % 10;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	3304      	adds	r3, #4
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a52      	ldr	r2, [pc, #328]	@ (8000564 <SevenSegLEDsHandler+0x2e8>)
 800041a:	fba2 2303 	umull	r2, r3, r2, r3
 800041e:	0999      	lsrs	r1, r3, #6
 8000420:	4b4d      	ldr	r3, [pc, #308]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 8000422:	fba3 2301 	umull	r2, r3, r3, r1
 8000426:	08da      	lsrs	r2, r3, #3
 8000428:	4613      	mov	r3, r2
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	4413      	add	r3, r2
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	1aca      	subs	r2, r1, r3
 8000432:	b2d2      	uxtb	r2, r2
 8000434:	4b49      	ldr	r3, [pc, #292]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 8000436:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 1000) % 10;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	3308      	adds	r3, #8
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a49      	ldr	r2, [pc, #292]	@ (8000564 <SevenSegLEDsHandler+0x2e8>)
 8000440:	fba2 2303 	umull	r2, r3, r2, r3
 8000444:	0999      	lsrs	r1, r3, #6
 8000446:	4b44      	ldr	r3, [pc, #272]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 8000448:	fba3 2301 	umull	r2, r3, r3, r1
 800044c:	08da      	lsrs	r2, r3, #3
 800044e:	4613      	mov	r3, r2
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4413      	add	r3, r2
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	1aca      	subs	r2, r1, r3
 8000458:	b2d2      	uxtb	r2, r2
 800045a:	4b40      	ldr	r3, [pc, #256]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 800045c:	709a      	strb	r2, [r3, #2]
            break;
 800045e:	e074      	b.n	800054a <SevenSegLEDsHandler+0x2ce>
        case 4:
            output[0] = (buffer[0] / 10000) % 10;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a40      	ldr	r2, [pc, #256]	@ (8000568 <SevenSegLEDsHandler+0x2ec>)
 8000466:	fba2 2303 	umull	r2, r3, r2, r3
 800046a:	0b59      	lsrs	r1, r3, #13
 800046c:	4b3a      	ldr	r3, [pc, #232]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 800046e:	fba3 2301 	umull	r2, r3, r3, r1
 8000472:	08da      	lsrs	r2, r3, #3
 8000474:	4613      	mov	r3, r2
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	4413      	add	r3, r2
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	1aca      	subs	r2, r1, r3
 800047e:	b2d2      	uxtb	r2, r2
 8000480:	4b36      	ldr	r3, [pc, #216]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 8000482:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10000) % 10;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3304      	adds	r3, #4
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a37      	ldr	r2, [pc, #220]	@ (8000568 <SevenSegLEDsHandler+0x2ec>)
 800048c:	fba2 2303 	umull	r2, r3, r2, r3
 8000490:	0b59      	lsrs	r1, r3, #13
 8000492:	4b31      	ldr	r3, [pc, #196]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 8000494:	fba3 2301 	umull	r2, r3, r3, r1
 8000498:	08da      	lsrs	r2, r3, #3
 800049a:	4613      	mov	r3, r2
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	4413      	add	r3, r2
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	1aca      	subs	r2, r1, r3
 80004a4:	b2d2      	uxtb	r2, r2
 80004a6:	4b2d      	ldr	r3, [pc, #180]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 80004a8:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10000) % 10;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	3308      	adds	r3, #8
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a2d      	ldr	r2, [pc, #180]	@ (8000568 <SevenSegLEDsHandler+0x2ec>)
 80004b2:	fba2 2303 	umull	r2, r3, r2, r3
 80004b6:	0b59      	lsrs	r1, r3, #13
 80004b8:	4b27      	ldr	r3, [pc, #156]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 80004ba:	fba3 2301 	umull	r2, r3, r3, r1
 80004be:	08da      	lsrs	r2, r3, #3
 80004c0:	4613      	mov	r3, r2
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	4413      	add	r3, r2
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	1aca      	subs	r2, r1, r3
 80004ca:	b2d2      	uxtb	r2, r2
 80004cc:	4b23      	ldr	r3, [pc, #140]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 80004ce:	709a      	strb	r2, [r3, #2]
            break;
 80004d0:	e03b      	b.n	800054a <SevenSegLEDsHandler+0x2ce>
        case 5:
            output[0] = (buffer[0] / 100000) % 10;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	095b      	lsrs	r3, r3, #5
 80004d8:	4a24      	ldr	r2, [pc, #144]	@ (800056c <SevenSegLEDsHandler+0x2f0>)
 80004da:	fba2 2303 	umull	r2, r3, r2, r3
 80004de:	09d9      	lsrs	r1, r3, #7
 80004e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 80004e2:	fba3 2301 	umull	r2, r3, r3, r1
 80004e6:	08da      	lsrs	r2, r3, #3
 80004e8:	4613      	mov	r3, r2
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	4413      	add	r3, r2
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	1aca      	subs	r2, r1, r3
 80004f2:	b2d2      	uxtb	r2, r2
 80004f4:	4b19      	ldr	r3, [pc, #100]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 80004f6:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100000) % 10;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	3304      	adds	r3, #4
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	095b      	lsrs	r3, r3, #5
 8000500:	4a1a      	ldr	r2, [pc, #104]	@ (800056c <SevenSegLEDsHandler+0x2f0>)
 8000502:	fba2 2303 	umull	r2, r3, r2, r3
 8000506:	09d9      	lsrs	r1, r3, #7
 8000508:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 800050a:	fba3 2301 	umull	r2, r3, r3, r1
 800050e:	08da      	lsrs	r2, r3, #3
 8000510:	4613      	mov	r3, r2
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	4413      	add	r3, r2
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	1aca      	subs	r2, r1, r3
 800051a:	b2d2      	uxtb	r2, r2
 800051c:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 800051e:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100000) % 10;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	3308      	adds	r3, #8
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	095b      	lsrs	r3, r3, #5
 8000528:	4a10      	ldr	r2, [pc, #64]	@ (800056c <SevenSegLEDsHandler+0x2f0>)
 800052a:	fba2 2303 	umull	r2, r3, r2, r3
 800052e:	09d9      	lsrs	r1, r3, #7
 8000530:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <SevenSegLEDsHandler+0x2dc>)
 8000532:	fba3 2301 	umull	r2, r3, r3, r1
 8000536:	08da      	lsrs	r2, r3, #3
 8000538:	4613      	mov	r3, r2
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	4413      	add	r3, r2
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	1aca      	subs	r2, r1, r3
 8000542:	b2d2      	uxtb	r2, r2
 8000544:	4b05      	ldr	r3, [pc, #20]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
 8000546:	709a      	strb	r2, [r3, #2]
            break;
 8000548:	bf00      	nop
    }
    return output;
 800054a:	4b04      	ldr	r3, [pc, #16]	@ (800055c <SevenSegLEDsHandler+0x2e0>)
}
 800054c:	4618      	mov	r0, r3
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	cccccccd 	.word	0xcccccccd
 800055c:	20000154 	.word	0x20000154
 8000560:	51eb851f 	.word	0x51eb851f
 8000564:	10624dd3 	.word	0x10624dd3
 8000568:	d1b71759 	.word	0xd1b71759
 800056c:	0a7c5ac5 	.word	0x0a7c5ac5

08000570 <SevenSegLEDsScan>:

void SevenSegLEDsScan(){
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
	uint8_t* curr_digit=SevenSegLEDsHandler(SevenSegBuffer,SevenSegScanState);
 8000576:	4b32      	ldr	r3, [pc, #200]	@ (8000640 <SevenSegLEDsScan+0xd0>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	4619      	mov	r1, r3
 800057c:	4831      	ldr	r0, [pc, #196]	@ (8000644 <SevenSegLEDsScan+0xd4>)
 800057e:	f7ff fe7d 	bl	800027c <SevenSegLEDsHandler>
 8000582:	60b8      	str	r0, [r7, #8]
	uint8_t curr_scan;
	switch (SevenSegScanState) {
 8000584:	4b2e      	ldr	r3, [pc, #184]	@ (8000640 <SevenSegLEDsScan+0xd0>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b05      	cmp	r3, #5
 800058a:	d833      	bhi.n	80005f4 <SevenSegLEDsScan+0x84>
 800058c:	a201      	add	r2, pc, #4	@ (adr r2, 8000594 <SevenSegLEDsScan+0x24>)
 800058e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000592:	bf00      	nop
 8000594:	080005ad 	.word	0x080005ad
 8000598:	080005b9 	.word	0x080005b9
 800059c:	080005c5 	.word	0x080005c5
 80005a0:	080005d1 	.word	0x080005d1
 80005a4:	080005dd 	.word	0x080005dd
 80005a8:	080005e9 	.word	0x080005e9
		case 0:
			curr_scan=0b00100000;
 80005ac:	2320      	movs	r3, #32
 80005ae:	73fb      	strb	r3, [r7, #15]
			SevenSegScanState=1;
 80005b0:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <SevenSegLEDsScan+0xd0>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	701a      	strb	r2, [r3, #0]
			break;
 80005b6:	e023      	b.n	8000600 <SevenSegLEDsScan+0x90>
		case 1:
			curr_scan=0b00010000;
 80005b8:	2310      	movs	r3, #16
 80005ba:	73fb      	strb	r3, [r7, #15]
			SevenSegScanState=2;
 80005bc:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <SevenSegLEDsScan+0xd0>)
 80005be:	2202      	movs	r2, #2
 80005c0:	701a      	strb	r2, [r3, #0]
			break;
 80005c2:	e01d      	b.n	8000600 <SevenSegLEDsScan+0x90>
		case 2:
			curr_scan=0b00001000;
 80005c4:	2308      	movs	r3, #8
 80005c6:	73fb      	strb	r3, [r7, #15]
			SevenSegScanState=3;
 80005c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000640 <SevenSegLEDsScan+0xd0>)
 80005ca:	2203      	movs	r2, #3
 80005cc:	701a      	strb	r2, [r3, #0]
			break;
 80005ce:	e017      	b.n	8000600 <SevenSegLEDsScan+0x90>
		case 3:
			curr_scan=0b00000100;
 80005d0:	2304      	movs	r3, #4
 80005d2:	73fb      	strb	r3, [r7, #15]
			SevenSegScanState=4;
 80005d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000640 <SevenSegLEDsScan+0xd0>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	701a      	strb	r2, [r3, #0]
			break;
 80005da:	e011      	b.n	8000600 <SevenSegLEDsScan+0x90>
		case 4:
			curr_scan=0b00000010;
 80005dc:	2302      	movs	r3, #2
 80005de:	73fb      	strb	r3, [r7, #15]
			SevenSegScanState=5;
 80005e0:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <SevenSegLEDsScan+0xd0>)
 80005e2:	2205      	movs	r2, #5
 80005e4:	701a      	strb	r2, [r3, #0]
			break;
 80005e6:	e00b      	b.n	8000600 <SevenSegLEDsScan+0x90>
		case 5:
			curr_scan=0b00000001;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
			SevenSegScanState=0;
 80005ec:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <SevenSegLEDsScan+0xd0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
			break;
 80005f2:	e005      	b.n	8000600 <SevenSegLEDsScan+0x90>
		default:
			curr_scan=0b00000001;
 80005f4:	2301      	movs	r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
			SevenSegScanState=0;
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <SevenSegLEDsScan+0xd0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
			break;
 80005fe:	bf00      	nop
	}
	uint8_t led_buffer[]={curr_scan,digitMap[curr_digit[2]],digitMap[curr_digit[1]],digitMap[curr_digit[0]]};
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	713b      	strb	r3, [r7, #4]
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	3302      	adds	r3, #2
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <SevenSegLEDsScan+0xd8>)
 800060e:	5c9b      	ldrb	r3, [r3, r2]
 8000610:	717b      	strb	r3, [r7, #5]
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	3301      	adds	r3, #1
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	4b0b      	ldr	r3, [pc, #44]	@ (8000648 <SevenSegLEDsScan+0xd8>)
 800061c:	5c9b      	ldrb	r3, [r3, r2]
 800061e:	71bb      	strb	r3, [r7, #6]
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <SevenSegLEDsScan+0xd8>)
 8000628:	5c9b      	ldrb	r3, [r3, r2]
 800062a:	71fb      	strb	r3, [r7, #7]
	ShiftOut_SPI(led_buffer, 4);
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2104      	movs	r1, #4
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fde1 	bl	80001f8 <ShiftOut_SPI>
}
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000150 	.word	0x20000150
 8000644:	20000018 	.word	0x20000018
 8000648:	20000000 	.word	0x20000000

0800064c <Num_Buff_Conv>:


uint8_t* Num_Buff_Conv(uint32_t num) {
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    // Ensure the number is within the valid range
    if (num > 99999999) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a15      	ldr	r2, [pc, #84]	@ (80006ac <Num_Buff_Conv+0x60>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d901      	bls.n	8000660 <Num_Buff_Conv+0x14>
        return NULL; // Return NULL for invalid input
 800065c:	2300      	movs	r3, #0
 800065e:	e020      	b.n	80006a2 <Num_Buff_Conv+0x56>
    }

    static uint8_t output[8]; // Static array to hold the result
    for (int i = 0; i < 8; i++) {
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	e019      	b.n	800069a <Num_Buff_Conv+0x4e>
        output[i] = digitMapWithDP[num % 10]; // Get the least significant digit
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <Num_Buff_Conv+0x64>)
 800066a:	fba3 2301 	umull	r2, r3, r3, r1
 800066e:	08da      	lsrs	r2, r3, #3
 8000670:	4613      	mov	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	1aca      	subs	r2, r1, r3
 800067a:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <Num_Buff_Conv+0x68>)
 800067c:	5c99      	ldrb	r1, [r3, r2]
 800067e:	4a0e      	ldr	r2, [pc, #56]	@ (80006b8 <Num_Buff_Conv+0x6c>)
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	4413      	add	r3, r2
 8000684:	460a      	mov	r2, r1
 8000686:	701a      	strb	r2, [r3, #0]
        num /= 10;            // Remove the least significant digit from the number
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a09      	ldr	r2, [pc, #36]	@ (80006b0 <Num_Buff_Conv+0x64>)
 800068c:	fba2 2303 	umull	r2, r3, r2, r3
 8000690:	08db      	lsrs	r3, r3, #3
 8000692:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 8; i++) {
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	3301      	adds	r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	2b07      	cmp	r3, #7
 800069e:	dde2      	ble.n	8000666 <Num_Buff_Conv+0x1a>
    }

    return output;
 80006a0:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <Num_Buff_Conv+0x6c>)
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	05f5e0ff 	.word	0x05f5e0ff
 80006b0:	cccccccd 	.word	0xcccccccd
 80006b4:	2000000c 	.word	0x2000000c
 80006b8:	20000158 	.word	0x20000158

080006bc <Update_LCD>:

void Update_LCD(uint32_t num){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	uint8_t* buffer=Num_Buff_Conv(num);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff ffc1 	bl	800064c <Num_Buff_Conv>
 80006ca:	60f8      	str	r0, [r7, #12]
	if(buffer==NULL){
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d004      	beq.n	80006dc <Update_LCD+0x20>
		return;
	}
	ShiftOut_LCD(buffer,8);
 80006d2:	2108      	movs	r1, #8
 80006d4:	68f8      	ldr	r0, [r7, #12]
 80006d6:	f7ff fdb1 	bl	800023c <ShiftOut_LCD>
 80006da:	e000      	b.n	80006de <Update_LCD+0x22>
		return;
 80006dc:	bf00      	nop
}
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ea:	f000 fb6f 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f88b 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f000 f97d 	bl	80009f0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80006f6:	f000 f8f9 	bl	80008ec <MX_SPI2_Init>
  MX_TIM2_Init();
 80006fa:	f000 f92d 	bl	8000958 <MX_TIM2_Init>
  MX_SPI1_Init();
 80006fe:	f000 f8bf 	bl	8000880 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000702:	483a      	ldr	r0, [pc, #232]	@ (80007ec <main+0x108>)
 8000704:	f001 fd22 	bl	800214c <HAL_TIM_Base_Start_IT>
  setTimer(0,100);
 8000708:	2164      	movs	r1, #100	@ 0x64
 800070a:	2000      	movs	r0, #0
 800070c:	f000 faf0 	bl	8000cf0 <setTimer>
  setTimer(1,100);
 8000710:	2164      	movs	r1, #100	@ 0x64
 8000712:	2001      	movs	r0, #1
 8000714:	f000 faec 	bl	8000cf0 <setTimer>
  setTimer(2,100);
 8000718:	2164      	movs	r1, #100	@ 0x64
 800071a:	2002      	movs	r0, #2
 800071c:	f000 fae8 	bl	8000cf0 <setTimer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {
	  // TIMER 0 /////////////////////////////////////
	  if(timer_flag[0]==1){
 8000720:	4b33      	ldr	r3, [pc, #204]	@ (80007f0 <main+0x10c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d105      	bne.n	8000734 <main+0x50>

		  SevenSegLEDsScan();
 8000728:	f7ff ff22 	bl	8000570 <SevenSegLEDsScan>
		  setTimer(0,5);
 800072c:	2105      	movs	r1, #5
 800072e:	2000      	movs	r0, #0
 8000730:	f000 fade 	bl	8000cf0 <setTimer>
	  }

	  // TIMER 1 /////////////////////////////////////
	  if(timer_flag[1]==1){
 8000734:	4b2e      	ldr	r3, [pc, #184]	@ (80007f0 <main+0x10c>)
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d135      	bne.n	80007a8 <main+0xc4>
		  keyPressed = KeyPad_Scan();
 800073c:	f7ff fd06 	bl	800014c <KeyPad_Scan>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	4b2b      	ldr	r3, [pc, #172]	@ (80007f4 <main+0x110>)
 8000746:	701a      	strb	r2, [r3, #0]
		  if(keyPressed<10){
 8000748:	4b2a      	ldr	r3, [pc, #168]	@ (80007f4 <main+0x110>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b09      	cmp	r3, #9
 800074e:	d817      	bhi.n	8000780 <main+0x9c>
			  uint32_t temp=lcd_num*10+keyPressed;
 8000750:	4b29      	ldr	r3, [pc, #164]	@ (80007f8 <main+0x114>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4613      	mov	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	461a      	mov	r2, r3
 800075e:	4b25      	ldr	r3, [pc, #148]	@ (80007f4 <main+0x110>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4413      	add	r3, r2
 8000764:	60bb      	str	r3, [r7, #8]
			  if(temp<=99999999){
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	4a24      	ldr	r2, [pc, #144]	@ (80007fc <main+0x118>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d818      	bhi.n	80007a0 <main+0xbc>
				  lcd_num=temp;
 800076e:	4a22      	ldr	r2, [pc, #136]	@ (80007f8 <main+0x114>)
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	6013      	str	r3, [r2, #0]
				  Update_LCD(lcd_num);
 8000774:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <main+0x114>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff9f 	bl	80006bc <Update_LCD>
 800077e:	e00f      	b.n	80007a0 <main+0xbc>
			  }
		  }
		  else if(keyPressed>=10 &&keyPressed<100){
 8000780:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <main+0x110>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b09      	cmp	r3, #9
 8000786:	d90b      	bls.n	80007a0 <main+0xbc>
 8000788:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <main+0x110>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b63      	cmp	r3, #99	@ 0x63
 800078e:	d807      	bhi.n	80007a0 <main+0xbc>
			  lcd_num=0;
 8000790:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <main+0x114>)
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
			  Update_LCD(lcd_num);
 8000796:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <main+0x114>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff8e 	bl	80006bc <Update_LCD>
		  }
		  setTimer(1,10);
 80007a0:	210a      	movs	r1, #10
 80007a2:	2001      	movs	r0, #1
 80007a4:	f000 faa4 	bl	8000cf0 <setTimer>
	  }

	  // TIMER 2 /////////////////////////////////////
	  if(timer_flag[2]==1){
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <main+0x10c>)
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d1b7      	bne.n	8000720 <main+0x3c>
		  for(int i=0;i<3;i++){
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	e011      	b.n	80007da <main+0xf6>
			  uint32_t temp=SevenSegBuffer[i]+1;
 80007b6:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <main+0x11c>)
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007be:	3301      	adds	r3, #1
 80007c0:	607b      	str	r3, [r7, #4]
			  if(temp<=999999){
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000804 <main+0x120>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d804      	bhi.n	80007d4 <main+0xf0>
				  SevenSegBuffer[i]=temp;
 80007ca:	490d      	ldr	r1, [pc, #52]	@ (8000800 <main+0x11c>)
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for(int i=0;i<3;i++){
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	3301      	adds	r3, #1
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2b02      	cmp	r3, #2
 80007de:	ddea      	ble.n	80007b6 <main+0xd2>
			  }
		  }
		  setTimer(2,100);
 80007e0:	2164      	movs	r1, #100	@ 0x64
 80007e2:	2002      	movs	r0, #2
 80007e4:	f000 fa84 	bl	8000cf0 <setTimer>
	  if(timer_flag[0]==1){
 80007e8:	e79a      	b.n	8000720 <main+0x3c>
 80007ea:	bf00      	nop
 80007ec:	20000104 	.word	0x20000104
 80007f0:	20000188 	.word	0x20000188
 80007f4:	20000024 	.word	0x20000024
 80007f8:	2000014c 	.word	0x2000014c
 80007fc:	05f5e0ff 	.word	0x05f5e0ff
 8000800:	20000018 	.word	0x20000018
 8000804:	000f423f 	.word	0x000f423f

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b090      	sub	sp, #64	@ 0x40
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	2228      	movs	r2, #40	@ 0x28
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f002 f846 	bl	80028a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082a:	2302      	movs	r3, #2
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082e:	2301      	movs	r3, #1
 8000830:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000832:	2310      	movs	r3, #16
 8000834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000836:	2300      	movs	r3, #0
 8000838:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fde8 	bl	8001414 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800084a:	f000 f94b 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f001 f856 	bl	8001918 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000872:	f000 f937 	bl	8000ae4 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3740      	adds	r7, #64	@ 0x40
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000884:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_SPI1_Init+0x64>)
 8000886:	4a18      	ldr	r2, [pc, #96]	@ (80008e8 <MX_SPI1_Init+0x68>)
 8000888:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800088a:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <MX_SPI1_Init+0x64>)
 800088c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000890:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000892:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_SPI1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_SPI1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008cc:	220a      	movs	r2, #10
 80008ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008d2:	f001 f97d 	bl	8001bd0 <HAL_SPI_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008dc:	f000 f902 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000054 	.word	0x20000054
 80008e8:	40013000 	.word	0x40013000

080008ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008f0:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <MX_SPI2_Init+0x64>)
 80008f2:	4a18      	ldr	r2, [pc, #96]	@ (8000954 <MX_SPI2_Init+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008f6:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <MX_SPI2_Init+0x64>)
 80008f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_SPI2_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <MX_SPI2_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_SPI2_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_SPI2_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_SPI2_Init+0x64>)
 8000918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800091c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800091e:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_SPI2_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000924:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <MX_SPI2_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800092a:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_SPI2_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <MX_SPI2_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000936:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_SPI2_Init+0x64>)
 8000938:	220a      	movs	r2, #10
 800093a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	@ (8000950 <MX_SPI2_Init+0x64>)
 800093e:	f001 f947 	bl	8001bd0 <HAL_SPI_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000948:	f000 f8cc 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200000ac 	.word	0x200000ac
 8000954:	40003800 	.word	0x40003800

08000958 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096c:	463b      	mov	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000974:	4b1d      	ldr	r3, [pc, #116]	@ (80009ec <MX_TIM2_Init+0x94>)
 8000976:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800097a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800097c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <MX_TIM2_Init+0x94>)
 800097e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000982:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000984:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <MX_TIM2_Init+0x94>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800098a:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <MX_TIM2_Init+0x94>)
 800098c:	2209      	movs	r2, #9
 800098e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000990:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <MX_TIM2_Init+0x94>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <MX_TIM2_Init+0x94>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800099c:	4813      	ldr	r0, [pc, #76]	@ (80009ec <MX_TIM2_Init+0x94>)
 800099e:	f001 fb85 	bl	80020ac <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009a8:	f000 f89c 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	4619      	mov	r1, r3
 80009b8:	480c      	ldr	r0, [pc, #48]	@ (80009ec <MX_TIM2_Init+0x94>)
 80009ba:	f001 fd21 	bl	8002400 <HAL_TIM_ConfigClockSource>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009c4:	f000 f88e 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_TIM2_Init+0x94>)
 80009d6:	f001 fef7 	bl	80027c8 <HAL_TIMEx_MasterConfigSynchronization>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009e0:	f000 f880 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000104 	.word	0x20000104

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a2e      	ldr	r2, [pc, #184]	@ (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0304 	and.w	r3, r3, #4
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1c:	4b29      	ldr	r3, [pc, #164]	@ (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a28      	ldr	r2, [pc, #160]	@ (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a22:	f043 0308 	orr.w	r3, r3, #8
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0308 	and.w	r3, r3, #8
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2140      	movs	r1, #64	@ 0x40
 8000a38:	4823      	ldr	r0, [pc, #140]	@ (8000ac8 <MX_GPIO_Init+0xd8>)
 8000a3a:	f000 fcd2 	bl	80013e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8000a44:	4821      	ldr	r0, [pc, #132]	@ (8000acc <MX_GPIO_Init+0xdc>)
 8000a46:	f000 fccc 	bl	80013e2 <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Latch_SPI1_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin;
 8000a4a:	2340      	movs	r3, #64	@ 0x40
 8000a4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2302      	movs	r3, #2
 8000a58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI1_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4819      	ldr	r0, [pc, #100]	@ (8000ac8 <MX_GPIO_Init+0xd8>)
 8000a62:	f000 fb23 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8000a66:	231f      	movs	r3, #31
 8000a68:	60bb      	str	r3, [r7, #8]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	4619      	mov	r1, r3
 8000a78:	4814      	ldr	r0, [pc, #80]	@ (8000acc <MX_GPIO_Init+0xdc>)
 8000a7a:	f000 fb17 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Latch_SPI_Pin */
  GPIO_InitStruct.Pin = Latch_SPI_Pin;
 8000a7e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	4619      	mov	r1, r3
 8000a96:	480d      	ldr	r0, [pc, #52]	@ (8000acc <MX_GPIO_Init+0xdc>)
 8000a98:	f000 fb08 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin OUT2_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin;
 8000a9c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000aa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	@ (8000acc <MX_GPIO_Init+0xdc>)
 8000ab6:	f000 faf9 	bl	80010ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aba:	bf00      	nop
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40010800 	.word	0x40010800
 8000acc:	40010c00 	.word	0x40010c00

08000ad0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	timerRun();
 8000ad8:	f000 f922 	bl	8000d20 <timerRun>

}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <Error_Handler+0x8>

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <HAL_MspInit+0x5c>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	4a14      	ldr	r2, [pc, #80]	@ (8000b4c <HAL_MspInit+0x5c>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6193      	str	r3, [r2, #24]
 8000b02:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <HAL_MspInit+0x5c>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <HAL_MspInit+0x5c>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a0e      	ldr	r2, [pc, #56]	@ (8000b4c <HAL_MspInit+0x5c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b18:	61d3      	str	r3, [r2, #28]
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <HAL_MspInit+0x5c>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b26:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <HAL_MspInit+0x60>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <HAL_MspInit+0x60>)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010000 	.word	0x40010000

08000b54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	@ 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8000c1c <HAL_SPI_MspInit+0xc8>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d124      	bne.n	8000bbe <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b74:	4b2a      	ldr	r3, [pc, #168]	@ (8000c20 <HAL_SPI_MspInit+0xcc>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a29      	ldr	r2, [pc, #164]	@ (8000c20 <HAL_SPI_MspInit+0xcc>)
 8000b7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <HAL_SPI_MspInit+0xcc>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <HAL_SPI_MspInit+0xcc>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a23      	ldr	r2, [pc, #140]	@ (8000c20 <HAL_SPI_MspInit+0xcc>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b21      	ldr	r3, [pc, #132]	@ (8000c20 <HAL_SPI_MspInit+0xcc>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ba4:	23a0      	movs	r3, #160	@ 0xa0
 8000ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0318 	add.w	r3, r7, #24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481b      	ldr	r0, [pc, #108]	@ (8000c24 <HAL_SPI_MspInit+0xd0>)
 8000bb8:	f000 fa78 	bl	80010ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bbc:	e029      	b.n	8000c12 <HAL_SPI_MspInit+0xbe>
  else if(hspi->Instance==SPI2)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a19      	ldr	r2, [pc, #100]	@ (8000c28 <HAL_SPI_MspInit+0xd4>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d124      	bne.n	8000c12 <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bc8:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <HAL_SPI_MspInit+0xcc>)
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	4a14      	ldr	r2, [pc, #80]	@ (8000c20 <HAL_SPI_MspInit+0xcc>)
 8000bce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bd2:	61d3      	str	r3, [r2, #28]
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_SPI_MspInit+0xcc>)
 8000bd6:	69db      	ldr	r3, [r3, #28]
 8000bd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <HAL_SPI_MspInit+0xcc>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a0e      	ldr	r2, [pc, #56]	@ (8000c20 <HAL_SPI_MspInit+0xcc>)
 8000be6:	f043 0308 	orr.w	r3, r3, #8
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <HAL_SPI_MspInit+0xcc>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000bf8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4807      	ldr	r0, [pc, #28]	@ (8000c2c <HAL_SPI_MspInit+0xd8>)
 8000c0e:	f000 fa4d 	bl	80010ac <HAL_GPIO_Init>
}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	@ 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40013000 	.word	0x40013000
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40010800 	.word	0x40010800
 8000c28:	40003800 	.word	0x40003800
 8000c2c:	40010c00 	.word	0x40010c00

08000c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c40:	d113      	bne.n	8000c6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c42:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <HAL_TIM_Base_MspInit+0x44>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	4a0b      	ldr	r2, [pc, #44]	@ (8000c74 <HAL_TIM_Base_MspInit+0x44>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	61d3      	str	r3, [r2, #28]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <HAL_TIM_Base_MspInit+0x44>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	201c      	movs	r0, #28
 8000c60:	f000 f9ed 	bl	800103e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c64:	201c      	movs	r0, #28
 8000c66:	f000 fa06 	bl	8001076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <NMI_Handler+0x4>

08000c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <MemManage_Handler+0x4>

08000c90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <UsageFault_Handler+0x4>

08000ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f8c6 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cd4:	4802      	ldr	r0, [pc, #8]	@ (8000ce0 <TIM2_IRQHandler+0x10>)
 8000cd6:	f001 fa8b 	bl	80021f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000104 	.word	0x20000104

08000ce4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <setTimer>:

#define TIMERNUM 10
int timer_counter[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};
int timer_flag[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};

void setTimer(int INDEX,int duration){
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
	timer_counter[INDEX]=duration;
 8000cfa:	4907      	ldr	r1, [pc, #28]	@ (8000d18 <setTimer+0x28>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	683a      	ldr	r2, [r7, #0]
 8000d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[INDEX]=0;
 8000d04:	4a05      	ldr	r2, [pc, #20]	@ (8000d1c <setTimer+0x2c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2100      	movs	r1, #0
 8000d0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	20000160 	.word	0x20000160
 8000d1c:	20000188 	.word	0x20000188

08000d20 <timerRun>:

void timerRun(){
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
	for(int i=0;i<TIMERNUM;i++){
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	e01c      	b.n	8000d66 <timerRun+0x46>
		if(timer_counter[i] > 0){
 8000d2c:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <timerRun+0x58>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	dd13      	ble.n	8000d60 <timerRun+0x40>
			timer_counter[i]--;
 8000d38:	4a0f      	ldr	r2, [pc, #60]	@ (8000d78 <timerRun+0x58>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d40:	1e5a      	subs	r2, r3, #1
 8000d42:	490d      	ldr	r1, [pc, #52]	@ (8000d78 <timerRun+0x58>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <=0){
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d78 <timerRun+0x58>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	dc04      	bgt.n	8000d60 <timerRun+0x40>
				timer_flag[i]=1;
 8000d56:	4a09      	ldr	r2, [pc, #36]	@ (8000d7c <timerRun+0x5c>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<TIMERNUM;i++){
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3301      	adds	r3, #1
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b09      	cmp	r3, #9
 8000d6a:	dddf      	ble.n	8000d2c <timerRun+0xc>
			}
		}
	}
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	20000160 	.word	0x20000160
 8000d7c:	20000188 	.word	0x20000188

08000d80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d80:	f7ff ffb0 	bl	8000ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d84:	480b      	ldr	r0, [pc, #44]	@ (8000db4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d86:	490c      	ldr	r1, [pc, #48]	@ (8000db8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d88:	4a0c      	ldr	r2, [pc, #48]	@ (8000dbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a09      	ldr	r2, [pc, #36]	@ (8000dc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d9c:	4c09      	ldr	r4, [pc, #36]	@ (8000dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000daa:	f001 fd85 	bl	80028b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dae:	f7ff fc99 	bl	80006e4 <main>
  bx lr
 8000db2:	4770      	bx	lr
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000dbc:	08002958 	.word	0x08002958
  ldr r2, =_sbss
 8000dc0:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000dc4:	200001b4 	.word	0x200001b4

08000dc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC1_2_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <HAL_Init+0x28>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <HAL_Init+0x28>)
 8000dd6:	f043 0310 	orr.w	r3, r3, #16
 8000dda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 f923 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de2:	200f      	movs	r0, #15
 8000de4:	f000 f808 	bl	8000df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de8:	f7ff fe82 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40022000 	.word	0x40022000

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HAL_InitTick+0x54>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_InitTick+0x58>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f93b 	bl	8001092 <HAL_SYSTICK_Config>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00e      	b.n	8000e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d80a      	bhi.n	8000e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f000 f903 	bl	800103e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e38:	4a06      	ldr	r2, [pc, #24]	@ (8000e54 <HAL_InitTick+0x5c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000028 	.word	0x20000028
 8000e50:	20000030 	.word	0x20000030
 8000e54:	2000002c 	.word	0x2000002c

08000e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <HAL_IncTick+0x1c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <HAL_IncTick+0x20>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a03      	ldr	r2, [pc, #12]	@ (8000e78 <HAL_IncTick+0x20>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	20000030 	.word	0x20000030
 8000e78:	200001b0 	.word	0x200001b0

08000e7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b02      	ldr	r3, [pc, #8]	@ (8000e8c <HAL_GetTick+0x10>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	200001b0 	.word	0x200001b0

08000e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	@ (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	60d3      	str	r3, [r2, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0b      	blt.n	8000f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f003 021f 	and.w	r2, r3, #31
 8000f0c:	4906      	ldr	r1, [pc, #24]	@ (8000f28 <__NVIC_EnableIRQ+0x34>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	2001      	movs	r0, #1
 8000f16:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	@ (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	@ (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	@ 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
         );
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	@ 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ff4:	d301      	bcc.n	8000ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00f      	b.n	800101a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <SysTick_Config+0x40>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001002:	210f      	movs	r1, #15
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f7ff ff90 	bl	8000f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <SysTick_Config+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	@ (8001024 <SysTick_Config+0x40>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff2d 	bl	8000e90 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff42 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ff90 	bl	8000f80 <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff5f 	bl	8000f2c <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff35 	bl	8000ef4 <__NVIC_EnableIRQ>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffa2 	bl	8000fe4 <SysTick_Config>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b08b      	sub	sp, #44	@ 0x2c
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010be:	e169      	b.n	8001394 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010c0:	2201      	movs	r2, #1
 80010c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	429a      	cmp	r2, r3
 80010da:	f040 8158 	bne.w	800138e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	4a9a      	ldr	r2, [pc, #616]	@ (800134c <HAL_GPIO_Init+0x2a0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d05e      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
 80010e8:	4a98      	ldr	r2, [pc, #608]	@ (800134c <HAL_GPIO_Init+0x2a0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d875      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 80010ee:	4a98      	ldr	r2, [pc, #608]	@ (8001350 <HAL_GPIO_Init+0x2a4>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d058      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
 80010f4:	4a96      	ldr	r2, [pc, #600]	@ (8001350 <HAL_GPIO_Init+0x2a4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d86f      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 80010fa:	4a96      	ldr	r2, [pc, #600]	@ (8001354 <HAL_GPIO_Init+0x2a8>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d052      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
 8001100:	4a94      	ldr	r2, [pc, #592]	@ (8001354 <HAL_GPIO_Init+0x2a8>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d869      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 8001106:	4a94      	ldr	r2, [pc, #592]	@ (8001358 <HAL_GPIO_Init+0x2ac>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d04c      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
 800110c:	4a92      	ldr	r2, [pc, #584]	@ (8001358 <HAL_GPIO_Init+0x2ac>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d863      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 8001112:	4a92      	ldr	r2, [pc, #584]	@ (800135c <HAL_GPIO_Init+0x2b0>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d046      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
 8001118:	4a90      	ldr	r2, [pc, #576]	@ (800135c <HAL_GPIO_Init+0x2b0>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d85d      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 800111e:	2b12      	cmp	r3, #18
 8001120:	d82a      	bhi.n	8001178 <HAL_GPIO_Init+0xcc>
 8001122:	2b12      	cmp	r3, #18
 8001124:	d859      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 8001126:	a201      	add	r2, pc, #4	@ (adr r2, 800112c <HAL_GPIO_Init+0x80>)
 8001128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112c:	080011a7 	.word	0x080011a7
 8001130:	08001181 	.word	0x08001181
 8001134:	08001193 	.word	0x08001193
 8001138:	080011d5 	.word	0x080011d5
 800113c:	080011db 	.word	0x080011db
 8001140:	080011db 	.word	0x080011db
 8001144:	080011db 	.word	0x080011db
 8001148:	080011db 	.word	0x080011db
 800114c:	080011db 	.word	0x080011db
 8001150:	080011db 	.word	0x080011db
 8001154:	080011db 	.word	0x080011db
 8001158:	080011db 	.word	0x080011db
 800115c:	080011db 	.word	0x080011db
 8001160:	080011db 	.word	0x080011db
 8001164:	080011db 	.word	0x080011db
 8001168:	080011db 	.word	0x080011db
 800116c:	080011db 	.word	0x080011db
 8001170:	08001189 	.word	0x08001189
 8001174:	0800119d 	.word	0x0800119d
 8001178:	4a79      	ldr	r2, [pc, #484]	@ (8001360 <HAL_GPIO_Init+0x2b4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800117e:	e02c      	b.n	80011da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	623b      	str	r3, [r7, #32]
          break;
 8001186:	e029      	b.n	80011dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	3304      	adds	r3, #4
 800118e:	623b      	str	r3, [r7, #32]
          break;
 8001190:	e024      	b.n	80011dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	3308      	adds	r3, #8
 8001198:	623b      	str	r3, [r7, #32]
          break;
 800119a:	e01f      	b.n	80011dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	330c      	adds	r3, #12
 80011a2:	623b      	str	r3, [r7, #32]
          break;
 80011a4:	e01a      	b.n	80011dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011ae:	2304      	movs	r3, #4
 80011b0:	623b      	str	r3, [r7, #32]
          break;
 80011b2:	e013      	b.n	80011dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d105      	bne.n	80011c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011bc:	2308      	movs	r3, #8
 80011be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	611a      	str	r2, [r3, #16]
          break;
 80011c6:	e009      	b.n	80011dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c8:	2308      	movs	r3, #8
 80011ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	615a      	str	r2, [r3, #20]
          break;
 80011d2:	e003      	b.n	80011dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
          break;
 80011d8:	e000      	b.n	80011dc <HAL_GPIO_Init+0x130>
          break;
 80011da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2bff      	cmp	r3, #255	@ 0xff
 80011e0:	d801      	bhi.n	80011e6 <HAL_GPIO_Init+0x13a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	e001      	b.n	80011ea <HAL_GPIO_Init+0x13e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3304      	adds	r3, #4
 80011ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	2bff      	cmp	r3, #255	@ 0xff
 80011f0:	d802      	bhi.n	80011f8 <HAL_GPIO_Init+0x14c>
 80011f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	e002      	b.n	80011fe <HAL_GPIO_Init+0x152>
 80011f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fa:	3b08      	subs	r3, #8
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	210f      	movs	r1, #15
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	401a      	ands	r2, r3
 8001210:	6a39      	ldr	r1, [r7, #32]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	fa01 f303 	lsl.w	r3, r1, r3
 8001218:	431a      	orrs	r2, r3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 80b1 	beq.w	800138e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800122c:	4b4d      	ldr	r3, [pc, #308]	@ (8001364 <HAL_GPIO_Init+0x2b8>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a4c      	ldr	r2, [pc, #304]	@ (8001364 <HAL_GPIO_Init+0x2b8>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b4a      	ldr	r3, [pc, #296]	@ (8001364 <HAL_GPIO_Init+0x2b8>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001244:	4a48      	ldr	r2, [pc, #288]	@ (8001368 <HAL_GPIO_Init+0x2bc>)
 8001246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001250:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	220f      	movs	r2, #15
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4013      	ands	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a40      	ldr	r2, [pc, #256]	@ (800136c <HAL_GPIO_Init+0x2c0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d013      	beq.n	8001298 <HAL_GPIO_Init+0x1ec>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a3f      	ldr	r2, [pc, #252]	@ (8001370 <HAL_GPIO_Init+0x2c4>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d00d      	beq.n	8001294 <HAL_GPIO_Init+0x1e8>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a3e      	ldr	r2, [pc, #248]	@ (8001374 <HAL_GPIO_Init+0x2c8>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d007      	beq.n	8001290 <HAL_GPIO_Init+0x1e4>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a3d      	ldr	r2, [pc, #244]	@ (8001378 <HAL_GPIO_Init+0x2cc>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d101      	bne.n	800128c <HAL_GPIO_Init+0x1e0>
 8001288:	2303      	movs	r3, #3
 800128a:	e006      	b.n	800129a <HAL_GPIO_Init+0x1ee>
 800128c:	2304      	movs	r3, #4
 800128e:	e004      	b.n	800129a <HAL_GPIO_Init+0x1ee>
 8001290:	2302      	movs	r3, #2
 8001292:	e002      	b.n	800129a <HAL_GPIO_Init+0x1ee>
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <HAL_GPIO_Init+0x1ee>
 8001298:	2300      	movs	r3, #0
 800129a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800129c:	f002 0203 	and.w	r2, r2, #3
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	4093      	lsls	r3, r2
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012aa:	492f      	ldr	r1, [pc, #188]	@ (8001368 <HAL_GPIO_Init+0x2bc>)
 80012ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012c4:	4b2d      	ldr	r3, [pc, #180]	@ (800137c <HAL_GPIO_Init+0x2d0>)
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	492c      	ldr	r1, [pc, #176]	@ (800137c <HAL_GPIO_Init+0x2d0>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	608b      	str	r3, [r1, #8]
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012d2:	4b2a      	ldr	r3, [pc, #168]	@ (800137c <HAL_GPIO_Init+0x2d0>)
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	43db      	mvns	r3, r3
 80012da:	4928      	ldr	r1, [pc, #160]	@ (800137c <HAL_GPIO_Init+0x2d0>)
 80012dc:	4013      	ands	r3, r2
 80012de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012ec:	4b23      	ldr	r3, [pc, #140]	@ (800137c <HAL_GPIO_Init+0x2d0>)
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	4922      	ldr	r1, [pc, #136]	@ (800137c <HAL_GPIO_Init+0x2d0>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	60cb      	str	r3, [r1, #12]
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012fa:	4b20      	ldr	r3, [pc, #128]	@ (800137c <HAL_GPIO_Init+0x2d0>)
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	43db      	mvns	r3, r3
 8001302:	491e      	ldr	r1, [pc, #120]	@ (800137c <HAL_GPIO_Init+0x2d0>)
 8001304:	4013      	ands	r3, r2
 8001306:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d006      	beq.n	8001322 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001314:	4b19      	ldr	r3, [pc, #100]	@ (800137c <HAL_GPIO_Init+0x2d0>)
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4918      	ldr	r1, [pc, #96]	@ (800137c <HAL_GPIO_Init+0x2d0>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001322:	4b16      	ldr	r3, [pc, #88]	@ (800137c <HAL_GPIO_Init+0x2d0>)
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	43db      	mvns	r3, r3
 800132a:	4914      	ldr	r1, [pc, #80]	@ (800137c <HAL_GPIO_Init+0x2d0>)
 800132c:	4013      	ands	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d021      	beq.n	8001380 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800133c:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <HAL_GPIO_Init+0x2d0>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	490e      	ldr	r1, [pc, #56]	@ (800137c <HAL_GPIO_Init+0x2d0>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
 8001348:	e021      	b.n	800138e <HAL_GPIO_Init+0x2e2>
 800134a:	bf00      	nop
 800134c:	10320000 	.word	0x10320000
 8001350:	10310000 	.word	0x10310000
 8001354:	10220000 	.word	0x10220000
 8001358:	10210000 	.word	0x10210000
 800135c:	10120000 	.word	0x10120000
 8001360:	10110000 	.word	0x10110000
 8001364:	40021000 	.word	0x40021000
 8001368:	40010000 	.word	0x40010000
 800136c:	40010800 	.word	0x40010800
 8001370:	40010c00 	.word	0x40010c00
 8001374:	40011000 	.word	0x40011000
 8001378:	40011400 	.word	0x40011400
 800137c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001380:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <HAL_GPIO_Init+0x304>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	43db      	mvns	r3, r3
 8001388:	4909      	ldr	r1, [pc, #36]	@ (80013b0 <HAL_GPIO_Init+0x304>)
 800138a:	4013      	ands	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	3301      	adds	r3, #1
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	fa22 f303 	lsr.w	r3, r2, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f47f ae8e 	bne.w	80010c0 <HAL_GPIO_Init+0x14>
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	372c      	adds	r7, #44	@ 0x2c
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	40010400 	.word	0x40010400

080013b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	4013      	ands	r3, r2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013cc:	2301      	movs	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	e001      	b.n	80013d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	807b      	strh	r3, [r7, #2]
 80013ee:	4613      	mov	r3, r2
 80013f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f2:	787b      	ldrb	r3, [r7, #1]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f8:	887a      	ldrh	r2, [r7, #2]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013fe:	e003      	b.n	8001408 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001400:	887b      	ldrh	r3, [r7, #2]
 8001402:	041a      	lsls	r2, r3, #16
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	611a      	str	r2, [r3, #16]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
	...

08001414 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e272      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8087 	beq.w	8001542 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001434:	4b92      	ldr	r3, [pc, #584]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 030c 	and.w	r3, r3, #12
 800143c:	2b04      	cmp	r3, #4
 800143e:	d00c      	beq.n	800145a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001440:	4b8f      	ldr	r3, [pc, #572]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	2b08      	cmp	r3, #8
 800144a:	d112      	bne.n	8001472 <HAL_RCC_OscConfig+0x5e>
 800144c:	4b8c      	ldr	r3, [pc, #560]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001458:	d10b      	bne.n	8001472 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145a:	4b89      	ldr	r3, [pc, #548]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d06c      	beq.n	8001540 <HAL_RCC_OscConfig+0x12c>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d168      	bne.n	8001540 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e24c      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800147a:	d106      	bne.n	800148a <HAL_RCC_OscConfig+0x76>
 800147c:	4b80      	ldr	r3, [pc, #512]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a7f      	ldr	r2, [pc, #508]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001482:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	e02e      	b.n	80014e8 <HAL_RCC_OscConfig+0xd4>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x98>
 8001492:	4b7b      	ldr	r3, [pc, #492]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a7a      	ldr	r2, [pc, #488]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001498:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b78      	ldr	r3, [pc, #480]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a77      	ldr	r2, [pc, #476]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e01d      	b.n	80014e8 <HAL_RCC_OscConfig+0xd4>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0xbc>
 80014b6:	4b72      	ldr	r3, [pc, #456]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a71      	ldr	r2, [pc, #452]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6e      	ldr	r2, [pc, #440]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e00b      	b.n	80014e8 <HAL_RCC_OscConfig+0xd4>
 80014d0:	4b6b      	ldr	r3, [pc, #428]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b68      	ldr	r3, [pc, #416]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a67      	ldr	r2, [pc, #412]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d013      	beq.n	8001518 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fcc4 	bl	8000e7c <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fcc0 	bl	8000e7c <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	@ 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e200      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	4b5d      	ldr	r3, [pc, #372]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0xe4>
 8001516:	e014      	b.n	8001542 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fcb0 	bl	8000e7c <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fcac 	bl	8000e7c <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	@ 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e1ec      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001532:	4b53      	ldr	r3, [pc, #332]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x10c>
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d063      	beq.n	8001616 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800154e:	4b4c      	ldr	r3, [pc, #304]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00b      	beq.n	8001572 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800155a:	4b49      	ldr	r3, [pc, #292]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b08      	cmp	r3, #8
 8001564:	d11c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x18c>
 8001566:	4b46      	ldr	r3, [pc, #280]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d116      	bne.n	80015a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001572:	4b43      	ldr	r3, [pc, #268]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <HAL_RCC_OscConfig+0x176>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d001      	beq.n	800158a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e1c0      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158a:	4b3d      	ldr	r3, [pc, #244]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	4939      	ldr	r1, [pc, #228]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159e:	e03a      	b.n	8001616 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d020      	beq.n	80015ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a8:	4b36      	ldr	r3, [pc, #216]	@ (8001684 <HAL_RCC_OscConfig+0x270>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7ff fc65 	bl	8000e7c <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b6:	f7ff fc61 	bl	8000e7c <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e1a1      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4927      	ldr	r1, [pc, #156]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
 80015e8:	e015      	b.n	8001616 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ea:	4b26      	ldr	r3, [pc, #152]	@ (8001684 <HAL_RCC_OscConfig+0x270>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fc44 	bl	8000e7c <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f8:	f7ff fc40 	bl	8000e7c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e180      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160a:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d03a      	beq.n	8001698 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d019      	beq.n	800165e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162a:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <HAL_RCC_OscConfig+0x274>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001630:	f7ff fc24 	bl	8000e7c <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001638:	f7ff fc20 	bl	8000e7c <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e160      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164a:	4b0d      	ldr	r3, [pc, #52]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001656:	2001      	movs	r0, #1
 8001658:	f000 fa9c 	bl	8001b94 <RCC_Delay>
 800165c:	e01c      	b.n	8001698 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165e:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <HAL_RCC_OscConfig+0x274>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001664:	f7ff fc0a 	bl	8000e7c <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166a:	e00f      	b.n	800168c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166c:	f7ff fc06 	bl	8000e7c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d908      	bls.n	800168c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e146      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	42420000 	.word	0x42420000
 8001688:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168c:	4b92      	ldr	r3, [pc, #584]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1e9      	bne.n	800166c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80a6 	beq.w	80017f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016aa:	4b8b      	ldr	r3, [pc, #556]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10d      	bne.n	80016d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	4b88      	ldr	r3, [pc, #544]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a87      	ldr	r2, [pc, #540]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	61d3      	str	r3, [r2, #28]
 80016c2:	4b85      	ldr	r3, [pc, #532]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ce:	2301      	movs	r3, #1
 80016d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d2:	4b82      	ldr	r3, [pc, #520]	@ (80018dc <HAL_RCC_OscConfig+0x4c8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d118      	bne.n	8001710 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016de:	4b7f      	ldr	r3, [pc, #508]	@ (80018dc <HAL_RCC_OscConfig+0x4c8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a7e      	ldr	r2, [pc, #504]	@ (80018dc <HAL_RCC_OscConfig+0x4c8>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ea:	f7ff fbc7 	bl	8000e7c <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f2:	f7ff fbc3 	bl	8000e7c <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b64      	cmp	r3, #100	@ 0x64
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e103      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001704:	4b75      	ldr	r3, [pc, #468]	@ (80018dc <HAL_RCC_OscConfig+0x4c8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d106      	bne.n	8001726 <HAL_RCC_OscConfig+0x312>
 8001718:	4b6f      	ldr	r3, [pc, #444]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	4a6e      	ldr	r2, [pc, #440]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6213      	str	r3, [r2, #32]
 8001724:	e02d      	b.n	8001782 <HAL_RCC_OscConfig+0x36e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0x334>
 800172e:	4b6a      	ldr	r3, [pc, #424]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	4a69      	ldr	r2, [pc, #420]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	f023 0301 	bic.w	r3, r3, #1
 8001738:	6213      	str	r3, [r2, #32]
 800173a:	4b67      	ldr	r3, [pc, #412]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	4a66      	ldr	r2, [pc, #408]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001740:	f023 0304 	bic.w	r3, r3, #4
 8001744:	6213      	str	r3, [r2, #32]
 8001746:	e01c      	b.n	8001782 <HAL_RCC_OscConfig+0x36e>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b05      	cmp	r3, #5
 800174e:	d10c      	bne.n	800176a <HAL_RCC_OscConfig+0x356>
 8001750:	4b61      	ldr	r3, [pc, #388]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4a60      	ldr	r2, [pc, #384]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	6213      	str	r3, [r2, #32]
 800175c:	4b5e      	ldr	r3, [pc, #376]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	4a5d      	ldr	r2, [pc, #372]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6213      	str	r3, [r2, #32]
 8001768:	e00b      	b.n	8001782 <HAL_RCC_OscConfig+0x36e>
 800176a:	4b5b      	ldr	r3, [pc, #364]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4a5a      	ldr	r2, [pc, #360]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	6213      	str	r3, [r2, #32]
 8001776:	4b58      	ldr	r3, [pc, #352]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	4a57      	ldr	r2, [pc, #348]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	f023 0304 	bic.w	r3, r3, #4
 8001780:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d015      	beq.n	80017b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178a:	f7ff fb77 	bl	8000e7c <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff fb73 	bl	8000e7c <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e0b1      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a8:	4b4b      	ldr	r3, [pc, #300]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0ee      	beq.n	8001792 <HAL_RCC_OscConfig+0x37e>
 80017b4:	e014      	b.n	80017e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b6:	f7ff fb61 	bl	8000e7c <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff fb5d 	bl	8000e7c <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e09b      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d4:	4b40      	ldr	r3, [pc, #256]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1ee      	bne.n	80017be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d105      	bne.n	80017f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e6:	4b3c      	ldr	r3, [pc, #240]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a3b      	ldr	r2, [pc, #236]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 8087 	beq.w	800190a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017fc:	4b36      	ldr	r3, [pc, #216]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b08      	cmp	r3, #8
 8001806:	d061      	beq.n	80018cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d146      	bne.n	800189e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001810:	4b33      	ldr	r3, [pc, #204]	@ (80018e0 <HAL_RCC_OscConfig+0x4cc>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001816:	f7ff fb31 	bl	8000e7c <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181e:	f7ff fb2d 	bl	8000e7c <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e06d      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001830:	4b29      	ldr	r3, [pc, #164]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f0      	bne.n	800181e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001844:	d108      	bne.n	8001858 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001846:	4b24      	ldr	r3, [pc, #144]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	4921      	ldr	r1, [pc, #132]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001858:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a19      	ldr	r1, [r3, #32]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001868:	430b      	orrs	r3, r1
 800186a:	491b      	ldr	r1, [pc, #108]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001870:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <HAL_RCC_OscConfig+0x4cc>)
 8001872:	2201      	movs	r2, #1
 8001874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7ff fb01 	bl	8000e7c <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187e:	f7ff fafd 	bl	8000e7c <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e03d      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001890:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x46a>
 800189c:	e035      	b.n	800190a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189e:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <HAL_RCC_OscConfig+0x4cc>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff faea 	bl	8000e7c <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff fae6 	bl	8000e7c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e026      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x498>
 80018ca:	e01e      	b.n	800190a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d107      	bne.n	80018e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e019      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40007000 	.word	0x40007000
 80018e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <HAL_RCC_OscConfig+0x500>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d106      	bne.n	8001906 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d001      	beq.n	800190a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0d0      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d910      	bls.n	800195c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b67      	ldr	r3, [pc, #412]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 0207 	bic.w	r2, r3, #7
 8001942:	4965      	ldr	r1, [pc, #404]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b63      	ldr	r3, [pc, #396]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0b8      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001974:	4b59      	ldr	r3, [pc, #356]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4a58      	ldr	r2, [pc, #352]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800197e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800198c:	4b53      	ldr	r3, [pc, #332]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4a52      	ldr	r2, [pc, #328]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001996:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001998:	4b50      	ldr	r3, [pc, #320]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	494d      	ldr	r1, [pc, #308]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d040      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	4b47      	ldr	r3, [pc, #284]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d115      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e07f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	4b41      	ldr	r3, [pc, #260]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e073      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e6:	4b3d      	ldr	r3, [pc, #244]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e06b      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f6:	4b39      	ldr	r3, [pc, #228]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f023 0203 	bic.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4936      	ldr	r1, [pc, #216]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a08:	f7ff fa38 	bl	8000e7c <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7ff fa34 	bl	8000e7c <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e053      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	4b2d      	ldr	r3, [pc, #180]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 020c 	and.w	r2, r3, #12
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1eb      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b27      	ldr	r3, [pc, #156]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d210      	bcs.n	8001a68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 0207 	bic.w	r2, r3, #7
 8001a4e:	4922      	ldr	r1, [pc, #136]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e032      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a74:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4916      	ldr	r1, [pc, #88]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a92:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	490e      	ldr	r1, [pc, #56]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aa6:	f000 f821 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	490a      	ldr	r1, [pc, #40]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab8:	5ccb      	ldrb	r3, [r1, r3]
 8001aba:	fa22 f303 	lsr.w	r3, r2, r3
 8001abe:	4a09      	ldr	r2, [pc, #36]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f996 	bl	8000df8 <HAL_InitTick>

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40022000 	.word	0x40022000
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	0800292c 	.word	0x0800292c
 8001ae4:	20000028 	.word	0x20000028
 8001ae8:	2000002c 	.word	0x2000002c

08001aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b06:	4b1e      	ldr	r3, [pc, #120]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d002      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x30>
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d003      	beq.n	8001b22 <HAL_RCC_GetSysClockFreq+0x36>
 8001b1a:	e027      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b1c:	4b19      	ldr	r3, [pc, #100]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b1e:	613b      	str	r3, [r7, #16]
      break;
 8001b20:	e027      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	0c9b      	lsrs	r3, r3, #18
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	4a17      	ldr	r2, [pc, #92]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b2c:	5cd3      	ldrb	r3, [r2, r3]
 8001b2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d010      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b3a:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	0c5b      	lsrs	r3, r3, #17
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	4a11      	ldr	r2, [pc, #68]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b46:	5cd3      	ldrb	r3, [r2, r3]
 8001b48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b4e:	fb03 f202 	mul.w	r2, r3, r2
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e004      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b60:	fb02 f303 	mul.w	r3, r2, r3
 8001b64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	613b      	str	r3, [r7, #16]
      break;
 8001b6a:	e002      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b6e:	613b      	str	r3, [r7, #16]
      break;
 8001b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b72:	693b      	ldr	r3, [r7, #16]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	007a1200 	.word	0x007a1200
 8001b88:	0800293c 	.word	0x0800293c
 8001b8c:	0800294c 	.word	0x0800294c
 8001b90:	003d0900 	.word	0x003d0900

08001b94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <RCC_Delay+0x34>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <RCC_Delay+0x38>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	0a5b      	lsrs	r3, r3, #9
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	fb02 f303 	mul.w	r3, r2, r3
 8001bae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bb0:	bf00      	nop
  }
  while (Delay --);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1e5a      	subs	r2, r3, #1
 8001bb6:	60fa      	str	r2, [r7, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f9      	bne.n	8001bb0 <RCC_Delay+0x1c>
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	20000028 	.word	0x20000028
 8001bcc:	10624dd3 	.word	0x10624dd3

08001bd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e076      	b.n	8001cd0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d108      	bne.n	8001bfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001bf2:	d009      	beq.n	8001c08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
 8001bfa:	e005      	b.n	8001c08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7fe ff96 	bl	8000b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c8c:	ea42 0103 	orr.w	r1, r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c94:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	0c1a      	lsrs	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f002 0204 	and.w	r2, r2, #4
 8001cae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	69da      	ldr	r2, [r3, #28]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cbe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_SPI_Transmit+0x22>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e12d      	b.n	8001f56 <HAL_SPI_Transmit+0x27e>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d02:	f7ff f8bb 	bl	8000e7c <HAL_GetTick>
 8001d06:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d002      	beq.n	8001d1e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d1c:	e116      	b.n	8001f4c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <HAL_SPI_Transmit+0x52>
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d102      	bne.n	8001d30 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d2e:	e10d      	b.n	8001f4c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2203      	movs	r2, #3
 8001d34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	88fa      	ldrh	r2, [r7, #6]
 8001d48:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	88fa      	ldrh	r2, [r7, #6]
 8001d4e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d76:	d10f      	bne.n	8001d98 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001da2:	2b40      	cmp	r3, #64	@ 0x40
 8001da4:	d007      	beq.n	8001db6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001dbe:	d14f      	bne.n	8001e60 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_SPI_Transmit+0xf6>
 8001dc8:	8afb      	ldrh	r3, [r7, #22]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d142      	bne.n	8001e54 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	881a      	ldrh	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	1c9a      	adds	r2, r3, #2
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001df2:	e02f      	b.n	8001e54 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d112      	bne.n	8001e28 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	881a      	ldrh	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	1c9a      	adds	r2, r3, #2
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e26:	e015      	b.n	8001e54 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e28:	f7ff f828 	bl	8000e7c <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d803      	bhi.n	8001e40 <HAL_SPI_Transmit+0x168>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3e:	d102      	bne.n	8001e46 <HAL_SPI_Transmit+0x16e>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001e52:	e07b      	b.n	8001f4c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1ca      	bne.n	8001df4 <HAL_SPI_Transmit+0x11c>
 8001e5e:	e050      	b.n	8001f02 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <HAL_SPI_Transmit+0x196>
 8001e68:	8afb      	ldrh	r3, [r7, #22]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d144      	bne.n	8001ef8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	330c      	adds	r3, #12
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e94:	e030      	b.n	8001ef8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d113      	bne.n	8001ecc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	330c      	adds	r3, #12
 8001eae:	7812      	ldrb	r2, [r2, #0]
 8001eb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001eca:	e015      	b.n	8001ef8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ecc:	f7fe ffd6 	bl	8000e7c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d803      	bhi.n	8001ee4 <HAL_SPI_Transmit+0x20c>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee2:	d102      	bne.n	8001eea <HAL_SPI_Transmit+0x212>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001ef6:	e029      	b.n	8001f4c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1c9      	bne.n	8001e96 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	6839      	ldr	r1, [r7, #0]
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 f8b2 	bl	8002070 <SPI_EndRxTxTransaction>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2220      	movs	r2, #32
 8001f16:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10a      	bne.n	8001f36 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	77fb      	strb	r3, [r7, #31]
 8001f42:	e003      	b.n	8001f4c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001f54:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3720      	adds	r7, #32
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f70:	f7fe ff84 	bl	8000e7c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f80:	f7fe ff7c 	bl	8000e7c <HAL_GetTick>
 8001f84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f86:	4b39      	ldr	r3, [pc, #228]	@ (800206c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	015b      	lsls	r3, r3, #5
 8001f8c:	0d1b      	lsrs	r3, r3, #20
 8001f8e:	69fa      	ldr	r2, [r7, #28]
 8001f90:	fb02 f303 	mul.w	r3, r2, r3
 8001f94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f96:	e054      	b.n	8002042 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9e:	d050      	beq.n	8002042 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fa0:	f7fe ff6c 	bl	8000e7c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d902      	bls.n	8001fb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d13d      	bne.n	8002032 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001fc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fce:	d111      	bne.n	8001ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fd8:	d004      	beq.n	8001fe4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fe2:	d107      	bne.n	8001ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ff2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ffc:	d10f      	bne.n	800201e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800201c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e017      	b.n	8002062 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	3b01      	subs	r3, #1
 8002040:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4013      	ands	r3, r2
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	429a      	cmp	r2, r3
 8002050:	bf0c      	ite	eq
 8002052:	2301      	moveq	r3, #1
 8002054:	2300      	movne	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	429a      	cmp	r2, r3
 800205e:	d19b      	bne.n	8001f98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3720      	adds	r7, #32
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000028 	.word	0x20000028

08002070 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af02      	add	r7, sp, #8
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2200      	movs	r2, #0
 8002084:	2180      	movs	r1, #128	@ 0x80
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7ff ff6a 	bl	8001f60 <SPI_WaitFlagStateUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002096:	f043 0220 	orr.w	r2, r3, #32
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e000      	b.n	80020a4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e041      	b.n	8002142 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d106      	bne.n	80020d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7fe fdac 	bl	8000c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3304      	adds	r3, #4
 80020e8:	4619      	mov	r1, r3
 80020ea:	4610      	mov	r0, r2
 80020ec:	f000 fa74 	bl	80025d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d001      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e03a      	b.n	80021da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a18      	ldr	r2, [pc, #96]	@ (80021e4 <HAL_TIM_Base_Start_IT+0x98>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00e      	beq.n	80021a4 <HAL_TIM_Base_Start_IT+0x58>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800218e:	d009      	beq.n	80021a4 <HAL_TIM_Base_Start_IT+0x58>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a14      	ldr	r2, [pc, #80]	@ (80021e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d004      	beq.n	80021a4 <HAL_TIM_Base_Start_IT+0x58>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a13      	ldr	r2, [pc, #76]	@ (80021ec <HAL_TIM_Base_Start_IT+0xa0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d111      	bne.n	80021c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d010      	beq.n	80021d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c6:	e007      	b.n	80021d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	40012c00 	.word	0x40012c00
 80021e8:	40000400 	.word	0x40000400
 80021ec:	40000800 	.word	0x40000800

080021f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b02      	cmp	r3, #2
 8002204:	d122      	bne.n	800224c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b02      	cmp	r3, #2
 8002212:	d11b      	bne.n	800224c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0202 	mvn.w	r2, #2
 800221c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f9b4 	bl	80025a0 <HAL_TIM_IC_CaptureCallback>
 8002238:	e005      	b.n	8002246 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f9a7 	bl	800258e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f9b6 	bl	80025b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b04      	cmp	r3, #4
 8002258:	d122      	bne.n	80022a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b04      	cmp	r3, #4
 8002266:	d11b      	bne.n	80022a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0204 	mvn.w	r2, #4
 8002270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2202      	movs	r2, #2
 8002276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f98a 	bl	80025a0 <HAL_TIM_IC_CaptureCallback>
 800228c:	e005      	b.n	800229a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f97d 	bl	800258e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f98c 	bl	80025b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d122      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d11b      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0208 	mvn.w	r2, #8
 80022c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2204      	movs	r2, #4
 80022ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f960 	bl	80025a0 <HAL_TIM_IC_CaptureCallback>
 80022e0:	e005      	b.n	80022ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f953 	bl	800258e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f962 	bl	80025b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b10      	cmp	r3, #16
 8002300:	d122      	bne.n	8002348 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	2b10      	cmp	r3, #16
 800230e:	d11b      	bne.n	8002348 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0210 	mvn.w	r2, #16
 8002318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2208      	movs	r2, #8
 800231e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f936 	bl	80025a0 <HAL_TIM_IC_CaptureCallback>
 8002334:	e005      	b.n	8002342 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f929 	bl	800258e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f938 	bl	80025b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d10e      	bne.n	8002374 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d107      	bne.n	8002374 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0201 	mvn.w	r2, #1
 800236c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fbae 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237e:	2b80      	cmp	r3, #128	@ 0x80
 8002380:	d10e      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800238c:	2b80      	cmp	r3, #128	@ 0x80
 800238e:	d107      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fa7b 	bl	8002896 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023aa:	2b40      	cmp	r3, #64	@ 0x40
 80023ac:	d10e      	bne.n	80023cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b8:	2b40      	cmp	r3, #64	@ 0x40
 80023ba:	d107      	bne.n	80023cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f8fc 	bl	80025c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	2b20      	cmp	r3, #32
 80023d8:	d10e      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0320 	and.w	r3, r3, #32
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d107      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0220 	mvn.w	r2, #32
 80023f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 fa46 	bl	8002884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_TIM_ConfigClockSource+0x1c>
 8002418:	2302      	movs	r3, #2
 800241a:	e0b4      	b.n	8002586 <HAL_TIM_ConfigClockSource+0x186>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800243a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002442:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002454:	d03e      	beq.n	80024d4 <HAL_TIM_ConfigClockSource+0xd4>
 8002456:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800245a:	f200 8087 	bhi.w	800256c <HAL_TIM_ConfigClockSource+0x16c>
 800245e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002462:	f000 8086 	beq.w	8002572 <HAL_TIM_ConfigClockSource+0x172>
 8002466:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800246a:	d87f      	bhi.n	800256c <HAL_TIM_ConfigClockSource+0x16c>
 800246c:	2b70      	cmp	r3, #112	@ 0x70
 800246e:	d01a      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0xa6>
 8002470:	2b70      	cmp	r3, #112	@ 0x70
 8002472:	d87b      	bhi.n	800256c <HAL_TIM_ConfigClockSource+0x16c>
 8002474:	2b60      	cmp	r3, #96	@ 0x60
 8002476:	d050      	beq.n	800251a <HAL_TIM_ConfigClockSource+0x11a>
 8002478:	2b60      	cmp	r3, #96	@ 0x60
 800247a:	d877      	bhi.n	800256c <HAL_TIM_ConfigClockSource+0x16c>
 800247c:	2b50      	cmp	r3, #80	@ 0x50
 800247e:	d03c      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0xfa>
 8002480:	2b50      	cmp	r3, #80	@ 0x50
 8002482:	d873      	bhi.n	800256c <HAL_TIM_ConfigClockSource+0x16c>
 8002484:	2b40      	cmp	r3, #64	@ 0x40
 8002486:	d058      	beq.n	800253a <HAL_TIM_ConfigClockSource+0x13a>
 8002488:	2b40      	cmp	r3, #64	@ 0x40
 800248a:	d86f      	bhi.n	800256c <HAL_TIM_ConfigClockSource+0x16c>
 800248c:	2b30      	cmp	r3, #48	@ 0x30
 800248e:	d064      	beq.n	800255a <HAL_TIM_ConfigClockSource+0x15a>
 8002490:	2b30      	cmp	r3, #48	@ 0x30
 8002492:	d86b      	bhi.n	800256c <HAL_TIM_ConfigClockSource+0x16c>
 8002494:	2b20      	cmp	r3, #32
 8002496:	d060      	beq.n	800255a <HAL_TIM_ConfigClockSource+0x15a>
 8002498:	2b20      	cmp	r3, #32
 800249a:	d867      	bhi.n	800256c <HAL_TIM_ConfigClockSource+0x16c>
 800249c:	2b00      	cmp	r3, #0
 800249e:	d05c      	beq.n	800255a <HAL_TIM_ConfigClockSource+0x15a>
 80024a0:	2b10      	cmp	r3, #16
 80024a2:	d05a      	beq.n	800255a <HAL_TIM_ConfigClockSource+0x15a>
 80024a4:	e062      	b.n	800256c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024b6:	f000 f968 	bl	800278a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80024c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	609a      	str	r2, [r3, #8]
      break;
 80024d2:	e04f      	b.n	8002574 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024e4:	f000 f951 	bl	800278a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024f6:	609a      	str	r2, [r3, #8]
      break;
 80024f8:	e03c      	b.n	8002574 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002506:	461a      	mov	r2, r3
 8002508:	f000 f8c8 	bl	800269c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2150      	movs	r1, #80	@ 0x50
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f91f 	bl	8002756 <TIM_ITRx_SetConfig>
      break;
 8002518:	e02c      	b.n	8002574 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002526:	461a      	mov	r2, r3
 8002528:	f000 f8e6 	bl	80026f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2160      	movs	r1, #96	@ 0x60
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f90f 	bl	8002756 <TIM_ITRx_SetConfig>
      break;
 8002538:	e01c      	b.n	8002574 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002546:	461a      	mov	r2, r3
 8002548:	f000 f8a8 	bl	800269c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2140      	movs	r1, #64	@ 0x40
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f8ff 	bl	8002756 <TIM_ITRx_SetConfig>
      break;
 8002558:	e00c      	b.n	8002574 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4619      	mov	r1, r3
 8002564:	4610      	mov	r0, r2
 8002566:	f000 f8f6 	bl	8002756 <TIM_ITRx_SetConfig>
      break;
 800256a:	e003      	b.n	8002574 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
      break;
 8002570:	e000      	b.n	8002574 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002572:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002584:	7bfb      	ldrb	r3, [r7, #15]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
	...

080025d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a29      	ldr	r2, [pc, #164]	@ (8002690 <TIM_Base_SetConfig+0xb8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d00b      	beq.n	8002608 <TIM_Base_SetConfig+0x30>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025f6:	d007      	beq.n	8002608 <TIM_Base_SetConfig+0x30>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a26      	ldr	r2, [pc, #152]	@ (8002694 <TIM_Base_SetConfig+0xbc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d003      	beq.n	8002608 <TIM_Base_SetConfig+0x30>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a25      	ldr	r2, [pc, #148]	@ (8002698 <TIM_Base_SetConfig+0xc0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d108      	bne.n	800261a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800260e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a1c      	ldr	r2, [pc, #112]	@ (8002690 <TIM_Base_SetConfig+0xb8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00b      	beq.n	800263a <TIM_Base_SetConfig+0x62>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002628:	d007      	beq.n	800263a <TIM_Base_SetConfig+0x62>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a19      	ldr	r2, [pc, #100]	@ (8002694 <TIM_Base_SetConfig+0xbc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d003      	beq.n	800263a <TIM_Base_SetConfig+0x62>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a18      	ldr	r2, [pc, #96]	@ (8002698 <TIM_Base_SetConfig+0xc0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d108      	bne.n	800264c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a07      	ldr	r2, [pc, #28]	@ (8002690 <TIM_Base_SetConfig+0xb8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d103      	bne.n	8002680 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	615a      	str	r2, [r3, #20]
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	40012c00 	.word	0x40012c00
 8002694:	40000400 	.word	0x40000400
 8002698:	40000800 	.word	0x40000800

0800269c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	f023 0201 	bic.w	r2, r3, #1
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f023 030a 	bic.w	r3, r3, #10
 80026d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4313      	orrs	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	621a      	str	r2, [r3, #32]
}
 80026ee:	bf00      	nop
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	f023 0210 	bic.w	r2, r3, #16
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	031b      	lsls	r3, r3, #12
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002734:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	621a      	str	r2, [r3, #32]
}
 800274c:	bf00      	nop
 800274e:	371c      	adds	r7, #28
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800276c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	f043 0307 	orr.w	r3, r3, #7
 8002778:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	609a      	str	r2, [r3, #8]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800278a:	b480      	push	{r7}
 800278c:	b087      	sub	sp, #28
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	021a      	lsls	r2, r3, #8
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	431a      	orrs	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	609a      	str	r2, [r3, #8]
}
 80027be:	bf00      	nop
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027dc:	2302      	movs	r3, #2
 80027de:	e046      	b.n	800286e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a16      	ldr	r2, [pc, #88]	@ (8002878 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00e      	beq.n	8002842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800282c:	d009      	beq.n	8002842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a12      	ldr	r2, [pc, #72]	@ (800287c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d004      	beq.n	8002842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a10      	ldr	r2, [pc, #64]	@ (8002880 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10c      	bne.n	800285c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	4313      	orrs	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	40012c00 	.word	0x40012c00
 800287c:	40000400 	.word	0x40000400
 8002880:	40000800 	.word	0x40000800

08002884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <memset>:
 80028a8:	4603      	mov	r3, r0
 80028aa:	4402      	add	r2, r0
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d100      	bne.n	80028b2 <memset+0xa>
 80028b0:	4770      	bx	lr
 80028b2:	f803 1b01 	strb.w	r1, [r3], #1
 80028b6:	e7f9      	b.n	80028ac <memset+0x4>

080028b8 <__libc_init_array>:
 80028b8:	b570      	push	{r4, r5, r6, lr}
 80028ba:	2600      	movs	r6, #0
 80028bc:	4d0c      	ldr	r5, [pc, #48]	@ (80028f0 <__libc_init_array+0x38>)
 80028be:	4c0d      	ldr	r4, [pc, #52]	@ (80028f4 <__libc_init_array+0x3c>)
 80028c0:	1b64      	subs	r4, r4, r5
 80028c2:	10a4      	asrs	r4, r4, #2
 80028c4:	42a6      	cmp	r6, r4
 80028c6:	d109      	bne.n	80028dc <__libc_init_array+0x24>
 80028c8:	f000 f81a 	bl	8002900 <_init>
 80028cc:	2600      	movs	r6, #0
 80028ce:	4d0a      	ldr	r5, [pc, #40]	@ (80028f8 <__libc_init_array+0x40>)
 80028d0:	4c0a      	ldr	r4, [pc, #40]	@ (80028fc <__libc_init_array+0x44>)
 80028d2:	1b64      	subs	r4, r4, r5
 80028d4:	10a4      	asrs	r4, r4, #2
 80028d6:	42a6      	cmp	r6, r4
 80028d8:	d105      	bne.n	80028e6 <__libc_init_array+0x2e>
 80028da:	bd70      	pop	{r4, r5, r6, pc}
 80028dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e0:	4798      	blx	r3
 80028e2:	3601      	adds	r6, #1
 80028e4:	e7ee      	b.n	80028c4 <__libc_init_array+0xc>
 80028e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ea:	4798      	blx	r3
 80028ec:	3601      	adds	r6, #1
 80028ee:	e7f2      	b.n	80028d6 <__libc_init_array+0x1e>
 80028f0:	08002950 	.word	0x08002950
 80028f4:	08002950 	.word	0x08002950
 80028f8:	08002950 	.word	0x08002950
 80028fc:	08002954 	.word	0x08002954

08002900 <_init>:
 8002900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002902:	bf00      	nop
 8002904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002906:	bc08      	pop	{r3}
 8002908:	469e      	mov	lr, r3
 800290a:	4770      	bx	lr

0800290c <_fini>:
 800290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290e:	bf00      	nop
 8002910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002912:	bc08      	pop	{r3}
 8002914:	469e      	mov	lr, r3
 8002916:	4770      	bx	lr
