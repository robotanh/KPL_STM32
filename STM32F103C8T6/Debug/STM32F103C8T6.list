
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f14  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08007028  08007028  00008028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007488  08007488  00009234  2**0
                  CONTENTS
  4 .ARM          00000008  08007488  08007488  00008488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007490  08007490  00009234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007490  08007490  00008490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007494  08007494  00008494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  08007498  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000238  080076cc  00009238  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  080076cc  00009524  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b18d  00000000  00000000  0000925d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000215f  00000000  00000000  000143ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00016550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b2  00000000  00000000  00017200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d3b  00000000  00000000  00017bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e876  00000000  00000000  000308ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bc69  00000000  00000000  0003f163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cadcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004520  00000000  00000000  000cae10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000cf330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000238 	.word	0x20000238
 800012c:	00000000 	.word	0x00000000
 8000130:	0800700c 	.word	0x0800700c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000023c 	.word	0x2000023c
 800014c:	0800700c 	.word	0x0800700c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <KeyPad_Scan>:
    /* Set all rows to high */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
}

/* Scan the 4x5 keypad and return the pressed key value */
uint8_t KeyPad_Scan(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
    uint32_t currentMillis = HAL_GetTick();
 8000ace:	f001 ff1f 	bl	8002910 <HAL_GetTick>
 8000ad2:	6038      	str	r0, [r7, #0]

    if (currentMillis - lastDebounceTime < DEBOUNCE_DELAY) {
 8000ad4:	4b24      	ldr	r3, [pc, #144]	@ (8000b68 <KeyPad_Scan+0xa0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ae0:	d201      	bcs.n	8000ae6 <KeyPad_Scan+0x1e>
        return 0xFF;
 8000ae2:	23ff      	movs	r3, #255	@ 0xff
 8000ae4:	e03b      	b.n	8000b5e <KeyPad_Scan+0x96>
    }

    for (uint8_t row = 0; row < 4; row++) {
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	71fb      	strb	r3, [r7, #7]
 8000aea:	e034      	b.n	8000b56 <KeyPad_Scan+0x8e>
        /* Set all rows low */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000af2:	481e      	ldr	r0, [pc, #120]	@ (8000b6c <KeyPad_Scan+0xa4>)
 8000af4:	f002 f9bf 	bl	8002e76 <HAL_GPIO_WritePin>

        /* Set the current row high */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 << row, GPIO_PIN_SET);
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	2240      	movs	r2, #64	@ 0x40
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	2201      	movs	r2, #1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4819      	ldr	r0, [pc, #100]	@ (8000b6c <KeyPad_Scan+0xa4>)
 8000b08:	f002 f9b5 	bl	8002e76 <HAL_GPIO_WritePin>

        /* Read each column */
        for (uint8_t col = 0; col < 5; col++) {
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	71bb      	strb	r3, [r7, #6]
 8000b10:	e01b      	b.n	8000b4a <KeyPad_Scan+0x82>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 << col) == GPIO_PIN_SET) {
 8000b12:	79bb      	ldrb	r3, [r7, #6]
 8000b14:	2201      	movs	r2, #1
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4813      	ldr	r0, [pc, #76]	@ (8000b6c <KeyPad_Scan+0xa4>)
 8000b20:	f002 f992 	bl	8002e48 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d10c      	bne.n	8000b44 <KeyPad_Scan+0x7c>
                lastDebounceTime = currentMillis;
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b68 <KeyPad_Scan+0xa0>)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	6013      	str	r3, [r2, #0]
                return keyMap[row][col];
 8000b30:	79fa      	ldrb	r2, [r7, #7]
 8000b32:	79b9      	ldrb	r1, [r7, #6]
 8000b34:	480e      	ldr	r0, [pc, #56]	@ (8000b70 <KeyPad_Scan+0xa8>)
 8000b36:	4613      	mov	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4403      	add	r3, r0
 8000b3e:	440b      	add	r3, r1
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	e00c      	b.n	8000b5e <KeyPad_Scan+0x96>
        for (uint8_t col = 0; col < 5; col++) {
 8000b44:	79bb      	ldrb	r3, [r7, #6]
 8000b46:	3301      	adds	r3, #1
 8000b48:	71bb      	strb	r3, [r7, #6]
 8000b4a:	79bb      	ldrb	r3, [r7, #6]
 8000b4c:	2b04      	cmp	r3, #4
 8000b4e:	d9e0      	bls.n	8000b12 <KeyPad_Scan+0x4a>
    for (uint8_t row = 0; row < 4; row++) {
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	3301      	adds	r3, #1
 8000b54:	71fb      	strb	r3, [r7, #7]
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	d9c7      	bls.n	8000aec <KeyPad_Scan+0x24>
            }
        }
    }

    return 0xFF;
 8000b5c:	23ff      	movs	r3, #255	@ 0xff
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000254 	.word	0x20000254
 8000b6c:	40010c00 	.word	0x40010c00
 8000b70:	080070e0 	.word	0x080070e0

08000b74 <formatTotalLiters>:
// T + L pressed show total from beginning
void formatTotalLiters(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
	if (total < 100000000) {
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf0 <formatTotalLiters+0x7c>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d815      	bhi.n	8000bb4 <formatTotalLiters+0x40>
		* buffer1 = total / 1000000;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8000bf4 <formatTotalLiters+0x80>)
 8000b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b90:	0c9a      	lsrs	r2, r3, #18
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <formatTotalLiters+0x80>)
 8000b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9e:	0c9b      	lsrs	r3, r3, #18
 8000ba0:	4915      	ldr	r1, [pc, #84]	@ (8000bf8 <formatTotalLiters+0x84>)
 8000ba2:	fb01 f303 	mul.w	r3, r1, r3
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <formatTotalLiters+0x88>)
 8000bae:	2203      	movs	r2, #3
 8000bb0:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 = total / 100000000;
		* buffer2 = (total % 100000000 ) /100;
		LEDPointFlag = 1;
	}
}
 8000bb2:	e018      	b.n	8000be6 <formatTotalLiters+0x72>
		* buffer1 = total / 100000000;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4a12      	ldr	r2, [pc, #72]	@ (8000c00 <formatTotalLiters+0x8c>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	0e5a      	lsrs	r2, r3, #25
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	601a      	str	r2, [r3, #0]
		* buffer2 = (total % 100000000 ) /100;
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <formatTotalLiters+0x8c>)
 8000bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8000bca:	0e5b      	lsrs	r3, r3, #25
 8000bcc:	490d      	ldr	r1, [pc, #52]	@ (8000c04 <formatTotalLiters+0x90>)
 8000bce:	fb01 f303 	mul.w	r3, r1, r3
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c08 <formatTotalLiters+0x94>)
 8000bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bda:	095a      	lsrs	r2, r3, #5
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	601a      	str	r2, [r3, #0]
		LEDPointFlag = 1;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <formatTotalLiters+0x88>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	601a      	str	r2, [r3, #0]
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	05f5e0ff 	.word	0x05f5e0ff
 8000bf4:	431bde83 	.word	0x431bde83
 8000bf8:	000f4240 	.word	0x000f4240
 8000bfc:	2000005c 	.word	0x2000005c
 8000c00:	55e63b89 	.word	0x55e63b89
 8000c04:	05f5e100 	.word	0x05f5e100
 8000c08:	51eb851f 	.word	0x51eb851f

08000c0c <formatTotalLitersShift>:
// T + $ pressed show total per shift
void formatTotalLitersShift(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
	if (total < 1000000000) {
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4a14      	ldr	r2, [pc, #80]	@ (8000c6c <formatTotalLitersShift+0x60>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d815      	bhi.n	8000c4c <formatTotalLitersShift+0x40>

		* buffer1 = total / 1000000;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4a13      	ldr	r2, [pc, #76]	@ (8000c70 <formatTotalLitersShift+0x64>)
 8000c24:	fba2 2303 	umull	r2, r3, r2, r3
 8000c28:	0c9a      	lsrs	r2, r3, #18
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <formatTotalLitersShift+0x64>)
 8000c32:	fba3 1302 	umull	r1, r3, r3, r2
 8000c36:	0c9b      	lsrs	r3, r3, #18
 8000c38:	490e      	ldr	r1, [pc, #56]	@ (8000c74 <formatTotalLitersShift+0x68>)
 8000c3a:	fb01 f303 	mul.w	r3, r1, r3
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <formatTotalLitersShift+0x6c>)
 8000c46:	2203      	movs	r2, #3
 8000c48:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 =0;
		* buffer2 = 0;
		LEDPointFlag = -1;
	}
}
 8000c4a:	e009      	b.n	8000c60 <formatTotalLitersShift+0x54>
		* buffer1 =0;
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
		* buffer2 = 0;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
		LEDPointFlag = -1;
 8000c58:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <formatTotalLitersShift+0x6c>)
 8000c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	3b9ac9ff 	.word	0x3b9ac9ff
 8000c70:	431bde83 	.word	0x431bde83
 8000c74:	000f4240 	.word	0x000f4240
 8000c78:	2000005c 	.word	0x2000005c

08000c7c <KeyLogic>:

void KeyLogic() {
 8000c7c:	b5b0      	push	{r4, r5, r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	keyPressed = KeyPad_Scan();
 8000c80:	f7ff ff22 	bl	8000ac8 <KeyPad_Scan>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	4bb6      	ldr	r3, [pc, #728]	@ (8000f64 <KeyLogic+0x2e8>)
 8000c8a:	701a      	strb	r2, [r3, #0]
    if (keyPressed != 0xFF) {
 8000c8c:	4bb5      	ldr	r3, [pc, #724]	@ (8000f64 <KeyLogic+0x2e8>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2bff      	cmp	r3, #255	@ 0xff
 8000c92:	f000 8583 	beq.w	800179c <KeyLogic+0xb20>
		switch (keyPressed) {
 8000c96:	4bb3      	ldr	r3, [pc, #716]	@ (8000f64 <KeyLogic+0x2e8>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	3b24      	subs	r3, #36	@ 0x24
 8000c9c:	2b30      	cmp	r3, #48	@ 0x30
 8000c9e:	f200 84d4 	bhi.w	800164a <KeyLogic+0x9ce>
 8000ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ca8 <KeyLogic+0x2c>)
 8000ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca8:	080015e3 	.word	0x080015e3
 8000cac:	0800164b 	.word	0x0800164b
 8000cb0:	0800164b 	.word	0x0800164b
 8000cb4:	0800164b 	.word	0x0800164b
 8000cb8:	0800164b 	.word	0x0800164b
 8000cbc:	0800164b 	.word	0x0800164b
 8000cc0:	0800164b 	.word	0x0800164b
 8000cc4:	0800164b 	.word	0x0800164b
 8000cc8:	0800164b 	.word	0x0800164b
 8000ccc:	0800164b 	.word	0x0800164b
 8000cd0:	0800164b 	.word	0x0800164b
 8000cd4:	0800164b 	.word	0x0800164b
 8000cd8:	0800164b 	.word	0x0800164b
 8000cdc:	0800164b 	.word	0x0800164b
 8000ce0:	0800164b 	.word	0x0800164b
 8000ce4:	0800164b 	.word	0x0800164b
 8000ce8:	0800164b 	.word	0x0800164b
 8000cec:	0800164b 	.word	0x0800164b
 8000cf0:	0800164b 	.word	0x0800164b
 8000cf4:	0800164b 	.word	0x0800164b
 8000cf8:	0800164b 	.word	0x0800164b
 8000cfc:	0800164b 	.word	0x0800164b
 8000d00:	0800164b 	.word	0x0800164b
 8000d04:	0800164b 	.word	0x0800164b
 8000d08:	0800164b 	.word	0x0800164b
 8000d0c:	0800164b 	.word	0x0800164b
 8000d10:	0800164b 	.word	0x0800164b
 8000d14:	0800164b 	.word	0x0800164b
 8000d18:	0800164b 	.word	0x0800164b
 8000d1c:	08000d6d 	.word	0x08000d6d
 8000d20:	08000e15 	.word	0x08000e15
 8000d24:	08001077 	.word	0x08001077
 8000d28:	08000ed1 	.word	0x08000ed1
 8000d2c:	0800109d 	.word	0x0800109d
 8000d30:	08000fc5 	.word	0x08000fc5
 8000d34:	0800164b 	.word	0x0800164b
 8000d38:	0800164b 	.word	0x0800164b
 8000d3c:	0800164b 	.word	0x0800164b
 8000d40:	0800164b 	.word	0x0800164b
 8000d44:	0800164b 	.word	0x0800164b
 8000d48:	08001617 	.word	0x08001617
 8000d4c:	0800164b 	.word	0x0800164b
 8000d50:	0800164b 	.word	0x0800164b
 8000d54:	0800164b 	.word	0x0800164b
 8000d58:	0800159b 	.word	0x0800159b
 8000d5c:	0800164b 	.word	0x0800164b
 8000d60:	0800164b 	.word	0x0800164b
 8000d64:	0800164b 	.word	0x0800164b
 8000d68:	080015bf 	.word	0x080015bf
/////////////////////////////////////////////////////KEY A/////////////////////////////////////////////////////////
			case 'A':
				if(seqState==SEQ_IDLE){
 8000d6c:	4b7e      	ldr	r3, [pc, #504]	@ (8000f68 <KeyLogic+0x2ec>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d11c      	bne.n	8000dae <KeyLogic+0x132>
					orderPrice=F1Price;
 8000d74:	4b7d      	ldr	r3, [pc, #500]	@ (8000f6c <KeyLogic+0x2f0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a7d      	ldr	r2, [pc, #500]	@ (8000f70 <KeyLogic+0x2f4>)
 8000d7a:	6013      	str	r3, [r2, #0]
					orderLiter=(double)orderPrice/(double)roundedPrice;
 8000d7c:	4b7c      	ldr	r3, [pc, #496]	@ (8000f70 <KeyLogic+0x2f4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fb2f 	bl	80003e4 <__aeabi_ui2d>
 8000d86:	4604      	mov	r4, r0
 8000d88:	460d      	mov	r5, r1
 8000d8a:	4b7a      	ldr	r3, [pc, #488]	@ (8000f74 <KeyLogic+0x2f8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fb28 	bl	80003e4 <__aeabi_ui2d>
 8000d94:	4602      	mov	r2, r0
 8000d96:	460b      	mov	r3, r1
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	f7ff fcc6 	bl	800072c <__aeabi_ddiv>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4974      	ldr	r1, [pc, #464]	@ (8000f78 <KeyLogic+0x2fc>)
 8000da6:	e9c1 2300 	strd	r2, r3, [r1]
				else{
					seqState=SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000daa:	f000 bcf7 	b.w	800179c <KeyLogic+0xb20>
				else if(seqState==SEQ_PRESSED_L){
 8000dae:	4b6e      	ldr	r3, [pc, #440]	@ (8000f68 <KeyLogic+0x2ec>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b13      	cmp	r3, #19
 8000db4:	d123      	bne.n	8000dfe <KeyLogic+0x182>
					orderLiter=1;
 8000db6:	4970      	ldr	r1, [pc, #448]	@ (8000f78 <KeyLogic+0x2fc>)
 8000db8:	f04f 0200 	mov.w	r2, #0
 8000dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8000f7c <KeyLogic+0x300>)
 8000dbe:	e9c1 2300 	strd	r2, r3, [r1]
					orderPrice=orderLiter*roundedPrice;
 8000dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8000f74 <KeyLogic+0x2f8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fb0c 	bl	80003e4 <__aeabi_ui2d>
 8000dcc:	4b6a      	ldr	r3, [pc, #424]	@ (8000f78 <KeyLogic+0x2fc>)
 8000dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd2:	f7ff fb81 	bl	80004d8 <__aeabi_dmul>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f7ff fe53 	bl	8000a88 <__aeabi_d2uiz>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a62      	ldr	r2, [pc, #392]	@ (8000f70 <KeyLogic+0x2f4>)
 8000de6:	6013      	str	r3, [r2, #0]
					seqState=SEQ_IDLE;
 8000de8:	4b5f      	ldr	r3, [pc, #380]	@ (8000f68 <KeyLogic+0x2ec>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000dee:	4b64      	ldr	r3, [pc, #400]	@ (8000f80 <KeyLogic+0x304>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000df4:	4b63      	ldr	r3, [pc, #396]	@ (8000f84 <KeyLogic+0x308>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
				break;
 8000dfa:	f000 bccf 	b.w	800179c <KeyLogic+0xb20>
					seqState=SEQ_IDLE;
 8000dfe:	4b5a      	ldr	r3, [pc, #360]	@ (8000f68 <KeyLogic+0x2ec>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000e04:	4b5e      	ldr	r3, [pc, #376]	@ (8000f80 <KeyLogic+0x304>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000e0a:	4b5e      	ldr	r3, [pc, #376]	@ (8000f84 <KeyLogic+0x308>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
				break;
 8000e10:	f000 bcc4 	b.w	800179c <KeyLogic+0xb20>
/////////////////////////////////////////////////////KEY B/////////////////////////////////////////////////////////
			case 'B':
				if(seqState==SEQ_IDLE){
 8000e14:	4b54      	ldr	r3, [pc, #336]	@ (8000f68 <KeyLogic+0x2ec>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d11c      	bne.n	8000e56 <KeyLogic+0x1da>
					orderPrice=F2Price;
 8000e1c:	4b5a      	ldr	r3, [pc, #360]	@ (8000f88 <KeyLogic+0x30c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a53      	ldr	r2, [pc, #332]	@ (8000f70 <KeyLogic+0x2f4>)
 8000e22:	6013      	str	r3, [r2, #0]
					orderLiter=(double)orderPrice/(double)roundedPrice;
 8000e24:	4b52      	ldr	r3, [pc, #328]	@ (8000f70 <KeyLogic+0x2f4>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fadb 	bl	80003e4 <__aeabi_ui2d>
 8000e2e:	4604      	mov	r4, r0
 8000e30:	460d      	mov	r5, r1
 8000e32:	4b50      	ldr	r3, [pc, #320]	@ (8000f74 <KeyLogic+0x2f8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fad4 	bl	80003e4 <__aeabi_ui2d>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4620      	mov	r0, r4
 8000e42:	4629      	mov	r1, r5
 8000e44:	f7ff fc72 	bl	800072c <__aeabi_ddiv>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	494a      	ldr	r1, [pc, #296]	@ (8000f78 <KeyLogic+0x2fc>)
 8000e4e:	e9c1 2300 	strd	r2, r3, [r1]
				}else{
					seqState=SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000e52:	f000 bca3 	b.w	800179c <KeyLogic+0xb20>
				else if(seqState==SEQ_PRESSED_L){
 8000e56:	4b44      	ldr	r3, [pc, #272]	@ (8000f68 <KeyLogic+0x2ec>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b13      	cmp	r3, #19
 8000e5c:	d124      	bne.n	8000ea8 <KeyLogic+0x22c>
					orderLiter=2;
 8000e5e:	4946      	ldr	r1, [pc, #280]	@ (8000f78 <KeyLogic+0x2fc>)
 8000e60:	f04f 0200 	mov.w	r2, #0
 8000e64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e68:	e9c1 2300 	strd	r2, r3, [r1]
					orderPrice=orderLiter*roundedPrice;
 8000e6c:	4b41      	ldr	r3, [pc, #260]	@ (8000f74 <KeyLogic+0x2f8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fab7 	bl	80003e4 <__aeabi_ui2d>
 8000e76:	4b40      	ldr	r3, [pc, #256]	@ (8000f78 <KeyLogic+0x2fc>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	f7ff fb2c 	bl	80004d8 <__aeabi_dmul>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fdfe 	bl	8000a88 <__aeabi_d2uiz>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4a38      	ldr	r2, [pc, #224]	@ (8000f70 <KeyLogic+0x2f4>)
 8000e90:	6013      	str	r3, [r2, #0]
					seqState=SEQ_IDLE;
 8000e92:	4b35      	ldr	r3, [pc, #212]	@ (8000f68 <KeyLogic+0x2ec>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000e98:	4b39      	ldr	r3, [pc, #228]	@ (8000f80 <KeyLogic+0x304>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000e9e:	4b39      	ldr	r3, [pc, #228]	@ (8000f84 <KeyLogic+0x308>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
				break;
 8000ea4:	f000 bc7a 	b.w	800179c <KeyLogic+0xb20>
				else if(seqState==SEQ_PRESSED_P){
 8000ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f68 <KeyLogic+0x2ec>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b05      	cmp	r3, #5
 8000eae:	d104      	bne.n	8000eba <KeyLogic+0x23e>
					seqState=SEQ_PRESSED_P_F2_PSWRD;
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f68 <KeyLogic+0x2ec>)
 8000eb2:	2206      	movs	r2, #6
 8000eb4:	701a      	strb	r2, [r3, #0]
				break;
 8000eb6:	f000 bc71 	b.w	800179c <KeyLogic+0xb20>
					seqState=SEQ_IDLE;
 8000eba:	4b2b      	ldr	r3, [pc, #172]	@ (8000f68 <KeyLogic+0x2ec>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f80 <KeyLogic+0x304>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f84 <KeyLogic+0x308>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
				break;
 8000ecc:	f000 bc66 	b.w	800179c <KeyLogic+0xb20>
/////////////////////////////////////////////////////KEY D/////////////////////////////////////////////////////////
			case 'D':
				if(seqState==SEQ_IDLE){
 8000ed0:	4b25      	ldr	r3, [pc, #148]	@ (8000f68 <KeyLogic+0x2ec>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d11c      	bne.n	8000f12 <KeyLogic+0x296>
					orderPrice=F3Price;
 8000ed8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f8c <KeyLogic+0x310>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a24      	ldr	r2, [pc, #144]	@ (8000f70 <KeyLogic+0x2f4>)
 8000ede:	6013      	str	r3, [r2, #0]
					orderLiter=(double)orderPrice/(double)roundedPrice;
 8000ee0:	4b23      	ldr	r3, [pc, #140]	@ (8000f70 <KeyLogic+0x2f4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fa7d 	bl	80003e4 <__aeabi_ui2d>
 8000eea:	4604      	mov	r4, r0
 8000eec:	460d      	mov	r5, r1
 8000eee:	4b21      	ldr	r3, [pc, #132]	@ (8000f74 <KeyLogic+0x2f8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fa76 	bl	80003e4 <__aeabi_ui2d>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4620      	mov	r0, r4
 8000efe:	4629      	mov	r1, r5
 8000f00:	f7ff fc14 	bl	800072c <__aeabi_ddiv>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	491b      	ldr	r1, [pc, #108]	@ (8000f78 <KeyLogic+0x2fc>)
 8000f0a:	e9c1 2300 	strd	r2, r3, [r1]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000f0e:	f000 bc45 	b.w	800179c <KeyLogic+0xb20>
				else if(seqState==SEQ_PRESSED_L){
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <KeyLogic+0x2ec>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b13      	cmp	r3, #19
 8000f18:	d13c      	bne.n	8000f94 <KeyLogic+0x318>
					orderLiter=5;
 8000f1a:	4917      	ldr	r1, [pc, #92]	@ (8000f78 <KeyLogic+0x2fc>)
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <KeyLogic+0x314>)
 8000f22:	e9c1 2300 	strd	r2, r3, [r1]
					orderPrice=orderLiter*roundedPrice;
 8000f26:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <KeyLogic+0x2f8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fa5a 	bl	80003e4 <__aeabi_ui2d>
 8000f30:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <KeyLogic+0x2fc>)
 8000f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f36:	f7ff facf 	bl	80004d8 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	f7ff fda1 	bl	8000a88 <__aeabi_d2uiz>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a09      	ldr	r2, [pc, #36]	@ (8000f70 <KeyLogic+0x2f4>)
 8000f4a:	6013      	str	r3, [r2, #0]
					seqState=SEQ_IDLE;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <KeyLogic+0x2ec>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <KeyLogic+0x304>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <KeyLogic+0x308>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
				break;
 8000f5e:	f000 bc1d 	b.w	800179c <KeyLogic+0xb20>
 8000f62:	bf00      	nop
 8000f64:	20000035 	.word	0x20000035
 8000f68:	20000269 	.word	0x20000269
 8000f6c:	2000004c 	.word	0x2000004c
 8000f70:	20000370 	.word	0x20000370
 8000f74:	20000048 	.word	0x20000048
 8000f78:	20000378 	.word	0x20000378
 8000f7c:	3ff00000 	.word	0x3ff00000
 8000f80:	2000025c 	.word	0x2000025c
 8000f84:	20000258 	.word	0x20000258
 8000f88:	20000050 	.word	0x20000050
 8000f8c:	20000054 	.word	0x20000054
 8000f90:	40140000 	.word	0x40140000
				else if (seqState == SEQ_PRESSED_T) {
 8000f94:	4b9f      	ldr	r3, [pc, #636]	@ (8001214 <KeyLogic+0x598>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b0e      	cmp	r3, #14
 8000f9a:	d109      	bne.n	8000fb0 <KeyLogic+0x334>
					seqState = SEQ_ENTER_OLD_PASSWORD;
 8000f9c:	4b9d      	ldr	r3, [pc, #628]	@ (8001214 <KeyLogic+0x598>)
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000fa2:	4b9d      	ldr	r3, [pc, #628]	@ (8001218 <KeyLogic+0x59c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000fa8:	4b9c      	ldr	r3, [pc, #624]	@ (800121c <KeyLogic+0x5a0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
				break;
 8000fae:	e3f5      	b.n	800179c <KeyLogic+0xb20>
					seqState = SEQ_IDLE;
 8000fb0:	4b98      	ldr	r3, [pc, #608]	@ (8001214 <KeyLogic+0x598>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000fb6:	4b98      	ldr	r3, [pc, #608]	@ (8001218 <KeyLogic+0x59c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000fbc:	4b97      	ldr	r3, [pc, #604]	@ (800121c <KeyLogic+0x5a0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
				break;
 8000fc2:	e3eb      	b.n	800179c <KeyLogic+0xb20>
/////////////////////////////////////////////////////KEY F/////////////////////////////////////////////////////////
			case 'F':
				if(seqState==SEQ_IDLE){
 8000fc4:	4b93      	ldr	r3, [pc, #588]	@ (8001214 <KeyLogic+0x598>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d11b      	bne.n	8001004 <KeyLogic+0x388>
					orderPrice=F4Price;
 8000fcc:	4b94      	ldr	r3, [pc, #592]	@ (8001220 <KeyLogic+0x5a4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a94      	ldr	r2, [pc, #592]	@ (8001224 <KeyLogic+0x5a8>)
 8000fd2:	6013      	str	r3, [r2, #0]
					orderLiter=(double)orderPrice/(double)roundedPrice;
 8000fd4:	4b93      	ldr	r3, [pc, #588]	@ (8001224 <KeyLogic+0x5a8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa03 	bl	80003e4 <__aeabi_ui2d>
 8000fde:	4604      	mov	r4, r0
 8000fe0:	460d      	mov	r5, r1
 8000fe2:	4b91      	ldr	r3, [pc, #580]	@ (8001228 <KeyLogic+0x5ac>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff f9fc 	bl	80003e4 <__aeabi_ui2d>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	4629      	mov	r1, r5
 8000ff4:	f7ff fb9a 	bl	800072c <__aeabi_ddiv>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	498b      	ldr	r1, [pc, #556]	@ (800122c <KeyLogic+0x5b0>)
 8000ffe:	e9c1 2300 	strd	r2, r3, [r1]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8001002:	e3cb      	b.n	800179c <KeyLogic+0xb20>
				else if(seqState==SEQ_PRESSED_L){
 8001004:	4b83      	ldr	r3, [pc, #524]	@ (8001214 <KeyLogic+0x598>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b13      	cmp	r3, #19
 800100a:	d122      	bne.n	8001052 <KeyLogic+0x3d6>
					orderLiter=10;
 800100c:	4987      	ldr	r1, [pc, #540]	@ (800122c <KeyLogic+0x5b0>)
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	4b87      	ldr	r3, [pc, #540]	@ (8001230 <KeyLogic+0x5b4>)
 8001014:	e9c1 2300 	strd	r2, r3, [r1]
					orderPrice=orderLiter*roundedPrice;
 8001018:	4b83      	ldr	r3, [pc, #524]	@ (8001228 <KeyLogic+0x5ac>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f9e1 	bl	80003e4 <__aeabi_ui2d>
 8001022:	4b82      	ldr	r3, [pc, #520]	@ (800122c <KeyLogic+0x5b0>)
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	f7ff fa56 	bl	80004d8 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fd28 	bl	8000a88 <__aeabi_d2uiz>
 8001038:	4603      	mov	r3, r0
 800103a:	4a7a      	ldr	r2, [pc, #488]	@ (8001224 <KeyLogic+0x5a8>)
 800103c:	6013      	str	r3, [r2, #0]
					seqState=SEQ_IDLE;
 800103e:	4b75      	ldr	r3, [pc, #468]	@ (8001214 <KeyLogic+0x598>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001044:	4b74      	ldr	r3, [pc, #464]	@ (8001218 <KeyLogic+0x59c>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800104a:	4b74      	ldr	r3, [pc, #464]	@ (800121c <KeyLogic+0x5a0>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
				break;
 8001050:	e3a4      	b.n	800179c <KeyLogic+0xb20>
				else if (seqState == SEQ_PRESSED_T) {
 8001052:	4b70      	ldr	r3, [pc, #448]	@ (8001214 <KeyLogic+0x598>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b0e      	cmp	r3, #14
 8001058:	d103      	bne.n	8001062 <KeyLogic+0x3e6>
					seqState = SEQ_PRESSED_T_F4;
 800105a:	4b6e      	ldr	r3, [pc, #440]	@ (8001214 <KeyLogic+0x598>)
 800105c:	2212      	movs	r2, #18
 800105e:	701a      	strb	r2, [r3, #0]
				break;
 8001060:	e39c      	b.n	800179c <KeyLogic+0xb20>
					seqState = SEQ_IDLE;
 8001062:	4b6c      	ldr	r3, [pc, #432]	@ (8001214 <KeyLogic+0x598>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001068:	4b6b      	ldr	r3, [pc, #428]	@ (8001218 <KeyLogic+0x59c>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800106e:	4b6b      	ldr	r3, [pc, #428]	@ (800121c <KeyLogic+0x5a0>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
				break;
 8001074:	e392      	b.n	800179c <KeyLogic+0xb20>
/////////////////////////////////////////////////////KEY C/////////////////////////////////////////////////////////
			case 'C':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8001076:	2300      	movs	r3, #0
 8001078:	4a6e      	ldr	r2, [pc, #440]	@ (8001234 <KeyLogic+0x5b8>)
 800107a:	2107      	movs	r1, #7
 800107c:	486e      	ldr	r0, [pc, #440]	@ (8001238 <KeyLogic+0x5bc>)
 800107e:	f003 fe7b 	bl	8004d78 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001082:	2300      	movs	r3, #0
 8001084:	4a6b      	ldr	r2, [pc, #428]	@ (8001234 <KeyLogic+0x5b8>)
 8001086:	2107      	movs	r1, #7
 8001088:	486c      	ldr	r0, [pc, #432]	@ (800123c <KeyLogic+0x5c0>)
 800108a:	f003 fe75 	bl	8004d78 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 1);
 800108e:	2301      	movs	r3, #1
 8001090:	4a68      	ldr	r2, [pc, #416]	@ (8001234 <KeyLogic+0x5b8>)
 8001092:	2107      	movs	r1, #7
 8001094:	486a      	ldr	r0, [pc, #424]	@ (8001240 <KeyLogic+0x5c4>)
 8001096:	f003 fe6f 	bl	8004d78 <sniprintf>
				break;
 800109a:	e37f      	b.n	800179c <KeyLogic+0xb20>
/////////////////////////////////////////////////////KEY E/////////////////////////////////////////////////////////
			case 'E':
				if(seqState == SEQ_IDLE){
 800109c:	4b5d      	ldr	r3, [pc, #372]	@ (8001214 <KeyLogic+0x598>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d103      	bne.n	80010ac <KeyLogic+0x430>
					seqState = SEQ_DISP_PRICE;
 80010a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001214 <KeyLogic+0x598>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
				else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 80010aa:	e377      	b.n	800179c <KeyLogic+0xb20>
				else if (seqState == SEQ_PRESSED_$){
 80010ac:	4b59      	ldr	r3, [pc, #356]	@ (8001214 <KeyLogic+0x598>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b14      	cmp	r3, #20
 80010b2:	d124      	bne.n	80010fe <KeyLogic+0x482>
					orderPrice=accumulatedNumber;
 80010b4:	4b59      	ldr	r3, [pc, #356]	@ (800121c <KeyLogic+0x5a0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a5a      	ldr	r2, [pc, #360]	@ (8001224 <KeyLogic+0x5a8>)
 80010ba:	6013      	str	r3, [r2, #0]
					orderLiter=(double)orderPrice/(double)roundedPrice;
 80010bc:	4b59      	ldr	r3, [pc, #356]	@ (8001224 <KeyLogic+0x5a8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f98f 	bl	80003e4 <__aeabi_ui2d>
 80010c6:	4604      	mov	r4, r0
 80010c8:	460d      	mov	r5, r1
 80010ca:	4b57      	ldr	r3, [pc, #348]	@ (8001228 <KeyLogic+0x5ac>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f988 	bl	80003e4 <__aeabi_ui2d>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4620      	mov	r0, r4
 80010da:	4629      	mov	r1, r5
 80010dc:	f7ff fb26 	bl	800072c <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4951      	ldr	r1, [pc, #324]	@ (800122c <KeyLogic+0x5b0>)
 80010e6:	e9c1 2300 	strd	r2, r3, [r1]
					seqState = SEQ_IDLE;
 80010ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001214 <KeyLogic+0x598>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80010f0:	4b49      	ldr	r3, [pc, #292]	@ (8001218 <KeyLogic+0x59c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80010f6:	4b49      	ldr	r3, [pc, #292]	@ (800121c <KeyLogic+0x5a0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
				break;
 80010fc:	e34e      	b.n	800179c <KeyLogic+0xb20>
				else if (seqState == SEQ_PRESSED_L){
 80010fe:	4b45      	ldr	r3, [pc, #276]	@ (8001214 <KeyLogic+0x598>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b13      	cmp	r3, #19
 8001104:	d126      	bne.n	8001154 <KeyLogic+0x4d8>
					orderLiter=accumulatedNumber;
 8001106:	4b45      	ldr	r3, [pc, #276]	@ (800121c <KeyLogic+0x5a0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f96a 	bl	80003e4 <__aeabi_ui2d>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4945      	ldr	r1, [pc, #276]	@ (800122c <KeyLogic+0x5b0>)
 8001116:	e9c1 2300 	strd	r2, r3, [r1]
					orderPrice=orderLiter*roundedPrice;
 800111a:	4b43      	ldr	r3, [pc, #268]	@ (8001228 <KeyLogic+0x5ac>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f960 	bl	80003e4 <__aeabi_ui2d>
 8001124:	4b41      	ldr	r3, [pc, #260]	@ (800122c <KeyLogic+0x5b0>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f7ff f9d5 	bl	80004d8 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	f7ff fca7 	bl	8000a88 <__aeabi_d2uiz>
 800113a:	4603      	mov	r3, r0
 800113c:	4a39      	ldr	r2, [pc, #228]	@ (8001224 <KeyLogic+0x5a8>)
 800113e:	6013      	str	r3, [r2, #0]
					seqState = SEQ_IDLE;
 8001140:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <KeyLogic+0x598>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001146:	4b34      	ldr	r3, [pc, #208]	@ (8001218 <KeyLogic+0x59c>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800114c:	4b33      	ldr	r3, [pc, #204]	@ (800121c <KeyLogic+0x5a0>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
				break;
 8001152:	e323      	b.n	800179c <KeyLogic+0xb20>
				else if (seqState == SEQ_PRESSED_P_NUM&&
 8001154:	4b2f      	ldr	r3, [pc, #188]	@ (8001214 <KeyLogic+0x598>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b08      	cmp	r3, #8
 800115a:	d10f      	bne.n	800117c <KeyLogic+0x500>
					accumulatedNumber==password) {
 800115c:	4b2f      	ldr	r3, [pc, #188]	@ (800121c <KeyLogic+0x5a0>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b38      	ldr	r3, [pc, #224]	@ (8001244 <KeyLogic+0x5c8>)
 8001162:	681b      	ldr	r3, [r3, #0]
				else if (seqState == SEQ_PRESSED_P_NUM&&
 8001164:	429a      	cmp	r2, r3
 8001166:	d109      	bne.n	800117c <KeyLogic+0x500>
					seqState = SEQ_PRESSED_P_PSWRD_SETPRICE;
 8001168:	4b2a      	ldr	r3, [pc, #168]	@ (8001214 <KeyLogic+0x598>)
 800116a:	2209      	movs	r2, #9
 800116c:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800116e:	4b2a      	ldr	r3, [pc, #168]	@ (8001218 <KeyLogic+0x59c>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001174:	4b29      	ldr	r3, [pc, #164]	@ (800121c <KeyLogic+0x5a0>)
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e20d      	b.n	8001598 <KeyLogic+0x91c>
				else if (seqState == SEQ_PRESSED_P_NUM&&
 800117c:	4b25      	ldr	r3, [pc, #148]	@ (8001214 <KeyLogic+0x598>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b08      	cmp	r3, #8
 8001182:	d10e      	bne.n	80011a2 <KeyLogic+0x526>
					accumulatedNumber==995591) {
 8001184:	4b25      	ldr	r3, [pc, #148]	@ (800121c <KeyLogic+0x5a0>)
 8001186:	681b      	ldr	r3, [r3, #0]
				else if (seqState == SEQ_PRESSED_P_NUM&&
 8001188:	4a2f      	ldr	r2, [pc, #188]	@ (8001248 <KeyLogic+0x5cc>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d109      	bne.n	80011a2 <KeyLogic+0x526>
					seqState = SEQ_PRESSED_P_SET_F1_PRICE;
 800118e:	4b21      	ldr	r3, [pc, #132]	@ (8001214 <KeyLogic+0x598>)
 8001190:	220a      	movs	r2, #10
 8001192:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001194:	4b20      	ldr	r3, [pc, #128]	@ (8001218 <KeyLogic+0x59c>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800119a:	4b20      	ldr	r3, [pc, #128]	@ (800121c <KeyLogic+0x5a0>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e1fa      	b.n	8001598 <KeyLogic+0x91c>
				else if (seqState == SEQ_PRESSED_P_NUM&&
 80011a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001214 <KeyLogic+0x598>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d10e      	bne.n	80011c8 <KeyLogic+0x54c>
					accumulatedNumber==995592) {
 80011aa:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <KeyLogic+0x5a0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
				else if (seqState == SEQ_PRESSED_P_NUM&&
 80011ae:	4a27      	ldr	r2, [pc, #156]	@ (800124c <KeyLogic+0x5d0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d109      	bne.n	80011c8 <KeyLogic+0x54c>
					seqState = SEQ_PRESSED_P_SET_F2_PRICE;
 80011b4:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <KeyLogic+0x598>)
 80011b6:	220b      	movs	r2, #11
 80011b8:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80011ba:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <KeyLogic+0x59c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80011c0:	4b16      	ldr	r3, [pc, #88]	@ (800121c <KeyLogic+0x5a0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	e1e7      	b.n	8001598 <KeyLogic+0x91c>
				else if (seqState == SEQ_PRESSED_P_NUM&&
 80011c8:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <KeyLogic+0x598>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	d10e      	bne.n	80011ee <KeyLogic+0x572>
					accumulatedNumber==995593) {
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <KeyLogic+0x5a0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
				else if (seqState == SEQ_PRESSED_P_NUM&&
 80011d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001250 <KeyLogic+0x5d4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d109      	bne.n	80011ee <KeyLogic+0x572>
					seqState = SEQ_PRESSED_P_SET_F3_PRICE;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <KeyLogic+0x598>)
 80011dc:	220c      	movs	r2, #12
 80011de:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80011e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <KeyLogic+0x59c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80011e6:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <KeyLogic+0x5a0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	e1d4      	b.n	8001598 <KeyLogic+0x91c>
				else if (seqState == SEQ_PRESSED_P_NUM&&
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <KeyLogic+0x598>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d130      	bne.n	8001258 <KeyLogic+0x5dc>
					accumulatedNumber==995594) {
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <KeyLogic+0x5a0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
				else if (seqState == SEQ_PRESSED_P_NUM&&
 80011fa:	4a16      	ldr	r2, [pc, #88]	@ (8001254 <KeyLogic+0x5d8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d12b      	bne.n	8001258 <KeyLogic+0x5dc>
					seqState = SEQ_PRESSED_P_SET_F4_PRICE;
 8001200:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <KeyLogic+0x598>)
 8001202:	220d      	movs	r2, #13
 8001204:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001206:	4b04      	ldr	r3, [pc, #16]	@ (8001218 <KeyLogic+0x59c>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <KeyLogic+0x5a0>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	e1c1      	b.n	8001598 <KeyLogic+0x91c>
 8001214:	20000269 	.word	0x20000269
 8001218:	2000025c 	.word	0x2000025c
 800121c:	20000258 	.word	0x20000258
 8001220:	20000058 	.word	0x20000058
 8001224:	20000370 	.word	0x20000370
 8001228:	20000048 	.word	0x20000048
 800122c:	20000378 	.word	0x20000378
 8001230:	40240000 	.word	0x40240000
 8001234:	08007028 	.word	0x08007028
 8001238:	20000020 	.word	0x20000020
 800123c:	20000027 	.word	0x20000027
 8001240:	2000002e 	.word	0x2000002e
 8001244:	20000038 	.word	0x20000038
 8001248:	000f3107 	.word	0x000f3107
 800124c:	000f3108 	.word	0x000f3108
 8001250:	000f3109 	.word	0x000f3109
 8001254:	000f310a 	.word	0x000f310a
				else if (seqState == SEQ_PRESSED_P_SET_F1_PRICE) {
 8001258:	4b9b      	ldr	r3, [pc, #620]	@ (80014c8 <KeyLogic+0x84c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b0a      	cmp	r3, #10
 800125e:	d10d      	bne.n	800127c <KeyLogic+0x600>
					F1Price=accumulatedNumber;
 8001260:	4b9a      	ldr	r3, [pc, #616]	@ (80014cc <KeyLogic+0x850>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a9a      	ldr	r2, [pc, #616]	@ (80014d0 <KeyLogic+0x854>)
 8001266:	6013      	str	r3, [r2, #0]
					seqState=SEQ_IDLE;
 8001268:	4b97      	ldr	r3, [pc, #604]	@ (80014c8 <KeyLogic+0x84c>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800126e:	4b99      	ldr	r3, [pc, #612]	@ (80014d4 <KeyLogic+0x858>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001274:	4b95      	ldr	r3, [pc, #596]	@ (80014cc <KeyLogic+0x850>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
				break;
 800127a:	e28f      	b.n	800179c <KeyLogic+0xb20>
				else if (seqState == SEQ_PRESSED_P_SET_F2_PRICE) {
 800127c:	4b92      	ldr	r3, [pc, #584]	@ (80014c8 <KeyLogic+0x84c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b0b      	cmp	r3, #11
 8001282:	d10d      	bne.n	80012a0 <KeyLogic+0x624>
					F2Price=accumulatedNumber;
 8001284:	4b91      	ldr	r3, [pc, #580]	@ (80014cc <KeyLogic+0x850>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a93      	ldr	r2, [pc, #588]	@ (80014d8 <KeyLogic+0x85c>)
 800128a:	6013      	str	r3, [r2, #0]
					seqState=SEQ_IDLE;
 800128c:	4b8e      	ldr	r3, [pc, #568]	@ (80014c8 <KeyLogic+0x84c>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001292:	4b90      	ldr	r3, [pc, #576]	@ (80014d4 <KeyLogic+0x858>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001298:	4b8c      	ldr	r3, [pc, #560]	@ (80014cc <KeyLogic+0x850>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
				break;
 800129e:	e27d      	b.n	800179c <KeyLogic+0xb20>
				else if (seqState == SEQ_PRESSED_P_SET_F3_PRICE) {
 80012a0:	4b89      	ldr	r3, [pc, #548]	@ (80014c8 <KeyLogic+0x84c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b0c      	cmp	r3, #12
 80012a6:	d10d      	bne.n	80012c4 <KeyLogic+0x648>
					F3Price=accumulatedNumber;
 80012a8:	4b88      	ldr	r3, [pc, #544]	@ (80014cc <KeyLogic+0x850>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a8b      	ldr	r2, [pc, #556]	@ (80014dc <KeyLogic+0x860>)
 80012ae:	6013      	str	r3, [r2, #0]
					seqState=SEQ_IDLE;
 80012b0:	4b85      	ldr	r3, [pc, #532]	@ (80014c8 <KeyLogic+0x84c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80012b6:	4b87      	ldr	r3, [pc, #540]	@ (80014d4 <KeyLogic+0x858>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80012bc:	4b83      	ldr	r3, [pc, #524]	@ (80014cc <KeyLogic+0x850>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
				break;
 80012c2:	e26b      	b.n	800179c <KeyLogic+0xb20>
				else if (seqState == SEQ_PRESSED_P_SET_F4_PRICE) {
 80012c4:	4b80      	ldr	r3, [pc, #512]	@ (80014c8 <KeyLogic+0x84c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b0d      	cmp	r3, #13
 80012ca:	d10d      	bne.n	80012e8 <KeyLogic+0x66c>
					F4Price=accumulatedNumber;
 80012cc:	4b7f      	ldr	r3, [pc, #508]	@ (80014cc <KeyLogic+0x850>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a83      	ldr	r2, [pc, #524]	@ (80014e0 <KeyLogic+0x864>)
 80012d2:	6013      	str	r3, [r2, #0]
					seqState=SEQ_IDLE;
 80012d4:	4b7c      	ldr	r3, [pc, #496]	@ (80014c8 <KeyLogic+0x84c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80012da:	4b7e      	ldr	r3, [pc, #504]	@ (80014d4 <KeyLogic+0x858>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80012e0:	4b7a      	ldr	r3, [pc, #488]	@ (80014cc <KeyLogic+0x850>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
				break;
 80012e6:	e259      	b.n	800179c <KeyLogic+0xb20>
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD&&
 80012e8:	4b77      	ldr	r3, [pc, #476]	@ (80014c8 <KeyLogic+0x84c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b06      	cmp	r3, #6
 80012ee:	d10f      	bne.n	8001310 <KeyLogic+0x694>
						accumulatedNumber==password){
 80012f0:	4b76      	ldr	r3, [pc, #472]	@ (80014cc <KeyLogic+0x850>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b7b      	ldr	r3, [pc, #492]	@ (80014e4 <KeyLogic+0x868>)
 80012f6:	681b      	ldr	r3, [r3, #0]
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD&&
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d109      	bne.n	8001310 <KeyLogic+0x694>
					seqState = SEQ_PRESSED_P_F2_PSWRD_ROUND;
 80012fc:	4b72      	ldr	r3, [pc, #456]	@ (80014c8 <KeyLogic+0x84c>)
 80012fe:	2207      	movs	r2, #7
 8001300:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001302:	4b74      	ldr	r3, [pc, #464]	@ (80014d4 <KeyLogic+0x858>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001308:	4b70      	ldr	r3, [pc, #448]	@ (80014cc <KeyLogic+0x850>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	e143      	b.n	8001598 <KeyLogic+0x91c>
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD_ROUND){
 8001310:	4b6d      	ldr	r3, [pc, #436]	@ (80014c8 <KeyLogic+0x84c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b07      	cmp	r3, #7
 8001316:	d17d      	bne.n	8001414 <KeyLogic+0x798>
					switch(accumulatedNumber){
 8001318:	4b6c      	ldr	r3, [pc, #432]	@ (80014cc <KeyLogic+0x850>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d066      	beq.n	80013ee <KeyLogic+0x772>
 8001320:	2b02      	cmp	r3, #2
 8001322:	d86c      	bhi.n	80013fe <KeyLogic+0x782>
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <KeyLogic+0x6b2>
 8001328:	2b01      	cmp	r3, #1
 800132a:	d030      	beq.n	800138e <KeyLogic+0x712>
							break;
 800132c:	e067      	b.n	80013fe <KeyLogic+0x782>
							if(currPrice%50<25){
 800132e:	4b6e      	ldr	r3, [pc, #440]	@ (80014e8 <KeyLogic+0x86c>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b6e      	ldr	r3, [pc, #440]	@ (80014ec <KeyLogic+0x870>)
 8001334:	fba3 1302 	umull	r1, r3, r3, r2
 8001338:	091b      	lsrs	r3, r3, #4
 800133a:	2132      	movs	r1, #50	@ 0x32
 800133c:	fb01 f303 	mul.w	r3, r1, r3
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b18      	cmp	r3, #24
 8001344:	d80f      	bhi.n	8001366 <KeyLogic+0x6ea>
								roundedPrice=currPrice-(currPrice%50);
 8001346:	4b68      	ldr	r3, [pc, #416]	@ (80014e8 <KeyLogic+0x86c>)
 8001348:	6819      	ldr	r1, [r3, #0]
 800134a:	4b67      	ldr	r3, [pc, #412]	@ (80014e8 <KeyLogic+0x86c>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b67      	ldr	r3, [pc, #412]	@ (80014ec <KeyLogic+0x870>)
 8001350:	fba3 0302 	umull	r0, r3, r3, r2
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	2032      	movs	r0, #50	@ 0x32
 8001358:	fb00 f303 	mul.w	r3, r0, r3
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	1acb      	subs	r3, r1, r3
 8001360:	4a63      	ldr	r2, [pc, #396]	@ (80014f0 <KeyLogic+0x874>)
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	e00f      	b.n	8001386 <KeyLogic+0x70a>
								roundedPrice=currPrice-(currPrice%50)+50;
 8001366:	4b60      	ldr	r3, [pc, #384]	@ (80014e8 <KeyLogic+0x86c>)
 8001368:	6819      	ldr	r1, [r3, #0]
 800136a:	4b5f      	ldr	r3, [pc, #380]	@ (80014e8 <KeyLogic+0x86c>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b5f      	ldr	r3, [pc, #380]	@ (80014ec <KeyLogic+0x870>)
 8001370:	fba3 0302 	umull	r0, r3, r3, r2
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	2032      	movs	r0, #50	@ 0x32
 8001378:	fb00 f303 	mul.w	r3, r0, r3
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	1acb      	subs	r3, r1, r3
 8001380:	3332      	adds	r3, #50	@ 0x32
 8001382:	4a5b      	ldr	r2, [pc, #364]	@ (80014f0 <KeyLogic+0x874>)
 8001384:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_ROUND_50;
 8001386:	4b5b      	ldr	r3, [pc, #364]	@ (80014f4 <KeyLogic+0x878>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
							break;
 800138c:	e038      	b.n	8001400 <KeyLogic+0x784>
							if(currPrice%100<50){
 800138e:	4b56      	ldr	r3, [pc, #344]	@ (80014e8 <KeyLogic+0x86c>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4b56      	ldr	r3, [pc, #344]	@ (80014ec <KeyLogic+0x870>)
 8001394:	fba3 1302 	umull	r1, r3, r3, r2
 8001398:	095b      	lsrs	r3, r3, #5
 800139a:	2164      	movs	r1, #100	@ 0x64
 800139c:	fb01 f303 	mul.w	r3, r1, r3
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b31      	cmp	r3, #49	@ 0x31
 80013a4:	d80f      	bhi.n	80013c6 <KeyLogic+0x74a>
								roundedPrice=currPrice-(currPrice%100);
 80013a6:	4b50      	ldr	r3, [pc, #320]	@ (80014e8 <KeyLogic+0x86c>)
 80013a8:	6819      	ldr	r1, [r3, #0]
 80013aa:	4b4f      	ldr	r3, [pc, #316]	@ (80014e8 <KeyLogic+0x86c>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b4f      	ldr	r3, [pc, #316]	@ (80014ec <KeyLogic+0x870>)
 80013b0:	fba3 0302 	umull	r0, r3, r3, r2
 80013b4:	095b      	lsrs	r3, r3, #5
 80013b6:	2064      	movs	r0, #100	@ 0x64
 80013b8:	fb00 f303 	mul.w	r3, r0, r3
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	1acb      	subs	r3, r1, r3
 80013c0:	4a4b      	ldr	r2, [pc, #300]	@ (80014f0 <KeyLogic+0x874>)
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e00f      	b.n	80013e6 <KeyLogic+0x76a>
								roundedPrice=currPrice-(currPrice%100)+100;
 80013c6:	4b48      	ldr	r3, [pc, #288]	@ (80014e8 <KeyLogic+0x86c>)
 80013c8:	6819      	ldr	r1, [r3, #0]
 80013ca:	4b47      	ldr	r3, [pc, #284]	@ (80014e8 <KeyLogic+0x86c>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4b47      	ldr	r3, [pc, #284]	@ (80014ec <KeyLogic+0x870>)
 80013d0:	fba3 0302 	umull	r0, r3, r3, r2
 80013d4:	095b      	lsrs	r3, r3, #5
 80013d6:	2064      	movs	r0, #100	@ 0x64
 80013d8:	fb00 f303 	mul.w	r3, r0, r3
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	1acb      	subs	r3, r1, r3
 80013e0:	3364      	adds	r3, #100	@ 0x64
 80013e2:	4a43      	ldr	r2, [pc, #268]	@ (80014f0 <KeyLogic+0x874>)
 80013e4:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_ROUND_100;
 80013e6:	4b43      	ldr	r3, [pc, #268]	@ (80014f4 <KeyLogic+0x878>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
							break;
 80013ec:	e008      	b.n	8001400 <KeyLogic+0x784>
							roundedPrice=currPrice;
 80013ee:	4b3e      	ldr	r3, [pc, #248]	@ (80014e8 <KeyLogic+0x86c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a3f      	ldr	r2, [pc, #252]	@ (80014f0 <KeyLogic+0x874>)
 80013f4:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_DEFAULT;
 80013f6:	4b3f      	ldr	r3, [pc, #252]	@ (80014f4 <KeyLogic+0x878>)
 80013f8:	2202      	movs	r2, #2
 80013fa:	701a      	strb	r2, [r3, #0]
							break;
 80013fc:	e000      	b.n	8001400 <KeyLogic+0x784>
							break;
 80013fe:	bf00      	nop
					seqState = SEQ_IDLE;
 8001400:	4b31      	ldr	r3, [pc, #196]	@ (80014c8 <KeyLogic+0x84c>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001406:	4b33      	ldr	r3, [pc, #204]	@ (80014d4 <KeyLogic+0x858>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800140c:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <KeyLogic+0x850>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
				break;
 8001412:	e1c3      	b.n	800179c <KeyLogic+0xb20>
				else if(seqState == SEQ_PRESSED_P_PSWRD_SETPRICE){
 8001414:	4b2c      	ldr	r3, [pc, #176]	@ (80014c8 <KeyLogic+0x84c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b09      	cmp	r3, #9
 800141a:	f040 808d 	bne.w	8001538 <KeyLogic+0x8bc>
					currPrice = accumulatedNumber;
 800141e:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <KeyLogic+0x850>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a31      	ldr	r2, [pc, #196]	@ (80014e8 <KeyLogic+0x86c>)
 8001424:	6013      	str	r3, [r2, #0]
					switch (currentPriceState){
 8001426:	4b33      	ldr	r3, [pc, #204]	@ (80014f4 <KeyLogic+0x878>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <KeyLogic+0x7b8>
 800142e:	2b01      	cmp	r3, #1
 8001430:	d02d      	beq.n	800148e <KeyLogic+0x812>
 8001432:	e072      	b.n	800151a <KeyLogic+0x89e>
							if(currPrice%50<25){
 8001434:	4b2c      	ldr	r3, [pc, #176]	@ (80014e8 <KeyLogic+0x86c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b2c      	ldr	r3, [pc, #176]	@ (80014ec <KeyLogic+0x870>)
 800143a:	fba3 1302 	umull	r1, r3, r3, r2
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	2132      	movs	r1, #50	@ 0x32
 8001442:	fb01 f303 	mul.w	r3, r1, r3
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b18      	cmp	r3, #24
 800144a:	d80f      	bhi.n	800146c <KeyLogic+0x7f0>
								roundedPrice=currPrice-(currPrice%50);
 800144c:	4b26      	ldr	r3, [pc, #152]	@ (80014e8 <KeyLogic+0x86c>)
 800144e:	6819      	ldr	r1, [r3, #0]
 8001450:	4b25      	ldr	r3, [pc, #148]	@ (80014e8 <KeyLogic+0x86c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b25      	ldr	r3, [pc, #148]	@ (80014ec <KeyLogic+0x870>)
 8001456:	fba3 0302 	umull	r0, r3, r3, r2
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	2032      	movs	r0, #50	@ 0x32
 800145e:	fb00 f303 	mul.w	r3, r0, r3
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	1acb      	subs	r3, r1, r3
 8001466:	4a22      	ldr	r2, [pc, #136]	@ (80014f0 <KeyLogic+0x874>)
 8001468:	6013      	str	r3, [r2, #0]
							break;
 800146a:	e05b      	b.n	8001524 <KeyLogic+0x8a8>
								roundedPrice=currPrice-(currPrice%50)+50;
 800146c:	4b1e      	ldr	r3, [pc, #120]	@ (80014e8 <KeyLogic+0x86c>)
 800146e:	6819      	ldr	r1, [r3, #0]
 8001470:	4b1d      	ldr	r3, [pc, #116]	@ (80014e8 <KeyLogic+0x86c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <KeyLogic+0x870>)
 8001476:	fba3 0302 	umull	r0, r3, r3, r2
 800147a:	091b      	lsrs	r3, r3, #4
 800147c:	2032      	movs	r0, #50	@ 0x32
 800147e:	fb00 f303 	mul.w	r3, r0, r3
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	1acb      	subs	r3, r1, r3
 8001486:	3332      	adds	r3, #50	@ 0x32
 8001488:	4a19      	ldr	r2, [pc, #100]	@ (80014f0 <KeyLogic+0x874>)
 800148a:	6013      	str	r3, [r2, #0]
							break;
 800148c:	e04a      	b.n	8001524 <KeyLogic+0x8a8>
							if(currPrice%100<50){
 800148e:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <KeyLogic+0x86c>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4b16      	ldr	r3, [pc, #88]	@ (80014ec <KeyLogic+0x870>)
 8001494:	fba3 1302 	umull	r1, r3, r3, r2
 8001498:	095b      	lsrs	r3, r3, #5
 800149a:	2164      	movs	r1, #100	@ 0x64
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b31      	cmp	r3, #49	@ 0x31
 80014a4:	d828      	bhi.n	80014f8 <KeyLogic+0x87c>
								roundedPrice=currPrice-(currPrice%100);
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <KeyLogic+0x86c>)
 80014a8:	6819      	ldr	r1, [r3, #0]
 80014aa:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <KeyLogic+0x86c>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <KeyLogic+0x870>)
 80014b0:	fba3 0302 	umull	r0, r3, r3, r2
 80014b4:	095b      	lsrs	r3, r3, #5
 80014b6:	2064      	movs	r0, #100	@ 0x64
 80014b8:	fb00 f303 	mul.w	r3, r0, r3
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	1acb      	subs	r3, r1, r3
 80014c0:	4a0b      	ldr	r2, [pc, #44]	@ (80014f0 <KeyLogic+0x874>)
 80014c2:	6013      	str	r3, [r2, #0]
							break;
 80014c4:	e02e      	b.n	8001524 <KeyLogic+0x8a8>
 80014c6:	bf00      	nop
 80014c8:	20000269 	.word	0x20000269
 80014cc:	20000258 	.word	0x20000258
 80014d0:	2000004c 	.word	0x2000004c
 80014d4:	2000025c 	.word	0x2000025c
 80014d8:	20000050 	.word	0x20000050
 80014dc:	20000054 	.word	0x20000054
 80014e0:	20000058 	.word	0x20000058
 80014e4:	20000038 	.word	0x20000038
 80014e8:	20000044 	.word	0x20000044
 80014ec:	51eb851f 	.word	0x51eb851f
 80014f0:	20000048 	.word	0x20000048
 80014f4:	20000268 	.word	0x20000268
								roundedPrice=currPrice-(currPrice%100)+100;
 80014f8:	4b93      	ldr	r3, [pc, #588]	@ (8001748 <KeyLogic+0xacc>)
 80014fa:	6819      	ldr	r1, [r3, #0]
 80014fc:	4b92      	ldr	r3, [pc, #584]	@ (8001748 <KeyLogic+0xacc>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b92      	ldr	r3, [pc, #584]	@ (800174c <KeyLogic+0xad0>)
 8001502:	fba3 0302 	umull	r0, r3, r3, r2
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2064      	movs	r0, #100	@ 0x64
 800150a:	fb00 f303 	mul.w	r3, r0, r3
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	1acb      	subs	r3, r1, r3
 8001512:	3364      	adds	r3, #100	@ 0x64
 8001514:	4a8e      	ldr	r2, [pc, #568]	@ (8001750 <KeyLogic+0xad4>)
 8001516:	6013      	str	r3, [r2, #0]
							break;
 8001518:	e004      	b.n	8001524 <KeyLogic+0x8a8>
							roundedPrice=currPrice;
 800151a:	4b8b      	ldr	r3, [pc, #556]	@ (8001748 <KeyLogic+0xacc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a8c      	ldr	r2, [pc, #560]	@ (8001750 <KeyLogic+0xad4>)
 8001520:	6013      	str	r3, [r2, #0]
							break;
 8001522:	bf00      	nop
					seqState = SEQ_IDLE;
 8001524:	4b8b      	ldr	r3, [pc, #556]	@ (8001754 <KeyLogic+0xad8>)
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800152a:	4b8b      	ldr	r3, [pc, #556]	@ (8001758 <KeyLogic+0xadc>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001530:	4b8a      	ldr	r3, [pc, #552]	@ (800175c <KeyLogic+0xae0>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
				break;
 8001536:	e131      	b.n	800179c <KeyLogic+0xb20>
				else if(seqState == SEQ_ENTER_OLD_PASSWORD&&
 8001538:	4b86      	ldr	r3, [pc, #536]	@ (8001754 <KeyLogic+0xad8>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d10f      	bne.n	8001560 <KeyLogic+0x8e4>
						accumulatedNumber == password){
 8001540:	4b86      	ldr	r3, [pc, #536]	@ (800175c <KeyLogic+0xae0>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b86      	ldr	r3, [pc, #536]	@ (8001760 <KeyLogic+0xae4>)
 8001546:	681b      	ldr	r3, [r3, #0]
				else if(seqState == SEQ_ENTER_OLD_PASSWORD&&
 8001548:	429a      	cmp	r2, r3
 800154a:	d109      	bne.n	8001560 <KeyLogic+0x8e4>
					seqState = SEQ_ENTER_NEW_PASSWORD;
 800154c:	4b81      	ldr	r3, [pc, #516]	@ (8001754 <KeyLogic+0xad8>)
 800154e:	2203      	movs	r2, #3
 8001550:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001552:	4b81      	ldr	r3, [pc, #516]	@ (8001758 <KeyLogic+0xadc>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001558:	4b80      	ldr	r3, [pc, #512]	@ (800175c <KeyLogic+0xae0>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e01b      	b.n	8001598 <KeyLogic+0x91c>
				else if(seqState == SEQ_ENTER_NEW_PASSWORD){
 8001560:	4b7c      	ldr	r3, [pc, #496]	@ (8001754 <KeyLogic+0xad8>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b03      	cmp	r3, #3
 8001566:	d10d      	bne.n	8001584 <KeyLogic+0x908>
					password = accumulatedNumber;
 8001568:	4b7c      	ldr	r3, [pc, #496]	@ (800175c <KeyLogic+0xae0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a7c      	ldr	r2, [pc, #496]	@ (8001760 <KeyLogic+0xae4>)
 800156e:	6013      	str	r3, [r2, #0]
					seqState = SEQ_IDLE;
 8001570:	4b78      	ldr	r3, [pc, #480]	@ (8001754 <KeyLogic+0xad8>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001576:	4b78      	ldr	r3, [pc, #480]	@ (8001758 <KeyLogic+0xadc>)
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800157c:	4b77      	ldr	r3, [pc, #476]	@ (800175c <KeyLogic+0xae0>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
				break;
 8001582:	e10b      	b.n	800179c <KeyLogic+0xb20>
					seqState = SEQ_IDLE;
 8001584:	4b73      	ldr	r3, [pc, #460]	@ (8001754 <KeyLogic+0xad8>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800158a:	4b73      	ldr	r3, [pc, #460]	@ (8001758 <KeyLogic+0xadc>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001590:	4b72      	ldr	r3, [pc, #456]	@ (800175c <KeyLogic+0xae0>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
				break;
 8001596:	e101      	b.n	800179c <KeyLogic+0xb20>
 8001598:	e100      	b.n	800179c <KeyLogic+0xb20>
/////////////////////////////////////////////////////KEY P/////////////////////////////////////////////////////////
			case 'P':
				if (seqState == SEQ_IDLE) {
 800159a:	4b6e      	ldr	r3, [pc, #440]	@ (8001754 <KeyLogic+0xad8>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d103      	bne.n	80015aa <KeyLogic+0x92e>
					seqState = SEQ_PRESSED_P;
 80015a2:	4b6c      	ldr	r3, [pc, #432]	@ (8001754 <KeyLogic+0xad8>)
 80015a4:	2205      	movs	r2, #5
 80015a6:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 80015a8:	e0f8      	b.n	800179c <KeyLogic+0xb20>
					seqState = SEQ_IDLE;
 80015aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001754 <KeyLogic+0xad8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80015b0:	4b69      	ldr	r3, [pc, #420]	@ (8001758 <KeyLogic+0xadc>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80015b6:	4b69      	ldr	r3, [pc, #420]	@ (800175c <KeyLogic+0xae0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
				break;
 80015bc:	e0ee      	b.n	800179c <KeyLogic+0xb20>
/////////////////////////////////////////////////////KEY T/////////////////////////////////////////////////////////
			case 'T':
				if (seqState == SEQ_IDLE) {
 80015be:	4b65      	ldr	r3, [pc, #404]	@ (8001754 <KeyLogic+0xad8>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d103      	bne.n	80015ce <KeyLogic+0x952>
					seqState = SEQ_PRESSED_T;
 80015c6:	4b63      	ldr	r3, [pc, #396]	@ (8001754 <KeyLogic+0xad8>)
 80015c8:	220e      	movs	r2, #14
 80015ca:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 80015cc:	e0e6      	b.n	800179c <KeyLogic+0xb20>
					seqState = SEQ_IDLE;
 80015ce:	4b61      	ldr	r3, [pc, #388]	@ (8001754 <KeyLogic+0xad8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80015d4:	4b60      	ldr	r3, [pc, #384]	@ (8001758 <KeyLogic+0xadc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80015da:	4b60      	ldr	r3, [pc, #384]	@ (800175c <KeyLogic+0xae0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
				break;
 80015e0:	e0dc      	b.n	800179c <KeyLogic+0xb20>
/////////////////////////////////////////////////////KEY $/////////////////////////////////////////////////////////
			case '$':
				if (seqState == SEQ_IDLE) {
 80015e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001754 <KeyLogic+0xad8>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d103      	bne.n	80015f2 <KeyLogic+0x976>
					seqState = SEQ_PRESSED_$;
 80015ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001754 <KeyLogic+0xad8>)
 80015ec:	2214      	movs	r2, #20
 80015ee:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 80015f0:	e0d4      	b.n	800179c <KeyLogic+0xb20>
				}else if (seqState == SEQ_PRESSED_T) {
 80015f2:	4b58      	ldr	r3, [pc, #352]	@ (8001754 <KeyLogic+0xad8>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b0e      	cmp	r3, #14
 80015f8:	d103      	bne.n	8001602 <KeyLogic+0x986>
					seqState = SEQ_PRESSED_T_$;
 80015fa:	4b56      	ldr	r3, [pc, #344]	@ (8001754 <KeyLogic+0xad8>)
 80015fc:	2210      	movs	r2, #16
 80015fe:	701a      	strb	r2, [r3, #0]
				break;
 8001600:	e0cc      	b.n	800179c <KeyLogic+0xb20>
					seqState = SEQ_IDLE;
 8001602:	4b54      	ldr	r3, [pc, #336]	@ (8001754 <KeyLogic+0xad8>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001608:	4b53      	ldr	r3, [pc, #332]	@ (8001758 <KeyLogic+0xadc>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800160e:	4b53      	ldr	r3, [pc, #332]	@ (800175c <KeyLogic+0xae0>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
				break;
 8001614:	e0c2      	b.n	800179c <KeyLogic+0xb20>
/////////////////////////////////////////////////////KEY L/////////////////////////////////////////////////////////
			case 'L':
				if (seqState == SEQ_IDLE) {
 8001616:	4b4f      	ldr	r3, [pc, #316]	@ (8001754 <KeyLogic+0xad8>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d103      	bne.n	8001626 <KeyLogic+0x9aa>
					seqState = SEQ_PRESSED_L;
 800161e:	4b4d      	ldr	r3, [pc, #308]	@ (8001754 <KeyLogic+0xad8>)
 8001620:	2213      	movs	r2, #19
 8001622:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8001624:	e0ba      	b.n	800179c <KeyLogic+0xb20>
				} else if (seqState == SEQ_PRESSED_T) {
 8001626:	4b4b      	ldr	r3, [pc, #300]	@ (8001754 <KeyLogic+0xad8>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b0e      	cmp	r3, #14
 800162c:	d103      	bne.n	8001636 <KeyLogic+0x9ba>
					seqState = SEQ_PRESSED_T_L;
 800162e:	4b49      	ldr	r3, [pc, #292]	@ (8001754 <KeyLogic+0xad8>)
 8001630:	220f      	movs	r2, #15
 8001632:	701a      	strb	r2, [r3, #0]
				break;
 8001634:	e0b2      	b.n	800179c <KeyLogic+0xb20>
					seqState = SEQ_IDLE;
 8001636:	4b47      	ldr	r3, [pc, #284]	@ (8001754 <KeyLogic+0xad8>)
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800163c:	4b46      	ldr	r3, [pc, #280]	@ (8001758 <KeyLogic+0xadc>)
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001642:	4b46      	ldr	r3, [pc, #280]	@ (800175c <KeyLogic+0xae0>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
				break;
 8001648:	e0a8      	b.n	800179c <KeyLogic+0xb20>
			default:
/////////////////////////////////////////////////////KEY 0-9/////////////////////////////////////////////////////////
				if(keyPressed >= '0' && keyPressed <= '9') {
 800164a:	4b46      	ldr	r3, [pc, #280]	@ (8001764 <KeyLogic+0xae8>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001650:	f240 8098 	bls.w	8001784 <KeyLogic+0xb08>
 8001654:	4b43      	ldr	r3, [pc, #268]	@ (8001764 <KeyLogic+0xae8>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b39      	cmp	r3, #57	@ 0x39
 800165a:	f200 8093 	bhi.w	8001784 <KeyLogic+0xb08>
					if(seqState==SEQ_PRESSED_P){
 800165e:	4b3d      	ldr	r3, [pc, #244]	@ (8001754 <KeyLogic+0xad8>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b05      	cmp	r3, #5
 8001664:	d10c      	bne.n	8001680 <KeyLogic+0xa04>
						seqState=SEQ_PRESSED_P_NUM;
 8001666:	4b3b      	ldr	r3, [pc, #236]	@ (8001754 <KeyLogic+0xad8>)
 8001668:	2208      	movs	r2, #8
 800166a:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 800166c:	4b3d      	ldr	r3, [pc, #244]	@ (8001764 <KeyLogic+0xae8>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	3b30      	subs	r3, #48	@ 0x30
 8001672:	461a      	mov	r2, r3
 8001674:	4b39      	ldr	r3, [pc, #228]	@ (800175c <KeyLogic+0xae0>)
 8001676:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 8001678:	4b37      	ldr	r3, [pc, #220]	@ (8001758 <KeyLogic+0xadc>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 800167e:	e08b      	b.n	8001798 <KeyLogic+0xb1c>
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 8001680:	4b34      	ldr	r3, [pc, #208]	@ (8001754 <KeyLogic+0xad8>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b08      	cmp	r3, #8
 8001686:	d02b      	beq.n	80016e0 <KeyLogic+0xa64>
							seqState == SEQ_PRESSED_P_F2_PSWRD ||
 8001688:	4b32      	ldr	r3, [pc, #200]	@ (8001754 <KeyLogic+0xad8>)
 800168a:	781b      	ldrb	r3, [r3, #0]
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 800168c:	2b06      	cmp	r3, #6
 800168e:	d027      	beq.n	80016e0 <KeyLogic+0xa64>
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 8001690:	4b30      	ldr	r3, [pc, #192]	@ (8001754 <KeyLogic+0xad8>)
 8001692:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_F2_PSWRD ||
 8001694:	2b09      	cmp	r3, #9
 8001696:	d023      	beq.n	80016e0 <KeyLogic+0xa64>
							seqState == SEQ_PRESSED_P_SET_F1_PRICE||
 8001698:	4b2e      	ldr	r3, [pc, #184]	@ (8001754 <KeyLogic+0xad8>)
 800169a:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 800169c:	2b0a      	cmp	r3, #10
 800169e:	d01f      	beq.n	80016e0 <KeyLogic+0xa64>
							seqState == SEQ_PRESSED_P_SET_F2_PRICE||
 80016a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001754 <KeyLogic+0xad8>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_SET_F1_PRICE||
 80016a4:	2b0b      	cmp	r3, #11
 80016a6:	d01b      	beq.n	80016e0 <KeyLogic+0xa64>
							seqState == SEQ_PRESSED_P_SET_F3_PRICE||
 80016a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <KeyLogic+0xad8>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_SET_F2_PRICE||
 80016ac:	2b0c      	cmp	r3, #12
 80016ae:	d017      	beq.n	80016e0 <KeyLogic+0xa64>
							seqState == SEQ_PRESSED_P_SET_F4_PRICE||
 80016b0:	4b28      	ldr	r3, [pc, #160]	@ (8001754 <KeyLogic+0xad8>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_SET_F3_PRICE||
 80016b4:	2b0d      	cmp	r3, #13
 80016b6:	d013      	beq.n	80016e0 <KeyLogic+0xa64>
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 80016b8:	4b26      	ldr	r3, [pc, #152]	@ (8001754 <KeyLogic+0xad8>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_SET_F4_PRICE||
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d00f      	beq.n	80016e0 <KeyLogic+0xa64>
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 80016c0:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <KeyLogic+0xad8>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d00b      	beq.n	80016e0 <KeyLogic+0xa64>
							seqState == SEQ_NUMBER ||
 80016c8:	4b22      	ldr	r3, [pc, #136]	@ (8001754 <KeyLogic+0xad8>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d007      	beq.n	80016e0 <KeyLogic+0xa64>
							seqState == SEQ_PRESSED_$||
 80016d0:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <KeyLogic+0xad8>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_NUMBER ||
 80016d4:	2b14      	cmp	r3, #20
 80016d6:	d003      	beq.n	80016e0 <KeyLogic+0xa64>
							seqState == SEQ_PRESSED_L
 80016d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <KeyLogic+0xad8>)
 80016da:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_$||
 80016dc:	2b13      	cmp	r3, #19
 80016de:	d117      	bne.n	8001710 <KeyLogic+0xa94>
							) {
						if (numberOfDigits < 6) {
 80016e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001758 <KeyLogic+0xadc>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d84c      	bhi.n	8001782 <KeyLogic+0xb06>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 80016e8:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <KeyLogic+0xae0>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <KeyLogic+0xae8>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	3b30      	subs	r3, #48	@ 0x30
 80016fe:	4a17      	ldr	r2, [pc, #92]	@ (800175c <KeyLogic+0xae0>)
 8001700:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <KeyLogic+0xadc>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <KeyLogic+0xadc>)
 800170c:	701a      	strb	r2, [r3, #0]
						if (numberOfDigits < 6) {
 800170e:	e038      	b.n	8001782 <KeyLogic+0xb06>
						}

					}else if(seqState == SEQ_PRESSED_P_F2_PSWRD_ROUND){
 8001710:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <KeyLogic+0xad8>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b07      	cmp	r3, #7
 8001716:	d127      	bne.n	8001768 <KeyLogic+0xaec>
						if (numberOfDigits < 1) {
 8001718:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <KeyLogic+0xadc>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d13b      	bne.n	8001798 <KeyLogic+0xb1c>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 8001720:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <KeyLogic+0xae0>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	461a      	mov	r2, r3
 800172e:	4b0d      	ldr	r3, [pc, #52]	@ (8001764 <KeyLogic+0xae8>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	3b30      	subs	r3, #48	@ 0x30
 8001736:	4a09      	ldr	r2, [pc, #36]	@ (800175c <KeyLogic+0xae0>)
 8001738:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 800173a:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <KeyLogic+0xadc>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	3301      	adds	r3, #1
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <KeyLogic+0xadc>)
 8001744:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8001746:	e027      	b.n	8001798 <KeyLogic+0xb1c>
 8001748:	20000044 	.word	0x20000044
 800174c:	51eb851f 	.word	0x51eb851f
 8001750:	20000048 	.word	0x20000048
 8001754:	20000269 	.word	0x20000269
 8001758:	2000025c 	.word	0x2000025c
 800175c:	20000258 	.word	0x20000258
 8001760:	20000038 	.word	0x20000038
 8001764:	20000035 	.word	0x20000035
						}
					}else{ //IDLE
						seqState = SEQ_NUMBER;
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <KeyLogic+0xb2c>)
 800176a:	2204      	movs	r2, #4
 800176c:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <KeyLogic+0xb30>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	3b30      	subs	r3, #48	@ 0x30
 8001774:	461a      	mov	r2, r3
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <KeyLogic+0xb34>)
 8001778:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 800177a:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <KeyLogic+0xb38>)
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8001780:	e00a      	b.n	8001798 <KeyLogic+0xb1c>
 8001782:	e009      	b.n	8001798 <KeyLogic+0xb1c>
					}
				}else{
					seqState = SEQ_IDLE;
 8001784:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <KeyLogic+0xb2c>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <KeyLogic+0xb38>)
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001790:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <KeyLogic+0xb34>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
				}
				break;
 8001796:	e000      	b.n	800179a <KeyLogic+0xb1e>
					if(seqState==SEQ_PRESSED_P){
 8001798:	bf00      	nop
				break;
 800179a:	bf00      	nop
		}
	}
	keyPressed = 0xFF;
 800179c:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <KeyLogic+0xb30>)
 800179e:	22ff      	movs	r2, #255	@ 0xff
 80017a0:	701a      	strb	r2, [r3, #0]
}
 80017a2:	bf00      	nop
 80017a4:	bdb0      	pop	{r4, r5, r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000269 	.word	0x20000269
 80017ac:	20000035 	.word	0x20000035
 80017b0:	20000258 	.word	0x20000258
 80017b4:	2000025c 	.word	0x2000025c

080017b8 <KeyLogic_Action>:


void KeyLogic_Action() {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08e      	sub	sp, #56	@ 0x38
 80017bc:	af02      	add	r7, sp, #8
    char buffer[7];
    switch (seqState) {
 80017be:	4bab      	ldr	r3, [pc, #684]	@ (8001a6c <KeyLogic_Action+0x2b4>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b14      	cmp	r3, #20
 80017c4:	f200 829d 	bhi.w	8001d02 <KeyLogic_Action+0x54a>
 80017c8:	a201      	add	r2, pc, #4	@ (adr r2, 80017d0 <KeyLogic_Action+0x18>)
 80017ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ce:	bf00      	nop
 80017d0:	08001825 	.word	0x08001825
 80017d4:	08001855 	.word	0x08001855
 80017d8:	0800187b 	.word	0x0800187b
 80017dc:	080018b9 	.word	0x080018b9
 80017e0:	08001c5b 	.word	0x08001c5b
 80017e4:	080018f7 	.word	0x080018f7
 80017e8:	0800191d 	.word	0x0800191d
 80017ec:	08001943 	.word	0x08001943
 80017f0:	08001963 	.word	0x08001963
 80017f4:	08001a21 	.word	0x08001a21
 80017f8:	08001989 	.word	0x08001989
 80017fc:	080019af 	.word	0x080019af
 8001800:	080019d5 	.word	0x080019d5
 8001804:	080019fb 	.word	0x080019fb
 8001808:	08001a47 	.word	0x08001a47
 800180c:	08001b77 	.word	0x08001b77
 8001810:	08001ad9 	.word	0x08001ad9
 8001814:	08001c0f 	.word	0x08001c0f
 8001818:	08001c35 	.word	0x08001c35
 800181c:	08001ccf 	.word	0x08001ccf
 8001820:	08001c9b 	.word	0x08001c9b
        case SEQ_IDLE:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8001824:	2300      	movs	r3, #0
 8001826:	4a92      	ldr	r2, [pc, #584]	@ (8001a70 <KeyLogic_Action+0x2b8>)
 8001828:	2107      	movs	r1, #7
 800182a:	4892      	ldr	r0, [pc, #584]	@ (8001a74 <KeyLogic_Action+0x2bc>)
 800182c:	f003 faa4 	bl	8004d78 <sniprintf>
        	snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", orderPrice);
 8001830:	4b91      	ldr	r3, [pc, #580]	@ (8001a78 <KeyLogic_Action+0x2c0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a8e      	ldr	r2, [pc, #568]	@ (8001a70 <KeyLogic_Action+0x2b8>)
 8001836:	2107      	movs	r1, #7
 8001838:	4890      	ldr	r0, [pc, #576]	@ (8001a7c <KeyLogic_Action+0x2c4>)
 800183a:	f003 fa9d 	bl	8004d78 <sniprintf>
        	snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06.2f", orderLiter);
 800183e:	4b90      	ldr	r3, [pc, #576]	@ (8001a80 <KeyLogic_Action+0x2c8>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	e9cd 2300 	strd	r2, r3, [sp]
 8001848:	4a8e      	ldr	r2, [pc, #568]	@ (8001a84 <KeyLogic_Action+0x2cc>)
 800184a:	2107      	movs	r1, #7
 800184c:	488e      	ldr	r0, [pc, #568]	@ (8001a88 <KeyLogic_Action+0x2d0>)
 800184e:	f003 fa93 	bl	8004d78 <sniprintf>

            break;
 8001852:	e269      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_DISP_PRICE:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "GIA   ");
 8001854:	4a8d      	ldr	r2, [pc, #564]	@ (8001a8c <KeyLogic_Action+0x2d4>)
 8001856:	2107      	movs	r1, #7
 8001858:	4886      	ldr	r0, [pc, #536]	@ (8001a74 <KeyLogic_Action+0x2bc>)
 800185a:	f003 fa8d 	bl	8004d78 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", roundedPrice);
 800185e:	4b8c      	ldr	r3, [pc, #560]	@ (8001a90 <KeyLogic_Action+0x2d8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a8c      	ldr	r2, [pc, #560]	@ (8001a94 <KeyLogic_Action+0x2dc>)
 8001864:	2107      	movs	r1, #7
 8001866:	4885      	ldr	r0, [pc, #532]	@ (8001a7c <KeyLogic_Action+0x2c4>)
 8001868:	f003 fa86 	bl	8004d78 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 800186c:	2300      	movs	r3, #0
 800186e:	4a80      	ldr	r2, [pc, #512]	@ (8001a70 <KeyLogic_Action+0x2b8>)
 8001870:	2107      	movs	r1, #7
 8001872:	4885      	ldr	r0, [pc, #532]	@ (8001a88 <KeyLogic_Action+0x2d0>)
 8001874:	f003 fa80 	bl	8004d78 <sniprintf>
			break;
 8001878:	e256      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_ENTER_OLD_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 800187a:	4b87      	ldr	r3, [pc, #540]	@ (8001a98 <KeyLogic_Action+0x2e0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f107 0020 	add.w	r0, r7, #32
 8001882:	4a84      	ldr	r2, [pc, #528]	@ (8001a94 <KeyLogic_Action+0x2dc>)
 8001884:	2107      	movs	r1, #7
 8001886:	f003 fa77 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 800188a:	f107 0320 	add.w	r3, r7, #32
 800188e:	4a83      	ldr	r2, [pc, #524]	@ (8001a9c <KeyLogic_Action+0x2e4>)
 8001890:	2107      	movs	r1, #7
 8001892:	4878      	ldr	r0, [pc, #480]	@ (8001a74 <KeyLogic_Action+0x2bc>)
 8001894:	f003 fa70 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "0L0 ");
 8001898:	4a81      	ldr	r2, [pc, #516]	@ (8001aa0 <KeyLogic_Action+0x2e8>)
 800189a:	2107      	movs	r1, #7
 800189c:	4877      	ldr	r0, [pc, #476]	@ (8001a7c <KeyLogic_Action+0x2c4>)
 800189e:	f003 fa6b 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80018a2:	2300      	movs	r3, #0
 80018a4:	4a72      	ldr	r2, [pc, #456]	@ (8001a70 <KeyLogic_Action+0x2b8>)
 80018a6:	2107      	movs	r1, #7
 80018a8:	4877      	ldr	r0, [pc, #476]	@ (8001a88 <KeyLogic_Action+0x2d0>)
 80018aa:	f003 fa65 	bl	8004d78 <sniprintf>
            LEDPointFlag = -1;
 80018ae:	4b7d      	ldr	r3, [pc, #500]	@ (8001aa4 <KeyLogic_Action+0x2ec>)
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	601a      	str	r2, [r3, #0]
            break;
 80018b6:	e237      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_ENTER_NEW_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 80018b8:	4b77      	ldr	r3, [pc, #476]	@ (8001a98 <KeyLogic_Action+0x2e0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f107 0020 	add.w	r0, r7, #32
 80018c0:	4a74      	ldr	r2, [pc, #464]	@ (8001a94 <KeyLogic_Action+0x2dc>)
 80018c2:	2107      	movs	r1, #7
 80018c4:	f003 fa58 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 80018c8:	f107 0320 	add.w	r3, r7, #32
 80018cc:	4a73      	ldr	r2, [pc, #460]	@ (8001a9c <KeyLogic_Action+0x2e4>)
 80018ce:	2107      	movs	r1, #7
 80018d0:	4868      	ldr	r0, [pc, #416]	@ (8001a74 <KeyLogic_Action+0x2bc>)
 80018d2:	f003 fa51 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80018d6:	2300      	movs	r3, #0
 80018d8:	4a65      	ldr	r2, [pc, #404]	@ (8001a70 <KeyLogic_Action+0x2b8>)
 80018da:	2107      	movs	r1, #7
 80018dc:	4867      	ldr	r0, [pc, #412]	@ (8001a7c <KeyLogic_Action+0x2c4>)
 80018de:	f003 fa4b 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " NEUU ");
 80018e2:	4a71      	ldr	r2, [pc, #452]	@ (8001aa8 <KeyLogic_Action+0x2f0>)
 80018e4:	2107      	movs	r1, #7
 80018e6:	4868      	ldr	r0, [pc, #416]	@ (8001a88 <KeyLogic_Action+0x2d0>)
 80018e8:	f003 fa46 	bl	8004d78 <sniprintf>
            LEDPointFlag = -1;
 80018ec:	4b6d      	ldr	r3, [pc, #436]	@ (8001aa4 <KeyLogic_Action+0x2ec>)
 80018ee:	f04f 32ff 	mov.w	r2, #4294967295
 80018f2:	601a      	str	r2, [r3, #0]
            break;
 80018f4:	e218      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_PRESSED_P:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 80018f6:	4b68      	ldr	r3, [pc, #416]	@ (8001a98 <KeyLogic_Action+0x2e0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a66      	ldr	r2, [pc, #408]	@ (8001a94 <KeyLogic_Action+0x2dc>)
 80018fc:	2107      	movs	r1, #7
 80018fe:	485d      	ldr	r0, [pc, #372]	@ (8001a74 <KeyLogic_Action+0x2bc>)
 8001900:	f003 fa3a 	bl	8004d78 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001904:	2300      	movs	r3, #0
 8001906:	4a5a      	ldr	r2, [pc, #360]	@ (8001a70 <KeyLogic_Action+0x2b8>)
 8001908:	2107      	movs	r1, #7
 800190a:	485c      	ldr	r0, [pc, #368]	@ (8001a7c <KeyLogic_Action+0x2c4>)
 800190c:	f003 fa34 	bl	8004d78 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P     ");
 8001910:	4a66      	ldr	r2, [pc, #408]	@ (8001aac <KeyLogic_Action+0x2f4>)
 8001912:	2107      	movs	r1, #7
 8001914:	485c      	ldr	r0, [pc, #368]	@ (8001a88 <KeyLogic_Action+0x2d0>)
 8001916:	f003 fa2f 	bl	8004d78 <sniprintf>
			break;
 800191a:	e205      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_PRESSED_P_F2_PSWRD:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 800191c:	4b5e      	ldr	r3, [pc, #376]	@ (8001a98 <KeyLogic_Action+0x2e0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a5c      	ldr	r2, [pc, #368]	@ (8001a94 <KeyLogic_Action+0x2dc>)
 8001922:	2107      	movs	r1, #7
 8001924:	4853      	ldr	r0, [pc, #332]	@ (8001a74 <KeyLogic_Action+0x2bc>)
 8001926:	f003 fa27 	bl	8004d78 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800192a:	2300      	movs	r3, #0
 800192c:	4a50      	ldr	r2, [pc, #320]	@ (8001a70 <KeyLogic_Action+0x2b8>)
 800192e:	2107      	movs	r1, #7
 8001930:	4852      	ldr	r0, [pc, #328]	@ (8001a7c <KeyLogic_Action+0x2c4>)
 8001932:	f003 fa21 	bl	8004d78 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SL ARO");
 8001936:	4a5e      	ldr	r2, [pc, #376]	@ (8001ab0 <KeyLogic_Action+0x2f8>)
 8001938:	2107      	movs	r1, #7
 800193a:	4853      	ldr	r0, [pc, #332]	@ (8001a88 <KeyLogic_Action+0x2d0>)
 800193c:	f003 fa1c 	bl	8004d78 <sniprintf>
			break;
 8001940:	e1f2      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_PRESSED_P_F2_PSWRD_ROUND:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "0.  50");
 8001942:	4a5c      	ldr	r2, [pc, #368]	@ (8001ab4 <KeyLogic_Action+0x2fc>)
 8001944:	2107      	movs	r1, #7
 8001946:	484b      	ldr	r0, [pc, #300]	@ (8001a74 <KeyLogic_Action+0x2bc>)
 8001948:	f003 fa16 	bl	8004d78 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "1. 100");
 800194c:	4a5a      	ldr	r2, [pc, #360]	@ (8001ab8 <KeyLogic_Action+0x300>)
 800194e:	2107      	movs	r1, #7
 8001950:	484a      	ldr	r0, [pc, #296]	@ (8001a7c <KeyLogic_Action+0x2c4>)
 8001952:	f003 fa11 	bl	8004d78 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "2. 1..");
 8001956:	4a59      	ldr	r2, [pc, #356]	@ (8001abc <KeyLogic_Action+0x304>)
 8001958:	2107      	movs	r1, #7
 800195a:	484b      	ldr	r0, [pc, #300]	@ (8001a88 <KeyLogic_Action+0x2d0>)
 800195c:	f003 fa0c 	bl	8004d78 <sniprintf>
			break;
 8001960:	e1e2      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_PRESSED_P_NUM:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001962:	4b4d      	ldr	r3, [pc, #308]	@ (8001a98 <KeyLogic_Action+0x2e0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a4b      	ldr	r2, [pc, #300]	@ (8001a94 <KeyLogic_Action+0x2dc>)
 8001968:	2107      	movs	r1, #7
 800196a:	4842      	ldr	r0, [pc, #264]	@ (8001a74 <KeyLogic_Action+0x2bc>)
 800196c:	f003 fa04 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001970:	2300      	movs	r3, #0
 8001972:	4a3f      	ldr	r2, [pc, #252]	@ (8001a70 <KeyLogic_Action+0x2b8>)
 8001974:	2107      	movs	r1, #7
 8001976:	4841      	ldr	r0, [pc, #260]	@ (8001a7c <KeyLogic_Action+0x2c4>)
 8001978:	f003 f9fe 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P88888");
 800197c:	4a50      	ldr	r2, [pc, #320]	@ (8001ac0 <KeyLogic_Action+0x308>)
 800197e:	2107      	movs	r1, #7
 8001980:	4841      	ldr	r0, [pc, #260]	@ (8001a88 <KeyLogic_Action+0x2d0>)
 8001982:	f003 f9f9 	bl	8004d78 <sniprintf>
            break;
 8001986:	e1cf      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_PRESSED_P_SET_F1_PRICE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001988:	4b43      	ldr	r3, [pc, #268]	@ (8001a98 <KeyLogic_Action+0x2e0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a41      	ldr	r2, [pc, #260]	@ (8001a94 <KeyLogic_Action+0x2dc>)
 800198e:	2107      	movs	r1, #7
 8001990:	4838      	ldr	r0, [pc, #224]	@ (8001a74 <KeyLogic_Action+0x2bc>)
 8001992:	f003 f9f1 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001996:	2300      	movs	r3, #0
 8001998:	4a35      	ldr	r2, [pc, #212]	@ (8001a70 <KeyLogic_Action+0x2b8>)
 800199a:	2107      	movs	r1, #7
 800199c:	4837      	ldr	r0, [pc, #220]	@ (8001a7c <KeyLogic_Action+0x2c4>)
 800199e:	f003 f9eb 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SET F1");
 80019a2:	4a48      	ldr	r2, [pc, #288]	@ (8001ac4 <KeyLogic_Action+0x30c>)
 80019a4:	2107      	movs	r1, #7
 80019a6:	4838      	ldr	r0, [pc, #224]	@ (8001a88 <KeyLogic_Action+0x2d0>)
 80019a8:	f003 f9e6 	bl	8004d78 <sniprintf>
            break;
 80019ac:	e1bc      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_PRESSED_P_SET_F2_PRICE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 80019ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001a98 <KeyLogic_Action+0x2e0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a38      	ldr	r2, [pc, #224]	@ (8001a94 <KeyLogic_Action+0x2dc>)
 80019b4:	2107      	movs	r1, #7
 80019b6:	482f      	ldr	r0, [pc, #188]	@ (8001a74 <KeyLogic_Action+0x2bc>)
 80019b8:	f003 f9de 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80019bc:	2300      	movs	r3, #0
 80019be:	4a2c      	ldr	r2, [pc, #176]	@ (8001a70 <KeyLogic_Action+0x2b8>)
 80019c0:	2107      	movs	r1, #7
 80019c2:	482e      	ldr	r0, [pc, #184]	@ (8001a7c <KeyLogic_Action+0x2c4>)
 80019c4:	f003 f9d8 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SET F2");
 80019c8:	4a3f      	ldr	r2, [pc, #252]	@ (8001ac8 <KeyLogic_Action+0x310>)
 80019ca:	2107      	movs	r1, #7
 80019cc:	482e      	ldr	r0, [pc, #184]	@ (8001a88 <KeyLogic_Action+0x2d0>)
 80019ce:	f003 f9d3 	bl	8004d78 <sniprintf>
            break;
 80019d2:	e1a9      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_PRESSED_P_SET_F3_PRICE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 80019d4:	4b30      	ldr	r3, [pc, #192]	@ (8001a98 <KeyLogic_Action+0x2e0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a2e      	ldr	r2, [pc, #184]	@ (8001a94 <KeyLogic_Action+0x2dc>)
 80019da:	2107      	movs	r1, #7
 80019dc:	4825      	ldr	r0, [pc, #148]	@ (8001a74 <KeyLogic_Action+0x2bc>)
 80019de:	f003 f9cb 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80019e2:	2300      	movs	r3, #0
 80019e4:	4a22      	ldr	r2, [pc, #136]	@ (8001a70 <KeyLogic_Action+0x2b8>)
 80019e6:	2107      	movs	r1, #7
 80019e8:	4824      	ldr	r0, [pc, #144]	@ (8001a7c <KeyLogic_Action+0x2c4>)
 80019ea:	f003 f9c5 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SET F3");
 80019ee:	4a37      	ldr	r2, [pc, #220]	@ (8001acc <KeyLogic_Action+0x314>)
 80019f0:	2107      	movs	r1, #7
 80019f2:	4825      	ldr	r0, [pc, #148]	@ (8001a88 <KeyLogic_Action+0x2d0>)
 80019f4:	f003 f9c0 	bl	8004d78 <sniprintf>
            break;
 80019f8:	e196      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_PRESSED_P_SET_F4_PRICE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 80019fa:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <KeyLogic_Action+0x2e0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a25      	ldr	r2, [pc, #148]	@ (8001a94 <KeyLogic_Action+0x2dc>)
 8001a00:	2107      	movs	r1, #7
 8001a02:	481c      	ldr	r0, [pc, #112]	@ (8001a74 <KeyLogic_Action+0x2bc>)
 8001a04:	f003 f9b8 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001a08:	2300      	movs	r3, #0
 8001a0a:	4a19      	ldr	r2, [pc, #100]	@ (8001a70 <KeyLogic_Action+0x2b8>)
 8001a0c:	2107      	movs	r1, #7
 8001a0e:	481b      	ldr	r0, [pc, #108]	@ (8001a7c <KeyLogic_Action+0x2c4>)
 8001a10:	f003 f9b2 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SET F4");
 8001a14:	4a2e      	ldr	r2, [pc, #184]	@ (8001ad0 <KeyLogic_Action+0x318>)
 8001a16:	2107      	movs	r1, #7
 8001a18:	481b      	ldr	r0, [pc, #108]	@ (8001a88 <KeyLogic_Action+0x2d0>)
 8001a1a:	f003 f9ad 	bl	8004d78 <sniprintf>
            break;
 8001a1e:	e183      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_PRESSED_P_PSWRD_SETPRICE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001a20:	4b1d      	ldr	r3, [pc, #116]	@ (8001a98 <KeyLogic_Action+0x2e0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1b      	ldr	r2, [pc, #108]	@ (8001a94 <KeyLogic_Action+0x2dc>)
 8001a26:	2107      	movs	r1, #7
 8001a28:	4812      	ldr	r0, [pc, #72]	@ (8001a74 <KeyLogic_Action+0x2bc>)
 8001a2a:	f003 f9a5 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001a2e:	2300      	movs	r3, #0
 8001a30:	4a0f      	ldr	r2, [pc, #60]	@ (8001a70 <KeyLogic_Action+0x2b8>)
 8001a32:	2107      	movs	r1, #7
 8001a34:	4811      	ldr	r0, [pc, #68]	@ (8001a7c <KeyLogic_Action+0x2c4>)
 8001a36:	f003 f99f 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "GIA   ");
 8001a3a:	4a14      	ldr	r2, [pc, #80]	@ (8001a8c <KeyLogic_Action+0x2d4>)
 8001a3c:	2107      	movs	r1, #7
 8001a3e:	4812      	ldr	r0, [pc, #72]	@ (8001a88 <KeyLogic_Action+0x2d0>)
 8001a40:	f003 f99a 	bl	8004d78 <sniprintf>
            break;
 8001a44:	e170      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_PRESSED_T:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8001a46:	2300      	movs	r3, #0
 8001a48:	4a09      	ldr	r2, [pc, #36]	@ (8001a70 <KeyLogic_Action+0x2b8>)
 8001a4a:	2107      	movs	r1, #7
 8001a4c:	4809      	ldr	r0, [pc, #36]	@ (8001a74 <KeyLogic_Action+0x2bc>)
 8001a4e:	f003 f993 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001a52:	2300      	movs	r3, #0
 8001a54:	4a06      	ldr	r2, [pc, #24]	@ (8001a70 <KeyLogic_Action+0x2b8>)
 8001a56:	2107      	movs	r1, #7
 8001a58:	4808      	ldr	r0, [pc, #32]	@ (8001a7c <KeyLogic_Action+0x2c4>)
 8001a5a:	f003 f98d 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 999999);
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <KeyLogic_Action+0x31c>)
 8001a60:	4a03      	ldr	r2, [pc, #12]	@ (8001a70 <KeyLogic_Action+0x2b8>)
 8001a62:	2107      	movs	r1, #7
 8001a64:	4808      	ldr	r0, [pc, #32]	@ (8001a88 <KeyLogic_Action+0x2d0>)
 8001a66:	f003 f987 	bl	8004d78 <sniprintf>
            break;
 8001a6a:	e15d      	b.n	8001d28 <KeyLogic_Action+0x570>
 8001a6c:	20000269 	.word	0x20000269
 8001a70:	08007028 	.word	0x08007028
 8001a74:	20000020 	.word	0x20000020
 8001a78:	20000370 	.word	0x20000370
 8001a7c:	20000027 	.word	0x20000027
 8001a80:	20000378 	.word	0x20000378
 8001a84:	08007030 	.word	0x08007030
 8001a88:	2000002e 	.word	0x2000002e
 8001a8c:	08007038 	.word	0x08007038
 8001a90:	20000048 	.word	0x20000048
 8001a94:	08007040 	.word	0x08007040
 8001a98:	20000258 	.word	0x20000258
 8001a9c:	08007048 	.word	0x08007048
 8001aa0:	0800704c 	.word	0x0800704c
 8001aa4:	2000005c 	.word	0x2000005c
 8001aa8:	08007054 	.word	0x08007054
 8001aac:	0800705c 	.word	0x0800705c
 8001ab0:	08007064 	.word	0x08007064
 8001ab4:	0800706c 	.word	0x0800706c
 8001ab8:	08007074 	.word	0x08007074
 8001abc:	0800707c 	.word	0x0800707c
 8001ac0:	08007084 	.word	0x08007084
 8001ac4:	0800708c 	.word	0x0800708c
 8001ac8:	08007094 	.word	0x08007094
 8001acc:	0800709c 	.word	0x0800709c
 8001ad0:	080070a4 	.word	0x080070a4
 8001ad4:	000f423f 	.word	0x000f423f
        case SEQ_PRESSED_T_$:
        	 // Format the total liters into two parts
			formatTotalLitersShift(totalLitersShift, &row1, &row2);
 8001ad8:	4b95      	ldr	r3, [pc, #596]	@ (8001d30 <KeyLogic_Action+0x578>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a95      	ldr	r2, [pc, #596]	@ (8001d34 <KeyLogic_Action+0x57c>)
 8001ade:	4996      	ldr	r1, [pc, #600]	@ (8001d38 <KeyLogic_Action+0x580>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f893 	bl	8000c0c <formatTotalLitersShift>

			// Ensure the combined string fits into the buffer
			char row1StrShift[7]; // Buffer to hold formatted row1 string
			snprintf(row1StrShift, sizeof(row1StrShift), "%06ld", row1);
 8001ae6:	4b94      	ldr	r3, [pc, #592]	@ (8001d38 <KeyLogic_Action+0x580>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f107 0018 	add.w	r0, r7, #24
 8001aee:	4a93      	ldr	r2, [pc, #588]	@ (8001d3c <KeyLogic_Action+0x584>)
 8001af0:	2107      	movs	r1, #7
 8001af2:	f003 f941 	bl	8004d78 <sniprintf>

			// Combine "L.. " with the last two digits of row1
			char combinedStrShift[8]; // Buffer to hold combined string "L.. " and last two digits of row1
			snprintf(combinedStrShift, sizeof(combinedStrShift), "SH.%04ld", row1 % 10000); // Extract last two digits of row1
 8001af6:	4b90      	ldr	r3, [pc, #576]	@ (8001d38 <KeyLogic_Action+0x580>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4b91      	ldr	r3, [pc, #580]	@ (8001d40 <KeyLogic_Action+0x588>)
 8001afc:	fba3 1302 	umull	r1, r3, r3, r2
 8001b00:	0b5b      	lsrs	r3, r3, #13
 8001b02:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f107 0010 	add.w	r0, r7, #16
 8001b10:	4a8c      	ldr	r2, [pc, #560]	@ (8001d44 <KeyLogic_Action+0x58c>)
 8001b12:	2108      	movs	r1, #8
 8001b14:	f003 f930 	bl	8004d78 <sniprintf>

			// Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
			for (int i = 0; i < 6; ++i) {
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b1c:	e01b      	b.n	8001b56 <KeyLogic_Action+0x39e>
				if (i < strlen(combinedStrShift)) {
 8001b1e:	f107 0310 	add.w	r3, r7, #16
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fb14 	bl	8000150 <strlen>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d90a      	bls.n	8001b46 <KeyLogic_Action+0x38e>
					SevenSegBuffer[0][i] = combinedStrShift[i];
 8001b30:	f107 0210 	add.w	r2, r7, #16
 8001b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b36:	4413      	add	r3, r2
 8001b38:	7819      	ldrb	r1, [r3, #0]
 8001b3a:	4a83      	ldr	r2, [pc, #524]	@ (8001d48 <KeyLogic_Action+0x590>)
 8001b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b3e:	4413      	add	r3, r2
 8001b40:	460a      	mov	r2, r1
 8001b42:	701a      	strb	r2, [r3, #0]
 8001b44:	e004      	b.n	8001b50 <KeyLogic_Action+0x398>
				} else {
					SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8001b46:	4a80      	ldr	r2, [pc, #512]	@ (8001d48 <KeyLogic_Action+0x590>)
 8001b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b4a:	4413      	add	r3, r2
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; ++i) {
 8001b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b52:	3301      	adds	r3, #1
 8001b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b58:	2b05      	cmp	r3, #5
 8001b5a:	dde0      	ble.n	8001b1e <KeyLogic_Action+0x366>
				}
			}
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8001b5c:	4b75      	ldr	r3, [pc, #468]	@ (8001d34 <KeyLogic_Action+0x57c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a76      	ldr	r2, [pc, #472]	@ (8001d3c <KeyLogic_Action+0x584>)
 8001b62:	2107      	movs	r1, #7
 8001b64:	4879      	ldr	r0, [pc, #484]	@ (8001d4c <KeyLogic_Action+0x594>)
 8001b66:	f003 f907 	bl	8004d78 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SHIFT ");
 8001b6a:	4a79      	ldr	r2, [pc, #484]	@ (8001d50 <KeyLogic_Action+0x598>)
 8001b6c:	2107      	movs	r1, #7
 8001b6e:	4879      	ldr	r0, [pc, #484]	@ (8001d54 <KeyLogic_Action+0x59c>)
 8001b70:	f003 f902 	bl	8004d78 <sniprintf>

            break;
 8001b74:	e0d8      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_PRESSED_T_L:
            // Format the total liters into two parts
            formatTotalLiters(totalLiters, &row1, &row2);
 8001b76:	4b78      	ldr	r3, [pc, #480]	@ (8001d58 <KeyLogic_Action+0x5a0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6e      	ldr	r2, [pc, #440]	@ (8001d34 <KeyLogic_Action+0x57c>)
 8001b7c:	496e      	ldr	r1, [pc, #440]	@ (8001d38 <KeyLogic_Action+0x580>)
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fff8 	bl	8000b74 <formatTotalLiters>

            // Ensure the combined string fits into the buffer
            char row1Str[7]; // Buffer to hold formatted row1 string
            snprintf(row1Str, sizeof(row1Str), "%06ld", row1);
 8001b84:	4b6c      	ldr	r3, [pc, #432]	@ (8001d38 <KeyLogic_Action+0x580>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f107 0008 	add.w	r0, r7, #8
 8001b8c:	4a6b      	ldr	r2, [pc, #428]	@ (8001d3c <KeyLogic_Action+0x584>)
 8001b8e:	2107      	movs	r1, #7
 8001b90:	f003 f8f2 	bl	8004d78 <sniprintf>

            // Combine "L.. " with the last two digits of row1
            char combinedStr[8]; // Buffer to hold combined string "L.. " and last two digits of row1
            snprintf(combinedStr, sizeof(combinedStr), "L.%04ld", row1 % 10000); // Extract last two digits of row1
 8001b94:	4b68      	ldr	r3, [pc, #416]	@ (8001d38 <KeyLogic_Action+0x580>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b69      	ldr	r3, [pc, #420]	@ (8001d40 <KeyLogic_Action+0x588>)
 8001b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b9e:	0b5b      	lsrs	r3, r3, #13
 8001ba0:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001ba4:	fb01 f303 	mul.w	r3, r1, r3
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	4638      	mov	r0, r7
 8001bac:	4a6b      	ldr	r2, [pc, #428]	@ (8001d5c <KeyLogic_Action+0x5a4>)
 8001bae:	2108      	movs	r1, #8
 8001bb0:	f003 f8e2 	bl	8004d78 <sniprintf>

            // Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
            for (int i = 0; i < 6; ++i) {
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bb8:	e019      	b.n	8001bee <KeyLogic_Action+0x436>
                if (i < strlen(combinedStr)) {
 8001bba:	463b      	mov	r3, r7
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fac7 	bl	8000150 <strlen>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d909      	bls.n	8001bde <KeyLogic_Action+0x426>
                    SevenSegBuffer[0][i] = combinedStr[i];
 8001bca:	463a      	mov	r2, r7
 8001bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bce:	4413      	add	r3, r2
 8001bd0:	7819      	ldrb	r1, [r3, #0]
 8001bd2:	4a5d      	ldr	r2, [pc, #372]	@ (8001d48 <KeyLogic_Action+0x590>)
 8001bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd6:	4413      	add	r3, r2
 8001bd8:	460a      	mov	r2, r1
 8001bda:	701a      	strb	r2, [r3, #0]
 8001bdc:	e004      	b.n	8001be8 <KeyLogic_Action+0x430>
                } else {
                    SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8001bde:	4a5a      	ldr	r2, [pc, #360]	@ (8001d48 <KeyLogic_Action+0x590>)
 8001be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be2:	4413      	add	r3, r2
 8001be4:	2220      	movs	r2, #32
 8001be6:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; ++i) {
 8001be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bea:	3301      	adds	r3, #1
 8001bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	dde2      	ble.n	8001bba <KeyLogic_Action+0x402>
                }
            }


            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8001bf4:	4b4f      	ldr	r3, [pc, #316]	@ (8001d34 <KeyLogic_Action+0x57c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a50      	ldr	r2, [pc, #320]	@ (8001d3c <KeyLogic_Action+0x584>)
 8001bfa:	2107      	movs	r1, #7
 8001bfc:	4853      	ldr	r0, [pc, #332]	@ (8001d4c <KeyLogic_Action+0x594>)
 8001bfe:	f003 f8bb 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "TOTAL ");
 8001c02:	4a57      	ldr	r2, [pc, #348]	@ (8001d60 <KeyLogic_Action+0x5a8>)
 8001c04:	2107      	movs	r1, #7
 8001c06:	4853      	ldr	r0, [pc, #332]	@ (8001d54 <KeyLogic_Action+0x59c>)
 8001c08:	f003 f8b6 	bl	8004d78 <sniprintf>



            break;
 8001c0c:	e08c      	b.n	8001d28 <KeyLogic_Action+0x570>

        case SEQ_PRESSED_T_F3:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 333333);
 8001c0e:	4b55      	ldr	r3, [pc, #340]	@ (8001d64 <KeyLogic_Action+0x5ac>)
 8001c10:	4a55      	ldr	r2, [pc, #340]	@ (8001d68 <KeyLogic_Action+0x5b0>)
 8001c12:	2107      	movs	r1, #7
 8001c14:	484c      	ldr	r0, [pc, #304]	@ (8001d48 <KeyLogic_Action+0x590>)
 8001c16:	f003 f8af 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	4a52      	ldr	r2, [pc, #328]	@ (8001d68 <KeyLogic_Action+0x5b0>)
 8001c1e:	2107      	movs	r1, #7
 8001c20:	484a      	ldr	r0, [pc, #296]	@ (8001d4c <KeyLogic_Action+0x594>)
 8001c22:	f003 f8a9 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001c26:	2300      	movs	r3, #0
 8001c28:	4a4f      	ldr	r2, [pc, #316]	@ (8001d68 <KeyLogic_Action+0x5b0>)
 8001c2a:	2107      	movs	r1, #7
 8001c2c:	4849      	ldr	r0, [pc, #292]	@ (8001d54 <KeyLogic_Action+0x59c>)
 8001c2e:	f003 f8a3 	bl	8004d78 <sniprintf>
            break;
 8001c32:	e079      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_PRESSED_T_F4:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 444444);
 8001c34:	4b4d      	ldr	r3, [pc, #308]	@ (8001d6c <KeyLogic_Action+0x5b4>)
 8001c36:	4a4c      	ldr	r2, [pc, #304]	@ (8001d68 <KeyLogic_Action+0x5b0>)
 8001c38:	2107      	movs	r1, #7
 8001c3a:	4843      	ldr	r0, [pc, #268]	@ (8001d48 <KeyLogic_Action+0x590>)
 8001c3c:	f003 f89c 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001c40:	2300      	movs	r3, #0
 8001c42:	4a49      	ldr	r2, [pc, #292]	@ (8001d68 <KeyLogic_Action+0x5b0>)
 8001c44:	2107      	movs	r1, #7
 8001c46:	4841      	ldr	r0, [pc, #260]	@ (8001d4c <KeyLogic_Action+0x594>)
 8001c48:	f003 f896 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	4a46      	ldr	r2, [pc, #280]	@ (8001d68 <KeyLogic_Action+0x5b0>)
 8001c50:	2107      	movs	r1, #7
 8001c52:	4840      	ldr	r0, [pc, #256]	@ (8001d54 <KeyLogic_Action+0x59c>)
 8001c54:	f003 f890 	bl	8004d78 <sniprintf>
            break;
 8001c58:	e066      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_NUMBER:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001c5a:	4b45      	ldr	r3, [pc, #276]	@ (8001d70 <KeyLogic_Action+0x5b8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f107 0020 	add.w	r0, r7, #32
 8001c62:	4a36      	ldr	r2, [pc, #216]	@ (8001d3c <KeyLogic_Action+0x584>)
 8001c64:	2107      	movs	r1, #7
 8001c66:	f003 f887 	bl	8004d78 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001c6a:	f107 0320 	add.w	r3, r7, #32
 8001c6e:	4a41      	ldr	r2, [pc, #260]	@ (8001d74 <KeyLogic_Action+0x5bc>)
 8001c70:	2107      	movs	r1, #7
 8001c72:	4835      	ldr	r0, [pc, #212]	@ (8001d48 <KeyLogic_Action+0x590>)
 8001c74:	f003 f880 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001c78:	2300      	movs	r3, #0
 8001c7a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d68 <KeyLogic_Action+0x5b0>)
 8001c7c:	2107      	movs	r1, #7
 8001c7e:	4833      	ldr	r0, [pc, #204]	@ (8001d4c <KeyLogic_Action+0x594>)
 8001c80:	f003 f87a 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001c84:	2300      	movs	r3, #0
 8001c86:	4a38      	ldr	r2, [pc, #224]	@ (8001d68 <KeyLogic_Action+0x5b0>)
 8001c88:	2107      	movs	r1, #7
 8001c8a:	4832      	ldr	r0, [pc, #200]	@ (8001d54 <KeyLogic_Action+0x59c>)
 8001c8c:	f003 f874 	bl	8004d78 <sniprintf>
			LEDPointFlag = -1;
 8001c90:	4b39      	ldr	r3, [pc, #228]	@ (8001d78 <KeyLogic_Action+0x5c0>)
 8001c92:	f04f 32ff 	mov.w	r2, #4294967295
 8001c96:	601a      	str	r2, [r3, #0]
			break;
 8001c98:	e046      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_PRESSED_$:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001c9a:	4b35      	ldr	r3, [pc, #212]	@ (8001d70 <KeyLogic_Action+0x5b8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f107 0020 	add.w	r0, r7, #32
 8001ca2:	4a26      	ldr	r2, [pc, #152]	@ (8001d3c <KeyLogic_Action+0x584>)
 8001ca4:	2107      	movs	r1, #7
 8001ca6:	f003 f867 	bl	8004d78 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001caa:	f107 0320 	add.w	r3, r7, #32
 8001cae:	4a31      	ldr	r2, [pc, #196]	@ (8001d74 <KeyLogic_Action+0x5bc>)
 8001cb0:	2107      	movs	r1, #7
 8001cb2:	4825      	ldr	r0, [pc, #148]	@ (8001d48 <KeyLogic_Action+0x590>)
 8001cb4:	f003 f860 	bl	8004d78 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "SET   ");
 8001cb8:	4a30      	ldr	r2, [pc, #192]	@ (8001d7c <KeyLogic_Action+0x5c4>)
 8001cba:	2107      	movs	r1, #7
 8001cbc:	4823      	ldr	r0, [pc, #140]	@ (8001d4c <KeyLogic_Action+0x594>)
 8001cbe:	f003 f85b 	bl	8004d78 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "GIA   ");
 8001cc2:	4a2f      	ldr	r2, [pc, #188]	@ (8001d80 <KeyLogic_Action+0x5c8>)
 8001cc4:	2107      	movs	r1, #7
 8001cc6:	4823      	ldr	r0, [pc, #140]	@ (8001d54 <KeyLogic_Action+0x59c>)
 8001cc8:	f003 f856 	bl	8004d78 <sniprintf>
			break;
 8001ccc:	e02c      	b.n	8001d28 <KeyLogic_Action+0x570>
        case SEQ_PRESSED_L:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001cce:	4b28      	ldr	r3, [pc, #160]	@ (8001d70 <KeyLogic_Action+0x5b8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f107 0020 	add.w	r0, r7, #32
 8001cd6:	4a19      	ldr	r2, [pc, #100]	@ (8001d3c <KeyLogic_Action+0x584>)
 8001cd8:	2107      	movs	r1, #7
 8001cda:	f003 f84d 	bl	8004d78 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001cde:	f107 0320 	add.w	r3, r7, #32
 8001ce2:	4a24      	ldr	r2, [pc, #144]	@ (8001d74 <KeyLogic_Action+0x5bc>)
 8001ce4:	2107      	movs	r1, #7
 8001ce6:	4818      	ldr	r0, [pc, #96]	@ (8001d48 <KeyLogic_Action+0x590>)
 8001ce8:	f003 f846 	bl	8004d78 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "SET   ");
 8001cec:	4a23      	ldr	r2, [pc, #140]	@ (8001d7c <KeyLogic_Action+0x5c4>)
 8001cee:	2107      	movs	r1, #7
 8001cf0:	4816      	ldr	r0, [pc, #88]	@ (8001d4c <KeyLogic_Action+0x594>)
 8001cf2:	f003 f841 	bl	8004d78 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "LIT   ");
 8001cf6:	4a23      	ldr	r2, [pc, #140]	@ (8001d84 <KeyLogic_Action+0x5cc>)
 8001cf8:	2107      	movs	r1, #7
 8001cfa:	4816      	ldr	r0, [pc, #88]	@ (8001d54 <KeyLogic_Action+0x59c>)
 8001cfc:	f003 f83c 	bl	8004d78 <sniprintf>
			break;
 8001d00:	e012      	b.n	8001d28 <KeyLogic_Action+0x570>
        default:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8001d02:	2300      	movs	r3, #0
 8001d04:	4a18      	ldr	r2, [pc, #96]	@ (8001d68 <KeyLogic_Action+0x5b0>)
 8001d06:	2107      	movs	r1, #7
 8001d08:	480f      	ldr	r0, [pc, #60]	@ (8001d48 <KeyLogic_Action+0x590>)
 8001d0a:	f003 f835 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001d0e:	2300      	movs	r3, #0
 8001d10:	4a15      	ldr	r2, [pc, #84]	@ (8001d68 <KeyLogic_Action+0x5b0>)
 8001d12:	2107      	movs	r1, #7
 8001d14:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <KeyLogic_Action+0x594>)
 8001d16:	f003 f82f 	bl	8004d78 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	4a12      	ldr	r2, [pc, #72]	@ (8001d68 <KeyLogic_Action+0x5b0>)
 8001d1e:	2107      	movs	r1, #7
 8001d20:	480c      	ldr	r0, [pc, #48]	@ (8001d54 <KeyLogic_Action+0x59c>)
 8001d22:	f003 f829 	bl	8004d78 <sniprintf>
            break;
 8001d26:	bf00      	nop
    }
}
 8001d28:	bf00      	nop
 8001d2a:	3730      	adds	r7, #48	@ 0x30
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000040 	.word	0x20000040
 8001d34:	20000264 	.word	0x20000264
 8001d38:	20000260 	.word	0x20000260
 8001d3c:	08007040 	.word	0x08007040
 8001d40:	d1b71759 	.word	0xd1b71759
 8001d44:	080070ac 	.word	0x080070ac
 8001d48:	20000020 	.word	0x20000020
 8001d4c:	20000027 	.word	0x20000027
 8001d50:	080070b8 	.word	0x080070b8
 8001d54:	2000002e 	.word	0x2000002e
 8001d58:	2000003c 	.word	0x2000003c
 8001d5c:	080070c0 	.word	0x080070c0
 8001d60:	080070c8 	.word	0x080070c8
 8001d64:	00051615 	.word	0x00051615
 8001d68:	08007028 	.word	0x08007028
 8001d6c:	0006c81c 	.word	0x0006c81c
 8001d70:	20000258 	.word	0x20000258
 8001d74:	08007048 	.word	0x08007048
 8001d78:	2000005c 	.word	0x2000005c
 8001d7c:	080070d0 	.word	0x080070d0
 8001d80:	08007038 	.word	0x08007038
 8001d84:	080070d8 	.word	0x080070d8

08001d88 <CharToSegment>:
//uint32_t SevenSegBuffer[3]={123456, 654321, 987654};
char SevenSegBuffer[3][7] = {"123456", "654321", "987654"};
uint8_t displayBuffer[5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;

uint8_t CharToSegment(char c) {
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d96:	d907      	bls.n	8001da8 <CharToSegment+0x20>
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	2b39      	cmp	r3, #57	@ 0x39
 8001d9c:	d804      	bhi.n	8001da8 <CharToSegment+0x20>
        return digitMapWithOutDP[c - '0'];
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	3b30      	subs	r3, #48	@ 0x30
 8001da2:	4a37      	ldr	r2, [pc, #220]	@ (8001e80 <CharToSegment+0xf8>)
 8001da4:	5cd3      	ldrb	r3, [r2, r3]
 8001da6:	e066      	b.n	8001e76 <CharToSegment+0xee>
    } else if (c == 'L') {
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	2b4c      	cmp	r3, #76	@ 0x4c
 8001dac:	d102      	bne.n	8001db4 <CharToSegment+0x2c>
        return specialCharMap[0];
 8001dae:	4b35      	ldr	r3, [pc, #212]	@ (8001e84 <CharToSegment+0xfc>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	e060      	b.n	8001e76 <CharToSegment+0xee>
    } else if (c == '.') {
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	2b2e      	cmp	r3, #46	@ 0x2e
 8001db8:	d102      	bne.n	8001dc0 <CharToSegment+0x38>
        return specialCharMap[1];
 8001dba:	4b32      	ldr	r3, [pc, #200]	@ (8001e84 <CharToSegment+0xfc>)
 8001dbc:	785b      	ldrb	r3, [r3, #1]
 8001dbe:	e05a      	b.n	8001e76 <CharToSegment+0xee>
    } else if (c == 'T') {
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	2b54      	cmp	r3, #84	@ 0x54
 8001dc4:	d102      	bne.n	8001dcc <CharToSegment+0x44>
        return specialCharMap[2];
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e84 <CharToSegment+0xfc>)
 8001dc8:	789b      	ldrb	r3, [r3, #2]
 8001dca:	e054      	b.n	8001e76 <CharToSegment+0xee>
    } else if (c == 'O') {
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	2b4f      	cmp	r3, #79	@ 0x4f
 8001dd0:	d102      	bne.n	8001dd8 <CharToSegment+0x50>
        return specialCharMap[3];
 8001dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e84 <CharToSegment+0xfc>)
 8001dd4:	78db      	ldrb	r3, [r3, #3]
 8001dd6:	e04e      	b.n	8001e76 <CharToSegment+0xee>
    } else if (c == 'A') {
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	2b41      	cmp	r3, #65	@ 0x41
 8001ddc:	d102      	bne.n	8001de4 <CharToSegment+0x5c>
        return specialCharMap[4];
 8001dde:	4b29      	ldr	r3, [pc, #164]	@ (8001e84 <CharToSegment+0xfc>)
 8001de0:	791b      	ldrb	r3, [r3, #4]
 8001de2:	e048      	b.n	8001e76 <CharToSegment+0xee>
    } else if (c == 'S') {
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	2b53      	cmp	r3, #83	@ 0x53
 8001de8:	d102      	bne.n	8001df0 <CharToSegment+0x68>
        return specialCharMap[5];
 8001dea:	4b26      	ldr	r3, [pc, #152]	@ (8001e84 <CharToSegment+0xfc>)
 8001dec:	795b      	ldrb	r3, [r3, #5]
 8001dee:	e042      	b.n	8001e76 <CharToSegment+0xee>
    } else if (c == 'H') {
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	2b48      	cmp	r3, #72	@ 0x48
 8001df4:	d102      	bne.n	8001dfc <CharToSegment+0x74>
        return specialCharMap[6];
 8001df6:	4b23      	ldr	r3, [pc, #140]	@ (8001e84 <CharToSegment+0xfc>)
 8001df8:	799b      	ldrb	r3, [r3, #6]
 8001dfa:	e03c      	b.n	8001e76 <CharToSegment+0xee>
    } else if (c == 'I') {
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	2b49      	cmp	r3, #73	@ 0x49
 8001e00:	d102      	bne.n	8001e08 <CharToSegment+0x80>
        return specialCharMap[7];
 8001e02:	4b20      	ldr	r3, [pc, #128]	@ (8001e84 <CharToSegment+0xfc>)
 8001e04:	79db      	ldrb	r3, [r3, #7]
 8001e06:	e036      	b.n	8001e76 <CharToSegment+0xee>
    } else if (c == 'F') {
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	2b46      	cmp	r3, #70	@ 0x46
 8001e0c:	d102      	bne.n	8001e14 <CharToSegment+0x8c>
        return specialCharMap[8];
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e84 <CharToSegment+0xfc>)
 8001e10:	7a1b      	ldrb	r3, [r3, #8]
 8001e12:	e030      	b.n	8001e76 <CharToSegment+0xee>
    } else if (c == 'G') {
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	2b47      	cmp	r3, #71	@ 0x47
 8001e18:	d102      	bne.n	8001e20 <CharToSegment+0x98>
        return specialCharMap[9];
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <CharToSegment+0xfc>)
 8001e1c:	7a5b      	ldrb	r3, [r3, #9]
 8001e1e:	e02a      	b.n	8001e76 <CharToSegment+0xee>
    } else if (c == 'P') {
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	2b50      	cmp	r3, #80	@ 0x50
 8001e24:	d102      	bne.n	8001e2c <CharToSegment+0xa4>
        return specialCharMap[10];
 8001e26:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <CharToSegment+0xfc>)
 8001e28:	7a9b      	ldrb	r3, [r3, #10]
 8001e2a:	e024      	b.n	8001e76 <CharToSegment+0xee>
    } else if (c == 'C') {
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	2b43      	cmp	r3, #67	@ 0x43
 8001e30:	d102      	bne.n	8001e38 <CharToSegment+0xb0>
        return specialCharMap[11];
 8001e32:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <CharToSegment+0xfc>)
 8001e34:	7adb      	ldrb	r3, [r3, #11]
 8001e36:	e01e      	b.n	8001e76 <CharToSegment+0xee>
    } else if (c == 'E') {
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	2b45      	cmp	r3, #69	@ 0x45
 8001e3c:	d102      	bne.n	8001e44 <CharToSegment+0xbc>
        return specialCharMap[12];
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <CharToSegment+0xfc>)
 8001e40:	7b1b      	ldrb	r3, [r3, #12]
 8001e42:	e018      	b.n	8001e76 <CharToSegment+0xee>
    } else if (c == 'U') {
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	2b55      	cmp	r3, #85	@ 0x55
 8001e48:	d102      	bne.n	8001e50 <CharToSegment+0xc8>
        return specialCharMap[13];
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <CharToSegment+0xfc>)
 8001e4c:	7b5b      	ldrb	r3, [r3, #13]
 8001e4e:	e012      	b.n	8001e76 <CharToSegment+0xee>
    } else if (c == 'N') {
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	2b4e      	cmp	r3, #78	@ 0x4e
 8001e54:	d102      	bne.n	8001e5c <CharToSegment+0xd4>
        return specialCharMap[14];
 8001e56:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <CharToSegment+0xfc>)
 8001e58:	7b9b      	ldrb	r3, [r3, #14]
 8001e5a:	e00c      	b.n	8001e76 <CharToSegment+0xee>
    } else if (c == 'R') {
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	2b52      	cmp	r3, #82	@ 0x52
 8001e60:	d102      	bne.n	8001e68 <CharToSegment+0xe0>
        return specialCharMap[15];
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <CharToSegment+0xfc>)
 8001e64:	7bdb      	ldrb	r3, [r3, #15]
 8001e66:	e006      	b.n	8001e76 <CharToSegment+0xee>
    } else if (c == 'D') {
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	2b44      	cmp	r3, #68	@ 0x44
 8001e6c:	d102      	bne.n	8001e74 <CharToSegment+0xec>
        return specialCharMap[16];
 8001e6e:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <CharToSegment+0xfc>)
 8001e70:	7c1b      	ldrb	r3, [r3, #16]
 8001e72:	e000      	b.n	8001e76 <CharToSegment+0xee>
    } else {
        return 0b11111111; // Blank
 8001e74:	23ff      	movs	r3, #255	@ 0xff
    }
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	20000000 	.word	0x20000000
 8001e84:	2000000c 	.word	0x2000000c

08001e88 <SevenSegLEDsHandler>:

uint8_t* SevenSegLEDsHandler(char buffer[3][7], uint8_t scan_state) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    for (int i = 0; i < 3; i++) {
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e035      	b.n	8001f06 <SevenSegLEDsHandler+0x7e>
        int len = strlen(buffer[i]);
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe f952 	bl	8000150 <strlen>
 8001eac:	4603      	mov	r3, r0
 8001eae:	60bb      	str	r3, [r7, #8]
        if (scan_state < 6) {
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d81f      	bhi.n	8001ef6 <SevenSegLEDsHandler+0x6e>
            if (scan_state < len) {
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	dd15      	ble.n	8001eea <SevenSegLEDsHandler+0x62>
                output[i] = CharToSegment(buffer[i][len - 1 - scan_state]);
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	441a      	add	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	1e59      	subs	r1, r3, #1
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	1acb      	subs	r3, r1, r3
 8001ed2:	5cd3      	ldrb	r3, [r2, r3]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff57 	bl	8001d88 <CharToSegment>
 8001eda:	4603      	mov	r3, r0
 8001edc:	4619      	mov	r1, r3
 8001ede:	4a0e      	ldr	r2, [pc, #56]	@ (8001f18 <SevenSegLEDsHandler+0x90>)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	460a      	mov	r2, r1
 8001ee6:	701a      	strb	r2, [r3, #0]
 8001ee8:	e00a      	b.n	8001f00 <SevenSegLEDsHandler+0x78>
            } else {
                output[i] = 0b11111111; // Blank
 8001eea:	4a0b      	ldr	r2, [pc, #44]	@ (8001f18 <SevenSegLEDsHandler+0x90>)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	22ff      	movs	r2, #255	@ 0xff
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	e004      	b.n	8001f00 <SevenSegLEDsHandler+0x78>
            }
        } else {
            output[i] = 0b11111111; // Blank
 8001ef6:	4a08      	ldr	r2, [pc, #32]	@ (8001f18 <SevenSegLEDsHandler+0x90>)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	22ff      	movs	r2, #255	@ 0xff
 8001efe:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3301      	adds	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	ddc6      	ble.n	8001e9a <SevenSegLEDsHandler+0x12>
        }
    }
    return output;
 8001f0c:	4b02      	ldr	r3, [pc, #8]	@ (8001f18 <SevenSegLEDsHandler+0x90>)
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000274 	.word	0x20000274

08001f1c <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(char buffer[3][7], uint8_t scan_state) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
	uint8_t* curr_digit=SevenSegLEDsHandler(buffer,scan_state);
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ffab 	bl	8001e88 <SevenSegLEDsHandler>
 8001f32:	60b8      	str	r0, [r7, #8]
	uint8_t curr_scan;
	switch (scan_state) {
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d820      	bhi.n	8001f7c <UpdateDisplayBuffer+0x60>
 8001f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f40 <UpdateDisplayBuffer+0x24>)
 8001f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f40:	08001f59 	.word	0x08001f59
 8001f44:	08001f5f 	.word	0x08001f5f
 8001f48:	08001f65 	.word	0x08001f65
 8001f4c:	08001f6b 	.word	0x08001f6b
 8001f50:	08001f71 	.word	0x08001f71
 8001f54:	08001f77 	.word	0x08001f77
		case 0:
			curr_scan=0b00100000;
 8001f58:	2320      	movs	r3, #32
 8001f5a:	73fb      	strb	r3, [r7, #15]
			break;
 8001f5c:	e011      	b.n	8001f82 <UpdateDisplayBuffer+0x66>
		case 1:
			curr_scan=0b00010000;
 8001f5e:	2310      	movs	r3, #16
 8001f60:	73fb      	strb	r3, [r7, #15]
			break;
 8001f62:	e00e      	b.n	8001f82 <UpdateDisplayBuffer+0x66>
		case 2:
			curr_scan=0b00001000;
 8001f64:	2308      	movs	r3, #8
 8001f66:	73fb      	strb	r3, [r7, #15]
			break;
 8001f68:	e00b      	b.n	8001f82 <UpdateDisplayBuffer+0x66>
		case 3:
			curr_scan=0b00000100;
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	73fb      	strb	r3, [r7, #15]
			break;
 8001f6e:	e008      	b.n	8001f82 <UpdateDisplayBuffer+0x66>
		case 4:
			curr_scan=0b00000010;
 8001f70:	2302      	movs	r3, #2
 8001f72:	73fb      	strb	r3, [r7, #15]
			break;
 8001f74:	e005      	b.n	8001f82 <UpdateDisplayBuffer+0x66>
		case 5:
			curr_scan=0b00000001;
 8001f76:	2301      	movs	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
			break;
 8001f7a:	e002      	b.n	8001f82 <UpdateDisplayBuffer+0x66>
		default:
			curr_scan=0b00000001;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
			break;
 8001f80:	bf00      	nop
	}
	if(LEDPointFlag >=0 && LEDPointFlag <=5){
 8001f82:	4b22      	ldr	r3, [pc, #136]	@ (800200c <UpdateDisplayBuffer+0xf0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db2c      	blt.n	8001fe4 <UpdateDisplayBuffer+0xc8>
 8001f8a:	4b20      	ldr	r3, [pc, #128]	@ (800200c <UpdateDisplayBuffer+0xf0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b05      	cmp	r3, #5
 8001f90:	dc28      	bgt.n	8001fe4 <UpdateDisplayBuffer+0xc8>
	    	if (scan_state == LEDPointFlag){
 8001f92:	78fa      	ldrb	r2, [r7, #3]
 8001f94:	4b1d      	ldr	r3, [pc, #116]	@ (800200c <UpdateDisplayBuffer+0xf0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d113      	bne.n	8001fc4 <UpdateDisplayBuffer+0xa8>
				displayBuffer[0] = curr_scan;
 8001f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8002010 <UpdateDisplayBuffer+0xf4>)
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	7013      	strb	r3, [r2, #0]
				displayBuffer[1] = curr_digit[2];
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	789a      	ldrb	r2, [r3, #2]
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <UpdateDisplayBuffer+0xf4>)
 8001fa8:	705a      	strb	r2, [r3, #1]
				displayBuffer[2] = curr_digit[1] & 0b01111111; //Add point to second row
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	3301      	adds	r3, #1
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4b16      	ldr	r3, [pc, #88]	@ (8002010 <UpdateDisplayBuffer+0xf4>)
 8001fb8:	709a      	strb	r2, [r3, #2]
				displayBuffer[3] = curr_digit[0];
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	781a      	ldrb	r2, [r3, #0]
 8001fbe:	4b14      	ldr	r3, [pc, #80]	@ (8002010 <UpdateDisplayBuffer+0xf4>)
 8001fc0:	70da      	strb	r2, [r3, #3]
	    	if (scan_state == LEDPointFlag){
 8001fc2:	e01f      	b.n	8002004 <UpdateDisplayBuffer+0xe8>
	    	}
	    	else
	    	{
	    		displayBuffer[0] = curr_scan;
 8001fc4:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <UpdateDisplayBuffer+0xf4>)
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	7013      	strb	r3, [r2, #0]
	    		displayBuffer[1] = curr_digit[2];
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	789a      	ldrb	r2, [r3, #2]
 8001fce:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <UpdateDisplayBuffer+0xf4>)
 8001fd0:	705a      	strb	r2, [r3, #1]
	    		displayBuffer[2] = curr_digit[1];
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	785a      	ldrb	r2, [r3, #1]
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002010 <UpdateDisplayBuffer+0xf4>)
 8001fd8:	709a      	strb	r2, [r3, #2]
	    		displayBuffer[3] = curr_digit[0];
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	781a      	ldrb	r2, [r3, #0]
 8001fde:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <UpdateDisplayBuffer+0xf4>)
 8001fe0:	70da      	strb	r2, [r3, #3]
	    	if (scan_state == LEDPointFlag){
 8001fe2:	e00f      	b.n	8002004 <UpdateDisplayBuffer+0xe8>
	    	}
	    }
	    else
	    {
			displayBuffer[0] = curr_scan;
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8002010 <UpdateDisplayBuffer+0xf4>)
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	7013      	strb	r3, [r2, #0]
			displayBuffer[1] = curr_digit[2];
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	789a      	ldrb	r2, [r3, #2]
 8001fee:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <UpdateDisplayBuffer+0xf4>)
 8001ff0:	705a      	strb	r2, [r3, #1]
			displayBuffer[2] = curr_digit[1];
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	785a      	ldrb	r2, [r3, #1]
 8001ff6:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <UpdateDisplayBuffer+0xf4>)
 8001ff8:	709a      	strb	r2, [r3, #2]
			displayBuffer[3] = curr_digit[0];
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	781a      	ldrb	r2, [r3, #0]
 8001ffe:	4b04      	ldr	r3, [pc, #16]	@ (8002010 <UpdateDisplayBuffer+0xf4>)
 8002000:	70da      	strb	r2, [r3, #3]
	    }
}
 8002002:	bf00      	nop
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	2000005c 	.word	0x2000005c
 8002010:	2000026c 	.word	0x2000026c

08002014 <SevenSegLEDsScan>:

//
void SevenSegLEDsScan(){
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
//	uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
	UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState);
 8002018:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <SevenSegLEDsScan+0x40>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	4619      	mov	r1, r3
 8002020:	480d      	ldr	r0, [pc, #52]	@ (8002058 <SevenSegLEDsScan+0x44>)
 8002022:	f7ff ff7b 	bl	8001f1c <UpdateDisplayBuffer>
	ShiftOut_SPI(displayBuffer, 4);
 8002026:	2104      	movs	r1, #4
 8002028:	480c      	ldr	r0, [pc, #48]	@ (800205c <SevenSegLEDsScan+0x48>)
 800202a:	f000 f81b 	bl	8002064 <ShiftOut_SPI>
//    currentBufferIndex = bufferIndex;  // Swap buffers
    SevenSegScanState = (SevenSegScanState + 1) % 6;
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <SevenSegLEDsScan+0x40>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <SevenSegLEDsScan+0x4c>)
 8002038:	fb83 3102 	smull	r3, r1, r3, r2
 800203c:	17d3      	asrs	r3, r2, #31
 800203e:	1ac9      	subs	r1, r1, r3
 8002040:	460b      	mov	r3, r1
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	440b      	add	r3, r1
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	1ad1      	subs	r1, r2, r3
 800204a:	b2ca      	uxtb	r2, r1
 800204c:	4b01      	ldr	r3, [pc, #4]	@ (8002054 <SevenSegLEDsScan+0x40>)
 800204e:	701a      	strb	r2, [r3, #0]
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	2000026a 	.word	0x2000026a
 8002058:	20000020 	.word	0x20000020
 800205c:	2000026c 	.word	0x2000026c
 8002060:	2aaaaaab 	.word	0x2aaaaaab

08002064 <ShiftOut_SPI>:
 *      Author: clong
 */
#include "SPI_shift.h"

void ShiftOut_SPI(uint8_t *data, size_t size)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Pull STCP (Latch) low
 800206e:	2200      	movs	r2, #0
 8002070:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002074:	480a      	ldr	r0, [pc, #40]	@ (80020a0 <ShiftOut_SPI+0x3c>)
 8002076:	f000 fefe 	bl	8002e76 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, 300); // Transmit data
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	b29a      	uxth	r2, r3
 800207e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4807      	ldr	r0, [pc, #28]	@ (80020a4 <ShiftOut_SPI+0x40>)
 8002086:	f001 fb71 	bl	800376c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Pull STCP (Latch) high
 800208a:	2201      	movs	r2, #1
 800208c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002090:	4803      	ldr	r0, [pc, #12]	@ (80020a0 <ShiftOut_SPI+0x3c>)
 8002092:	f000 fef0 	bl	8002e76 <HAL_GPIO_WritePin>

}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40010c00 	.word	0x40010c00
 80020a4:	200002d0 	.word	0x200002d0

080020a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ac:	f000 fbd8 	bl	8002860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020b0:	f000 f832 	bl	8002118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020b4:	f000 f924 	bl	8002300 <MX_GPIO_Init>
  MX_SPI2_Init();
 80020b8:	f000 f8a0 	bl	80021fc <MX_SPI2_Init>
  MX_TIM2_Init();
 80020bc:	f000 f8d4 	bl	8002268 <MX_TIM2_Init>
  MX_SPI1_Init();
 80020c0:	f000 f866 	bl	8002190 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80020c4:	4812      	ldr	r0, [pc, #72]	@ (8002110 <main+0x68>)
 80020c6:	f001 fd8b 	bl	8003be0 <HAL_TIM_Base_Start_IT>
  setTimer(0,100);
 80020ca:	2164      	movs	r1, #100	@ 0x64
 80020cc:	2000      	movs	r0, #0
 80020ce:	f000 fb59 	bl	8002784 <setTimer>
  setTimer(1,100);
 80020d2:	2164      	movs	r1, #100	@ 0x64
 80020d4:	2001      	movs	r0, #1
 80020d6:	f000 fb55 	bl	8002784 <setTimer>
  setTimer(2,100);
 80020da:	2164      	movs	r1, #100	@ 0x64
 80020dc:	2002      	movs	r0, #2
 80020de:	f000 fb51 	bl	8002784 <setTimer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {
	  KeyLogic();
 80020e2:	f7fe fdcb 	bl	8000c7c <KeyLogic>
	  // TIMER 0 /////////////////////////////////////
	  if(timer_flag[0]==1){
 80020e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <main+0x6c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d105      	bne.n	80020fa <main+0x52>

		  SevenSegLEDsScan();
 80020ee:	f7ff ff91 	bl	8002014 <SevenSegLEDsScan>
		  setTimer(0,5);
 80020f2:	2105      	movs	r1, #5
 80020f4:	2000      	movs	r0, #0
 80020f6:	f000 fb45 	bl	8002784 <setTimer>
	  }

	  // TIMER 1 /////////////////////////////////////
	  if(timer_flag[1]==1){
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <main+0x6c>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d1ef      	bne.n	80020e2 <main+0x3a>
		  KeyLogic_Action();
 8002102:	f7ff fb59 	bl	80017b8 <KeyLogic_Action>
		  setTimer(1,10);
 8002106:	210a      	movs	r1, #10
 8002108:	2001      	movs	r0, #1
 800210a:	f000 fb3b 	bl	8002784 <setTimer>
	  KeyLogic();
 800210e:	e7e8      	b.n	80020e2 <main+0x3a>
 8002110:	20000328 	.word	0x20000328
 8002114:	200003ac 	.word	0x200003ac

08002118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b090      	sub	sp, #64	@ 0x40
 800211c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800211e:	f107 0318 	add.w	r3, r7, #24
 8002122:	2228      	movs	r2, #40	@ 0x28
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f002 fe9d 	bl	8004e66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800213a:	2302      	movs	r3, #2
 800213c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800213e:	2301      	movs	r3, #1
 8002140:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002142:	2310      	movs	r3, #16
 8002144:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002146:	2300      	movs	r3, #0
 8002148:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800214a:	f107 0318 	add.w	r3, r7, #24
 800214e:	4618      	mov	r0, r3
 8002150:	f000 feaa 	bl	8002ea8 <HAL_RCC_OscConfig>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800215a:	f000 f94b 	bl	80023f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800215e:	230f      	movs	r3, #15
 8002160:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f001 f918 	bl	80033ac <HAL_RCC_ClockConfig>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002182:	f000 f937 	bl	80023f4 <Error_Handler>
  }
}
 8002186:	bf00      	nop
 8002188:	3740      	adds	r7, #64	@ 0x40
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002194:	4b17      	ldr	r3, [pc, #92]	@ (80021f4 <MX_SPI1_Init+0x64>)
 8002196:	4a18      	ldr	r2, [pc, #96]	@ (80021f8 <MX_SPI1_Init+0x68>)
 8002198:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800219a:	4b16      	ldr	r3, [pc, #88]	@ (80021f4 <MX_SPI1_Init+0x64>)
 800219c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021a2:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <MX_SPI1_Init+0x64>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021a8:	4b12      	ldr	r3, [pc, #72]	@ (80021f4 <MX_SPI1_Init+0x64>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ae:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <MX_SPI1_Init+0x64>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021b4:	4b0f      	ldr	r3, [pc, #60]	@ (80021f4 <MX_SPI1_Init+0x64>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <MX_SPI1_Init+0x64>)
 80021bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021c2:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <MX_SPI1_Init+0x64>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021c8:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <MX_SPI1_Init+0x64>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021ce:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <MX_SPI1_Init+0x64>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021d4:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <MX_SPI1_Init+0x64>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021da:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <MX_SPI1_Init+0x64>)
 80021dc:	220a      	movs	r2, #10
 80021de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021e0:	4804      	ldr	r0, [pc, #16]	@ (80021f4 <MX_SPI1_Init+0x64>)
 80021e2:	f001 fa3f 	bl	8003664 <HAL_SPI_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021ec:	f000 f902 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000278 	.word	0x20000278
 80021f8:	40013000 	.word	0x40013000

080021fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002200:	4b17      	ldr	r3, [pc, #92]	@ (8002260 <MX_SPI2_Init+0x64>)
 8002202:	4a18      	ldr	r2, [pc, #96]	@ (8002264 <MX_SPI2_Init+0x68>)
 8002204:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002206:	4b16      	ldr	r3, [pc, #88]	@ (8002260 <MX_SPI2_Init+0x64>)
 8002208:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800220c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800220e:	4b14      	ldr	r3, [pc, #80]	@ (8002260 <MX_SPI2_Init+0x64>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002214:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <MX_SPI2_Init+0x64>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800221a:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <MX_SPI2_Init+0x64>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002220:	4b0f      	ldr	r3, [pc, #60]	@ (8002260 <MX_SPI2_Init+0x64>)
 8002222:	2200      	movs	r2, #0
 8002224:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002226:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <MX_SPI2_Init+0x64>)
 8002228:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800222c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800222e:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <MX_SPI2_Init+0x64>)
 8002230:	2200      	movs	r2, #0
 8002232:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002234:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <MX_SPI2_Init+0x64>)
 8002236:	2200      	movs	r2, #0
 8002238:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800223a:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <MX_SPI2_Init+0x64>)
 800223c:	2200      	movs	r2, #0
 800223e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002240:	4b07      	ldr	r3, [pc, #28]	@ (8002260 <MX_SPI2_Init+0x64>)
 8002242:	2200      	movs	r2, #0
 8002244:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <MX_SPI2_Init+0x64>)
 8002248:	220a      	movs	r2, #10
 800224a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800224c:	4804      	ldr	r0, [pc, #16]	@ (8002260 <MX_SPI2_Init+0x64>)
 800224e:	f001 fa09 	bl	8003664 <HAL_SPI_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002258:	f000 f8cc 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}
 8002260:	200002d0 	.word	0x200002d0
 8002264:	40003800 	.word	0x40003800

08002268 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800226e:	f107 0308 	add.w	r3, r7, #8
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227c:	463b      	mov	r3, r7
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002284:	4b1d      	ldr	r3, [pc, #116]	@ (80022fc <MX_TIM2_Init+0x94>)
 8002286:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800228a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800228c:	4b1b      	ldr	r3, [pc, #108]	@ (80022fc <MX_TIM2_Init+0x94>)
 800228e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002292:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002294:	4b19      	ldr	r3, [pc, #100]	@ (80022fc <MX_TIM2_Init+0x94>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800229a:	4b18      	ldr	r3, [pc, #96]	@ (80022fc <MX_TIM2_Init+0x94>)
 800229c:	2209      	movs	r2, #9
 800229e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a0:	4b16      	ldr	r3, [pc, #88]	@ (80022fc <MX_TIM2_Init+0x94>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a6:	4b15      	ldr	r3, [pc, #84]	@ (80022fc <MX_TIM2_Init+0x94>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022ac:	4813      	ldr	r0, [pc, #76]	@ (80022fc <MX_TIM2_Init+0x94>)
 80022ae:	f001 fc47 	bl	8003b40 <HAL_TIM_Base_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022b8:	f000 f89c 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022c2:	f107 0308 	add.w	r3, r7, #8
 80022c6:	4619      	mov	r1, r3
 80022c8:	480c      	ldr	r0, [pc, #48]	@ (80022fc <MX_TIM2_Init+0x94>)
 80022ca:	f001 fde3 	bl	8003e94 <HAL_TIM_ConfigClockSource>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80022d4:	f000 f88e 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d8:	2300      	movs	r3, #0
 80022da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022e0:	463b      	mov	r3, r7
 80022e2:	4619      	mov	r1, r3
 80022e4:	4805      	ldr	r0, [pc, #20]	@ (80022fc <MX_TIM2_Init+0x94>)
 80022e6:	f001 ffb9 	bl	800425c <HAL_TIMEx_MasterConfigSynchronization>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80022f0:	f000 f880 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022f4:	bf00      	nop
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000328 	.word	0x20000328

08002300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002306:	f107 0308 	add.w	r3, r7, #8
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002314:	4b2f      	ldr	r3, [pc, #188]	@ (80023d4 <MX_GPIO_Init+0xd4>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	4a2e      	ldr	r2, [pc, #184]	@ (80023d4 <MX_GPIO_Init+0xd4>)
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	6193      	str	r3, [r2, #24]
 8002320:	4b2c      	ldr	r3, [pc, #176]	@ (80023d4 <MX_GPIO_Init+0xd4>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800232c:	4b29      	ldr	r3, [pc, #164]	@ (80023d4 <MX_GPIO_Init+0xd4>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	4a28      	ldr	r2, [pc, #160]	@ (80023d4 <MX_GPIO_Init+0xd4>)
 8002332:	f043 0308 	orr.w	r3, r3, #8
 8002336:	6193      	str	r3, [r2, #24]
 8002338:	4b26      	ldr	r3, [pc, #152]	@ (80023d4 <MX_GPIO_Init+0xd4>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET);
 8002344:	2200      	movs	r2, #0
 8002346:	2140      	movs	r1, #64	@ 0x40
 8002348:	4823      	ldr	r0, [pc, #140]	@ (80023d8 <MX_GPIO_Init+0xd8>)
 800234a:	f000 fd94 	bl	8002e76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 800234e:	2200      	movs	r2, #0
 8002350:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8002354:	4821      	ldr	r0, [pc, #132]	@ (80023dc <MX_GPIO_Init+0xdc>)
 8002356:	f000 fd8e 	bl	8002e76 <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Latch_SPI1_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin;
 800235a:	2340      	movs	r3, #64	@ 0x40
 800235c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235e:	2301      	movs	r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2302      	movs	r3, #2
 8002368:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI1_GPIO_Port, &GPIO_InitStruct);
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	4619      	mov	r1, r3
 8002370:	4819      	ldr	r0, [pc, #100]	@ (80023d8 <MX_GPIO_Init+0xd8>)
 8002372:	f000 fbe5 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8002376:	231f      	movs	r3, #31
 8002378:	60bb      	str	r3, [r7, #8]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800237e:	2302      	movs	r3, #2
 8002380:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002382:	f107 0308 	add.w	r3, r7, #8
 8002386:	4619      	mov	r1, r3
 8002388:	4814      	ldr	r0, [pc, #80]	@ (80023dc <MX_GPIO_Init+0xdc>)
 800238a:	f000 fbd9 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : Latch_SPI_Pin */
  GPIO_InitStruct.Pin = Latch_SPI_Pin;
 800238e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002392:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002394:	2301      	movs	r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI_GPIO_Port, &GPIO_InitStruct);
 80023a0:	f107 0308 	add.w	r3, r7, #8
 80023a4:	4619      	mov	r1, r3
 80023a6:	480d      	ldr	r0, [pc, #52]	@ (80023dc <MX_GPIO_Init+0xdc>)
 80023a8:	f000 fbca 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin OUT2_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin;
 80023ac:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80023b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b2:	2301      	movs	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ba:	2302      	movs	r3, #2
 80023bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023be:	f107 0308 	add.w	r3, r7, #8
 80023c2:	4619      	mov	r1, r3
 80023c4:	4805      	ldr	r0, [pc, #20]	@ (80023dc <MX_GPIO_Init+0xdc>)
 80023c6:	f000 fbbb 	bl	8002b40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40010800 	.word	0x40010800
 80023dc:	40010c00 	.word	0x40010c00

080023e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	timerRun();
 80023e8:	f000 f9e4 	bl	80027b4 <timerRun>

}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023f8:	b672      	cpsid	i
}
 80023fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80023fc:	bf00      	nop
 80023fe:	e7fd      	b.n	80023fc <Error_Handler+0x8>

08002400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002406:	4b15      	ldr	r3, [pc, #84]	@ (800245c <HAL_MspInit+0x5c>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	4a14      	ldr	r2, [pc, #80]	@ (800245c <HAL_MspInit+0x5c>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6193      	str	r3, [r2, #24]
 8002412:	4b12      	ldr	r3, [pc, #72]	@ (800245c <HAL_MspInit+0x5c>)
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	4b0f      	ldr	r3, [pc, #60]	@ (800245c <HAL_MspInit+0x5c>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	4a0e      	ldr	r2, [pc, #56]	@ (800245c <HAL_MspInit+0x5c>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002428:	61d3      	str	r3, [r2, #28]
 800242a:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <HAL_MspInit+0x5c>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002436:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <HAL_MspInit+0x60>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	4a04      	ldr	r2, [pc, #16]	@ (8002460 <HAL_MspInit+0x60>)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	40021000 	.word	0x40021000
 8002460:	40010000 	.word	0x40010000

08002464 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	@ 0x28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0318 	add.w	r3, r7, #24
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2b      	ldr	r2, [pc, #172]	@ (800252c <HAL_SPI_MspInit+0xc8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d124      	bne.n	80024ce <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002484:	4b2a      	ldr	r3, [pc, #168]	@ (8002530 <HAL_SPI_MspInit+0xcc>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4a29      	ldr	r2, [pc, #164]	@ (8002530 <HAL_SPI_MspInit+0xcc>)
 800248a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800248e:	6193      	str	r3, [r2, #24]
 8002490:	4b27      	ldr	r3, [pc, #156]	@ (8002530 <HAL_SPI_MspInit+0xcc>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249c:	4b24      	ldr	r3, [pc, #144]	@ (8002530 <HAL_SPI_MspInit+0xcc>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a23      	ldr	r2, [pc, #140]	@ (8002530 <HAL_SPI_MspInit+0xcc>)
 80024a2:	f043 0304 	orr.w	r3, r3, #4
 80024a6:	6193      	str	r3, [r2, #24]
 80024a8:	4b21      	ldr	r3, [pc, #132]	@ (8002530 <HAL_SPI_MspInit+0xcc>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80024b4:	23a0      	movs	r3, #160	@ 0xa0
 80024b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024bc:	2303      	movs	r3, #3
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c0:	f107 0318 	add.w	r3, r7, #24
 80024c4:	4619      	mov	r1, r3
 80024c6:	481b      	ldr	r0, [pc, #108]	@ (8002534 <HAL_SPI_MspInit+0xd0>)
 80024c8:	f000 fb3a 	bl	8002b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024cc:	e029      	b.n	8002522 <HAL_SPI_MspInit+0xbe>
  else if(hspi->Instance==SPI2)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a19      	ldr	r2, [pc, #100]	@ (8002538 <HAL_SPI_MspInit+0xd4>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d124      	bne.n	8002522 <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024d8:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <HAL_SPI_MspInit+0xcc>)
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	4a14      	ldr	r2, [pc, #80]	@ (8002530 <HAL_SPI_MspInit+0xcc>)
 80024de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024e2:	61d3      	str	r3, [r2, #28]
 80024e4:	4b12      	ldr	r3, [pc, #72]	@ (8002530 <HAL_SPI_MspInit+0xcc>)
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002530 <HAL_SPI_MspInit+0xcc>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4a0e      	ldr	r2, [pc, #56]	@ (8002530 <HAL_SPI_MspInit+0xcc>)
 80024f6:	f043 0308 	orr.w	r3, r3, #8
 80024fa:	6193      	str	r3, [r2, #24]
 80024fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002530 <HAL_SPI_MspInit+0xcc>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002508:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800250c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002512:	2303      	movs	r3, #3
 8002514:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002516:	f107 0318 	add.w	r3, r7, #24
 800251a:	4619      	mov	r1, r3
 800251c:	4807      	ldr	r0, [pc, #28]	@ (800253c <HAL_SPI_MspInit+0xd8>)
 800251e:	f000 fb0f 	bl	8002b40 <HAL_GPIO_Init>
}
 8002522:	bf00      	nop
 8002524:	3728      	adds	r7, #40	@ 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40013000 	.word	0x40013000
 8002530:	40021000 	.word	0x40021000
 8002534:	40010800 	.word	0x40010800
 8002538:	40003800 	.word	0x40003800
 800253c:	40010c00 	.word	0x40010c00

08002540 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002550:	d113      	bne.n	800257a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002552:	4b0c      	ldr	r3, [pc, #48]	@ (8002584 <HAL_TIM_Base_MspInit+0x44>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	4a0b      	ldr	r2, [pc, #44]	@ (8002584 <HAL_TIM_Base_MspInit+0x44>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	61d3      	str	r3, [r2, #28]
 800255e:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <HAL_TIM_Base_MspInit+0x44>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2101      	movs	r1, #1
 800256e:	201c      	movs	r0, #28
 8002570:	f000 faaf 	bl	8002ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002574:	201c      	movs	r0, #28
 8002576:	f000 fac8 	bl	8002b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000

08002588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <NMI_Handler+0x4>

08002590 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002594:	bf00      	nop
 8002596:	e7fd      	b.n	8002594 <HardFault_Handler+0x4>

08002598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800259c:	bf00      	nop
 800259e:	e7fd      	b.n	800259c <MemManage_Handler+0x4>

080025a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <BusFault_Handler+0x4>

080025a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <UsageFault_Handler+0x4>

080025b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025d8:	f000 f988 	bl	80028ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}

080025e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025e4:	4802      	ldr	r0, [pc, #8]	@ (80025f0 <TIM2_IRQHandler+0x10>)
 80025e6:	f001 fb4d 	bl	8003c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000328 	.word	0x20000328

080025f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return 1;
 80025f8:	2301      	movs	r3, #1
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <_kill>:

int _kill(int pid, int sig)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800260c:	f002 fc7e 	bl	8004f0c <__errno>
 8002610:	4603      	mov	r3, r0
 8002612:	2216      	movs	r2, #22
 8002614:	601a      	str	r2, [r3, #0]
  return -1;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <_exit>:

void _exit (int status)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800262a:	f04f 31ff 	mov.w	r1, #4294967295
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ffe7 	bl	8002602 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <_exit+0x12>

08002638 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	e00a      	b.n	8002660 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800264a:	f3af 8000 	nop.w
 800264e:	4601      	mov	r1, r0
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	60ba      	str	r2, [r7, #8]
 8002656:	b2ca      	uxtb	r2, r1
 8002658:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3301      	adds	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	429a      	cmp	r2, r3
 8002666:	dbf0      	blt.n	800264a <_read+0x12>
  }

  return len;
 8002668:	687b      	ldr	r3, [r7, #4]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b086      	sub	sp, #24
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e009      	b.n	8002698 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	60ba      	str	r2, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3301      	adds	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	dbf1      	blt.n	8002684 <_write+0x12>
  }
  return len;
 80026a0:	687b      	ldr	r3, [r7, #4]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <_close>:

int _close(int file)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026d0:	605a      	str	r2, [r3, #4]
  return 0;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <_isatty>:

int _isatty(int file)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026e6:	2301      	movs	r3, #1
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr

080026f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b085      	sub	sp, #20
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
	...

0800270c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002714:	4a14      	ldr	r2, [pc, #80]	@ (8002768 <_sbrk+0x5c>)
 8002716:	4b15      	ldr	r3, [pc, #84]	@ (800276c <_sbrk+0x60>)
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002720:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <_sbrk+0x64>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002728:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <_sbrk+0x64>)
 800272a:	4a12      	ldr	r2, [pc, #72]	@ (8002774 <_sbrk+0x68>)
 800272c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800272e:	4b10      	ldr	r3, [pc, #64]	@ (8002770 <_sbrk+0x64>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	429a      	cmp	r2, r3
 800273a:	d207      	bcs.n	800274c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800273c:	f002 fbe6 	bl	8004f0c <__errno>
 8002740:	4603      	mov	r3, r0
 8002742:	220c      	movs	r2, #12
 8002744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	e009      	b.n	8002760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800274c:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <_sbrk+0x64>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002752:	4b07      	ldr	r3, [pc, #28]	@ (8002770 <_sbrk+0x64>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	4a05      	ldr	r2, [pc, #20]	@ (8002770 <_sbrk+0x64>)
 800275c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800275e:	68fb      	ldr	r3, [r7, #12]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20005000 	.word	0x20005000
 800276c:	00000400 	.word	0x00000400
 8002770:	20000380 	.word	0x20000380
 8002774:	20000528 	.word	0x20000528

08002778 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <setTimer>:

#define TIMERNUM 10
int timer_counter[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};
int timer_flag[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};

void setTimer(int INDEX,int duration){
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
	timer_counter[INDEX]=duration;
 800278e:	4907      	ldr	r1, [pc, #28]	@ (80027ac <setTimer+0x28>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[INDEX]=0;
 8002798:	4a05      	ldr	r2, [pc, #20]	@ (80027b0 <setTimer+0x2c>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2100      	movs	r1, #0
 800279e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	20000384 	.word	0x20000384
 80027b0:	200003ac 	.word	0x200003ac

080027b4 <timerRun>:

void timerRun(){
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
	for(int i=0;i<TIMERNUM;i++){
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	e01c      	b.n	80027fa <timerRun+0x46>
		if(timer_counter[i] > 0){
 80027c0:	4a12      	ldr	r2, [pc, #72]	@ (800280c <timerRun+0x58>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	dd13      	ble.n	80027f4 <timerRun+0x40>
			timer_counter[i]--;
 80027cc:	4a0f      	ldr	r2, [pc, #60]	@ (800280c <timerRun+0x58>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d4:	1e5a      	subs	r2, r3, #1
 80027d6:	490d      	ldr	r1, [pc, #52]	@ (800280c <timerRun+0x58>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <=0){
 80027de:	4a0b      	ldr	r2, [pc, #44]	@ (800280c <timerRun+0x58>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	dc04      	bgt.n	80027f4 <timerRun+0x40>
				timer_flag[i]=1;
 80027ea:	4a09      	ldr	r2, [pc, #36]	@ (8002810 <timerRun+0x5c>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2101      	movs	r1, #1
 80027f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<TIMERNUM;i++){
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3301      	adds	r3, #1
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b09      	cmp	r3, #9
 80027fe:	dddf      	ble.n	80027c0 <timerRun+0xc>
			}
		}
	}
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	20000384 	.word	0x20000384
 8002810:	200003ac 	.word	0x200003ac

08002814 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002814:	f7ff ffb0 	bl	8002778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002818:	480b      	ldr	r0, [pc, #44]	@ (8002848 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800281a:	490c      	ldr	r1, [pc, #48]	@ (800284c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800281c:	4a0c      	ldr	r2, [pc, #48]	@ (8002850 <LoopFillZerobss+0x16>)
  movs r3, #0
 800281e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002820:	e002      	b.n	8002828 <LoopCopyDataInit>

08002822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002826:	3304      	adds	r3, #4

08002828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800282a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800282c:	d3f9      	bcc.n	8002822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800282e:	4a09      	ldr	r2, [pc, #36]	@ (8002854 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002830:	4c09      	ldr	r4, [pc, #36]	@ (8002858 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002834:	e001      	b.n	800283a <LoopFillZerobss>

08002836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002838:	3204      	adds	r2, #4

0800283a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800283a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800283c:	d3fb      	bcc.n	8002836 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800283e:	f002 fb6b 	bl	8004f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002842:	f7ff fc31 	bl	80020a8 <main>
  bx lr
 8002846:	4770      	bx	lr
  ldr r0, =_sdata
 8002848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800284c:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8002850:	08007498 	.word	0x08007498
  ldr r2, =_sbss
 8002854:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8002858:	20000524 	.word	0x20000524

0800285c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800285c:	e7fe      	b.n	800285c <ADC1_2_IRQHandler>
	...

08002860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002864:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <HAL_Init+0x28>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a07      	ldr	r2, [pc, #28]	@ (8002888 <HAL_Init+0x28>)
 800286a:	f043 0310 	orr.w	r3, r3, #16
 800286e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002870:	2003      	movs	r0, #3
 8002872:	f000 f923 	bl	8002abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002876:	200f      	movs	r0, #15
 8002878:	f000 f808 	bl	800288c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800287c:	f7ff fdc0 	bl	8002400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40022000 	.word	0x40022000

0800288c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002894:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <HAL_InitTick+0x54>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b12      	ldr	r3, [pc, #72]	@ (80028e4 <HAL_InitTick+0x58>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	4619      	mov	r1, r3
 800289e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f93b 	bl	8002b26 <HAL_SYSTICK_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e00e      	b.n	80028d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b0f      	cmp	r3, #15
 80028be:	d80a      	bhi.n	80028d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c0:	2200      	movs	r2, #0
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	f04f 30ff 	mov.w	r0, #4294967295
 80028c8:	f000 f903 	bl	8002ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028cc:	4a06      	ldr	r2, [pc, #24]	@ (80028e8 <HAL_InitTick+0x5c>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e000      	b.n	80028d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000060 	.word	0x20000060
 80028e4:	20000068 	.word	0x20000068
 80028e8:	20000064 	.word	0x20000064

080028ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028f0:	4b05      	ldr	r3, [pc, #20]	@ (8002908 <HAL_IncTick+0x1c>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b05      	ldr	r3, [pc, #20]	@ (800290c <HAL_IncTick+0x20>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	4a03      	ldr	r2, [pc, #12]	@ (800290c <HAL_IncTick+0x20>)
 80028fe:	6013      	str	r3, [r2, #0]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	20000068 	.word	0x20000068
 800290c:	200003d4 	.word	0x200003d4

08002910 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return uwTick;
 8002914:	4b02      	ldr	r3, [pc, #8]	@ (8002920 <HAL_GetTick+0x10>)
 8002916:	681b      	ldr	r3, [r3, #0]
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	200003d4 	.word	0x200003d4

08002924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002934:	4b0c      	ldr	r3, [pc, #48]	@ (8002968 <__NVIC_SetPriorityGrouping+0x44>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002940:	4013      	ands	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800294c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002956:	4a04      	ldr	r2, [pc, #16]	@ (8002968 <__NVIC_SetPriorityGrouping+0x44>)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	60d3      	str	r3, [r2, #12]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002970:	4b04      	ldr	r3, [pc, #16]	@ (8002984 <__NVIC_GetPriorityGrouping+0x18>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	f003 0307 	and.w	r3, r3, #7
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	2b00      	cmp	r3, #0
 8002998:	db0b      	blt.n	80029b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	f003 021f 	and.w	r2, r3, #31
 80029a0:	4906      	ldr	r1, [pc, #24]	@ (80029bc <__NVIC_EnableIRQ+0x34>)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	2001      	movs	r0, #1
 80029aa:	fa00 f202 	lsl.w	r2, r0, r2
 80029ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	e000e100 	.word	0xe000e100

080029c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	6039      	str	r1, [r7, #0]
 80029ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	db0a      	blt.n	80029ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	490c      	ldr	r1, [pc, #48]	@ (8002a0c <__NVIC_SetPriority+0x4c>)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	0112      	lsls	r2, r2, #4
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	440b      	add	r3, r1
 80029e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e8:	e00a      	b.n	8002a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4908      	ldr	r1, [pc, #32]	@ (8002a10 <__NVIC_SetPriority+0x50>)
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	3b04      	subs	r3, #4
 80029f8:	0112      	lsls	r2, r2, #4
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	440b      	add	r3, r1
 80029fe:	761a      	strb	r2, [r3, #24]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000e100 	.word	0xe000e100
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b089      	sub	sp, #36	@ 0x24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f1c3 0307 	rsb	r3, r3, #7
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	bf28      	it	cs
 8002a32:	2304      	movcs	r3, #4
 8002a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d902      	bls.n	8002a44 <NVIC_EncodePriority+0x30>
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3b03      	subs	r3, #3
 8002a42:	e000      	b.n	8002a46 <NVIC_EncodePriority+0x32>
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a48:	f04f 32ff 	mov.w	r2, #4294967295
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43da      	mvns	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	401a      	ands	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	fa01 f303 	lsl.w	r3, r1, r3
 8002a66:	43d9      	mvns	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a6c:	4313      	orrs	r3, r2
         );
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3724      	adds	r7, #36	@ 0x24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a88:	d301      	bcc.n	8002a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00f      	b.n	8002aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab8 <SysTick_Config+0x40>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a96:	210f      	movs	r1, #15
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	f7ff ff90 	bl	80029c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa0:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <SysTick_Config+0x40>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa6:	4b04      	ldr	r3, [pc, #16]	@ (8002ab8 <SysTick_Config+0x40>)
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	e000e010 	.word	0xe000e010

08002abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ff2d 	bl	8002924 <__NVIC_SetPriorityGrouping>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae4:	f7ff ff42 	bl	800296c <__NVIC_GetPriorityGrouping>
 8002ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	6978      	ldr	r0, [r7, #20]
 8002af0:	f7ff ff90 	bl	8002a14 <NVIC_EncodePriority>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff5f 	bl	80029c0 <__NVIC_SetPriority>
}
 8002b02:	bf00      	nop
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ff35 	bl	8002988 <__NVIC_EnableIRQ>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff ffa2 	bl	8002a78 <SysTick_Config>
 8002b34:	4603      	mov	r3, r0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b08b      	sub	sp, #44	@ 0x2c
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b52:	e169      	b.n	8002e28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b54:	2201      	movs	r2, #1
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	f040 8158 	bne.w	8002e22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4a9a      	ldr	r2, [pc, #616]	@ (8002de0 <HAL_GPIO_Init+0x2a0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d05e      	beq.n	8002c3a <HAL_GPIO_Init+0xfa>
 8002b7c:	4a98      	ldr	r2, [pc, #608]	@ (8002de0 <HAL_GPIO_Init+0x2a0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d875      	bhi.n	8002c6e <HAL_GPIO_Init+0x12e>
 8002b82:	4a98      	ldr	r2, [pc, #608]	@ (8002de4 <HAL_GPIO_Init+0x2a4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d058      	beq.n	8002c3a <HAL_GPIO_Init+0xfa>
 8002b88:	4a96      	ldr	r2, [pc, #600]	@ (8002de4 <HAL_GPIO_Init+0x2a4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d86f      	bhi.n	8002c6e <HAL_GPIO_Init+0x12e>
 8002b8e:	4a96      	ldr	r2, [pc, #600]	@ (8002de8 <HAL_GPIO_Init+0x2a8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d052      	beq.n	8002c3a <HAL_GPIO_Init+0xfa>
 8002b94:	4a94      	ldr	r2, [pc, #592]	@ (8002de8 <HAL_GPIO_Init+0x2a8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d869      	bhi.n	8002c6e <HAL_GPIO_Init+0x12e>
 8002b9a:	4a94      	ldr	r2, [pc, #592]	@ (8002dec <HAL_GPIO_Init+0x2ac>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d04c      	beq.n	8002c3a <HAL_GPIO_Init+0xfa>
 8002ba0:	4a92      	ldr	r2, [pc, #584]	@ (8002dec <HAL_GPIO_Init+0x2ac>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d863      	bhi.n	8002c6e <HAL_GPIO_Init+0x12e>
 8002ba6:	4a92      	ldr	r2, [pc, #584]	@ (8002df0 <HAL_GPIO_Init+0x2b0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d046      	beq.n	8002c3a <HAL_GPIO_Init+0xfa>
 8002bac:	4a90      	ldr	r2, [pc, #576]	@ (8002df0 <HAL_GPIO_Init+0x2b0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d85d      	bhi.n	8002c6e <HAL_GPIO_Init+0x12e>
 8002bb2:	2b12      	cmp	r3, #18
 8002bb4:	d82a      	bhi.n	8002c0c <HAL_GPIO_Init+0xcc>
 8002bb6:	2b12      	cmp	r3, #18
 8002bb8:	d859      	bhi.n	8002c6e <HAL_GPIO_Init+0x12e>
 8002bba:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc0 <HAL_GPIO_Init+0x80>)
 8002bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc0:	08002c3b 	.word	0x08002c3b
 8002bc4:	08002c15 	.word	0x08002c15
 8002bc8:	08002c27 	.word	0x08002c27
 8002bcc:	08002c69 	.word	0x08002c69
 8002bd0:	08002c6f 	.word	0x08002c6f
 8002bd4:	08002c6f 	.word	0x08002c6f
 8002bd8:	08002c6f 	.word	0x08002c6f
 8002bdc:	08002c6f 	.word	0x08002c6f
 8002be0:	08002c6f 	.word	0x08002c6f
 8002be4:	08002c6f 	.word	0x08002c6f
 8002be8:	08002c6f 	.word	0x08002c6f
 8002bec:	08002c6f 	.word	0x08002c6f
 8002bf0:	08002c6f 	.word	0x08002c6f
 8002bf4:	08002c6f 	.word	0x08002c6f
 8002bf8:	08002c6f 	.word	0x08002c6f
 8002bfc:	08002c6f 	.word	0x08002c6f
 8002c00:	08002c6f 	.word	0x08002c6f
 8002c04:	08002c1d 	.word	0x08002c1d
 8002c08:	08002c31 	.word	0x08002c31
 8002c0c:	4a79      	ldr	r2, [pc, #484]	@ (8002df4 <HAL_GPIO_Init+0x2b4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c12:	e02c      	b.n	8002c6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	623b      	str	r3, [r7, #32]
          break;
 8002c1a:	e029      	b.n	8002c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	3304      	adds	r3, #4
 8002c22:	623b      	str	r3, [r7, #32]
          break;
 8002c24:	e024      	b.n	8002c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	623b      	str	r3, [r7, #32]
          break;
 8002c2e:	e01f      	b.n	8002c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	330c      	adds	r3, #12
 8002c36:	623b      	str	r3, [r7, #32]
          break;
 8002c38:	e01a      	b.n	8002c70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c42:	2304      	movs	r3, #4
 8002c44:	623b      	str	r3, [r7, #32]
          break;
 8002c46:	e013      	b.n	8002c70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c50:	2308      	movs	r3, #8
 8002c52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	611a      	str	r2, [r3, #16]
          break;
 8002c5a:	e009      	b.n	8002c70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c5c:	2308      	movs	r3, #8
 8002c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	615a      	str	r2, [r3, #20]
          break;
 8002c66:	e003      	b.n	8002c70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	623b      	str	r3, [r7, #32]
          break;
 8002c6c:	e000      	b.n	8002c70 <HAL_GPIO_Init+0x130>
          break;
 8002c6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2bff      	cmp	r3, #255	@ 0xff
 8002c74:	d801      	bhi.n	8002c7a <HAL_GPIO_Init+0x13a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	e001      	b.n	8002c7e <HAL_GPIO_Init+0x13e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2bff      	cmp	r3, #255	@ 0xff
 8002c84:	d802      	bhi.n	8002c8c <HAL_GPIO_Init+0x14c>
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	e002      	b.n	8002c92 <HAL_GPIO_Init+0x152>
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8e:	3b08      	subs	r3, #8
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	210f      	movs	r1, #15
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	6a39      	ldr	r1, [r7, #32]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cac:	431a      	orrs	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 80b1 	beq.w	8002e22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cc0:	4b4d      	ldr	r3, [pc, #308]	@ (8002df8 <HAL_GPIO_Init+0x2b8>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	4a4c      	ldr	r2, [pc, #304]	@ (8002df8 <HAL_GPIO_Init+0x2b8>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6193      	str	r3, [r2, #24]
 8002ccc:	4b4a      	ldr	r3, [pc, #296]	@ (8002df8 <HAL_GPIO_Init+0x2b8>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cd8:	4a48      	ldr	r2, [pc, #288]	@ (8002dfc <HAL_GPIO_Init+0x2bc>)
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	220f      	movs	r2, #15
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a40      	ldr	r2, [pc, #256]	@ (8002e00 <HAL_GPIO_Init+0x2c0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d013      	beq.n	8002d2c <HAL_GPIO_Init+0x1ec>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a3f      	ldr	r2, [pc, #252]	@ (8002e04 <HAL_GPIO_Init+0x2c4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00d      	beq.n	8002d28 <HAL_GPIO_Init+0x1e8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a3e      	ldr	r2, [pc, #248]	@ (8002e08 <HAL_GPIO_Init+0x2c8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d007      	beq.n	8002d24 <HAL_GPIO_Init+0x1e4>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a3d      	ldr	r2, [pc, #244]	@ (8002e0c <HAL_GPIO_Init+0x2cc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d101      	bne.n	8002d20 <HAL_GPIO_Init+0x1e0>
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e006      	b.n	8002d2e <HAL_GPIO_Init+0x1ee>
 8002d20:	2304      	movs	r3, #4
 8002d22:	e004      	b.n	8002d2e <HAL_GPIO_Init+0x1ee>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e002      	b.n	8002d2e <HAL_GPIO_Init+0x1ee>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <HAL_GPIO_Init+0x1ee>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d30:	f002 0203 	and.w	r2, r2, #3
 8002d34:	0092      	lsls	r2, r2, #2
 8002d36:	4093      	lsls	r3, r2
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d3e:	492f      	ldr	r1, [pc, #188]	@ (8002dfc <HAL_GPIO_Init+0x2bc>)
 8002d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	3302      	adds	r3, #2
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d006      	beq.n	8002d66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d58:	4b2d      	ldr	r3, [pc, #180]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	492c      	ldr	r1, [pc, #176]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	608b      	str	r3, [r1, #8]
 8002d64:	e006      	b.n	8002d74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d66:	4b2a      	ldr	r3, [pc, #168]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	4928      	ldr	r1, [pc, #160]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d006      	beq.n	8002d8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d80:	4b23      	ldr	r3, [pc, #140]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	4922      	ldr	r1, [pc, #136]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60cb      	str	r3, [r1, #12]
 8002d8c:	e006      	b.n	8002d9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d8e:	4b20      	ldr	r3, [pc, #128]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	491e      	ldr	r1, [pc, #120]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d006      	beq.n	8002db6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002da8:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	4918      	ldr	r1, [pc, #96]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
 8002db4:	e006      	b.n	8002dc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002db6:	4b16      	ldr	r3, [pc, #88]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	4914      	ldr	r1, [pc, #80]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d021      	beq.n	8002e14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	490e      	ldr	r1, [pc, #56]	@ (8002e10 <HAL_GPIO_Init+0x2d0>)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	600b      	str	r3, [r1, #0]
 8002ddc:	e021      	b.n	8002e22 <HAL_GPIO_Init+0x2e2>
 8002dde:	bf00      	nop
 8002de0:	10320000 	.word	0x10320000
 8002de4:	10310000 	.word	0x10310000
 8002de8:	10220000 	.word	0x10220000
 8002dec:	10210000 	.word	0x10210000
 8002df0:	10120000 	.word	0x10120000
 8002df4:	10110000 	.word	0x10110000
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	40010800 	.word	0x40010800
 8002e04:	40010c00 	.word	0x40010c00
 8002e08:	40011000 	.word	0x40011000
 8002e0c:	40011400 	.word	0x40011400
 8002e10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e14:	4b0b      	ldr	r3, [pc, #44]	@ (8002e44 <HAL_GPIO_Init+0x304>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	4909      	ldr	r1, [pc, #36]	@ (8002e44 <HAL_GPIO_Init+0x304>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	3301      	adds	r3, #1
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f47f ae8e 	bne.w	8002b54 <HAL_GPIO_Init+0x14>
  }
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	372c      	adds	r7, #44	@ 0x2c
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	40010400 	.word	0x40010400

08002e48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
 8002e64:	e001      	b.n	8002e6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e66:	2300      	movs	r3, #0
 8002e68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	807b      	strh	r3, [r7, #2]
 8002e82:	4613      	mov	r3, r2
 8002e84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e86:	787b      	ldrb	r3, [r7, #1]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8c:	887a      	ldrh	r2, [r7, #2]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e92:	e003      	b.n	8002e9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e94:	887b      	ldrh	r3, [r7, #2]
 8002e96:	041a      	lsls	r2, r3, #16
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	611a      	str	r2, [r3, #16]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
	...

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e272      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 8087 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ec8:	4b92      	ldr	r3, [pc, #584]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d00c      	beq.n	8002eee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ed4:	4b8f      	ldr	r3, [pc, #572]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d112      	bne.n	8002f06 <HAL_RCC_OscConfig+0x5e>
 8002ee0:	4b8c      	ldr	r3, [pc, #560]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eec:	d10b      	bne.n	8002f06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eee:	4b89      	ldr	r3, [pc, #548]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d06c      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x12c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d168      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e24c      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x76>
 8002f10:	4b80      	ldr	r3, [pc, #512]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a7f      	ldr	r2, [pc, #508]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	e02e      	b.n	8002f7c <HAL_RCC_OscConfig+0xd4>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x98>
 8002f26:	4b7b      	ldr	r3, [pc, #492]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a7a      	ldr	r2, [pc, #488]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b78      	ldr	r3, [pc, #480]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a77      	ldr	r2, [pc, #476]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e01d      	b.n	8002f7c <HAL_RCC_OscConfig+0xd4>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0xbc>
 8002f4a:	4b72      	ldr	r3, [pc, #456]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a71      	ldr	r2, [pc, #452]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b6f      	ldr	r3, [pc, #444]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a6e      	ldr	r2, [pc, #440]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e00b      	b.n	8002f7c <HAL_RCC_OscConfig+0xd4>
 8002f64:	4b6b      	ldr	r3, [pc, #428]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a6a      	ldr	r2, [pc, #424]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b68      	ldr	r3, [pc, #416]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a67      	ldr	r2, [pc, #412]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7ff fcc4 	bl	8002910 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7ff fcc0 	bl	8002910 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	@ 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e200      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	4b5d      	ldr	r3, [pc, #372]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0xe4>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7ff fcb0 	bl	8002910 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7ff fcac 	bl	8002910 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	@ 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e1ec      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	4b53      	ldr	r3, [pc, #332]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x10c>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d063      	beq.n	80030aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fe2:	4b4c      	ldr	r3, [pc, #304]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fee:	4b49      	ldr	r3, [pc, #292]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d11c      	bne.n	8003034 <HAL_RCC_OscConfig+0x18c>
 8002ffa:	4b46      	ldr	r3, [pc, #280]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d116      	bne.n	8003034 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003006:	4b43      	ldr	r3, [pc, #268]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_RCC_OscConfig+0x176>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d001      	beq.n	800301e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e1c0      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301e:	4b3d      	ldr	r3, [pc, #244]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4939      	ldr	r1, [pc, #228]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003032:	e03a      	b.n	80030aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800303c:	4b36      	ldr	r3, [pc, #216]	@ (8003118 <HAL_RCC_OscConfig+0x270>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7ff fc65 	bl	8002910 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304a:	f7ff fc61 	bl	8002910 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e1a1      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	4b2d      	ldr	r3, [pc, #180]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003068:	4b2a      	ldr	r3, [pc, #168]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4927      	ldr	r1, [pc, #156]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]
 800307c:	e015      	b.n	80030aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307e:	4b26      	ldr	r3, [pc, #152]	@ (8003118 <HAL_RCC_OscConfig+0x270>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7ff fc44 	bl	8002910 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308c:	f7ff fc40 	bl	8002910 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e180      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	4b1d      	ldr	r3, [pc, #116]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d03a      	beq.n	800312c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d019      	beq.n	80030f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030be:	4b17      	ldr	r3, [pc, #92]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c4:	f7ff fc24 	bl	8002910 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030cc:	f7ff fc20 	bl	8002910 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e160      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	4b0d      	ldr	r3, [pc, #52]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ea:	2001      	movs	r0, #1
 80030ec:	f000 fa9c 	bl	8003628 <RCC_Delay>
 80030f0:	e01c      	b.n	800312c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f2:	4b0a      	ldr	r3, [pc, #40]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f8:	f7ff fc0a 	bl	8002910 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fe:	e00f      	b.n	8003120 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003100:	f7ff fc06 	bl	8002910 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d908      	bls.n	8003120 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e146      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	42420000 	.word	0x42420000
 800311c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003120:	4b92      	ldr	r3, [pc, #584]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e9      	bne.n	8003100 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80a6 	beq.w	8003286 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313a:	2300      	movs	r3, #0
 800313c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313e:	4b8b      	ldr	r3, [pc, #556]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10d      	bne.n	8003166 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	4b88      	ldr	r3, [pc, #544]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4a87      	ldr	r2, [pc, #540]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003154:	61d3      	str	r3, [r2, #28]
 8003156:	4b85      	ldr	r3, [pc, #532]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b82      	ldr	r3, [pc, #520]	@ (8003370 <HAL_RCC_OscConfig+0x4c8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003172:	4b7f      	ldr	r3, [pc, #508]	@ (8003370 <HAL_RCC_OscConfig+0x4c8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a7e      	ldr	r2, [pc, #504]	@ (8003370 <HAL_RCC_OscConfig+0x4c8>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800317c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7ff fbc7 	bl	8002910 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7ff fbc3 	bl	8002910 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b64      	cmp	r3, #100	@ 0x64
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e103      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	4b75      	ldr	r3, [pc, #468]	@ (8003370 <HAL_RCC_OscConfig+0x4c8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x312>
 80031ac:	4b6f      	ldr	r3, [pc, #444]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a6e      	ldr	r2, [pc, #440]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	e02d      	b.n	8003216 <HAL_RCC_OscConfig+0x36e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x334>
 80031c2:	4b6a      	ldr	r3, [pc, #424]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a69      	ldr	r2, [pc, #420]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	6213      	str	r3, [r2, #32]
 80031ce:	4b67      	ldr	r3, [pc, #412]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4a66      	ldr	r2, [pc, #408]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	6213      	str	r3, [r2, #32]
 80031da:	e01c      	b.n	8003216 <HAL_RCC_OscConfig+0x36e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d10c      	bne.n	80031fe <HAL_RCC_OscConfig+0x356>
 80031e4:	4b61      	ldr	r3, [pc, #388]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	4a60      	ldr	r2, [pc, #384]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	6213      	str	r3, [r2, #32]
 80031f0:	4b5e      	ldr	r3, [pc, #376]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4a5d      	ldr	r2, [pc, #372]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6213      	str	r3, [r2, #32]
 80031fc:	e00b      	b.n	8003216 <HAL_RCC_OscConfig+0x36e>
 80031fe:	4b5b      	ldr	r3, [pc, #364]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4a5a      	ldr	r2, [pc, #360]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	6213      	str	r3, [r2, #32]
 800320a:	4b58      	ldr	r3, [pc, #352]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4a57      	ldr	r2, [pc, #348]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d015      	beq.n	800324a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321e:	f7ff fb77 	bl	8002910 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7ff fb73 	bl	8002910 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e0b1      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	4b4b      	ldr	r3, [pc, #300]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0ee      	beq.n	8003226 <HAL_RCC_OscConfig+0x37e>
 8003248:	e014      	b.n	8003274 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324a:	f7ff fb61 	bl	8002910 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003250:	e00a      	b.n	8003268 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003252:	f7ff fb5d 	bl	8002910 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e09b      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	4b40      	ldr	r3, [pc, #256]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1ee      	bne.n	8003252 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d105      	bne.n	8003286 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327a:	4b3c      	ldr	r3, [pc, #240]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	4a3b      	ldr	r2, [pc, #236]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003280:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003284:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8087 	beq.w	800339e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003290:	4b36      	ldr	r3, [pc, #216]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b08      	cmp	r3, #8
 800329a:	d061      	beq.n	8003360 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d146      	bne.n	8003332 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a4:	4b33      	ldr	r3, [pc, #204]	@ (8003374 <HAL_RCC_OscConfig+0x4cc>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032aa:	f7ff fb31 	bl	8002910 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b2:	f7ff fb2d 	bl	8002910 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e06d      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c4:	4b29      	ldr	r3, [pc, #164]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d8:	d108      	bne.n	80032ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032da:	4b24      	ldr	r3, [pc, #144]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	4921      	ldr	r1, [pc, #132]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ec:	4b1f      	ldr	r3, [pc, #124]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a19      	ldr	r1, [r3, #32]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	430b      	orrs	r3, r1
 80032fe:	491b      	ldr	r1, [pc, #108]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003304:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <HAL_RCC_OscConfig+0x4cc>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330a:	f7ff fb01 	bl	8002910 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003312:	f7ff fafd 	bl	8002910 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e03d      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003324:	4b11      	ldr	r3, [pc, #68]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x46a>
 8003330:	e035      	b.n	800339e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003332:	4b10      	ldr	r3, [pc, #64]	@ (8003374 <HAL_RCC_OscConfig+0x4cc>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7ff faea 	bl	8002910 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7ff fae6 	bl	8002910 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e026      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003352:	4b06      	ldr	r3, [pc, #24]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x498>
 800335e:	e01e      	b.n	800339e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d107      	bne.n	8003378 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e019      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
 800336c:	40021000 	.word	0x40021000
 8003370:	40007000 	.word	0x40007000
 8003374:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003378:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <HAL_RCC_OscConfig+0x500>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	429a      	cmp	r2, r3
 800338a:	d106      	bne.n	800339a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003396:	429a      	cmp	r2, r3
 8003398:	d001      	beq.n	800339e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000

080033ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0d0      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033c0:	4b6a      	ldr	r3, [pc, #424]	@ (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d910      	bls.n	80033f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b67      	ldr	r3, [pc, #412]	@ (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 0207 	bic.w	r2, r3, #7
 80033d6:	4965      	ldr	r1, [pc, #404]	@ (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	4b63      	ldr	r3, [pc, #396]	@ (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0b8      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d020      	beq.n	800343e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003408:	4b59      	ldr	r3, [pc, #356]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4a58      	ldr	r2, [pc, #352]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003412:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003420:	4b53      	ldr	r3, [pc, #332]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a52      	ldr	r2, [pc, #328]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800342a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800342c:	4b50      	ldr	r3, [pc, #320]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	494d      	ldr	r1, [pc, #308]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d040      	beq.n	80034cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d107      	bne.n	8003462 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003452:	4b47      	ldr	r3, [pc, #284]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d115      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e07f      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346a:	4b41      	ldr	r3, [pc, #260]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e073      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347a:	4b3d      	ldr	r3, [pc, #244]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e06b      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800348a:	4b39      	ldr	r3, [pc, #228]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f023 0203 	bic.w	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4936      	ldr	r1, [pc, #216]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800349c:	f7ff fa38 	bl	8002910 <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a4:	f7ff fa34 	bl	8002910 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e053      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 020c 	and.w	r2, r3, #12
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d1eb      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034cc:	4b27      	ldr	r3, [pc, #156]	@ (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d210      	bcs.n	80034fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b24      	ldr	r3, [pc, #144]	@ (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 0207 	bic.w	r2, r3, #7
 80034e2:	4922      	ldr	r1, [pc, #136]	@ (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b20      	ldr	r3, [pc, #128]	@ (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e032      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003508:	4b19      	ldr	r3, [pc, #100]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4916      	ldr	r1, [pc, #88]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	4313      	orrs	r3, r2
 8003518:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d009      	beq.n	800353a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003526:	4b12      	ldr	r3, [pc, #72]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	490e      	ldr	r1, [pc, #56]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003536:	4313      	orrs	r3, r2
 8003538:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800353a:	f000 f821 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 800353e:	4602      	mov	r2, r0
 8003540:	4b0b      	ldr	r3, [pc, #44]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	091b      	lsrs	r3, r3, #4
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	490a      	ldr	r1, [pc, #40]	@ (8003574 <HAL_RCC_ClockConfig+0x1c8>)
 800354c:	5ccb      	ldrb	r3, [r1, r3]
 800354e:	fa22 f303 	lsr.w	r3, r2, r3
 8003552:	4a09      	ldr	r2, [pc, #36]	@ (8003578 <HAL_RCC_ClockConfig+0x1cc>)
 8003554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003556:	4b09      	ldr	r3, [pc, #36]	@ (800357c <HAL_RCC_ClockConfig+0x1d0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff f996 	bl	800288c <HAL_InitTick>

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40022000 	.word	0x40022000
 8003570:	40021000 	.word	0x40021000
 8003574:	080070f4 	.word	0x080070f4
 8003578:	20000060 	.word	0x20000060
 800357c:	20000064 	.word	0x20000064

08003580 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800359a:	4b1e      	ldr	r3, [pc, #120]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x94>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d002      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x30>
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d003      	beq.n	80035b6 <HAL_RCC_GetSysClockFreq+0x36>
 80035ae:	e027      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035b0:	4b19      	ldr	r3, [pc, #100]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x98>)
 80035b2:	613b      	str	r3, [r7, #16]
      break;
 80035b4:	e027      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	0c9b      	lsrs	r3, r3, #18
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	4a17      	ldr	r2, [pc, #92]	@ (800361c <HAL_RCC_GetSysClockFreq+0x9c>)
 80035c0:	5cd3      	ldrb	r3, [r2, r3]
 80035c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d010      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035ce:	4b11      	ldr	r3, [pc, #68]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x94>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	0c5b      	lsrs	r3, r3, #17
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	4a11      	ldr	r2, [pc, #68]	@ (8003620 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035da:	5cd3      	ldrb	r3, [r2, r3]
 80035dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x98>)
 80035e2:	fb03 f202 	mul.w	r2, r3, r2
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	e004      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003624 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035f4:	fb02 f303 	mul.w	r3, r2, r3
 80035f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	613b      	str	r3, [r7, #16]
      break;
 80035fe:	e002      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003600:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x98>)
 8003602:	613b      	str	r3, [r7, #16]
      break;
 8003604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003606:	693b      	ldr	r3, [r7, #16]
}
 8003608:	4618      	mov	r0, r3
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	007a1200 	.word	0x007a1200
 800361c:	08007104 	.word	0x08007104
 8003620:	08007114 	.word	0x08007114
 8003624:	003d0900 	.word	0x003d0900

08003628 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003630:	4b0a      	ldr	r3, [pc, #40]	@ (800365c <RCC_Delay+0x34>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a0a      	ldr	r2, [pc, #40]	@ (8003660 <RCC_Delay+0x38>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	0a5b      	lsrs	r3, r3, #9
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003644:	bf00      	nop
  }
  while (Delay --);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1e5a      	subs	r2, r3, #1
 800364a:	60fa      	str	r2, [r7, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f9      	bne.n	8003644 <RCC_Delay+0x1c>
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	20000060 	.word	0x20000060
 8003660:	10624dd3 	.word	0x10624dd3

08003664 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e076      	b.n	8003764 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	2b00      	cmp	r3, #0
 800367c:	d108      	bne.n	8003690 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003686:	d009      	beq.n	800369c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	61da      	str	r2, [r3, #28]
 800368e:	e005      	b.n	800369c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fe fed4 	bl	8002464 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003720:	ea42 0103 	orr.w	r1, r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003728:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	0c1a      	lsrs	r2, r3, #16
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f002 0204 	and.w	r2, r2, #4
 8003742:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	69da      	ldr	r2, [r3, #28]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003752:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_SPI_Transmit+0x22>
 800378a:	2302      	movs	r3, #2
 800378c:	e12d      	b.n	80039ea <HAL_SPI_Transmit+0x27e>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003796:	f7ff f8bb 	bl	8002910 <HAL_GetTick>
 800379a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d002      	beq.n	80037b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037ac:	2302      	movs	r3, #2
 80037ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037b0:	e116      	b.n	80039e0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_SPI_Transmit+0x52>
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d102      	bne.n	80037c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037c2:	e10d      	b.n	80039e0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2203      	movs	r2, #3
 80037c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	88fa      	ldrh	r2, [r7, #6]
 80037dc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	88fa      	ldrh	r2, [r7, #6]
 80037e2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800380a:	d10f      	bne.n	800382c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800381a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800382a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003836:	2b40      	cmp	r3, #64	@ 0x40
 8003838:	d007      	beq.n	800384a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003852:	d14f      	bne.n	80038f4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_SPI_Transmit+0xf6>
 800385c:	8afb      	ldrh	r3, [r7, #22]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d142      	bne.n	80038e8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003866:	881a      	ldrh	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	1c9a      	adds	r2, r3, #2
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003886:	e02f      	b.n	80038e8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b02      	cmp	r3, #2
 8003894:	d112      	bne.n	80038bc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	881a      	ldrh	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	1c9a      	adds	r2, r3, #2
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80038ba:	e015      	b.n	80038e8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038bc:	f7ff f828 	bl	8002910 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d803      	bhi.n	80038d4 <HAL_SPI_Transmit+0x168>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d2:	d102      	bne.n	80038da <HAL_SPI_Transmit+0x16e>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80038e6:	e07b      	b.n	80039e0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1ca      	bne.n	8003888 <HAL_SPI_Transmit+0x11c>
 80038f2:	e050      	b.n	8003996 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_SPI_Transmit+0x196>
 80038fc:	8afb      	ldrh	r3, [r7, #22]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d144      	bne.n	800398c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	330c      	adds	r3, #12
 800390c:	7812      	ldrb	r2, [r2, #0]
 800390e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003928:	e030      	b.n	800398c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b02      	cmp	r3, #2
 8003936:	d113      	bne.n	8003960 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	330c      	adds	r3, #12
 8003942:	7812      	ldrb	r2, [r2, #0]
 8003944:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800395e:	e015      	b.n	800398c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003960:	f7fe ffd6 	bl	8002910 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d803      	bhi.n	8003978 <HAL_SPI_Transmit+0x20c>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003976:	d102      	bne.n	800397e <HAL_SPI_Transmit+0x212>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800398a:	e029      	b.n	80039e0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1c9      	bne.n	800392a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	6839      	ldr	r1, [r7, #0]
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 f8b2 	bl	8003b04 <SPI_EndRxTxTransaction>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2220      	movs	r2, #32
 80039aa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039b4:	2300      	movs	r3, #0
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e003      	b.n	80039e0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80039e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3720      	adds	r7, #32
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a04:	f7fe ff84 	bl	8002910 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	4413      	add	r3, r2
 8003a12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a14:	f7fe ff7c 	bl	8002910 <HAL_GetTick>
 8003a18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a1a:	4b39      	ldr	r3, [pc, #228]	@ (8003b00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	015b      	lsls	r3, r3, #5
 8003a20:	0d1b      	lsrs	r3, r3, #20
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	fb02 f303 	mul.w	r3, r2, r3
 8003a28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a2a:	e054      	b.n	8003ad6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a32:	d050      	beq.n	8003ad6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a34:	f7fe ff6c 	bl	8002910 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d902      	bls.n	8003a4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d13d      	bne.n	8003ac6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a62:	d111      	bne.n	8003a88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a6c:	d004      	beq.n	8003a78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a76:	d107      	bne.n	8003a88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a90:	d10f      	bne.n	8003ab2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ab0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e017      	b.n	8003af6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	bf0c      	ite	eq
 8003ae6:	2301      	moveq	r3, #1
 8003ae8:	2300      	movne	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d19b      	bne.n	8003a2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000060 	.word	0x20000060

08003b04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af02      	add	r7, sp, #8
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2200      	movs	r2, #0
 8003b18:	2180      	movs	r1, #128	@ 0x80
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f7ff ff6a 	bl	80039f4 <SPI_WaitFlagStateUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d007      	beq.n	8003b36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b2a:	f043 0220 	orr.w	r2, r3, #32
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e000      	b.n	8003b38 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e041      	b.n	8003bd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fe fcea 	bl	8002540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4610      	mov	r0, r2
 8003b80:	f000 fa74 	bl	800406c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d001      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e03a      	b.n	8003c6e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a18      	ldr	r2, [pc, #96]	@ (8003c78 <HAL_TIM_Base_Start_IT+0x98>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00e      	beq.n	8003c38 <HAL_TIM_Base_Start_IT+0x58>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c22:	d009      	beq.n	8003c38 <HAL_TIM_Base_Start_IT+0x58>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a14      	ldr	r2, [pc, #80]	@ (8003c7c <HAL_TIM_Base_Start_IT+0x9c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d004      	beq.n	8003c38 <HAL_TIM_Base_Start_IT+0x58>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a13      	ldr	r2, [pc, #76]	@ (8003c80 <HAL_TIM_Base_Start_IT+0xa0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d111      	bne.n	8003c5c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b06      	cmp	r3, #6
 8003c48:	d010      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f042 0201 	orr.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c5a:	e007      	b.n	8003c6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr
 8003c78:	40012c00 	.word	0x40012c00
 8003c7c:	40000400 	.word	0x40000400
 8003c80:	40000800 	.word	0x40000800

08003c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d122      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d11b      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0202 	mvn.w	r2, #2
 8003cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f9b4 	bl	8004034 <HAL_TIM_IC_CaptureCallback>
 8003ccc:	e005      	b.n	8003cda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f9a7 	bl	8004022 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f9b6 	bl	8004046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d122      	bne.n	8003d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d11b      	bne.n	8003d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0204 	mvn.w	r2, #4
 8003d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f98a 	bl	8004034 <HAL_TIM_IC_CaptureCallback>
 8003d20:	e005      	b.n	8003d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f97d 	bl	8004022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f98c 	bl	8004046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d122      	bne.n	8003d88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d11b      	bne.n	8003d88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0208 	mvn.w	r2, #8
 8003d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f960 	bl	8004034 <HAL_TIM_IC_CaptureCallback>
 8003d74:	e005      	b.n	8003d82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f953 	bl	8004022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f962 	bl	8004046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	2b10      	cmp	r3, #16
 8003d94:	d122      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d11b      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0210 	mvn.w	r2, #16
 8003dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2208      	movs	r2, #8
 8003db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f936 	bl	8004034 <HAL_TIM_IC_CaptureCallback>
 8003dc8:	e005      	b.n	8003dd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f929 	bl	8004022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f938 	bl	8004046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d10e      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d107      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0201 	mvn.w	r2, #1
 8003e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fe faec 	bl	80023e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e12:	2b80      	cmp	r3, #128	@ 0x80
 8003e14:	d10e      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e20:	2b80      	cmp	r3, #128	@ 0x80
 8003e22:	d107      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa7b 	bl	800432a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3e:	2b40      	cmp	r3, #64	@ 0x40
 8003e40:	d10e      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e4c:	2b40      	cmp	r3, #64	@ 0x40
 8003e4e:	d107      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f8fc 	bl	8004058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b20      	cmp	r3, #32
 8003e6c:	d10e      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f003 0320 	and.w	r3, r3, #32
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d107      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f06f 0220 	mvn.w	r2, #32
 8003e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fa46 	bl	8004318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_TIM_ConfigClockSource+0x1c>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e0b4      	b.n	800401a <HAL_TIM_ConfigClockSource+0x186>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ee8:	d03e      	beq.n	8003f68 <HAL_TIM_ConfigClockSource+0xd4>
 8003eea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eee:	f200 8087 	bhi.w	8004000 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef6:	f000 8086 	beq.w	8004006 <HAL_TIM_ConfigClockSource+0x172>
 8003efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003efe:	d87f      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x16c>
 8003f00:	2b70      	cmp	r3, #112	@ 0x70
 8003f02:	d01a      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0xa6>
 8003f04:	2b70      	cmp	r3, #112	@ 0x70
 8003f06:	d87b      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x16c>
 8003f08:	2b60      	cmp	r3, #96	@ 0x60
 8003f0a:	d050      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x11a>
 8003f0c:	2b60      	cmp	r3, #96	@ 0x60
 8003f0e:	d877      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x16c>
 8003f10:	2b50      	cmp	r3, #80	@ 0x50
 8003f12:	d03c      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0xfa>
 8003f14:	2b50      	cmp	r3, #80	@ 0x50
 8003f16:	d873      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x16c>
 8003f18:	2b40      	cmp	r3, #64	@ 0x40
 8003f1a:	d058      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x13a>
 8003f1c:	2b40      	cmp	r3, #64	@ 0x40
 8003f1e:	d86f      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x16c>
 8003f20:	2b30      	cmp	r3, #48	@ 0x30
 8003f22:	d064      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x15a>
 8003f24:	2b30      	cmp	r3, #48	@ 0x30
 8003f26:	d86b      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x16c>
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d060      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x15a>
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d867      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x16c>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d05c      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x15a>
 8003f34:	2b10      	cmp	r3, #16
 8003f36:	d05a      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x15a>
 8003f38:	e062      	b.n	8004000 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f4a:	f000 f968 	bl	800421e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	609a      	str	r2, [r3, #8]
      break;
 8003f66:	e04f      	b.n	8004008 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f78:	f000 f951 	bl	800421e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f8a:	609a      	str	r2, [r3, #8]
      break;
 8003f8c:	e03c      	b.n	8004008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f000 f8c8 	bl	8004130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2150      	movs	r1, #80	@ 0x50
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f91f 	bl	80041ea <TIM_ITRx_SetConfig>
      break;
 8003fac:	e02c      	b.n	8004008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f000 f8e6 	bl	800418c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2160      	movs	r1, #96	@ 0x60
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f90f 	bl	80041ea <TIM_ITRx_SetConfig>
      break;
 8003fcc:	e01c      	b.n	8004008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f000 f8a8 	bl	8004130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2140      	movs	r1, #64	@ 0x40
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 f8ff 	bl	80041ea <TIM_ITRx_SetConfig>
      break;
 8003fec:	e00c      	b.n	8004008 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	f000 f8f6 	bl	80041ea <TIM_ITRx_SetConfig>
      break;
 8003ffe:	e003      	b.n	8004008 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
      break;
 8004004:	e000      	b.n	8004008 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004018:	7bfb      	ldrb	r3, [r7, #15]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr

08004046 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr
	...

0800406c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a29      	ldr	r2, [pc, #164]	@ (8004124 <TIM_Base_SetConfig+0xb8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00b      	beq.n	800409c <TIM_Base_SetConfig+0x30>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800408a:	d007      	beq.n	800409c <TIM_Base_SetConfig+0x30>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a26      	ldr	r2, [pc, #152]	@ (8004128 <TIM_Base_SetConfig+0xbc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_Base_SetConfig+0x30>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a25      	ldr	r2, [pc, #148]	@ (800412c <TIM_Base_SetConfig+0xc0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d108      	bne.n	80040ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004124 <TIM_Base_SetConfig+0xb8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00b      	beq.n	80040ce <TIM_Base_SetConfig+0x62>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040bc:	d007      	beq.n	80040ce <TIM_Base_SetConfig+0x62>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a19      	ldr	r2, [pc, #100]	@ (8004128 <TIM_Base_SetConfig+0xbc>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d003      	beq.n	80040ce <TIM_Base_SetConfig+0x62>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a18      	ldr	r2, [pc, #96]	@ (800412c <TIM_Base_SetConfig+0xc0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d108      	bne.n	80040e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a07      	ldr	r2, [pc, #28]	@ (8004124 <TIM_Base_SetConfig+0xb8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d103      	bne.n	8004114 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	615a      	str	r2, [r3, #20]
}
 800411a:	bf00      	nop
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr
 8004124:	40012c00 	.word	0x40012c00
 8004128:	40000400 	.word	0x40000400
 800412c:	40000800 	.word	0x40000800

08004130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0201 	bic.w	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800415a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f023 030a 	bic.w	r3, r3, #10
 800416c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	621a      	str	r2, [r3, #32]
}
 8004182:	bf00      	nop
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f023 0210 	bic.w	r2, r3, #16
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	031b      	lsls	r3, r3, #12
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	621a      	str	r2, [r3, #32]
}
 80041e0:	bf00      	nop
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr

080041ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b085      	sub	sp, #20
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	f043 0307 	orr.w	r3, r3, #7
 800420c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	609a      	str	r2, [r3, #8]
}
 8004214:	bf00      	nop
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr

0800421e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800421e:	b480      	push	{r7}
 8004220:	b087      	sub	sp, #28
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
 800422a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004238:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	021a      	lsls	r2, r3, #8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	431a      	orrs	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4313      	orrs	r3, r2
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	609a      	str	r2, [r3, #8]
}
 8004252:	bf00      	nop
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004270:	2302      	movs	r3, #2
 8004272:	e046      	b.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800429a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a16      	ldr	r2, [pc, #88]	@ (800430c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00e      	beq.n	80042d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c0:	d009      	beq.n	80042d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a12      	ldr	r2, [pc, #72]	@ (8004310 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d004      	beq.n	80042d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a10      	ldr	r2, [pc, #64]	@ (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d10c      	bne.n	80042f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	40012c00 	.word	0x40012c00
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800

08004318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr

0800432a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <__cvt>:
 800433c:	2b00      	cmp	r3, #0
 800433e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004342:	461d      	mov	r5, r3
 8004344:	bfbb      	ittet	lt
 8004346:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800434a:	461d      	movlt	r5, r3
 800434c:	2300      	movge	r3, #0
 800434e:	232d      	movlt	r3, #45	@ 0x2d
 8004350:	b088      	sub	sp, #32
 8004352:	4614      	mov	r4, r2
 8004354:	bfb8      	it	lt
 8004356:	4614      	movlt	r4, r2
 8004358:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800435a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800435c:	7013      	strb	r3, [r2, #0]
 800435e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004360:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004364:	f023 0820 	bic.w	r8, r3, #32
 8004368:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800436c:	d005      	beq.n	800437a <__cvt+0x3e>
 800436e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004372:	d100      	bne.n	8004376 <__cvt+0x3a>
 8004374:	3601      	adds	r6, #1
 8004376:	2302      	movs	r3, #2
 8004378:	e000      	b.n	800437c <__cvt+0x40>
 800437a:	2303      	movs	r3, #3
 800437c:	aa07      	add	r2, sp, #28
 800437e:	9204      	str	r2, [sp, #16]
 8004380:	aa06      	add	r2, sp, #24
 8004382:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004386:	e9cd 3600 	strd	r3, r6, [sp]
 800438a:	4622      	mov	r2, r4
 800438c:	462b      	mov	r3, r5
 800438e:	f000 fe83 	bl	8005098 <_dtoa_r>
 8004392:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004396:	4607      	mov	r7, r0
 8004398:	d119      	bne.n	80043ce <__cvt+0x92>
 800439a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800439c:	07db      	lsls	r3, r3, #31
 800439e:	d50e      	bpl.n	80043be <__cvt+0x82>
 80043a0:	eb00 0906 	add.w	r9, r0, r6
 80043a4:	2200      	movs	r2, #0
 80043a6:	2300      	movs	r3, #0
 80043a8:	4620      	mov	r0, r4
 80043aa:	4629      	mov	r1, r5
 80043ac:	f7fc fafc 	bl	80009a8 <__aeabi_dcmpeq>
 80043b0:	b108      	cbz	r0, 80043b6 <__cvt+0x7a>
 80043b2:	f8cd 901c 	str.w	r9, [sp, #28]
 80043b6:	2230      	movs	r2, #48	@ 0x30
 80043b8:	9b07      	ldr	r3, [sp, #28]
 80043ba:	454b      	cmp	r3, r9
 80043bc:	d31e      	bcc.n	80043fc <__cvt+0xc0>
 80043be:	4638      	mov	r0, r7
 80043c0:	9b07      	ldr	r3, [sp, #28]
 80043c2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80043c4:	1bdb      	subs	r3, r3, r7
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	b008      	add	sp, #32
 80043ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80043d2:	eb00 0906 	add.w	r9, r0, r6
 80043d6:	d1e5      	bne.n	80043a4 <__cvt+0x68>
 80043d8:	7803      	ldrb	r3, [r0, #0]
 80043da:	2b30      	cmp	r3, #48	@ 0x30
 80043dc:	d10a      	bne.n	80043f4 <__cvt+0xb8>
 80043de:	2200      	movs	r2, #0
 80043e0:	2300      	movs	r3, #0
 80043e2:	4620      	mov	r0, r4
 80043e4:	4629      	mov	r1, r5
 80043e6:	f7fc fadf 	bl	80009a8 <__aeabi_dcmpeq>
 80043ea:	b918      	cbnz	r0, 80043f4 <__cvt+0xb8>
 80043ec:	f1c6 0601 	rsb	r6, r6, #1
 80043f0:	f8ca 6000 	str.w	r6, [sl]
 80043f4:	f8da 3000 	ldr.w	r3, [sl]
 80043f8:	4499      	add	r9, r3
 80043fa:	e7d3      	b.n	80043a4 <__cvt+0x68>
 80043fc:	1c59      	adds	r1, r3, #1
 80043fe:	9107      	str	r1, [sp, #28]
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	e7d9      	b.n	80043b8 <__cvt+0x7c>

08004404 <__exponent>:
 8004404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004406:	2900      	cmp	r1, #0
 8004408:	bfb6      	itet	lt
 800440a:	232d      	movlt	r3, #45	@ 0x2d
 800440c:	232b      	movge	r3, #43	@ 0x2b
 800440e:	4249      	neglt	r1, r1
 8004410:	2909      	cmp	r1, #9
 8004412:	7002      	strb	r2, [r0, #0]
 8004414:	7043      	strb	r3, [r0, #1]
 8004416:	dd29      	ble.n	800446c <__exponent+0x68>
 8004418:	f10d 0307 	add.w	r3, sp, #7
 800441c:	461d      	mov	r5, r3
 800441e:	270a      	movs	r7, #10
 8004420:	fbb1 f6f7 	udiv	r6, r1, r7
 8004424:	461a      	mov	r2, r3
 8004426:	fb07 1416 	mls	r4, r7, r6, r1
 800442a:	3430      	adds	r4, #48	@ 0x30
 800442c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004430:	460c      	mov	r4, r1
 8004432:	2c63      	cmp	r4, #99	@ 0x63
 8004434:	4631      	mov	r1, r6
 8004436:	f103 33ff 	add.w	r3, r3, #4294967295
 800443a:	dcf1      	bgt.n	8004420 <__exponent+0x1c>
 800443c:	3130      	adds	r1, #48	@ 0x30
 800443e:	1e94      	subs	r4, r2, #2
 8004440:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004444:	4623      	mov	r3, r4
 8004446:	1c41      	adds	r1, r0, #1
 8004448:	42ab      	cmp	r3, r5
 800444a:	d30a      	bcc.n	8004462 <__exponent+0x5e>
 800444c:	f10d 0309 	add.w	r3, sp, #9
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	42ac      	cmp	r4, r5
 8004454:	bf88      	it	hi
 8004456:	2300      	movhi	r3, #0
 8004458:	3302      	adds	r3, #2
 800445a:	4403      	add	r3, r0
 800445c:	1a18      	subs	r0, r3, r0
 800445e:	b003      	add	sp, #12
 8004460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004462:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004466:	f801 6f01 	strb.w	r6, [r1, #1]!
 800446a:	e7ed      	b.n	8004448 <__exponent+0x44>
 800446c:	2330      	movs	r3, #48	@ 0x30
 800446e:	3130      	adds	r1, #48	@ 0x30
 8004470:	7083      	strb	r3, [r0, #2]
 8004472:	70c1      	strb	r1, [r0, #3]
 8004474:	1d03      	adds	r3, r0, #4
 8004476:	e7f1      	b.n	800445c <__exponent+0x58>

08004478 <_printf_float>:
 8004478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447c:	b091      	sub	sp, #68	@ 0x44
 800447e:	460c      	mov	r4, r1
 8004480:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004484:	4616      	mov	r6, r2
 8004486:	461f      	mov	r7, r3
 8004488:	4605      	mov	r5, r0
 800448a:	f000 fcf5 	bl	8004e78 <_localeconv_r>
 800448e:	6803      	ldr	r3, [r0, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	9308      	str	r3, [sp, #32]
 8004494:	f7fb fe5c 	bl	8000150 <strlen>
 8004498:	2300      	movs	r3, #0
 800449a:	930e      	str	r3, [sp, #56]	@ 0x38
 800449c:	f8d8 3000 	ldr.w	r3, [r8]
 80044a0:	9009      	str	r0, [sp, #36]	@ 0x24
 80044a2:	3307      	adds	r3, #7
 80044a4:	f023 0307 	bic.w	r3, r3, #7
 80044a8:	f103 0208 	add.w	r2, r3, #8
 80044ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80044b0:	f8d4 b000 	ldr.w	fp, [r4]
 80044b4:	f8c8 2000 	str.w	r2, [r8]
 80044b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80044c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044c2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80044c6:	f04f 32ff 	mov.w	r2, #4294967295
 80044ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80044ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80044d2:	4b9c      	ldr	r3, [pc, #624]	@ (8004744 <_printf_float+0x2cc>)
 80044d4:	f7fc fa9a 	bl	8000a0c <__aeabi_dcmpun>
 80044d8:	bb70      	cbnz	r0, 8004538 <_printf_float+0xc0>
 80044da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80044de:	f04f 32ff 	mov.w	r2, #4294967295
 80044e2:	4b98      	ldr	r3, [pc, #608]	@ (8004744 <_printf_float+0x2cc>)
 80044e4:	f7fc fa74 	bl	80009d0 <__aeabi_dcmple>
 80044e8:	bb30      	cbnz	r0, 8004538 <_printf_float+0xc0>
 80044ea:	2200      	movs	r2, #0
 80044ec:	2300      	movs	r3, #0
 80044ee:	4640      	mov	r0, r8
 80044f0:	4649      	mov	r1, r9
 80044f2:	f7fc fa63 	bl	80009bc <__aeabi_dcmplt>
 80044f6:	b110      	cbz	r0, 80044fe <_printf_float+0x86>
 80044f8:	232d      	movs	r3, #45	@ 0x2d
 80044fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044fe:	4a92      	ldr	r2, [pc, #584]	@ (8004748 <_printf_float+0x2d0>)
 8004500:	4b92      	ldr	r3, [pc, #584]	@ (800474c <_printf_float+0x2d4>)
 8004502:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004506:	bf94      	ite	ls
 8004508:	4690      	movls	r8, r2
 800450a:	4698      	movhi	r8, r3
 800450c:	2303      	movs	r3, #3
 800450e:	f04f 0900 	mov.w	r9, #0
 8004512:	6123      	str	r3, [r4, #16]
 8004514:	f02b 0304 	bic.w	r3, fp, #4
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	4633      	mov	r3, r6
 800451c:	4621      	mov	r1, r4
 800451e:	4628      	mov	r0, r5
 8004520:	9700      	str	r7, [sp, #0]
 8004522:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004524:	f000 f9d4 	bl	80048d0 <_printf_common>
 8004528:	3001      	adds	r0, #1
 800452a:	f040 8090 	bne.w	800464e <_printf_float+0x1d6>
 800452e:	f04f 30ff 	mov.w	r0, #4294967295
 8004532:	b011      	add	sp, #68	@ 0x44
 8004534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004538:	4642      	mov	r2, r8
 800453a:	464b      	mov	r3, r9
 800453c:	4640      	mov	r0, r8
 800453e:	4649      	mov	r1, r9
 8004540:	f7fc fa64 	bl	8000a0c <__aeabi_dcmpun>
 8004544:	b148      	cbz	r0, 800455a <_printf_float+0xe2>
 8004546:	464b      	mov	r3, r9
 8004548:	2b00      	cmp	r3, #0
 800454a:	bfb8      	it	lt
 800454c:	232d      	movlt	r3, #45	@ 0x2d
 800454e:	4a80      	ldr	r2, [pc, #512]	@ (8004750 <_printf_float+0x2d8>)
 8004550:	bfb8      	it	lt
 8004552:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004556:	4b7f      	ldr	r3, [pc, #508]	@ (8004754 <_printf_float+0x2dc>)
 8004558:	e7d3      	b.n	8004502 <_printf_float+0x8a>
 800455a:	6863      	ldr	r3, [r4, #4]
 800455c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	d13f      	bne.n	80045e4 <_printf_float+0x16c>
 8004564:	2306      	movs	r3, #6
 8004566:	6063      	str	r3, [r4, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800456e:	6023      	str	r3, [r4, #0]
 8004570:	9206      	str	r2, [sp, #24]
 8004572:	aa0e      	add	r2, sp, #56	@ 0x38
 8004574:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004578:	aa0d      	add	r2, sp, #52	@ 0x34
 800457a:	9203      	str	r2, [sp, #12]
 800457c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004580:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004584:	6863      	ldr	r3, [r4, #4]
 8004586:	4642      	mov	r2, r8
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	4628      	mov	r0, r5
 800458c:	464b      	mov	r3, r9
 800458e:	910a      	str	r1, [sp, #40]	@ 0x28
 8004590:	f7ff fed4 	bl	800433c <__cvt>
 8004594:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004596:	4680      	mov	r8, r0
 8004598:	2947      	cmp	r1, #71	@ 0x47
 800459a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800459c:	d128      	bne.n	80045f0 <_printf_float+0x178>
 800459e:	1cc8      	adds	r0, r1, #3
 80045a0:	db02      	blt.n	80045a8 <_printf_float+0x130>
 80045a2:	6863      	ldr	r3, [r4, #4]
 80045a4:	4299      	cmp	r1, r3
 80045a6:	dd40      	ble.n	800462a <_printf_float+0x1b2>
 80045a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80045ac:	fa5f fa8a 	uxtb.w	sl, sl
 80045b0:	4652      	mov	r2, sl
 80045b2:	3901      	subs	r1, #1
 80045b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80045b8:	910d      	str	r1, [sp, #52]	@ 0x34
 80045ba:	f7ff ff23 	bl	8004404 <__exponent>
 80045be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80045c0:	4681      	mov	r9, r0
 80045c2:	1813      	adds	r3, r2, r0
 80045c4:	2a01      	cmp	r2, #1
 80045c6:	6123      	str	r3, [r4, #16]
 80045c8:	dc02      	bgt.n	80045d0 <_printf_float+0x158>
 80045ca:	6822      	ldr	r2, [r4, #0]
 80045cc:	07d2      	lsls	r2, r2, #31
 80045ce:	d501      	bpl.n	80045d4 <_printf_float+0x15c>
 80045d0:	3301      	adds	r3, #1
 80045d2:	6123      	str	r3, [r4, #16]
 80045d4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d09e      	beq.n	800451a <_printf_float+0xa2>
 80045dc:	232d      	movs	r3, #45	@ 0x2d
 80045de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045e2:	e79a      	b.n	800451a <_printf_float+0xa2>
 80045e4:	2947      	cmp	r1, #71	@ 0x47
 80045e6:	d1bf      	bne.n	8004568 <_printf_float+0xf0>
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1bd      	bne.n	8004568 <_printf_float+0xf0>
 80045ec:	2301      	movs	r3, #1
 80045ee:	e7ba      	b.n	8004566 <_printf_float+0xee>
 80045f0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80045f4:	d9dc      	bls.n	80045b0 <_printf_float+0x138>
 80045f6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80045fa:	d118      	bne.n	800462e <_printf_float+0x1b6>
 80045fc:	2900      	cmp	r1, #0
 80045fe:	6863      	ldr	r3, [r4, #4]
 8004600:	dd0b      	ble.n	800461a <_printf_float+0x1a2>
 8004602:	6121      	str	r1, [r4, #16]
 8004604:	b913      	cbnz	r3, 800460c <_printf_float+0x194>
 8004606:	6822      	ldr	r2, [r4, #0]
 8004608:	07d0      	lsls	r0, r2, #31
 800460a:	d502      	bpl.n	8004612 <_printf_float+0x19a>
 800460c:	3301      	adds	r3, #1
 800460e:	440b      	add	r3, r1
 8004610:	6123      	str	r3, [r4, #16]
 8004612:	f04f 0900 	mov.w	r9, #0
 8004616:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004618:	e7dc      	b.n	80045d4 <_printf_float+0x15c>
 800461a:	b913      	cbnz	r3, 8004622 <_printf_float+0x1aa>
 800461c:	6822      	ldr	r2, [r4, #0]
 800461e:	07d2      	lsls	r2, r2, #31
 8004620:	d501      	bpl.n	8004626 <_printf_float+0x1ae>
 8004622:	3302      	adds	r3, #2
 8004624:	e7f4      	b.n	8004610 <_printf_float+0x198>
 8004626:	2301      	movs	r3, #1
 8004628:	e7f2      	b.n	8004610 <_printf_float+0x198>
 800462a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800462e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004630:	4299      	cmp	r1, r3
 8004632:	db05      	blt.n	8004640 <_printf_float+0x1c8>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	6121      	str	r1, [r4, #16]
 8004638:	07d8      	lsls	r0, r3, #31
 800463a:	d5ea      	bpl.n	8004612 <_printf_float+0x19a>
 800463c:	1c4b      	adds	r3, r1, #1
 800463e:	e7e7      	b.n	8004610 <_printf_float+0x198>
 8004640:	2900      	cmp	r1, #0
 8004642:	bfcc      	ite	gt
 8004644:	2201      	movgt	r2, #1
 8004646:	f1c1 0202 	rsble	r2, r1, #2
 800464a:	4413      	add	r3, r2
 800464c:	e7e0      	b.n	8004610 <_printf_float+0x198>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	055a      	lsls	r2, r3, #21
 8004652:	d407      	bmi.n	8004664 <_printf_float+0x1ec>
 8004654:	6923      	ldr	r3, [r4, #16]
 8004656:	4642      	mov	r2, r8
 8004658:	4631      	mov	r1, r6
 800465a:	4628      	mov	r0, r5
 800465c:	47b8      	blx	r7
 800465e:	3001      	adds	r0, #1
 8004660:	d12b      	bne.n	80046ba <_printf_float+0x242>
 8004662:	e764      	b.n	800452e <_printf_float+0xb6>
 8004664:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004668:	f240 80dc 	bls.w	8004824 <_printf_float+0x3ac>
 800466c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004670:	2200      	movs	r2, #0
 8004672:	2300      	movs	r3, #0
 8004674:	f7fc f998 	bl	80009a8 <__aeabi_dcmpeq>
 8004678:	2800      	cmp	r0, #0
 800467a:	d033      	beq.n	80046e4 <_printf_float+0x26c>
 800467c:	2301      	movs	r3, #1
 800467e:	4631      	mov	r1, r6
 8004680:	4628      	mov	r0, r5
 8004682:	4a35      	ldr	r2, [pc, #212]	@ (8004758 <_printf_float+0x2e0>)
 8004684:	47b8      	blx	r7
 8004686:	3001      	adds	r0, #1
 8004688:	f43f af51 	beq.w	800452e <_printf_float+0xb6>
 800468c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004690:	4543      	cmp	r3, r8
 8004692:	db02      	blt.n	800469a <_printf_float+0x222>
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	07d8      	lsls	r0, r3, #31
 8004698:	d50f      	bpl.n	80046ba <_printf_float+0x242>
 800469a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800469e:	4631      	mov	r1, r6
 80046a0:	4628      	mov	r0, r5
 80046a2:	47b8      	blx	r7
 80046a4:	3001      	adds	r0, #1
 80046a6:	f43f af42 	beq.w	800452e <_printf_float+0xb6>
 80046aa:	f04f 0900 	mov.w	r9, #0
 80046ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80046b2:	f104 0a1a 	add.w	sl, r4, #26
 80046b6:	45c8      	cmp	r8, r9
 80046b8:	dc09      	bgt.n	80046ce <_printf_float+0x256>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	079b      	lsls	r3, r3, #30
 80046be:	f100 8102 	bmi.w	80048c6 <_printf_float+0x44e>
 80046c2:	68e0      	ldr	r0, [r4, #12]
 80046c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80046c6:	4298      	cmp	r0, r3
 80046c8:	bfb8      	it	lt
 80046ca:	4618      	movlt	r0, r3
 80046cc:	e731      	b.n	8004532 <_printf_float+0xba>
 80046ce:	2301      	movs	r3, #1
 80046d0:	4652      	mov	r2, sl
 80046d2:	4631      	mov	r1, r6
 80046d4:	4628      	mov	r0, r5
 80046d6:	47b8      	blx	r7
 80046d8:	3001      	adds	r0, #1
 80046da:	f43f af28 	beq.w	800452e <_printf_float+0xb6>
 80046de:	f109 0901 	add.w	r9, r9, #1
 80046e2:	e7e8      	b.n	80046b6 <_printf_float+0x23e>
 80046e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	dc38      	bgt.n	800475c <_printf_float+0x2e4>
 80046ea:	2301      	movs	r3, #1
 80046ec:	4631      	mov	r1, r6
 80046ee:	4628      	mov	r0, r5
 80046f0:	4a19      	ldr	r2, [pc, #100]	@ (8004758 <_printf_float+0x2e0>)
 80046f2:	47b8      	blx	r7
 80046f4:	3001      	adds	r0, #1
 80046f6:	f43f af1a 	beq.w	800452e <_printf_float+0xb6>
 80046fa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80046fe:	ea59 0303 	orrs.w	r3, r9, r3
 8004702:	d102      	bne.n	800470a <_printf_float+0x292>
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	07d9      	lsls	r1, r3, #31
 8004708:	d5d7      	bpl.n	80046ba <_printf_float+0x242>
 800470a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800470e:	4631      	mov	r1, r6
 8004710:	4628      	mov	r0, r5
 8004712:	47b8      	blx	r7
 8004714:	3001      	adds	r0, #1
 8004716:	f43f af0a 	beq.w	800452e <_printf_float+0xb6>
 800471a:	f04f 0a00 	mov.w	sl, #0
 800471e:	f104 0b1a 	add.w	fp, r4, #26
 8004722:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004724:	425b      	negs	r3, r3
 8004726:	4553      	cmp	r3, sl
 8004728:	dc01      	bgt.n	800472e <_printf_float+0x2b6>
 800472a:	464b      	mov	r3, r9
 800472c:	e793      	b.n	8004656 <_printf_float+0x1de>
 800472e:	2301      	movs	r3, #1
 8004730:	465a      	mov	r2, fp
 8004732:	4631      	mov	r1, r6
 8004734:	4628      	mov	r0, r5
 8004736:	47b8      	blx	r7
 8004738:	3001      	adds	r0, #1
 800473a:	f43f aef8 	beq.w	800452e <_printf_float+0xb6>
 800473e:	f10a 0a01 	add.w	sl, sl, #1
 8004742:	e7ee      	b.n	8004722 <_printf_float+0x2aa>
 8004744:	7fefffff 	.word	0x7fefffff
 8004748:	08007116 	.word	0x08007116
 800474c:	0800711a 	.word	0x0800711a
 8004750:	0800711e 	.word	0x0800711e
 8004754:	08007122 	.word	0x08007122
 8004758:	08007126 	.word	0x08007126
 800475c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800475e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004762:	4553      	cmp	r3, sl
 8004764:	bfa8      	it	ge
 8004766:	4653      	movge	r3, sl
 8004768:	2b00      	cmp	r3, #0
 800476a:	4699      	mov	r9, r3
 800476c:	dc36      	bgt.n	80047dc <_printf_float+0x364>
 800476e:	f04f 0b00 	mov.w	fp, #0
 8004772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004776:	f104 021a 	add.w	r2, r4, #26
 800477a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800477c:	930a      	str	r3, [sp, #40]	@ 0x28
 800477e:	eba3 0309 	sub.w	r3, r3, r9
 8004782:	455b      	cmp	r3, fp
 8004784:	dc31      	bgt.n	80047ea <_printf_float+0x372>
 8004786:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004788:	459a      	cmp	sl, r3
 800478a:	dc3a      	bgt.n	8004802 <_printf_float+0x38a>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	07da      	lsls	r2, r3, #31
 8004790:	d437      	bmi.n	8004802 <_printf_float+0x38a>
 8004792:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004794:	ebaa 0903 	sub.w	r9, sl, r3
 8004798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800479a:	ebaa 0303 	sub.w	r3, sl, r3
 800479e:	4599      	cmp	r9, r3
 80047a0:	bfa8      	it	ge
 80047a2:	4699      	movge	r9, r3
 80047a4:	f1b9 0f00 	cmp.w	r9, #0
 80047a8:	dc33      	bgt.n	8004812 <_printf_float+0x39a>
 80047aa:	f04f 0800 	mov.w	r8, #0
 80047ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047b2:	f104 0b1a 	add.w	fp, r4, #26
 80047b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80047b8:	ebaa 0303 	sub.w	r3, sl, r3
 80047bc:	eba3 0309 	sub.w	r3, r3, r9
 80047c0:	4543      	cmp	r3, r8
 80047c2:	f77f af7a 	ble.w	80046ba <_printf_float+0x242>
 80047c6:	2301      	movs	r3, #1
 80047c8:	465a      	mov	r2, fp
 80047ca:	4631      	mov	r1, r6
 80047cc:	4628      	mov	r0, r5
 80047ce:	47b8      	blx	r7
 80047d0:	3001      	adds	r0, #1
 80047d2:	f43f aeac 	beq.w	800452e <_printf_float+0xb6>
 80047d6:	f108 0801 	add.w	r8, r8, #1
 80047da:	e7ec      	b.n	80047b6 <_printf_float+0x33e>
 80047dc:	4642      	mov	r2, r8
 80047de:	4631      	mov	r1, r6
 80047e0:	4628      	mov	r0, r5
 80047e2:	47b8      	blx	r7
 80047e4:	3001      	adds	r0, #1
 80047e6:	d1c2      	bne.n	800476e <_printf_float+0x2f6>
 80047e8:	e6a1      	b.n	800452e <_printf_float+0xb6>
 80047ea:	2301      	movs	r3, #1
 80047ec:	4631      	mov	r1, r6
 80047ee:	4628      	mov	r0, r5
 80047f0:	920a      	str	r2, [sp, #40]	@ 0x28
 80047f2:	47b8      	blx	r7
 80047f4:	3001      	adds	r0, #1
 80047f6:	f43f ae9a 	beq.w	800452e <_printf_float+0xb6>
 80047fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80047fc:	f10b 0b01 	add.w	fp, fp, #1
 8004800:	e7bb      	b.n	800477a <_printf_float+0x302>
 8004802:	4631      	mov	r1, r6
 8004804:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004808:	4628      	mov	r0, r5
 800480a:	47b8      	blx	r7
 800480c:	3001      	adds	r0, #1
 800480e:	d1c0      	bne.n	8004792 <_printf_float+0x31a>
 8004810:	e68d      	b.n	800452e <_printf_float+0xb6>
 8004812:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004814:	464b      	mov	r3, r9
 8004816:	4631      	mov	r1, r6
 8004818:	4628      	mov	r0, r5
 800481a:	4442      	add	r2, r8
 800481c:	47b8      	blx	r7
 800481e:	3001      	adds	r0, #1
 8004820:	d1c3      	bne.n	80047aa <_printf_float+0x332>
 8004822:	e684      	b.n	800452e <_printf_float+0xb6>
 8004824:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004828:	f1ba 0f01 	cmp.w	sl, #1
 800482c:	dc01      	bgt.n	8004832 <_printf_float+0x3ba>
 800482e:	07db      	lsls	r3, r3, #31
 8004830:	d536      	bpl.n	80048a0 <_printf_float+0x428>
 8004832:	2301      	movs	r3, #1
 8004834:	4642      	mov	r2, r8
 8004836:	4631      	mov	r1, r6
 8004838:	4628      	mov	r0, r5
 800483a:	47b8      	blx	r7
 800483c:	3001      	adds	r0, #1
 800483e:	f43f ae76 	beq.w	800452e <_printf_float+0xb6>
 8004842:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004846:	4631      	mov	r1, r6
 8004848:	4628      	mov	r0, r5
 800484a:	47b8      	blx	r7
 800484c:	3001      	adds	r0, #1
 800484e:	f43f ae6e 	beq.w	800452e <_printf_float+0xb6>
 8004852:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004856:	2200      	movs	r2, #0
 8004858:	2300      	movs	r3, #0
 800485a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800485e:	f7fc f8a3 	bl	80009a8 <__aeabi_dcmpeq>
 8004862:	b9c0      	cbnz	r0, 8004896 <_printf_float+0x41e>
 8004864:	4653      	mov	r3, sl
 8004866:	f108 0201 	add.w	r2, r8, #1
 800486a:	4631      	mov	r1, r6
 800486c:	4628      	mov	r0, r5
 800486e:	47b8      	blx	r7
 8004870:	3001      	adds	r0, #1
 8004872:	d10c      	bne.n	800488e <_printf_float+0x416>
 8004874:	e65b      	b.n	800452e <_printf_float+0xb6>
 8004876:	2301      	movs	r3, #1
 8004878:	465a      	mov	r2, fp
 800487a:	4631      	mov	r1, r6
 800487c:	4628      	mov	r0, r5
 800487e:	47b8      	blx	r7
 8004880:	3001      	adds	r0, #1
 8004882:	f43f ae54 	beq.w	800452e <_printf_float+0xb6>
 8004886:	f108 0801 	add.w	r8, r8, #1
 800488a:	45d0      	cmp	r8, sl
 800488c:	dbf3      	blt.n	8004876 <_printf_float+0x3fe>
 800488e:	464b      	mov	r3, r9
 8004890:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004894:	e6e0      	b.n	8004658 <_printf_float+0x1e0>
 8004896:	f04f 0800 	mov.w	r8, #0
 800489a:	f104 0b1a 	add.w	fp, r4, #26
 800489e:	e7f4      	b.n	800488a <_printf_float+0x412>
 80048a0:	2301      	movs	r3, #1
 80048a2:	4642      	mov	r2, r8
 80048a4:	e7e1      	b.n	800486a <_printf_float+0x3f2>
 80048a6:	2301      	movs	r3, #1
 80048a8:	464a      	mov	r2, r9
 80048aa:	4631      	mov	r1, r6
 80048ac:	4628      	mov	r0, r5
 80048ae:	47b8      	blx	r7
 80048b0:	3001      	adds	r0, #1
 80048b2:	f43f ae3c 	beq.w	800452e <_printf_float+0xb6>
 80048b6:	f108 0801 	add.w	r8, r8, #1
 80048ba:	68e3      	ldr	r3, [r4, #12]
 80048bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80048be:	1a5b      	subs	r3, r3, r1
 80048c0:	4543      	cmp	r3, r8
 80048c2:	dcf0      	bgt.n	80048a6 <_printf_float+0x42e>
 80048c4:	e6fd      	b.n	80046c2 <_printf_float+0x24a>
 80048c6:	f04f 0800 	mov.w	r8, #0
 80048ca:	f104 0919 	add.w	r9, r4, #25
 80048ce:	e7f4      	b.n	80048ba <_printf_float+0x442>

080048d0 <_printf_common>:
 80048d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048d4:	4616      	mov	r6, r2
 80048d6:	4698      	mov	r8, r3
 80048d8:	688a      	ldr	r2, [r1, #8]
 80048da:	690b      	ldr	r3, [r1, #16]
 80048dc:	4607      	mov	r7, r0
 80048de:	4293      	cmp	r3, r2
 80048e0:	bfb8      	it	lt
 80048e2:	4613      	movlt	r3, r2
 80048e4:	6033      	str	r3, [r6, #0]
 80048e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048ea:	460c      	mov	r4, r1
 80048ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048f0:	b10a      	cbz	r2, 80048f6 <_printf_common+0x26>
 80048f2:	3301      	adds	r3, #1
 80048f4:	6033      	str	r3, [r6, #0]
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	0699      	lsls	r1, r3, #26
 80048fa:	bf42      	ittt	mi
 80048fc:	6833      	ldrmi	r3, [r6, #0]
 80048fe:	3302      	addmi	r3, #2
 8004900:	6033      	strmi	r3, [r6, #0]
 8004902:	6825      	ldr	r5, [r4, #0]
 8004904:	f015 0506 	ands.w	r5, r5, #6
 8004908:	d106      	bne.n	8004918 <_printf_common+0x48>
 800490a:	f104 0a19 	add.w	sl, r4, #25
 800490e:	68e3      	ldr	r3, [r4, #12]
 8004910:	6832      	ldr	r2, [r6, #0]
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	42ab      	cmp	r3, r5
 8004916:	dc2b      	bgt.n	8004970 <_printf_common+0xa0>
 8004918:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800491c:	6822      	ldr	r2, [r4, #0]
 800491e:	3b00      	subs	r3, #0
 8004920:	bf18      	it	ne
 8004922:	2301      	movne	r3, #1
 8004924:	0692      	lsls	r2, r2, #26
 8004926:	d430      	bmi.n	800498a <_printf_common+0xba>
 8004928:	4641      	mov	r1, r8
 800492a:	4638      	mov	r0, r7
 800492c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004930:	47c8      	blx	r9
 8004932:	3001      	adds	r0, #1
 8004934:	d023      	beq.n	800497e <_printf_common+0xae>
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	6922      	ldr	r2, [r4, #16]
 800493a:	f003 0306 	and.w	r3, r3, #6
 800493e:	2b04      	cmp	r3, #4
 8004940:	bf14      	ite	ne
 8004942:	2500      	movne	r5, #0
 8004944:	6833      	ldreq	r3, [r6, #0]
 8004946:	f04f 0600 	mov.w	r6, #0
 800494a:	bf08      	it	eq
 800494c:	68e5      	ldreq	r5, [r4, #12]
 800494e:	f104 041a 	add.w	r4, r4, #26
 8004952:	bf08      	it	eq
 8004954:	1aed      	subeq	r5, r5, r3
 8004956:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800495a:	bf08      	it	eq
 800495c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004960:	4293      	cmp	r3, r2
 8004962:	bfc4      	itt	gt
 8004964:	1a9b      	subgt	r3, r3, r2
 8004966:	18ed      	addgt	r5, r5, r3
 8004968:	42b5      	cmp	r5, r6
 800496a:	d11a      	bne.n	80049a2 <_printf_common+0xd2>
 800496c:	2000      	movs	r0, #0
 800496e:	e008      	b.n	8004982 <_printf_common+0xb2>
 8004970:	2301      	movs	r3, #1
 8004972:	4652      	mov	r2, sl
 8004974:	4641      	mov	r1, r8
 8004976:	4638      	mov	r0, r7
 8004978:	47c8      	blx	r9
 800497a:	3001      	adds	r0, #1
 800497c:	d103      	bne.n	8004986 <_printf_common+0xb6>
 800497e:	f04f 30ff 	mov.w	r0, #4294967295
 8004982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004986:	3501      	adds	r5, #1
 8004988:	e7c1      	b.n	800490e <_printf_common+0x3e>
 800498a:	2030      	movs	r0, #48	@ 0x30
 800498c:	18e1      	adds	r1, r4, r3
 800498e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004998:	4422      	add	r2, r4
 800499a:	3302      	adds	r3, #2
 800499c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80049a0:	e7c2      	b.n	8004928 <_printf_common+0x58>
 80049a2:	2301      	movs	r3, #1
 80049a4:	4622      	mov	r2, r4
 80049a6:	4641      	mov	r1, r8
 80049a8:	4638      	mov	r0, r7
 80049aa:	47c8      	blx	r9
 80049ac:	3001      	adds	r0, #1
 80049ae:	d0e6      	beq.n	800497e <_printf_common+0xae>
 80049b0:	3601      	adds	r6, #1
 80049b2:	e7d9      	b.n	8004968 <_printf_common+0x98>

080049b4 <_printf_i>:
 80049b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049b8:	7e0f      	ldrb	r7, [r1, #24]
 80049ba:	4691      	mov	r9, r2
 80049bc:	2f78      	cmp	r7, #120	@ 0x78
 80049be:	4680      	mov	r8, r0
 80049c0:	460c      	mov	r4, r1
 80049c2:	469a      	mov	sl, r3
 80049c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049ca:	d807      	bhi.n	80049dc <_printf_i+0x28>
 80049cc:	2f62      	cmp	r7, #98	@ 0x62
 80049ce:	d80a      	bhi.n	80049e6 <_printf_i+0x32>
 80049d0:	2f00      	cmp	r7, #0
 80049d2:	f000 80d3 	beq.w	8004b7c <_printf_i+0x1c8>
 80049d6:	2f58      	cmp	r7, #88	@ 0x58
 80049d8:	f000 80ba 	beq.w	8004b50 <_printf_i+0x19c>
 80049dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049e4:	e03a      	b.n	8004a5c <_printf_i+0xa8>
 80049e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049ea:	2b15      	cmp	r3, #21
 80049ec:	d8f6      	bhi.n	80049dc <_printf_i+0x28>
 80049ee:	a101      	add	r1, pc, #4	@ (adr r1, 80049f4 <_printf_i+0x40>)
 80049f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049f4:	08004a4d 	.word	0x08004a4d
 80049f8:	08004a61 	.word	0x08004a61
 80049fc:	080049dd 	.word	0x080049dd
 8004a00:	080049dd 	.word	0x080049dd
 8004a04:	080049dd 	.word	0x080049dd
 8004a08:	080049dd 	.word	0x080049dd
 8004a0c:	08004a61 	.word	0x08004a61
 8004a10:	080049dd 	.word	0x080049dd
 8004a14:	080049dd 	.word	0x080049dd
 8004a18:	080049dd 	.word	0x080049dd
 8004a1c:	080049dd 	.word	0x080049dd
 8004a20:	08004b63 	.word	0x08004b63
 8004a24:	08004a8b 	.word	0x08004a8b
 8004a28:	08004b1d 	.word	0x08004b1d
 8004a2c:	080049dd 	.word	0x080049dd
 8004a30:	080049dd 	.word	0x080049dd
 8004a34:	08004b85 	.word	0x08004b85
 8004a38:	080049dd 	.word	0x080049dd
 8004a3c:	08004a8b 	.word	0x08004a8b
 8004a40:	080049dd 	.word	0x080049dd
 8004a44:	080049dd 	.word	0x080049dd
 8004a48:	08004b25 	.word	0x08004b25
 8004a4c:	6833      	ldr	r3, [r6, #0]
 8004a4e:	1d1a      	adds	r2, r3, #4
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6032      	str	r2, [r6, #0]
 8004a54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e09e      	b.n	8004b9e <_printf_i+0x1ea>
 8004a60:	6833      	ldr	r3, [r6, #0]
 8004a62:	6820      	ldr	r0, [r4, #0]
 8004a64:	1d19      	adds	r1, r3, #4
 8004a66:	6031      	str	r1, [r6, #0]
 8004a68:	0606      	lsls	r6, r0, #24
 8004a6a:	d501      	bpl.n	8004a70 <_printf_i+0xbc>
 8004a6c:	681d      	ldr	r5, [r3, #0]
 8004a6e:	e003      	b.n	8004a78 <_printf_i+0xc4>
 8004a70:	0645      	lsls	r5, r0, #25
 8004a72:	d5fb      	bpl.n	8004a6c <_printf_i+0xb8>
 8004a74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a78:	2d00      	cmp	r5, #0
 8004a7a:	da03      	bge.n	8004a84 <_printf_i+0xd0>
 8004a7c:	232d      	movs	r3, #45	@ 0x2d
 8004a7e:	426d      	negs	r5, r5
 8004a80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a84:	230a      	movs	r3, #10
 8004a86:	4859      	ldr	r0, [pc, #356]	@ (8004bec <_printf_i+0x238>)
 8004a88:	e011      	b.n	8004aae <_printf_i+0xfa>
 8004a8a:	6821      	ldr	r1, [r4, #0]
 8004a8c:	6833      	ldr	r3, [r6, #0]
 8004a8e:	0608      	lsls	r0, r1, #24
 8004a90:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a94:	d402      	bmi.n	8004a9c <_printf_i+0xe8>
 8004a96:	0649      	lsls	r1, r1, #25
 8004a98:	bf48      	it	mi
 8004a9a:	b2ad      	uxthmi	r5, r5
 8004a9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a9e:	6033      	str	r3, [r6, #0]
 8004aa0:	bf14      	ite	ne
 8004aa2:	230a      	movne	r3, #10
 8004aa4:	2308      	moveq	r3, #8
 8004aa6:	4851      	ldr	r0, [pc, #324]	@ (8004bec <_printf_i+0x238>)
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004aae:	6866      	ldr	r6, [r4, #4]
 8004ab0:	2e00      	cmp	r6, #0
 8004ab2:	bfa8      	it	ge
 8004ab4:	6821      	ldrge	r1, [r4, #0]
 8004ab6:	60a6      	str	r6, [r4, #8]
 8004ab8:	bfa4      	itt	ge
 8004aba:	f021 0104 	bicge.w	r1, r1, #4
 8004abe:	6021      	strge	r1, [r4, #0]
 8004ac0:	b90d      	cbnz	r5, 8004ac6 <_printf_i+0x112>
 8004ac2:	2e00      	cmp	r6, #0
 8004ac4:	d04b      	beq.n	8004b5e <_printf_i+0x1aa>
 8004ac6:	4616      	mov	r6, r2
 8004ac8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004acc:	fb03 5711 	mls	r7, r3, r1, r5
 8004ad0:	5dc7      	ldrb	r7, [r0, r7]
 8004ad2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ad6:	462f      	mov	r7, r5
 8004ad8:	42bb      	cmp	r3, r7
 8004ada:	460d      	mov	r5, r1
 8004adc:	d9f4      	bls.n	8004ac8 <_printf_i+0x114>
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d10b      	bne.n	8004afa <_printf_i+0x146>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	07df      	lsls	r7, r3, #31
 8004ae6:	d508      	bpl.n	8004afa <_printf_i+0x146>
 8004ae8:	6923      	ldr	r3, [r4, #16]
 8004aea:	6861      	ldr	r1, [r4, #4]
 8004aec:	4299      	cmp	r1, r3
 8004aee:	bfde      	ittt	le
 8004af0:	2330      	movle	r3, #48	@ 0x30
 8004af2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004af6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004afa:	1b92      	subs	r2, r2, r6
 8004afc:	6122      	str	r2, [r4, #16]
 8004afe:	464b      	mov	r3, r9
 8004b00:	4621      	mov	r1, r4
 8004b02:	4640      	mov	r0, r8
 8004b04:	f8cd a000 	str.w	sl, [sp]
 8004b08:	aa03      	add	r2, sp, #12
 8004b0a:	f7ff fee1 	bl	80048d0 <_printf_common>
 8004b0e:	3001      	adds	r0, #1
 8004b10:	d14a      	bne.n	8004ba8 <_printf_i+0x1f4>
 8004b12:	f04f 30ff 	mov.w	r0, #4294967295
 8004b16:	b004      	add	sp, #16
 8004b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	f043 0320 	orr.w	r3, r3, #32
 8004b22:	6023      	str	r3, [r4, #0]
 8004b24:	2778      	movs	r7, #120	@ 0x78
 8004b26:	4832      	ldr	r0, [pc, #200]	@ (8004bf0 <_printf_i+0x23c>)
 8004b28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	6831      	ldr	r1, [r6, #0]
 8004b30:	061f      	lsls	r7, r3, #24
 8004b32:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b36:	d402      	bmi.n	8004b3e <_printf_i+0x18a>
 8004b38:	065f      	lsls	r7, r3, #25
 8004b3a:	bf48      	it	mi
 8004b3c:	b2ad      	uxthmi	r5, r5
 8004b3e:	6031      	str	r1, [r6, #0]
 8004b40:	07d9      	lsls	r1, r3, #31
 8004b42:	bf44      	itt	mi
 8004b44:	f043 0320 	orrmi.w	r3, r3, #32
 8004b48:	6023      	strmi	r3, [r4, #0]
 8004b4a:	b11d      	cbz	r5, 8004b54 <_printf_i+0x1a0>
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	e7ab      	b.n	8004aa8 <_printf_i+0xf4>
 8004b50:	4826      	ldr	r0, [pc, #152]	@ (8004bec <_printf_i+0x238>)
 8004b52:	e7e9      	b.n	8004b28 <_printf_i+0x174>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	f023 0320 	bic.w	r3, r3, #32
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	e7f6      	b.n	8004b4c <_printf_i+0x198>
 8004b5e:	4616      	mov	r6, r2
 8004b60:	e7bd      	b.n	8004ade <_printf_i+0x12a>
 8004b62:	6833      	ldr	r3, [r6, #0]
 8004b64:	6825      	ldr	r5, [r4, #0]
 8004b66:	1d18      	adds	r0, r3, #4
 8004b68:	6961      	ldr	r1, [r4, #20]
 8004b6a:	6030      	str	r0, [r6, #0]
 8004b6c:	062e      	lsls	r6, r5, #24
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	d501      	bpl.n	8004b76 <_printf_i+0x1c2>
 8004b72:	6019      	str	r1, [r3, #0]
 8004b74:	e002      	b.n	8004b7c <_printf_i+0x1c8>
 8004b76:	0668      	lsls	r0, r5, #25
 8004b78:	d5fb      	bpl.n	8004b72 <_printf_i+0x1be>
 8004b7a:	8019      	strh	r1, [r3, #0]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	4616      	mov	r6, r2
 8004b80:	6123      	str	r3, [r4, #16]
 8004b82:	e7bc      	b.n	8004afe <_printf_i+0x14a>
 8004b84:	6833      	ldr	r3, [r6, #0]
 8004b86:	2100      	movs	r1, #0
 8004b88:	1d1a      	adds	r2, r3, #4
 8004b8a:	6032      	str	r2, [r6, #0]
 8004b8c:	681e      	ldr	r6, [r3, #0]
 8004b8e:	6862      	ldr	r2, [r4, #4]
 8004b90:	4630      	mov	r0, r6
 8004b92:	f000 f9e8 	bl	8004f66 <memchr>
 8004b96:	b108      	cbz	r0, 8004b9c <_printf_i+0x1e8>
 8004b98:	1b80      	subs	r0, r0, r6
 8004b9a:	6060      	str	r0, [r4, #4]
 8004b9c:	6863      	ldr	r3, [r4, #4]
 8004b9e:	6123      	str	r3, [r4, #16]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ba6:	e7aa      	b.n	8004afe <_printf_i+0x14a>
 8004ba8:	4632      	mov	r2, r6
 8004baa:	4649      	mov	r1, r9
 8004bac:	4640      	mov	r0, r8
 8004bae:	6923      	ldr	r3, [r4, #16]
 8004bb0:	47d0      	blx	sl
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d0ad      	beq.n	8004b12 <_printf_i+0x15e>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	079b      	lsls	r3, r3, #30
 8004bba:	d413      	bmi.n	8004be4 <_printf_i+0x230>
 8004bbc:	68e0      	ldr	r0, [r4, #12]
 8004bbe:	9b03      	ldr	r3, [sp, #12]
 8004bc0:	4298      	cmp	r0, r3
 8004bc2:	bfb8      	it	lt
 8004bc4:	4618      	movlt	r0, r3
 8004bc6:	e7a6      	b.n	8004b16 <_printf_i+0x162>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	4632      	mov	r2, r6
 8004bcc:	4649      	mov	r1, r9
 8004bce:	4640      	mov	r0, r8
 8004bd0:	47d0      	blx	sl
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	d09d      	beq.n	8004b12 <_printf_i+0x15e>
 8004bd6:	3501      	adds	r5, #1
 8004bd8:	68e3      	ldr	r3, [r4, #12]
 8004bda:	9903      	ldr	r1, [sp, #12]
 8004bdc:	1a5b      	subs	r3, r3, r1
 8004bde:	42ab      	cmp	r3, r5
 8004be0:	dcf2      	bgt.n	8004bc8 <_printf_i+0x214>
 8004be2:	e7eb      	b.n	8004bbc <_printf_i+0x208>
 8004be4:	2500      	movs	r5, #0
 8004be6:	f104 0619 	add.w	r6, r4, #25
 8004bea:	e7f5      	b.n	8004bd8 <_printf_i+0x224>
 8004bec:	08007128 	.word	0x08007128
 8004bf0:	08007139 	.word	0x08007139

08004bf4 <std>:
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	b510      	push	{r4, lr}
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8004bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c02:	6083      	str	r3, [r0, #8]
 8004c04:	8181      	strh	r1, [r0, #12]
 8004c06:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c08:	81c2      	strh	r2, [r0, #14]
 8004c0a:	6183      	str	r3, [r0, #24]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	2208      	movs	r2, #8
 8004c10:	305c      	adds	r0, #92	@ 0x5c
 8004c12:	f000 f928 	bl	8004e66 <memset>
 8004c16:	4b0d      	ldr	r3, [pc, #52]	@ (8004c4c <std+0x58>)
 8004c18:	6224      	str	r4, [r4, #32]
 8004c1a:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <std+0x5c>)
 8004c1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c20:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <std+0x60>)
 8004c22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c24:	4b0c      	ldr	r3, [pc, #48]	@ (8004c58 <std+0x64>)
 8004c26:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c28:	4b0c      	ldr	r3, [pc, #48]	@ (8004c5c <std+0x68>)
 8004c2a:	429c      	cmp	r4, r3
 8004c2c:	d006      	beq.n	8004c3c <std+0x48>
 8004c2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c32:	4294      	cmp	r4, r2
 8004c34:	d002      	beq.n	8004c3c <std+0x48>
 8004c36:	33d0      	adds	r3, #208	@ 0xd0
 8004c38:	429c      	cmp	r4, r3
 8004c3a:	d105      	bne.n	8004c48 <std+0x54>
 8004c3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c44:	f000 b98c 	b.w	8004f60 <__retarget_lock_init_recursive>
 8004c48:	bd10      	pop	{r4, pc}
 8004c4a:	bf00      	nop
 8004c4c:	08004de1 	.word	0x08004de1
 8004c50:	08004e03 	.word	0x08004e03
 8004c54:	08004e3b 	.word	0x08004e3b
 8004c58:	08004e5f 	.word	0x08004e5f
 8004c5c:	200003d8 	.word	0x200003d8

08004c60 <stdio_exit_handler>:
 8004c60:	4a02      	ldr	r2, [pc, #8]	@ (8004c6c <stdio_exit_handler+0xc>)
 8004c62:	4903      	ldr	r1, [pc, #12]	@ (8004c70 <stdio_exit_handler+0x10>)
 8004c64:	4803      	ldr	r0, [pc, #12]	@ (8004c74 <stdio_exit_handler+0x14>)
 8004c66:	f000 b869 	b.w	8004d3c <_fwalk_sglue>
 8004c6a:	bf00      	nop
 8004c6c:	2000006c 	.word	0x2000006c
 8004c70:	080068d5 	.word	0x080068d5
 8004c74:	2000007c 	.word	0x2000007c

08004c78 <cleanup_stdio>:
 8004c78:	6841      	ldr	r1, [r0, #4]
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004cac <cleanup_stdio+0x34>)
 8004c7c:	b510      	push	{r4, lr}
 8004c7e:	4299      	cmp	r1, r3
 8004c80:	4604      	mov	r4, r0
 8004c82:	d001      	beq.n	8004c88 <cleanup_stdio+0x10>
 8004c84:	f001 fe26 	bl	80068d4 <_fflush_r>
 8004c88:	68a1      	ldr	r1, [r4, #8]
 8004c8a:	4b09      	ldr	r3, [pc, #36]	@ (8004cb0 <cleanup_stdio+0x38>)
 8004c8c:	4299      	cmp	r1, r3
 8004c8e:	d002      	beq.n	8004c96 <cleanup_stdio+0x1e>
 8004c90:	4620      	mov	r0, r4
 8004c92:	f001 fe1f 	bl	80068d4 <_fflush_r>
 8004c96:	68e1      	ldr	r1, [r4, #12]
 8004c98:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <cleanup_stdio+0x3c>)
 8004c9a:	4299      	cmp	r1, r3
 8004c9c:	d004      	beq.n	8004ca8 <cleanup_stdio+0x30>
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ca4:	f001 be16 	b.w	80068d4 <_fflush_r>
 8004ca8:	bd10      	pop	{r4, pc}
 8004caa:	bf00      	nop
 8004cac:	200003d8 	.word	0x200003d8
 8004cb0:	20000440 	.word	0x20000440
 8004cb4:	200004a8 	.word	0x200004a8

08004cb8 <global_stdio_init.part.0>:
 8004cb8:	b510      	push	{r4, lr}
 8004cba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce8 <global_stdio_init.part.0+0x30>)
 8004cbc:	4c0b      	ldr	r4, [pc, #44]	@ (8004cec <global_stdio_init.part.0+0x34>)
 8004cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8004cf0 <global_stdio_init.part.0+0x38>)
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	2104      	movs	r1, #4
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f7ff ff94 	bl	8004bf4 <std>
 8004ccc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	2109      	movs	r1, #9
 8004cd4:	f7ff ff8e 	bl	8004bf4 <std>
 8004cd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004cdc:	2202      	movs	r2, #2
 8004cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ce2:	2112      	movs	r1, #18
 8004ce4:	f7ff bf86 	b.w	8004bf4 <std>
 8004ce8:	20000510 	.word	0x20000510
 8004cec:	200003d8 	.word	0x200003d8
 8004cf0:	08004c61 	.word	0x08004c61

08004cf4 <__sfp_lock_acquire>:
 8004cf4:	4801      	ldr	r0, [pc, #4]	@ (8004cfc <__sfp_lock_acquire+0x8>)
 8004cf6:	f000 b934 	b.w	8004f62 <__retarget_lock_acquire_recursive>
 8004cfa:	bf00      	nop
 8004cfc:	20000519 	.word	0x20000519

08004d00 <__sfp_lock_release>:
 8004d00:	4801      	ldr	r0, [pc, #4]	@ (8004d08 <__sfp_lock_release+0x8>)
 8004d02:	f000 b92f 	b.w	8004f64 <__retarget_lock_release_recursive>
 8004d06:	bf00      	nop
 8004d08:	20000519 	.word	0x20000519

08004d0c <__sinit>:
 8004d0c:	b510      	push	{r4, lr}
 8004d0e:	4604      	mov	r4, r0
 8004d10:	f7ff fff0 	bl	8004cf4 <__sfp_lock_acquire>
 8004d14:	6a23      	ldr	r3, [r4, #32]
 8004d16:	b11b      	cbz	r3, 8004d20 <__sinit+0x14>
 8004d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d1c:	f7ff bff0 	b.w	8004d00 <__sfp_lock_release>
 8004d20:	4b04      	ldr	r3, [pc, #16]	@ (8004d34 <__sinit+0x28>)
 8004d22:	6223      	str	r3, [r4, #32]
 8004d24:	4b04      	ldr	r3, [pc, #16]	@ (8004d38 <__sinit+0x2c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f5      	bne.n	8004d18 <__sinit+0xc>
 8004d2c:	f7ff ffc4 	bl	8004cb8 <global_stdio_init.part.0>
 8004d30:	e7f2      	b.n	8004d18 <__sinit+0xc>
 8004d32:	bf00      	nop
 8004d34:	08004c79 	.word	0x08004c79
 8004d38:	20000510 	.word	0x20000510

08004d3c <_fwalk_sglue>:
 8004d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d40:	4607      	mov	r7, r0
 8004d42:	4688      	mov	r8, r1
 8004d44:	4614      	mov	r4, r2
 8004d46:	2600      	movs	r6, #0
 8004d48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d4c:	f1b9 0901 	subs.w	r9, r9, #1
 8004d50:	d505      	bpl.n	8004d5e <_fwalk_sglue+0x22>
 8004d52:	6824      	ldr	r4, [r4, #0]
 8004d54:	2c00      	cmp	r4, #0
 8004d56:	d1f7      	bne.n	8004d48 <_fwalk_sglue+0xc>
 8004d58:	4630      	mov	r0, r6
 8004d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d5e:	89ab      	ldrh	r3, [r5, #12]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d907      	bls.n	8004d74 <_fwalk_sglue+0x38>
 8004d64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	d003      	beq.n	8004d74 <_fwalk_sglue+0x38>
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	4638      	mov	r0, r7
 8004d70:	47c0      	blx	r8
 8004d72:	4306      	orrs	r6, r0
 8004d74:	3568      	adds	r5, #104	@ 0x68
 8004d76:	e7e9      	b.n	8004d4c <_fwalk_sglue+0x10>

08004d78 <sniprintf>:
 8004d78:	b40c      	push	{r2, r3}
 8004d7a:	b530      	push	{r4, r5, lr}
 8004d7c:	4b17      	ldr	r3, [pc, #92]	@ (8004ddc <sniprintf+0x64>)
 8004d7e:	1e0c      	subs	r4, r1, #0
 8004d80:	681d      	ldr	r5, [r3, #0]
 8004d82:	b09d      	sub	sp, #116	@ 0x74
 8004d84:	da08      	bge.n	8004d98 <sniprintf+0x20>
 8004d86:	238b      	movs	r3, #139	@ 0x8b
 8004d88:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8c:	602b      	str	r3, [r5, #0]
 8004d8e:	b01d      	add	sp, #116	@ 0x74
 8004d90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d94:	b002      	add	sp, #8
 8004d96:	4770      	bx	lr
 8004d98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004d9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004da0:	bf0c      	ite	eq
 8004da2:	4623      	moveq	r3, r4
 8004da4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004da8:	9304      	str	r3, [sp, #16]
 8004daa:	9307      	str	r3, [sp, #28]
 8004dac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004db0:	9002      	str	r0, [sp, #8]
 8004db2:	9006      	str	r0, [sp, #24]
 8004db4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004db8:	4628      	mov	r0, r5
 8004dba:	ab21      	add	r3, sp, #132	@ 0x84
 8004dbc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004dbe:	a902      	add	r1, sp, #8
 8004dc0:	9301      	str	r3, [sp, #4]
 8004dc2:	f001 fc0b 	bl	80065dc <_svfiprintf_r>
 8004dc6:	1c43      	adds	r3, r0, #1
 8004dc8:	bfbc      	itt	lt
 8004dca:	238b      	movlt	r3, #139	@ 0x8b
 8004dcc:	602b      	strlt	r3, [r5, #0]
 8004dce:	2c00      	cmp	r4, #0
 8004dd0:	d0dd      	beq.n	8004d8e <sniprintf+0x16>
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	9b02      	ldr	r3, [sp, #8]
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	e7d9      	b.n	8004d8e <sniprintf+0x16>
 8004dda:	bf00      	nop
 8004ddc:	20000078 	.word	0x20000078

08004de0 <__sread>:
 8004de0:	b510      	push	{r4, lr}
 8004de2:	460c      	mov	r4, r1
 8004de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de8:	f000 f86c 	bl	8004ec4 <_read_r>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	bfab      	itete	ge
 8004df0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004df2:	89a3      	ldrhlt	r3, [r4, #12]
 8004df4:	181b      	addge	r3, r3, r0
 8004df6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004dfa:	bfac      	ite	ge
 8004dfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004dfe:	81a3      	strhlt	r3, [r4, #12]
 8004e00:	bd10      	pop	{r4, pc}

08004e02 <__swrite>:
 8004e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e06:	461f      	mov	r7, r3
 8004e08:	898b      	ldrh	r3, [r1, #12]
 8004e0a:	4605      	mov	r5, r0
 8004e0c:	05db      	lsls	r3, r3, #23
 8004e0e:	460c      	mov	r4, r1
 8004e10:	4616      	mov	r6, r2
 8004e12:	d505      	bpl.n	8004e20 <__swrite+0x1e>
 8004e14:	2302      	movs	r3, #2
 8004e16:	2200      	movs	r2, #0
 8004e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e1c:	f000 f840 	bl	8004ea0 <_lseek_r>
 8004e20:	89a3      	ldrh	r3, [r4, #12]
 8004e22:	4632      	mov	r2, r6
 8004e24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	463b      	mov	r3, r7
 8004e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e36:	f000 b857 	b.w	8004ee8 <_write_r>

08004e3a <__sseek>:
 8004e3a:	b510      	push	{r4, lr}
 8004e3c:	460c      	mov	r4, r1
 8004e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e42:	f000 f82d 	bl	8004ea0 <_lseek_r>
 8004e46:	1c43      	adds	r3, r0, #1
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	bf15      	itete	ne
 8004e4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e56:	81a3      	strheq	r3, [r4, #12]
 8004e58:	bf18      	it	ne
 8004e5a:	81a3      	strhne	r3, [r4, #12]
 8004e5c:	bd10      	pop	{r4, pc}

08004e5e <__sclose>:
 8004e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e62:	f000 b80d 	b.w	8004e80 <_close_r>

08004e66 <memset>:
 8004e66:	4603      	mov	r3, r0
 8004e68:	4402      	add	r2, r0
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d100      	bne.n	8004e70 <memset+0xa>
 8004e6e:	4770      	bx	lr
 8004e70:	f803 1b01 	strb.w	r1, [r3], #1
 8004e74:	e7f9      	b.n	8004e6a <memset+0x4>
	...

08004e78 <_localeconv_r>:
 8004e78:	4800      	ldr	r0, [pc, #0]	@ (8004e7c <_localeconv_r+0x4>)
 8004e7a:	4770      	bx	lr
 8004e7c:	200001b8 	.word	0x200001b8

08004e80 <_close_r>:
 8004e80:	b538      	push	{r3, r4, r5, lr}
 8004e82:	2300      	movs	r3, #0
 8004e84:	4d05      	ldr	r5, [pc, #20]	@ (8004e9c <_close_r+0x1c>)
 8004e86:	4604      	mov	r4, r0
 8004e88:	4608      	mov	r0, r1
 8004e8a:	602b      	str	r3, [r5, #0]
 8004e8c:	f7fd fc0d 	bl	80026aa <_close>
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	d102      	bne.n	8004e9a <_close_r+0x1a>
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	b103      	cbz	r3, 8004e9a <_close_r+0x1a>
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	bd38      	pop	{r3, r4, r5, pc}
 8004e9c:	20000514 	.word	0x20000514

08004ea0 <_lseek_r>:
 8004ea0:	b538      	push	{r3, r4, r5, lr}
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	4608      	mov	r0, r1
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	4d05      	ldr	r5, [pc, #20]	@ (8004ec0 <_lseek_r+0x20>)
 8004eac:	602a      	str	r2, [r5, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f7fd fc1f 	bl	80026f2 <_lseek>
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	d102      	bne.n	8004ebe <_lseek_r+0x1e>
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	b103      	cbz	r3, 8004ebe <_lseek_r+0x1e>
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	20000514 	.word	0x20000514

08004ec4 <_read_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	4608      	mov	r0, r1
 8004eca:	4611      	mov	r1, r2
 8004ecc:	2200      	movs	r2, #0
 8004ece:	4d05      	ldr	r5, [pc, #20]	@ (8004ee4 <_read_r+0x20>)
 8004ed0:	602a      	str	r2, [r5, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f7fd fbb0 	bl	8002638 <_read>
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	d102      	bne.n	8004ee2 <_read_r+0x1e>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	b103      	cbz	r3, 8004ee2 <_read_r+0x1e>
 8004ee0:	6023      	str	r3, [r4, #0]
 8004ee2:	bd38      	pop	{r3, r4, r5, pc}
 8004ee4:	20000514 	.word	0x20000514

08004ee8 <_write_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	4604      	mov	r4, r0
 8004eec:	4608      	mov	r0, r1
 8004eee:	4611      	mov	r1, r2
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	4d05      	ldr	r5, [pc, #20]	@ (8004f08 <_write_r+0x20>)
 8004ef4:	602a      	str	r2, [r5, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f7fd fbbb 	bl	8002672 <_write>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d102      	bne.n	8004f06 <_write_r+0x1e>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	b103      	cbz	r3, 8004f06 <_write_r+0x1e>
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	20000514 	.word	0x20000514

08004f0c <__errno>:
 8004f0c:	4b01      	ldr	r3, [pc, #4]	@ (8004f14 <__errno+0x8>)
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20000078 	.word	0x20000078

08004f18 <__libc_init_array>:
 8004f18:	b570      	push	{r4, r5, r6, lr}
 8004f1a:	2600      	movs	r6, #0
 8004f1c:	4d0c      	ldr	r5, [pc, #48]	@ (8004f50 <__libc_init_array+0x38>)
 8004f1e:	4c0d      	ldr	r4, [pc, #52]	@ (8004f54 <__libc_init_array+0x3c>)
 8004f20:	1b64      	subs	r4, r4, r5
 8004f22:	10a4      	asrs	r4, r4, #2
 8004f24:	42a6      	cmp	r6, r4
 8004f26:	d109      	bne.n	8004f3c <__libc_init_array+0x24>
 8004f28:	f002 f870 	bl	800700c <_init>
 8004f2c:	2600      	movs	r6, #0
 8004f2e:	4d0a      	ldr	r5, [pc, #40]	@ (8004f58 <__libc_init_array+0x40>)
 8004f30:	4c0a      	ldr	r4, [pc, #40]	@ (8004f5c <__libc_init_array+0x44>)
 8004f32:	1b64      	subs	r4, r4, r5
 8004f34:	10a4      	asrs	r4, r4, #2
 8004f36:	42a6      	cmp	r6, r4
 8004f38:	d105      	bne.n	8004f46 <__libc_init_array+0x2e>
 8004f3a:	bd70      	pop	{r4, r5, r6, pc}
 8004f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f40:	4798      	blx	r3
 8004f42:	3601      	adds	r6, #1
 8004f44:	e7ee      	b.n	8004f24 <__libc_init_array+0xc>
 8004f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f4a:	4798      	blx	r3
 8004f4c:	3601      	adds	r6, #1
 8004f4e:	e7f2      	b.n	8004f36 <__libc_init_array+0x1e>
 8004f50:	08007490 	.word	0x08007490
 8004f54:	08007490 	.word	0x08007490
 8004f58:	08007490 	.word	0x08007490
 8004f5c:	08007494 	.word	0x08007494

08004f60 <__retarget_lock_init_recursive>:
 8004f60:	4770      	bx	lr

08004f62 <__retarget_lock_acquire_recursive>:
 8004f62:	4770      	bx	lr

08004f64 <__retarget_lock_release_recursive>:
 8004f64:	4770      	bx	lr

08004f66 <memchr>:
 8004f66:	4603      	mov	r3, r0
 8004f68:	b510      	push	{r4, lr}
 8004f6a:	b2c9      	uxtb	r1, r1
 8004f6c:	4402      	add	r2, r0
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	4618      	mov	r0, r3
 8004f72:	d101      	bne.n	8004f78 <memchr+0x12>
 8004f74:	2000      	movs	r0, #0
 8004f76:	e003      	b.n	8004f80 <memchr+0x1a>
 8004f78:	7804      	ldrb	r4, [r0, #0]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	428c      	cmp	r4, r1
 8004f7e:	d1f6      	bne.n	8004f6e <memchr+0x8>
 8004f80:	bd10      	pop	{r4, pc}

08004f82 <quorem>:
 8004f82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f86:	6903      	ldr	r3, [r0, #16]
 8004f88:	690c      	ldr	r4, [r1, #16]
 8004f8a:	4607      	mov	r7, r0
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	db7e      	blt.n	800508e <quorem+0x10c>
 8004f90:	3c01      	subs	r4, #1
 8004f92:	00a3      	lsls	r3, r4, #2
 8004f94:	f100 0514 	add.w	r5, r0, #20
 8004f98:	f101 0814 	add.w	r8, r1, #20
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004fa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fac:	3301      	adds	r3, #1
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8004fb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004fb8:	d32e      	bcc.n	8005018 <quorem+0x96>
 8004fba:	f04f 0a00 	mov.w	sl, #0
 8004fbe:	46c4      	mov	ip, r8
 8004fc0:	46ae      	mov	lr, r5
 8004fc2:	46d3      	mov	fp, sl
 8004fc4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004fc8:	b298      	uxth	r0, r3
 8004fca:	fb06 a000 	mla	r0, r6, r0, sl
 8004fce:	0c1b      	lsrs	r3, r3, #16
 8004fd0:	0c02      	lsrs	r2, r0, #16
 8004fd2:	fb06 2303 	mla	r3, r6, r3, r2
 8004fd6:	f8de 2000 	ldr.w	r2, [lr]
 8004fda:	b280      	uxth	r0, r0
 8004fdc:	b292      	uxth	r2, r2
 8004fde:	1a12      	subs	r2, r2, r0
 8004fe0:	445a      	add	r2, fp
 8004fe2:	f8de 0000 	ldr.w	r0, [lr]
 8004fe6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004ff0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004ff4:	b292      	uxth	r2, r2
 8004ff6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004ffa:	45e1      	cmp	r9, ip
 8004ffc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005000:	f84e 2b04 	str.w	r2, [lr], #4
 8005004:	d2de      	bcs.n	8004fc4 <quorem+0x42>
 8005006:	9b00      	ldr	r3, [sp, #0]
 8005008:	58eb      	ldr	r3, [r5, r3]
 800500a:	b92b      	cbnz	r3, 8005018 <quorem+0x96>
 800500c:	9b01      	ldr	r3, [sp, #4]
 800500e:	3b04      	subs	r3, #4
 8005010:	429d      	cmp	r5, r3
 8005012:	461a      	mov	r2, r3
 8005014:	d32f      	bcc.n	8005076 <quorem+0xf4>
 8005016:	613c      	str	r4, [r7, #16]
 8005018:	4638      	mov	r0, r7
 800501a:	f001 f97b 	bl	8006314 <__mcmp>
 800501e:	2800      	cmp	r0, #0
 8005020:	db25      	blt.n	800506e <quorem+0xec>
 8005022:	4629      	mov	r1, r5
 8005024:	2000      	movs	r0, #0
 8005026:	f858 2b04 	ldr.w	r2, [r8], #4
 800502a:	f8d1 c000 	ldr.w	ip, [r1]
 800502e:	fa1f fe82 	uxth.w	lr, r2
 8005032:	fa1f f38c 	uxth.w	r3, ip
 8005036:	eba3 030e 	sub.w	r3, r3, lr
 800503a:	4403      	add	r3, r0
 800503c:	0c12      	lsrs	r2, r2, #16
 800503e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005042:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005046:	b29b      	uxth	r3, r3
 8005048:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800504c:	45c1      	cmp	r9, r8
 800504e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005052:	f841 3b04 	str.w	r3, [r1], #4
 8005056:	d2e6      	bcs.n	8005026 <quorem+0xa4>
 8005058:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800505c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005060:	b922      	cbnz	r2, 800506c <quorem+0xea>
 8005062:	3b04      	subs	r3, #4
 8005064:	429d      	cmp	r5, r3
 8005066:	461a      	mov	r2, r3
 8005068:	d30b      	bcc.n	8005082 <quorem+0x100>
 800506a:	613c      	str	r4, [r7, #16]
 800506c:	3601      	adds	r6, #1
 800506e:	4630      	mov	r0, r6
 8005070:	b003      	add	sp, #12
 8005072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	3b04      	subs	r3, #4
 800507a:	2a00      	cmp	r2, #0
 800507c:	d1cb      	bne.n	8005016 <quorem+0x94>
 800507e:	3c01      	subs	r4, #1
 8005080:	e7c6      	b.n	8005010 <quorem+0x8e>
 8005082:	6812      	ldr	r2, [r2, #0]
 8005084:	3b04      	subs	r3, #4
 8005086:	2a00      	cmp	r2, #0
 8005088:	d1ef      	bne.n	800506a <quorem+0xe8>
 800508a:	3c01      	subs	r4, #1
 800508c:	e7ea      	b.n	8005064 <quorem+0xe2>
 800508e:	2000      	movs	r0, #0
 8005090:	e7ee      	b.n	8005070 <quorem+0xee>
 8005092:	0000      	movs	r0, r0
 8005094:	0000      	movs	r0, r0
	...

08005098 <_dtoa_r>:
 8005098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509c:	4614      	mov	r4, r2
 800509e:	461d      	mov	r5, r3
 80050a0:	69c7      	ldr	r7, [r0, #28]
 80050a2:	b097      	sub	sp, #92	@ 0x5c
 80050a4:	4683      	mov	fp, r0
 80050a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80050aa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80050ac:	b97f      	cbnz	r7, 80050ce <_dtoa_r+0x36>
 80050ae:	2010      	movs	r0, #16
 80050b0:	f000 fe02 	bl	8005cb8 <malloc>
 80050b4:	4602      	mov	r2, r0
 80050b6:	f8cb 001c 	str.w	r0, [fp, #28]
 80050ba:	b920      	cbnz	r0, 80050c6 <_dtoa_r+0x2e>
 80050bc:	21ef      	movs	r1, #239	@ 0xef
 80050be:	4ba8      	ldr	r3, [pc, #672]	@ (8005360 <_dtoa_r+0x2c8>)
 80050c0:	48a8      	ldr	r0, [pc, #672]	@ (8005364 <_dtoa_r+0x2cc>)
 80050c2:	f001 fc67 	bl	8006994 <__assert_func>
 80050c6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80050ca:	6007      	str	r7, [r0, #0]
 80050cc:	60c7      	str	r7, [r0, #12]
 80050ce:	f8db 301c 	ldr.w	r3, [fp, #28]
 80050d2:	6819      	ldr	r1, [r3, #0]
 80050d4:	b159      	cbz	r1, 80050ee <_dtoa_r+0x56>
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	2301      	movs	r3, #1
 80050da:	4093      	lsls	r3, r2
 80050dc:	604a      	str	r2, [r1, #4]
 80050de:	608b      	str	r3, [r1, #8]
 80050e0:	4658      	mov	r0, fp
 80050e2:	f000 fedf 	bl	8005ea4 <_Bfree>
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	1e2b      	subs	r3, r5, #0
 80050f0:	bfaf      	iteee	ge
 80050f2:	2300      	movge	r3, #0
 80050f4:	2201      	movlt	r2, #1
 80050f6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80050fa:	9303      	strlt	r3, [sp, #12]
 80050fc:	bfa8      	it	ge
 80050fe:	6033      	strge	r3, [r6, #0]
 8005100:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005104:	4b98      	ldr	r3, [pc, #608]	@ (8005368 <_dtoa_r+0x2d0>)
 8005106:	bfb8      	it	lt
 8005108:	6032      	strlt	r2, [r6, #0]
 800510a:	ea33 0308 	bics.w	r3, r3, r8
 800510e:	d112      	bne.n	8005136 <_dtoa_r+0x9e>
 8005110:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005114:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800511c:	4323      	orrs	r3, r4
 800511e:	f000 8550 	beq.w	8005bc2 <_dtoa_r+0xb2a>
 8005122:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005124:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800536c <_dtoa_r+0x2d4>
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 8552 	beq.w	8005bd2 <_dtoa_r+0xb3a>
 800512e:	f10a 0303 	add.w	r3, sl, #3
 8005132:	f000 bd4c 	b.w	8005bce <_dtoa_r+0xb36>
 8005136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800513a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800513e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005142:	2200      	movs	r2, #0
 8005144:	2300      	movs	r3, #0
 8005146:	f7fb fc2f 	bl	80009a8 <__aeabi_dcmpeq>
 800514a:	4607      	mov	r7, r0
 800514c:	b158      	cbz	r0, 8005166 <_dtoa_r+0xce>
 800514e:	2301      	movs	r3, #1
 8005150:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005156:	b113      	cbz	r3, 800515e <_dtoa_r+0xc6>
 8005158:	4b85      	ldr	r3, [pc, #532]	@ (8005370 <_dtoa_r+0x2d8>)
 800515a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005374 <_dtoa_r+0x2dc>
 8005162:	f000 bd36 	b.w	8005bd2 <_dtoa_r+0xb3a>
 8005166:	ab14      	add	r3, sp, #80	@ 0x50
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	ab15      	add	r3, sp, #84	@ 0x54
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	4658      	mov	r0, fp
 8005170:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005174:	f001 f97e 	bl	8006474 <__d2b>
 8005178:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800517c:	4681      	mov	r9, r0
 800517e:	2e00      	cmp	r6, #0
 8005180:	d077      	beq.n	8005272 <_dtoa_r+0x1da>
 8005182:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005188:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800518c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005190:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005194:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005198:	9712      	str	r7, [sp, #72]	@ 0x48
 800519a:	4619      	mov	r1, r3
 800519c:	2200      	movs	r2, #0
 800519e:	4b76      	ldr	r3, [pc, #472]	@ (8005378 <_dtoa_r+0x2e0>)
 80051a0:	f7fa ffe2 	bl	8000168 <__aeabi_dsub>
 80051a4:	a368      	add	r3, pc, #416	@ (adr r3, 8005348 <_dtoa_r+0x2b0>)
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	f7fb f995 	bl	80004d8 <__aeabi_dmul>
 80051ae:	a368      	add	r3, pc, #416	@ (adr r3, 8005350 <_dtoa_r+0x2b8>)
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	f7fa ffda 	bl	800016c <__adddf3>
 80051b8:	4604      	mov	r4, r0
 80051ba:	4630      	mov	r0, r6
 80051bc:	460d      	mov	r5, r1
 80051be:	f7fb f921 	bl	8000404 <__aeabi_i2d>
 80051c2:	a365      	add	r3, pc, #404	@ (adr r3, 8005358 <_dtoa_r+0x2c0>)
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f7fb f986 	bl	80004d8 <__aeabi_dmul>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4620      	mov	r0, r4
 80051d2:	4629      	mov	r1, r5
 80051d4:	f7fa ffca 	bl	800016c <__adddf3>
 80051d8:	4604      	mov	r4, r0
 80051da:	460d      	mov	r5, r1
 80051dc:	f7fb fc2c 	bl	8000a38 <__aeabi_d2iz>
 80051e0:	2200      	movs	r2, #0
 80051e2:	4607      	mov	r7, r0
 80051e4:	2300      	movs	r3, #0
 80051e6:	4620      	mov	r0, r4
 80051e8:	4629      	mov	r1, r5
 80051ea:	f7fb fbe7 	bl	80009bc <__aeabi_dcmplt>
 80051ee:	b140      	cbz	r0, 8005202 <_dtoa_r+0x16a>
 80051f0:	4638      	mov	r0, r7
 80051f2:	f7fb f907 	bl	8000404 <__aeabi_i2d>
 80051f6:	4622      	mov	r2, r4
 80051f8:	462b      	mov	r3, r5
 80051fa:	f7fb fbd5 	bl	80009a8 <__aeabi_dcmpeq>
 80051fe:	b900      	cbnz	r0, 8005202 <_dtoa_r+0x16a>
 8005200:	3f01      	subs	r7, #1
 8005202:	2f16      	cmp	r7, #22
 8005204:	d853      	bhi.n	80052ae <_dtoa_r+0x216>
 8005206:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800520a:	4b5c      	ldr	r3, [pc, #368]	@ (800537c <_dtoa_r+0x2e4>)
 800520c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f7fb fbd2 	bl	80009bc <__aeabi_dcmplt>
 8005218:	2800      	cmp	r0, #0
 800521a:	d04a      	beq.n	80052b2 <_dtoa_r+0x21a>
 800521c:	2300      	movs	r3, #0
 800521e:	3f01      	subs	r7, #1
 8005220:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005222:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005224:	1b9b      	subs	r3, r3, r6
 8005226:	1e5a      	subs	r2, r3, #1
 8005228:	bf46      	itte	mi
 800522a:	f1c3 0801 	rsbmi	r8, r3, #1
 800522e:	2300      	movmi	r3, #0
 8005230:	f04f 0800 	movpl.w	r8, #0
 8005234:	9209      	str	r2, [sp, #36]	@ 0x24
 8005236:	bf48      	it	mi
 8005238:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800523a:	2f00      	cmp	r7, #0
 800523c:	db3b      	blt.n	80052b6 <_dtoa_r+0x21e>
 800523e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005240:	970e      	str	r7, [sp, #56]	@ 0x38
 8005242:	443b      	add	r3, r7
 8005244:	9309      	str	r3, [sp, #36]	@ 0x24
 8005246:	2300      	movs	r3, #0
 8005248:	930a      	str	r3, [sp, #40]	@ 0x28
 800524a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800524c:	2b09      	cmp	r3, #9
 800524e:	d866      	bhi.n	800531e <_dtoa_r+0x286>
 8005250:	2b05      	cmp	r3, #5
 8005252:	bfc4      	itt	gt
 8005254:	3b04      	subgt	r3, #4
 8005256:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005258:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800525a:	bfc8      	it	gt
 800525c:	2400      	movgt	r4, #0
 800525e:	f1a3 0302 	sub.w	r3, r3, #2
 8005262:	bfd8      	it	le
 8005264:	2401      	movle	r4, #1
 8005266:	2b03      	cmp	r3, #3
 8005268:	d864      	bhi.n	8005334 <_dtoa_r+0x29c>
 800526a:	e8df f003 	tbb	[pc, r3]
 800526e:	382b      	.short	0x382b
 8005270:	5636      	.short	0x5636
 8005272:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005276:	441e      	add	r6, r3
 8005278:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800527c:	2b20      	cmp	r3, #32
 800527e:	bfc1      	itttt	gt
 8005280:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005284:	fa08 f803 	lslgt.w	r8, r8, r3
 8005288:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800528c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005290:	bfd6      	itet	le
 8005292:	f1c3 0320 	rsble	r3, r3, #32
 8005296:	ea48 0003 	orrgt.w	r0, r8, r3
 800529a:	fa04 f003 	lslle.w	r0, r4, r3
 800529e:	f7fb f8a1 	bl	80003e4 <__aeabi_ui2d>
 80052a2:	2201      	movs	r2, #1
 80052a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80052a8:	3e01      	subs	r6, #1
 80052aa:	9212      	str	r2, [sp, #72]	@ 0x48
 80052ac:	e775      	b.n	800519a <_dtoa_r+0x102>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e7b6      	b.n	8005220 <_dtoa_r+0x188>
 80052b2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80052b4:	e7b5      	b.n	8005222 <_dtoa_r+0x18a>
 80052b6:	427b      	negs	r3, r7
 80052b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80052ba:	2300      	movs	r3, #0
 80052bc:	eba8 0807 	sub.w	r8, r8, r7
 80052c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80052c2:	e7c2      	b.n	800524a <_dtoa_r+0x1b2>
 80052c4:	2300      	movs	r3, #0
 80052c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	dc35      	bgt.n	800533a <_dtoa_r+0x2a2>
 80052ce:	2301      	movs	r3, #1
 80052d0:	461a      	mov	r2, r3
 80052d2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80052d6:	9221      	str	r2, [sp, #132]	@ 0x84
 80052d8:	e00b      	b.n	80052f2 <_dtoa_r+0x25a>
 80052da:	2301      	movs	r3, #1
 80052dc:	e7f3      	b.n	80052c6 <_dtoa_r+0x22e>
 80052de:	2300      	movs	r3, #0
 80052e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80052e4:	18fb      	adds	r3, r7, r3
 80052e6:	9308      	str	r3, [sp, #32]
 80052e8:	3301      	adds	r3, #1
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	9307      	str	r3, [sp, #28]
 80052ee:	bfb8      	it	lt
 80052f0:	2301      	movlt	r3, #1
 80052f2:	2100      	movs	r1, #0
 80052f4:	2204      	movs	r2, #4
 80052f6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80052fa:	f102 0514 	add.w	r5, r2, #20
 80052fe:	429d      	cmp	r5, r3
 8005300:	d91f      	bls.n	8005342 <_dtoa_r+0x2aa>
 8005302:	6041      	str	r1, [r0, #4]
 8005304:	4658      	mov	r0, fp
 8005306:	f000 fd8d 	bl	8005e24 <_Balloc>
 800530a:	4682      	mov	sl, r0
 800530c:	2800      	cmp	r0, #0
 800530e:	d139      	bne.n	8005384 <_dtoa_r+0x2ec>
 8005310:	4602      	mov	r2, r0
 8005312:	f240 11af 	movw	r1, #431	@ 0x1af
 8005316:	4b1a      	ldr	r3, [pc, #104]	@ (8005380 <_dtoa_r+0x2e8>)
 8005318:	e6d2      	b.n	80050c0 <_dtoa_r+0x28>
 800531a:	2301      	movs	r3, #1
 800531c:	e7e0      	b.n	80052e0 <_dtoa_r+0x248>
 800531e:	2401      	movs	r4, #1
 8005320:	2300      	movs	r3, #0
 8005322:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005324:	9320      	str	r3, [sp, #128]	@ 0x80
 8005326:	f04f 33ff 	mov.w	r3, #4294967295
 800532a:	2200      	movs	r2, #0
 800532c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005330:	2312      	movs	r3, #18
 8005332:	e7d0      	b.n	80052d6 <_dtoa_r+0x23e>
 8005334:	2301      	movs	r3, #1
 8005336:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005338:	e7f5      	b.n	8005326 <_dtoa_r+0x28e>
 800533a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800533c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005340:	e7d7      	b.n	80052f2 <_dtoa_r+0x25a>
 8005342:	3101      	adds	r1, #1
 8005344:	0052      	lsls	r2, r2, #1
 8005346:	e7d8      	b.n	80052fa <_dtoa_r+0x262>
 8005348:	636f4361 	.word	0x636f4361
 800534c:	3fd287a7 	.word	0x3fd287a7
 8005350:	8b60c8b3 	.word	0x8b60c8b3
 8005354:	3fc68a28 	.word	0x3fc68a28
 8005358:	509f79fb 	.word	0x509f79fb
 800535c:	3fd34413 	.word	0x3fd34413
 8005360:	08007157 	.word	0x08007157
 8005364:	0800716e 	.word	0x0800716e
 8005368:	7ff00000 	.word	0x7ff00000
 800536c:	08007153 	.word	0x08007153
 8005370:	08007127 	.word	0x08007127
 8005374:	08007126 	.word	0x08007126
 8005378:	3ff80000 	.word	0x3ff80000
 800537c:	08007268 	.word	0x08007268
 8005380:	080071c6 	.word	0x080071c6
 8005384:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005388:	6018      	str	r0, [r3, #0]
 800538a:	9b07      	ldr	r3, [sp, #28]
 800538c:	2b0e      	cmp	r3, #14
 800538e:	f200 80a4 	bhi.w	80054da <_dtoa_r+0x442>
 8005392:	2c00      	cmp	r4, #0
 8005394:	f000 80a1 	beq.w	80054da <_dtoa_r+0x442>
 8005398:	2f00      	cmp	r7, #0
 800539a:	dd33      	ble.n	8005404 <_dtoa_r+0x36c>
 800539c:	4b86      	ldr	r3, [pc, #536]	@ (80055b8 <_dtoa_r+0x520>)
 800539e:	f007 020f 	and.w	r2, r7, #15
 80053a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053a6:	05f8      	lsls	r0, r7, #23
 80053a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80053ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80053b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80053b4:	d516      	bpl.n	80053e4 <_dtoa_r+0x34c>
 80053b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80053ba:	4b80      	ldr	r3, [pc, #512]	@ (80055bc <_dtoa_r+0x524>)
 80053bc:	2603      	movs	r6, #3
 80053be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80053c2:	f7fb f9b3 	bl	800072c <__aeabi_ddiv>
 80053c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053ca:	f004 040f 	and.w	r4, r4, #15
 80053ce:	4d7b      	ldr	r5, [pc, #492]	@ (80055bc <_dtoa_r+0x524>)
 80053d0:	b954      	cbnz	r4, 80053e8 <_dtoa_r+0x350>
 80053d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053da:	f7fb f9a7 	bl	800072c <__aeabi_ddiv>
 80053de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053e2:	e028      	b.n	8005436 <_dtoa_r+0x39e>
 80053e4:	2602      	movs	r6, #2
 80053e6:	e7f2      	b.n	80053ce <_dtoa_r+0x336>
 80053e8:	07e1      	lsls	r1, r4, #31
 80053ea:	d508      	bpl.n	80053fe <_dtoa_r+0x366>
 80053ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80053f4:	f7fb f870 	bl	80004d8 <__aeabi_dmul>
 80053f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053fc:	3601      	adds	r6, #1
 80053fe:	1064      	asrs	r4, r4, #1
 8005400:	3508      	adds	r5, #8
 8005402:	e7e5      	b.n	80053d0 <_dtoa_r+0x338>
 8005404:	f000 80d2 	beq.w	80055ac <_dtoa_r+0x514>
 8005408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800540c:	427c      	negs	r4, r7
 800540e:	4b6a      	ldr	r3, [pc, #424]	@ (80055b8 <_dtoa_r+0x520>)
 8005410:	f004 020f 	and.w	r2, r4, #15
 8005414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	f7fb f85c 	bl	80004d8 <__aeabi_dmul>
 8005420:	2602      	movs	r6, #2
 8005422:	2300      	movs	r3, #0
 8005424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005428:	4d64      	ldr	r5, [pc, #400]	@ (80055bc <_dtoa_r+0x524>)
 800542a:	1124      	asrs	r4, r4, #4
 800542c:	2c00      	cmp	r4, #0
 800542e:	f040 80b2 	bne.w	8005596 <_dtoa_r+0x4fe>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1d3      	bne.n	80053de <_dtoa_r+0x346>
 8005436:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800543a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 80b7 	beq.w	80055b0 <_dtoa_r+0x518>
 8005442:	2200      	movs	r2, #0
 8005444:	4620      	mov	r0, r4
 8005446:	4629      	mov	r1, r5
 8005448:	4b5d      	ldr	r3, [pc, #372]	@ (80055c0 <_dtoa_r+0x528>)
 800544a:	f7fb fab7 	bl	80009bc <__aeabi_dcmplt>
 800544e:	2800      	cmp	r0, #0
 8005450:	f000 80ae 	beq.w	80055b0 <_dtoa_r+0x518>
 8005454:	9b07      	ldr	r3, [sp, #28]
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 80aa 	beq.w	80055b0 <_dtoa_r+0x518>
 800545c:	9b08      	ldr	r3, [sp, #32]
 800545e:	2b00      	cmp	r3, #0
 8005460:	dd37      	ble.n	80054d2 <_dtoa_r+0x43a>
 8005462:	1e7b      	subs	r3, r7, #1
 8005464:	4620      	mov	r0, r4
 8005466:	9304      	str	r3, [sp, #16]
 8005468:	2200      	movs	r2, #0
 800546a:	4629      	mov	r1, r5
 800546c:	4b55      	ldr	r3, [pc, #340]	@ (80055c4 <_dtoa_r+0x52c>)
 800546e:	f7fb f833 	bl	80004d8 <__aeabi_dmul>
 8005472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005476:	9c08      	ldr	r4, [sp, #32]
 8005478:	3601      	adds	r6, #1
 800547a:	4630      	mov	r0, r6
 800547c:	f7fa ffc2 	bl	8000404 <__aeabi_i2d>
 8005480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005484:	f7fb f828 	bl	80004d8 <__aeabi_dmul>
 8005488:	2200      	movs	r2, #0
 800548a:	4b4f      	ldr	r3, [pc, #316]	@ (80055c8 <_dtoa_r+0x530>)
 800548c:	f7fa fe6e 	bl	800016c <__adddf3>
 8005490:	4605      	mov	r5, r0
 8005492:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005496:	2c00      	cmp	r4, #0
 8005498:	f040 809a 	bne.w	80055d0 <_dtoa_r+0x538>
 800549c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054a0:	2200      	movs	r2, #0
 80054a2:	4b4a      	ldr	r3, [pc, #296]	@ (80055cc <_dtoa_r+0x534>)
 80054a4:	f7fa fe60 	bl	8000168 <__aeabi_dsub>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80054b0:	462a      	mov	r2, r5
 80054b2:	4633      	mov	r3, r6
 80054b4:	f7fb faa0 	bl	80009f8 <__aeabi_dcmpgt>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	f040 828e 	bne.w	80059da <_dtoa_r+0x942>
 80054be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054c2:	462a      	mov	r2, r5
 80054c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80054c8:	f7fb fa78 	bl	80009bc <__aeabi_dcmplt>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	f040 8127 	bne.w	8005720 <_dtoa_r+0x688>
 80054d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80054d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80054da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f2c0 8163 	blt.w	80057a8 <_dtoa_r+0x710>
 80054e2:	2f0e      	cmp	r7, #14
 80054e4:	f300 8160 	bgt.w	80057a8 <_dtoa_r+0x710>
 80054e8:	4b33      	ldr	r3, [pc, #204]	@ (80055b8 <_dtoa_r+0x520>)
 80054ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80054ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80054f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	da03      	bge.n	8005504 <_dtoa_r+0x46c>
 80054fc:	9b07      	ldr	r3, [sp, #28]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f340 8100 	ble.w	8005704 <_dtoa_r+0x66c>
 8005504:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005508:	4656      	mov	r6, sl
 800550a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800550e:	4620      	mov	r0, r4
 8005510:	4629      	mov	r1, r5
 8005512:	f7fb f90b 	bl	800072c <__aeabi_ddiv>
 8005516:	f7fb fa8f 	bl	8000a38 <__aeabi_d2iz>
 800551a:	4680      	mov	r8, r0
 800551c:	f7fa ff72 	bl	8000404 <__aeabi_i2d>
 8005520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005524:	f7fa ffd8 	bl	80004d8 <__aeabi_dmul>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4620      	mov	r0, r4
 800552e:	4629      	mov	r1, r5
 8005530:	f7fa fe1a 	bl	8000168 <__aeabi_dsub>
 8005534:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005538:	9d07      	ldr	r5, [sp, #28]
 800553a:	f806 4b01 	strb.w	r4, [r6], #1
 800553e:	eba6 040a 	sub.w	r4, r6, sl
 8005542:	42a5      	cmp	r5, r4
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	f040 8116 	bne.w	8005778 <_dtoa_r+0x6e0>
 800554c:	f7fa fe0e 	bl	800016c <__adddf3>
 8005550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005554:	4604      	mov	r4, r0
 8005556:	460d      	mov	r5, r1
 8005558:	f7fb fa4e 	bl	80009f8 <__aeabi_dcmpgt>
 800555c:	2800      	cmp	r0, #0
 800555e:	f040 80f8 	bne.w	8005752 <_dtoa_r+0x6ba>
 8005562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005566:	4620      	mov	r0, r4
 8005568:	4629      	mov	r1, r5
 800556a:	f7fb fa1d 	bl	80009a8 <__aeabi_dcmpeq>
 800556e:	b118      	cbz	r0, 8005578 <_dtoa_r+0x4e0>
 8005570:	f018 0f01 	tst.w	r8, #1
 8005574:	f040 80ed 	bne.w	8005752 <_dtoa_r+0x6ba>
 8005578:	4649      	mov	r1, r9
 800557a:	4658      	mov	r0, fp
 800557c:	f000 fc92 	bl	8005ea4 <_Bfree>
 8005580:	2300      	movs	r3, #0
 8005582:	7033      	strb	r3, [r6, #0]
 8005584:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005586:	3701      	adds	r7, #1
 8005588:	601f      	str	r7, [r3, #0]
 800558a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 8320 	beq.w	8005bd2 <_dtoa_r+0xb3a>
 8005592:	601e      	str	r6, [r3, #0]
 8005594:	e31d      	b.n	8005bd2 <_dtoa_r+0xb3a>
 8005596:	07e2      	lsls	r2, r4, #31
 8005598:	d505      	bpl.n	80055a6 <_dtoa_r+0x50e>
 800559a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800559e:	f7fa ff9b 	bl	80004d8 <__aeabi_dmul>
 80055a2:	2301      	movs	r3, #1
 80055a4:	3601      	adds	r6, #1
 80055a6:	1064      	asrs	r4, r4, #1
 80055a8:	3508      	adds	r5, #8
 80055aa:	e73f      	b.n	800542c <_dtoa_r+0x394>
 80055ac:	2602      	movs	r6, #2
 80055ae:	e742      	b.n	8005436 <_dtoa_r+0x39e>
 80055b0:	9c07      	ldr	r4, [sp, #28]
 80055b2:	9704      	str	r7, [sp, #16]
 80055b4:	e761      	b.n	800547a <_dtoa_r+0x3e2>
 80055b6:	bf00      	nop
 80055b8:	08007268 	.word	0x08007268
 80055bc:	08007240 	.word	0x08007240
 80055c0:	3ff00000 	.word	0x3ff00000
 80055c4:	40240000 	.word	0x40240000
 80055c8:	401c0000 	.word	0x401c0000
 80055cc:	40140000 	.word	0x40140000
 80055d0:	4b70      	ldr	r3, [pc, #448]	@ (8005794 <_dtoa_r+0x6fc>)
 80055d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80055d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80055d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80055dc:	4454      	add	r4, sl
 80055de:	2900      	cmp	r1, #0
 80055e0:	d045      	beq.n	800566e <_dtoa_r+0x5d6>
 80055e2:	2000      	movs	r0, #0
 80055e4:	496c      	ldr	r1, [pc, #432]	@ (8005798 <_dtoa_r+0x700>)
 80055e6:	f7fb f8a1 	bl	800072c <__aeabi_ddiv>
 80055ea:	4633      	mov	r3, r6
 80055ec:	462a      	mov	r2, r5
 80055ee:	f7fa fdbb 	bl	8000168 <__aeabi_dsub>
 80055f2:	4656      	mov	r6, sl
 80055f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80055f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055fc:	f7fb fa1c 	bl	8000a38 <__aeabi_d2iz>
 8005600:	4605      	mov	r5, r0
 8005602:	f7fa feff 	bl	8000404 <__aeabi_i2d>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800560e:	f7fa fdab 	bl	8000168 <__aeabi_dsub>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	3530      	adds	r5, #48	@ 0x30
 8005618:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800561c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005620:	f806 5b01 	strb.w	r5, [r6], #1
 8005624:	f7fb f9ca 	bl	80009bc <__aeabi_dcmplt>
 8005628:	2800      	cmp	r0, #0
 800562a:	d163      	bne.n	80056f4 <_dtoa_r+0x65c>
 800562c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005630:	2000      	movs	r0, #0
 8005632:	495a      	ldr	r1, [pc, #360]	@ (800579c <_dtoa_r+0x704>)
 8005634:	f7fa fd98 	bl	8000168 <__aeabi_dsub>
 8005638:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800563c:	f7fb f9be 	bl	80009bc <__aeabi_dcmplt>
 8005640:	2800      	cmp	r0, #0
 8005642:	f040 8087 	bne.w	8005754 <_dtoa_r+0x6bc>
 8005646:	42a6      	cmp	r6, r4
 8005648:	f43f af43 	beq.w	80054d2 <_dtoa_r+0x43a>
 800564c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005650:	2200      	movs	r2, #0
 8005652:	4b53      	ldr	r3, [pc, #332]	@ (80057a0 <_dtoa_r+0x708>)
 8005654:	f7fa ff40 	bl	80004d8 <__aeabi_dmul>
 8005658:	2200      	movs	r2, #0
 800565a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800565e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005662:	4b4f      	ldr	r3, [pc, #316]	@ (80057a0 <_dtoa_r+0x708>)
 8005664:	f7fa ff38 	bl	80004d8 <__aeabi_dmul>
 8005668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800566c:	e7c4      	b.n	80055f8 <_dtoa_r+0x560>
 800566e:	4631      	mov	r1, r6
 8005670:	4628      	mov	r0, r5
 8005672:	f7fa ff31 	bl	80004d8 <__aeabi_dmul>
 8005676:	4656      	mov	r6, sl
 8005678:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800567c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800567e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005682:	f7fb f9d9 	bl	8000a38 <__aeabi_d2iz>
 8005686:	4605      	mov	r5, r0
 8005688:	f7fa febc 	bl	8000404 <__aeabi_i2d>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005694:	f7fa fd68 	bl	8000168 <__aeabi_dsub>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	3530      	adds	r5, #48	@ 0x30
 800569e:	f806 5b01 	strb.w	r5, [r6], #1
 80056a2:	42a6      	cmp	r6, r4
 80056a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	d124      	bne.n	80056f8 <_dtoa_r+0x660>
 80056ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80056b2:	4b39      	ldr	r3, [pc, #228]	@ (8005798 <_dtoa_r+0x700>)
 80056b4:	f7fa fd5a 	bl	800016c <__adddf3>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056c0:	f7fb f99a 	bl	80009f8 <__aeabi_dcmpgt>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d145      	bne.n	8005754 <_dtoa_r+0x6bc>
 80056c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056cc:	2000      	movs	r0, #0
 80056ce:	4932      	ldr	r1, [pc, #200]	@ (8005798 <_dtoa_r+0x700>)
 80056d0:	f7fa fd4a 	bl	8000168 <__aeabi_dsub>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056dc:	f7fb f96e 	bl	80009bc <__aeabi_dcmplt>
 80056e0:	2800      	cmp	r0, #0
 80056e2:	f43f aef6 	beq.w	80054d2 <_dtoa_r+0x43a>
 80056e6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80056e8:	1e73      	subs	r3, r6, #1
 80056ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80056ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80056f0:	2b30      	cmp	r3, #48	@ 0x30
 80056f2:	d0f8      	beq.n	80056e6 <_dtoa_r+0x64e>
 80056f4:	9f04      	ldr	r7, [sp, #16]
 80056f6:	e73f      	b.n	8005578 <_dtoa_r+0x4e0>
 80056f8:	4b29      	ldr	r3, [pc, #164]	@ (80057a0 <_dtoa_r+0x708>)
 80056fa:	f7fa feed 	bl	80004d8 <__aeabi_dmul>
 80056fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005702:	e7bc      	b.n	800567e <_dtoa_r+0x5e6>
 8005704:	d10c      	bne.n	8005720 <_dtoa_r+0x688>
 8005706:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800570a:	2200      	movs	r2, #0
 800570c:	4b25      	ldr	r3, [pc, #148]	@ (80057a4 <_dtoa_r+0x70c>)
 800570e:	f7fa fee3 	bl	80004d8 <__aeabi_dmul>
 8005712:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005716:	f7fb f965 	bl	80009e4 <__aeabi_dcmpge>
 800571a:	2800      	cmp	r0, #0
 800571c:	f000 815b 	beq.w	80059d6 <_dtoa_r+0x93e>
 8005720:	2400      	movs	r4, #0
 8005722:	4625      	mov	r5, r4
 8005724:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005726:	4656      	mov	r6, sl
 8005728:	43db      	mvns	r3, r3
 800572a:	9304      	str	r3, [sp, #16]
 800572c:	2700      	movs	r7, #0
 800572e:	4621      	mov	r1, r4
 8005730:	4658      	mov	r0, fp
 8005732:	f000 fbb7 	bl	8005ea4 <_Bfree>
 8005736:	2d00      	cmp	r5, #0
 8005738:	d0dc      	beq.n	80056f4 <_dtoa_r+0x65c>
 800573a:	b12f      	cbz	r7, 8005748 <_dtoa_r+0x6b0>
 800573c:	42af      	cmp	r7, r5
 800573e:	d003      	beq.n	8005748 <_dtoa_r+0x6b0>
 8005740:	4639      	mov	r1, r7
 8005742:	4658      	mov	r0, fp
 8005744:	f000 fbae 	bl	8005ea4 <_Bfree>
 8005748:	4629      	mov	r1, r5
 800574a:	4658      	mov	r0, fp
 800574c:	f000 fbaa 	bl	8005ea4 <_Bfree>
 8005750:	e7d0      	b.n	80056f4 <_dtoa_r+0x65c>
 8005752:	9704      	str	r7, [sp, #16]
 8005754:	4633      	mov	r3, r6
 8005756:	461e      	mov	r6, r3
 8005758:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800575c:	2a39      	cmp	r2, #57	@ 0x39
 800575e:	d107      	bne.n	8005770 <_dtoa_r+0x6d8>
 8005760:	459a      	cmp	sl, r3
 8005762:	d1f8      	bne.n	8005756 <_dtoa_r+0x6be>
 8005764:	9a04      	ldr	r2, [sp, #16]
 8005766:	3201      	adds	r2, #1
 8005768:	9204      	str	r2, [sp, #16]
 800576a:	2230      	movs	r2, #48	@ 0x30
 800576c:	f88a 2000 	strb.w	r2, [sl]
 8005770:	781a      	ldrb	r2, [r3, #0]
 8005772:	3201      	adds	r2, #1
 8005774:	701a      	strb	r2, [r3, #0]
 8005776:	e7bd      	b.n	80056f4 <_dtoa_r+0x65c>
 8005778:	2200      	movs	r2, #0
 800577a:	4b09      	ldr	r3, [pc, #36]	@ (80057a0 <_dtoa_r+0x708>)
 800577c:	f7fa feac 	bl	80004d8 <__aeabi_dmul>
 8005780:	2200      	movs	r2, #0
 8005782:	2300      	movs	r3, #0
 8005784:	4604      	mov	r4, r0
 8005786:	460d      	mov	r5, r1
 8005788:	f7fb f90e 	bl	80009a8 <__aeabi_dcmpeq>
 800578c:	2800      	cmp	r0, #0
 800578e:	f43f aebc 	beq.w	800550a <_dtoa_r+0x472>
 8005792:	e6f1      	b.n	8005578 <_dtoa_r+0x4e0>
 8005794:	08007268 	.word	0x08007268
 8005798:	3fe00000 	.word	0x3fe00000
 800579c:	3ff00000 	.word	0x3ff00000
 80057a0:	40240000 	.word	0x40240000
 80057a4:	40140000 	.word	0x40140000
 80057a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80057aa:	2a00      	cmp	r2, #0
 80057ac:	f000 80db 	beq.w	8005966 <_dtoa_r+0x8ce>
 80057b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80057b2:	2a01      	cmp	r2, #1
 80057b4:	f300 80bf 	bgt.w	8005936 <_dtoa_r+0x89e>
 80057b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80057ba:	2a00      	cmp	r2, #0
 80057bc:	f000 80b7 	beq.w	800592e <_dtoa_r+0x896>
 80057c0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80057c4:	4646      	mov	r6, r8
 80057c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80057c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057ca:	2101      	movs	r1, #1
 80057cc:	441a      	add	r2, r3
 80057ce:	4658      	mov	r0, fp
 80057d0:	4498      	add	r8, r3
 80057d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80057d4:	f000 fc1a 	bl	800600c <__i2b>
 80057d8:	4605      	mov	r5, r0
 80057da:	b15e      	cbz	r6, 80057f4 <_dtoa_r+0x75c>
 80057dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057de:	2b00      	cmp	r3, #0
 80057e0:	dd08      	ble.n	80057f4 <_dtoa_r+0x75c>
 80057e2:	42b3      	cmp	r3, r6
 80057e4:	bfa8      	it	ge
 80057e6:	4633      	movge	r3, r6
 80057e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057ea:	eba8 0803 	sub.w	r8, r8, r3
 80057ee:	1af6      	subs	r6, r6, r3
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80057f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057f6:	b1f3      	cbz	r3, 8005836 <_dtoa_r+0x79e>
 80057f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 80b7 	beq.w	800596e <_dtoa_r+0x8d6>
 8005800:	b18c      	cbz	r4, 8005826 <_dtoa_r+0x78e>
 8005802:	4629      	mov	r1, r5
 8005804:	4622      	mov	r2, r4
 8005806:	4658      	mov	r0, fp
 8005808:	f000 fcbe 	bl	8006188 <__pow5mult>
 800580c:	464a      	mov	r2, r9
 800580e:	4601      	mov	r1, r0
 8005810:	4605      	mov	r5, r0
 8005812:	4658      	mov	r0, fp
 8005814:	f000 fc10 	bl	8006038 <__multiply>
 8005818:	4649      	mov	r1, r9
 800581a:	9004      	str	r0, [sp, #16]
 800581c:	4658      	mov	r0, fp
 800581e:	f000 fb41 	bl	8005ea4 <_Bfree>
 8005822:	9b04      	ldr	r3, [sp, #16]
 8005824:	4699      	mov	r9, r3
 8005826:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005828:	1b1a      	subs	r2, r3, r4
 800582a:	d004      	beq.n	8005836 <_dtoa_r+0x79e>
 800582c:	4649      	mov	r1, r9
 800582e:	4658      	mov	r0, fp
 8005830:	f000 fcaa 	bl	8006188 <__pow5mult>
 8005834:	4681      	mov	r9, r0
 8005836:	2101      	movs	r1, #1
 8005838:	4658      	mov	r0, fp
 800583a:	f000 fbe7 	bl	800600c <__i2b>
 800583e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005840:	4604      	mov	r4, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 81c9 	beq.w	8005bda <_dtoa_r+0xb42>
 8005848:	461a      	mov	r2, r3
 800584a:	4601      	mov	r1, r0
 800584c:	4658      	mov	r0, fp
 800584e:	f000 fc9b 	bl	8006188 <__pow5mult>
 8005852:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005854:	4604      	mov	r4, r0
 8005856:	2b01      	cmp	r3, #1
 8005858:	f300 808f 	bgt.w	800597a <_dtoa_r+0x8e2>
 800585c:	9b02      	ldr	r3, [sp, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	f040 8087 	bne.w	8005972 <_dtoa_r+0x8da>
 8005864:	9b03      	ldr	r3, [sp, #12]
 8005866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800586a:	2b00      	cmp	r3, #0
 800586c:	f040 8083 	bne.w	8005976 <_dtoa_r+0x8de>
 8005870:	9b03      	ldr	r3, [sp, #12]
 8005872:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005876:	0d1b      	lsrs	r3, r3, #20
 8005878:	051b      	lsls	r3, r3, #20
 800587a:	b12b      	cbz	r3, 8005888 <_dtoa_r+0x7f0>
 800587c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800587e:	f108 0801 	add.w	r8, r8, #1
 8005882:	3301      	adds	r3, #1
 8005884:	9309      	str	r3, [sp, #36]	@ 0x24
 8005886:	2301      	movs	r3, #1
 8005888:	930a      	str	r3, [sp, #40]	@ 0x28
 800588a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 81aa 	beq.w	8005be6 <_dtoa_r+0xb4e>
 8005892:	6923      	ldr	r3, [r4, #16]
 8005894:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005898:	6918      	ldr	r0, [r3, #16]
 800589a:	f000 fb6b 	bl	8005f74 <__hi0bits>
 800589e:	f1c0 0020 	rsb	r0, r0, #32
 80058a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058a4:	4418      	add	r0, r3
 80058a6:	f010 001f 	ands.w	r0, r0, #31
 80058aa:	d071      	beq.n	8005990 <_dtoa_r+0x8f8>
 80058ac:	f1c0 0320 	rsb	r3, r0, #32
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	dd65      	ble.n	8005980 <_dtoa_r+0x8e8>
 80058b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058b6:	f1c0 001c 	rsb	r0, r0, #28
 80058ba:	4403      	add	r3, r0
 80058bc:	4480      	add	r8, r0
 80058be:	4406      	add	r6, r0
 80058c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80058c2:	f1b8 0f00 	cmp.w	r8, #0
 80058c6:	dd05      	ble.n	80058d4 <_dtoa_r+0x83c>
 80058c8:	4649      	mov	r1, r9
 80058ca:	4642      	mov	r2, r8
 80058cc:	4658      	mov	r0, fp
 80058ce:	f000 fcb5 	bl	800623c <__lshift>
 80058d2:	4681      	mov	r9, r0
 80058d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	dd05      	ble.n	80058e6 <_dtoa_r+0x84e>
 80058da:	4621      	mov	r1, r4
 80058dc:	461a      	mov	r2, r3
 80058de:	4658      	mov	r0, fp
 80058e0:	f000 fcac 	bl	800623c <__lshift>
 80058e4:	4604      	mov	r4, r0
 80058e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d053      	beq.n	8005994 <_dtoa_r+0x8fc>
 80058ec:	4621      	mov	r1, r4
 80058ee:	4648      	mov	r0, r9
 80058f0:	f000 fd10 	bl	8006314 <__mcmp>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	da4d      	bge.n	8005994 <_dtoa_r+0x8fc>
 80058f8:	1e7b      	subs	r3, r7, #1
 80058fa:	4649      	mov	r1, r9
 80058fc:	9304      	str	r3, [sp, #16]
 80058fe:	220a      	movs	r2, #10
 8005900:	2300      	movs	r3, #0
 8005902:	4658      	mov	r0, fp
 8005904:	f000 faf0 	bl	8005ee8 <__multadd>
 8005908:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800590a:	4681      	mov	r9, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 816c 	beq.w	8005bea <_dtoa_r+0xb52>
 8005912:	2300      	movs	r3, #0
 8005914:	4629      	mov	r1, r5
 8005916:	220a      	movs	r2, #10
 8005918:	4658      	mov	r0, fp
 800591a:	f000 fae5 	bl	8005ee8 <__multadd>
 800591e:	9b08      	ldr	r3, [sp, #32]
 8005920:	4605      	mov	r5, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	dc61      	bgt.n	80059ea <_dtoa_r+0x952>
 8005926:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005928:	2b02      	cmp	r3, #2
 800592a:	dc3b      	bgt.n	80059a4 <_dtoa_r+0x90c>
 800592c:	e05d      	b.n	80059ea <_dtoa_r+0x952>
 800592e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005930:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005934:	e746      	b.n	80057c4 <_dtoa_r+0x72c>
 8005936:	9b07      	ldr	r3, [sp, #28]
 8005938:	1e5c      	subs	r4, r3, #1
 800593a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800593c:	42a3      	cmp	r3, r4
 800593e:	bfbf      	itttt	lt
 8005940:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005942:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005944:	1ae3      	sublt	r3, r4, r3
 8005946:	18d2      	addlt	r2, r2, r3
 8005948:	bfa8      	it	ge
 800594a:	1b1c      	subge	r4, r3, r4
 800594c:	9b07      	ldr	r3, [sp, #28]
 800594e:	bfbe      	ittt	lt
 8005950:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005952:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005954:	2400      	movlt	r4, #0
 8005956:	2b00      	cmp	r3, #0
 8005958:	bfb5      	itete	lt
 800595a:	eba8 0603 	sublt.w	r6, r8, r3
 800595e:	4646      	movge	r6, r8
 8005960:	2300      	movlt	r3, #0
 8005962:	9b07      	ldrge	r3, [sp, #28]
 8005964:	e730      	b.n	80057c8 <_dtoa_r+0x730>
 8005966:	4646      	mov	r6, r8
 8005968:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800596a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800596c:	e735      	b.n	80057da <_dtoa_r+0x742>
 800596e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005970:	e75c      	b.n	800582c <_dtoa_r+0x794>
 8005972:	2300      	movs	r3, #0
 8005974:	e788      	b.n	8005888 <_dtoa_r+0x7f0>
 8005976:	9b02      	ldr	r3, [sp, #8]
 8005978:	e786      	b.n	8005888 <_dtoa_r+0x7f0>
 800597a:	2300      	movs	r3, #0
 800597c:	930a      	str	r3, [sp, #40]	@ 0x28
 800597e:	e788      	b.n	8005892 <_dtoa_r+0x7fa>
 8005980:	d09f      	beq.n	80058c2 <_dtoa_r+0x82a>
 8005982:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005984:	331c      	adds	r3, #28
 8005986:	441a      	add	r2, r3
 8005988:	4498      	add	r8, r3
 800598a:	441e      	add	r6, r3
 800598c:	9209      	str	r2, [sp, #36]	@ 0x24
 800598e:	e798      	b.n	80058c2 <_dtoa_r+0x82a>
 8005990:	4603      	mov	r3, r0
 8005992:	e7f6      	b.n	8005982 <_dtoa_r+0x8ea>
 8005994:	9b07      	ldr	r3, [sp, #28]
 8005996:	9704      	str	r7, [sp, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	dc20      	bgt.n	80059de <_dtoa_r+0x946>
 800599c:	9308      	str	r3, [sp, #32]
 800599e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	dd1e      	ble.n	80059e2 <_dtoa_r+0x94a>
 80059a4:	9b08      	ldr	r3, [sp, #32]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f47f aebc 	bne.w	8005724 <_dtoa_r+0x68c>
 80059ac:	4621      	mov	r1, r4
 80059ae:	2205      	movs	r2, #5
 80059b0:	4658      	mov	r0, fp
 80059b2:	f000 fa99 	bl	8005ee8 <__multadd>
 80059b6:	4601      	mov	r1, r0
 80059b8:	4604      	mov	r4, r0
 80059ba:	4648      	mov	r0, r9
 80059bc:	f000 fcaa 	bl	8006314 <__mcmp>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	f77f aeaf 	ble.w	8005724 <_dtoa_r+0x68c>
 80059c6:	2331      	movs	r3, #49	@ 0x31
 80059c8:	4656      	mov	r6, sl
 80059ca:	f806 3b01 	strb.w	r3, [r6], #1
 80059ce:	9b04      	ldr	r3, [sp, #16]
 80059d0:	3301      	adds	r3, #1
 80059d2:	9304      	str	r3, [sp, #16]
 80059d4:	e6aa      	b.n	800572c <_dtoa_r+0x694>
 80059d6:	9c07      	ldr	r4, [sp, #28]
 80059d8:	9704      	str	r7, [sp, #16]
 80059da:	4625      	mov	r5, r4
 80059dc:	e7f3      	b.n	80059c6 <_dtoa_r+0x92e>
 80059de:	9b07      	ldr	r3, [sp, #28]
 80059e0:	9308      	str	r3, [sp, #32]
 80059e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 8104 	beq.w	8005bf2 <_dtoa_r+0xb5a>
 80059ea:	2e00      	cmp	r6, #0
 80059ec:	dd05      	ble.n	80059fa <_dtoa_r+0x962>
 80059ee:	4629      	mov	r1, r5
 80059f0:	4632      	mov	r2, r6
 80059f2:	4658      	mov	r0, fp
 80059f4:	f000 fc22 	bl	800623c <__lshift>
 80059f8:	4605      	mov	r5, r0
 80059fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d05a      	beq.n	8005ab6 <_dtoa_r+0xa1e>
 8005a00:	4658      	mov	r0, fp
 8005a02:	6869      	ldr	r1, [r5, #4]
 8005a04:	f000 fa0e 	bl	8005e24 <_Balloc>
 8005a08:	4606      	mov	r6, r0
 8005a0a:	b928      	cbnz	r0, 8005a18 <_dtoa_r+0x980>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005a12:	4b83      	ldr	r3, [pc, #524]	@ (8005c20 <_dtoa_r+0xb88>)
 8005a14:	f7ff bb54 	b.w	80050c0 <_dtoa_r+0x28>
 8005a18:	692a      	ldr	r2, [r5, #16]
 8005a1a:	f105 010c 	add.w	r1, r5, #12
 8005a1e:	3202      	adds	r2, #2
 8005a20:	0092      	lsls	r2, r2, #2
 8005a22:	300c      	adds	r0, #12
 8005a24:	f000 ffa8 	bl	8006978 <memcpy>
 8005a28:	2201      	movs	r2, #1
 8005a2a:	4631      	mov	r1, r6
 8005a2c:	4658      	mov	r0, fp
 8005a2e:	f000 fc05 	bl	800623c <__lshift>
 8005a32:	462f      	mov	r7, r5
 8005a34:	4605      	mov	r5, r0
 8005a36:	f10a 0301 	add.w	r3, sl, #1
 8005a3a:	9307      	str	r3, [sp, #28]
 8005a3c:	9b08      	ldr	r3, [sp, #32]
 8005a3e:	4453      	add	r3, sl
 8005a40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a42:	9b02      	ldr	r3, [sp, #8]
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a4a:	9b07      	ldr	r3, [sp, #28]
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	4648      	mov	r0, r9
 8005a52:	9302      	str	r3, [sp, #8]
 8005a54:	f7ff fa95 	bl	8004f82 <quorem>
 8005a58:	4639      	mov	r1, r7
 8005a5a:	9008      	str	r0, [sp, #32]
 8005a5c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005a60:	4648      	mov	r0, r9
 8005a62:	f000 fc57 	bl	8006314 <__mcmp>
 8005a66:	462a      	mov	r2, r5
 8005a68:	9009      	str	r0, [sp, #36]	@ 0x24
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	4658      	mov	r0, fp
 8005a6e:	f000 fc6d 	bl	800634c <__mdiff>
 8005a72:	68c2      	ldr	r2, [r0, #12]
 8005a74:	4606      	mov	r6, r0
 8005a76:	bb02      	cbnz	r2, 8005aba <_dtoa_r+0xa22>
 8005a78:	4601      	mov	r1, r0
 8005a7a:	4648      	mov	r0, r9
 8005a7c:	f000 fc4a 	bl	8006314 <__mcmp>
 8005a80:	4602      	mov	r2, r0
 8005a82:	4631      	mov	r1, r6
 8005a84:	4658      	mov	r0, fp
 8005a86:	920c      	str	r2, [sp, #48]	@ 0x30
 8005a88:	f000 fa0c 	bl	8005ea4 <_Bfree>
 8005a8c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005a90:	9e07      	ldr	r6, [sp, #28]
 8005a92:	ea43 0102 	orr.w	r1, r3, r2
 8005a96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a98:	4319      	orrs	r1, r3
 8005a9a:	d110      	bne.n	8005abe <_dtoa_r+0xa26>
 8005a9c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005aa0:	d029      	beq.n	8005af6 <_dtoa_r+0xa5e>
 8005aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	dd02      	ble.n	8005aae <_dtoa_r+0xa16>
 8005aa8:	9b08      	ldr	r3, [sp, #32]
 8005aaa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005aae:	9b02      	ldr	r3, [sp, #8]
 8005ab0:	f883 8000 	strb.w	r8, [r3]
 8005ab4:	e63b      	b.n	800572e <_dtoa_r+0x696>
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	e7bb      	b.n	8005a32 <_dtoa_r+0x99a>
 8005aba:	2201      	movs	r2, #1
 8005abc:	e7e1      	b.n	8005a82 <_dtoa_r+0x9ea>
 8005abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	db04      	blt.n	8005ace <_dtoa_r+0xa36>
 8005ac4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005aca:	430b      	orrs	r3, r1
 8005acc:	d120      	bne.n	8005b10 <_dtoa_r+0xa78>
 8005ace:	2a00      	cmp	r2, #0
 8005ad0:	dded      	ble.n	8005aae <_dtoa_r+0xa16>
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	4658      	mov	r0, fp
 8005ad8:	f000 fbb0 	bl	800623c <__lshift>
 8005adc:	4621      	mov	r1, r4
 8005ade:	4681      	mov	r9, r0
 8005ae0:	f000 fc18 	bl	8006314 <__mcmp>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	dc03      	bgt.n	8005af0 <_dtoa_r+0xa58>
 8005ae8:	d1e1      	bne.n	8005aae <_dtoa_r+0xa16>
 8005aea:	f018 0f01 	tst.w	r8, #1
 8005aee:	d0de      	beq.n	8005aae <_dtoa_r+0xa16>
 8005af0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005af4:	d1d8      	bne.n	8005aa8 <_dtoa_r+0xa10>
 8005af6:	2339      	movs	r3, #57	@ 0x39
 8005af8:	9a02      	ldr	r2, [sp, #8]
 8005afa:	7013      	strb	r3, [r2, #0]
 8005afc:	4633      	mov	r3, r6
 8005afe:	461e      	mov	r6, r3
 8005b00:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	2a39      	cmp	r2, #57	@ 0x39
 8005b08:	d052      	beq.n	8005bb0 <_dtoa_r+0xb18>
 8005b0a:	3201      	adds	r2, #1
 8005b0c:	701a      	strb	r2, [r3, #0]
 8005b0e:	e60e      	b.n	800572e <_dtoa_r+0x696>
 8005b10:	2a00      	cmp	r2, #0
 8005b12:	dd07      	ble.n	8005b24 <_dtoa_r+0xa8c>
 8005b14:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005b18:	d0ed      	beq.n	8005af6 <_dtoa_r+0xa5e>
 8005b1a:	9a02      	ldr	r2, [sp, #8]
 8005b1c:	f108 0301 	add.w	r3, r8, #1
 8005b20:	7013      	strb	r3, [r2, #0]
 8005b22:	e604      	b.n	800572e <_dtoa_r+0x696>
 8005b24:	9b07      	ldr	r3, [sp, #28]
 8005b26:	9a07      	ldr	r2, [sp, #28]
 8005b28:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005b2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d028      	beq.n	8005b84 <_dtoa_r+0xaec>
 8005b32:	4649      	mov	r1, r9
 8005b34:	2300      	movs	r3, #0
 8005b36:	220a      	movs	r2, #10
 8005b38:	4658      	mov	r0, fp
 8005b3a:	f000 f9d5 	bl	8005ee8 <__multadd>
 8005b3e:	42af      	cmp	r7, r5
 8005b40:	4681      	mov	r9, r0
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	f04f 020a 	mov.w	r2, #10
 8005b4a:	4639      	mov	r1, r7
 8005b4c:	4658      	mov	r0, fp
 8005b4e:	d107      	bne.n	8005b60 <_dtoa_r+0xac8>
 8005b50:	f000 f9ca 	bl	8005ee8 <__multadd>
 8005b54:	4607      	mov	r7, r0
 8005b56:	4605      	mov	r5, r0
 8005b58:	9b07      	ldr	r3, [sp, #28]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	9307      	str	r3, [sp, #28]
 8005b5e:	e774      	b.n	8005a4a <_dtoa_r+0x9b2>
 8005b60:	f000 f9c2 	bl	8005ee8 <__multadd>
 8005b64:	4629      	mov	r1, r5
 8005b66:	4607      	mov	r7, r0
 8005b68:	2300      	movs	r3, #0
 8005b6a:	220a      	movs	r2, #10
 8005b6c:	4658      	mov	r0, fp
 8005b6e:	f000 f9bb 	bl	8005ee8 <__multadd>
 8005b72:	4605      	mov	r5, r0
 8005b74:	e7f0      	b.n	8005b58 <_dtoa_r+0xac0>
 8005b76:	9b08      	ldr	r3, [sp, #32]
 8005b78:	2700      	movs	r7, #0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bfcc      	ite	gt
 8005b7e:	461e      	movgt	r6, r3
 8005b80:	2601      	movle	r6, #1
 8005b82:	4456      	add	r6, sl
 8005b84:	4649      	mov	r1, r9
 8005b86:	2201      	movs	r2, #1
 8005b88:	4658      	mov	r0, fp
 8005b8a:	f000 fb57 	bl	800623c <__lshift>
 8005b8e:	4621      	mov	r1, r4
 8005b90:	4681      	mov	r9, r0
 8005b92:	f000 fbbf 	bl	8006314 <__mcmp>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	dcb0      	bgt.n	8005afc <_dtoa_r+0xa64>
 8005b9a:	d102      	bne.n	8005ba2 <_dtoa_r+0xb0a>
 8005b9c:	f018 0f01 	tst.w	r8, #1
 8005ba0:	d1ac      	bne.n	8005afc <_dtoa_r+0xa64>
 8005ba2:	4633      	mov	r3, r6
 8005ba4:	461e      	mov	r6, r3
 8005ba6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005baa:	2a30      	cmp	r2, #48	@ 0x30
 8005bac:	d0fa      	beq.n	8005ba4 <_dtoa_r+0xb0c>
 8005bae:	e5be      	b.n	800572e <_dtoa_r+0x696>
 8005bb0:	459a      	cmp	sl, r3
 8005bb2:	d1a4      	bne.n	8005afe <_dtoa_r+0xa66>
 8005bb4:	9b04      	ldr	r3, [sp, #16]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	9304      	str	r3, [sp, #16]
 8005bba:	2331      	movs	r3, #49	@ 0x31
 8005bbc:	f88a 3000 	strb.w	r3, [sl]
 8005bc0:	e5b5      	b.n	800572e <_dtoa_r+0x696>
 8005bc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005bc4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005c24 <_dtoa_r+0xb8c>
 8005bc8:	b11b      	cbz	r3, 8005bd2 <_dtoa_r+0xb3a>
 8005bca:	f10a 0308 	add.w	r3, sl, #8
 8005bce:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	4650      	mov	r0, sl
 8005bd4:	b017      	add	sp, #92	@ 0x5c
 8005bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bda:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	f77f ae3d 	ble.w	800585c <_dtoa_r+0x7c4>
 8005be2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005be4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005be6:	2001      	movs	r0, #1
 8005be8:	e65b      	b.n	80058a2 <_dtoa_r+0x80a>
 8005bea:	9b08      	ldr	r3, [sp, #32]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f77f aed6 	ble.w	800599e <_dtoa_r+0x906>
 8005bf2:	4656      	mov	r6, sl
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	4648      	mov	r0, r9
 8005bf8:	f7ff f9c3 	bl	8004f82 <quorem>
 8005bfc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005c00:	9b08      	ldr	r3, [sp, #32]
 8005c02:	f806 8b01 	strb.w	r8, [r6], #1
 8005c06:	eba6 020a 	sub.w	r2, r6, sl
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	ddb3      	ble.n	8005b76 <_dtoa_r+0xade>
 8005c0e:	4649      	mov	r1, r9
 8005c10:	2300      	movs	r3, #0
 8005c12:	220a      	movs	r2, #10
 8005c14:	4658      	mov	r0, fp
 8005c16:	f000 f967 	bl	8005ee8 <__multadd>
 8005c1a:	4681      	mov	r9, r0
 8005c1c:	e7ea      	b.n	8005bf4 <_dtoa_r+0xb5c>
 8005c1e:	bf00      	nop
 8005c20:	080071c6 	.word	0x080071c6
 8005c24:	0800714a 	.word	0x0800714a

08005c28 <_free_r>:
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	4605      	mov	r5, r0
 8005c2c:	2900      	cmp	r1, #0
 8005c2e:	d040      	beq.n	8005cb2 <_free_r+0x8a>
 8005c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c34:	1f0c      	subs	r4, r1, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bfb8      	it	lt
 8005c3a:	18e4      	addlt	r4, r4, r3
 8005c3c:	f000 f8e6 	bl	8005e0c <__malloc_lock>
 8005c40:	4a1c      	ldr	r2, [pc, #112]	@ (8005cb4 <_free_r+0x8c>)
 8005c42:	6813      	ldr	r3, [r2, #0]
 8005c44:	b933      	cbnz	r3, 8005c54 <_free_r+0x2c>
 8005c46:	6063      	str	r3, [r4, #4]
 8005c48:	6014      	str	r4, [r2, #0]
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c50:	f000 b8e2 	b.w	8005e18 <__malloc_unlock>
 8005c54:	42a3      	cmp	r3, r4
 8005c56:	d908      	bls.n	8005c6a <_free_r+0x42>
 8005c58:	6820      	ldr	r0, [r4, #0]
 8005c5a:	1821      	adds	r1, r4, r0
 8005c5c:	428b      	cmp	r3, r1
 8005c5e:	bf01      	itttt	eq
 8005c60:	6819      	ldreq	r1, [r3, #0]
 8005c62:	685b      	ldreq	r3, [r3, #4]
 8005c64:	1809      	addeq	r1, r1, r0
 8005c66:	6021      	streq	r1, [r4, #0]
 8005c68:	e7ed      	b.n	8005c46 <_free_r+0x1e>
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	b10b      	cbz	r3, 8005c74 <_free_r+0x4c>
 8005c70:	42a3      	cmp	r3, r4
 8005c72:	d9fa      	bls.n	8005c6a <_free_r+0x42>
 8005c74:	6811      	ldr	r1, [r2, #0]
 8005c76:	1850      	adds	r0, r2, r1
 8005c78:	42a0      	cmp	r0, r4
 8005c7a:	d10b      	bne.n	8005c94 <_free_r+0x6c>
 8005c7c:	6820      	ldr	r0, [r4, #0]
 8005c7e:	4401      	add	r1, r0
 8005c80:	1850      	adds	r0, r2, r1
 8005c82:	4283      	cmp	r3, r0
 8005c84:	6011      	str	r1, [r2, #0]
 8005c86:	d1e0      	bne.n	8005c4a <_free_r+0x22>
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	4408      	add	r0, r1
 8005c8e:	6010      	str	r0, [r2, #0]
 8005c90:	6053      	str	r3, [r2, #4]
 8005c92:	e7da      	b.n	8005c4a <_free_r+0x22>
 8005c94:	d902      	bls.n	8005c9c <_free_r+0x74>
 8005c96:	230c      	movs	r3, #12
 8005c98:	602b      	str	r3, [r5, #0]
 8005c9a:	e7d6      	b.n	8005c4a <_free_r+0x22>
 8005c9c:	6820      	ldr	r0, [r4, #0]
 8005c9e:	1821      	adds	r1, r4, r0
 8005ca0:	428b      	cmp	r3, r1
 8005ca2:	bf01      	itttt	eq
 8005ca4:	6819      	ldreq	r1, [r3, #0]
 8005ca6:	685b      	ldreq	r3, [r3, #4]
 8005ca8:	1809      	addeq	r1, r1, r0
 8005caa:	6021      	streq	r1, [r4, #0]
 8005cac:	6063      	str	r3, [r4, #4]
 8005cae:	6054      	str	r4, [r2, #4]
 8005cb0:	e7cb      	b.n	8005c4a <_free_r+0x22>
 8005cb2:	bd38      	pop	{r3, r4, r5, pc}
 8005cb4:	20000520 	.word	0x20000520

08005cb8 <malloc>:
 8005cb8:	4b02      	ldr	r3, [pc, #8]	@ (8005cc4 <malloc+0xc>)
 8005cba:	4601      	mov	r1, r0
 8005cbc:	6818      	ldr	r0, [r3, #0]
 8005cbe:	f000 b825 	b.w	8005d0c <_malloc_r>
 8005cc2:	bf00      	nop
 8005cc4:	20000078 	.word	0x20000078

08005cc8 <sbrk_aligned>:
 8005cc8:	b570      	push	{r4, r5, r6, lr}
 8005cca:	4e0f      	ldr	r6, [pc, #60]	@ (8005d08 <sbrk_aligned+0x40>)
 8005ccc:	460c      	mov	r4, r1
 8005cce:	6831      	ldr	r1, [r6, #0]
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	b911      	cbnz	r1, 8005cda <sbrk_aligned+0x12>
 8005cd4:	f000 fe40 	bl	8006958 <_sbrk_r>
 8005cd8:	6030      	str	r0, [r6, #0]
 8005cda:	4621      	mov	r1, r4
 8005cdc:	4628      	mov	r0, r5
 8005cde:	f000 fe3b 	bl	8006958 <_sbrk_r>
 8005ce2:	1c43      	adds	r3, r0, #1
 8005ce4:	d103      	bne.n	8005cee <sbrk_aligned+0x26>
 8005ce6:	f04f 34ff 	mov.w	r4, #4294967295
 8005cea:	4620      	mov	r0, r4
 8005cec:	bd70      	pop	{r4, r5, r6, pc}
 8005cee:	1cc4      	adds	r4, r0, #3
 8005cf0:	f024 0403 	bic.w	r4, r4, #3
 8005cf4:	42a0      	cmp	r0, r4
 8005cf6:	d0f8      	beq.n	8005cea <sbrk_aligned+0x22>
 8005cf8:	1a21      	subs	r1, r4, r0
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	f000 fe2c 	bl	8006958 <_sbrk_r>
 8005d00:	3001      	adds	r0, #1
 8005d02:	d1f2      	bne.n	8005cea <sbrk_aligned+0x22>
 8005d04:	e7ef      	b.n	8005ce6 <sbrk_aligned+0x1e>
 8005d06:	bf00      	nop
 8005d08:	2000051c 	.word	0x2000051c

08005d0c <_malloc_r>:
 8005d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d10:	1ccd      	adds	r5, r1, #3
 8005d12:	f025 0503 	bic.w	r5, r5, #3
 8005d16:	3508      	adds	r5, #8
 8005d18:	2d0c      	cmp	r5, #12
 8005d1a:	bf38      	it	cc
 8005d1c:	250c      	movcc	r5, #12
 8005d1e:	2d00      	cmp	r5, #0
 8005d20:	4606      	mov	r6, r0
 8005d22:	db01      	blt.n	8005d28 <_malloc_r+0x1c>
 8005d24:	42a9      	cmp	r1, r5
 8005d26:	d904      	bls.n	8005d32 <_malloc_r+0x26>
 8005d28:	230c      	movs	r3, #12
 8005d2a:	6033      	str	r3, [r6, #0]
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e08 <_malloc_r+0xfc>
 8005d36:	f000 f869 	bl	8005e0c <__malloc_lock>
 8005d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005d3e:	461c      	mov	r4, r3
 8005d40:	bb44      	cbnz	r4, 8005d94 <_malloc_r+0x88>
 8005d42:	4629      	mov	r1, r5
 8005d44:	4630      	mov	r0, r6
 8005d46:	f7ff ffbf 	bl	8005cc8 <sbrk_aligned>
 8005d4a:	1c43      	adds	r3, r0, #1
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	d158      	bne.n	8005e02 <_malloc_r+0xf6>
 8005d50:	f8d8 4000 	ldr.w	r4, [r8]
 8005d54:	4627      	mov	r7, r4
 8005d56:	2f00      	cmp	r7, #0
 8005d58:	d143      	bne.n	8005de2 <_malloc_r+0xd6>
 8005d5a:	2c00      	cmp	r4, #0
 8005d5c:	d04b      	beq.n	8005df6 <_malloc_r+0xea>
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	4639      	mov	r1, r7
 8005d62:	4630      	mov	r0, r6
 8005d64:	eb04 0903 	add.w	r9, r4, r3
 8005d68:	f000 fdf6 	bl	8006958 <_sbrk_r>
 8005d6c:	4581      	cmp	r9, r0
 8005d6e:	d142      	bne.n	8005df6 <_malloc_r+0xea>
 8005d70:	6821      	ldr	r1, [r4, #0]
 8005d72:	4630      	mov	r0, r6
 8005d74:	1a6d      	subs	r5, r5, r1
 8005d76:	4629      	mov	r1, r5
 8005d78:	f7ff ffa6 	bl	8005cc8 <sbrk_aligned>
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	d03a      	beq.n	8005df6 <_malloc_r+0xea>
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	442b      	add	r3, r5
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	f8d8 3000 	ldr.w	r3, [r8]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	bb62      	cbnz	r2, 8005de8 <_malloc_r+0xdc>
 8005d8e:	f8c8 7000 	str.w	r7, [r8]
 8005d92:	e00f      	b.n	8005db4 <_malloc_r+0xa8>
 8005d94:	6822      	ldr	r2, [r4, #0]
 8005d96:	1b52      	subs	r2, r2, r5
 8005d98:	d420      	bmi.n	8005ddc <_malloc_r+0xd0>
 8005d9a:	2a0b      	cmp	r2, #11
 8005d9c:	d917      	bls.n	8005dce <_malloc_r+0xc2>
 8005d9e:	1961      	adds	r1, r4, r5
 8005da0:	42a3      	cmp	r3, r4
 8005da2:	6025      	str	r5, [r4, #0]
 8005da4:	bf18      	it	ne
 8005da6:	6059      	strne	r1, [r3, #4]
 8005da8:	6863      	ldr	r3, [r4, #4]
 8005daa:	bf08      	it	eq
 8005dac:	f8c8 1000 	streq.w	r1, [r8]
 8005db0:	5162      	str	r2, [r4, r5]
 8005db2:	604b      	str	r3, [r1, #4]
 8005db4:	4630      	mov	r0, r6
 8005db6:	f000 f82f 	bl	8005e18 <__malloc_unlock>
 8005dba:	f104 000b 	add.w	r0, r4, #11
 8005dbe:	1d23      	adds	r3, r4, #4
 8005dc0:	f020 0007 	bic.w	r0, r0, #7
 8005dc4:	1ac2      	subs	r2, r0, r3
 8005dc6:	bf1c      	itt	ne
 8005dc8:	1a1b      	subne	r3, r3, r0
 8005dca:	50a3      	strne	r3, [r4, r2]
 8005dcc:	e7af      	b.n	8005d2e <_malloc_r+0x22>
 8005dce:	6862      	ldr	r2, [r4, #4]
 8005dd0:	42a3      	cmp	r3, r4
 8005dd2:	bf0c      	ite	eq
 8005dd4:	f8c8 2000 	streq.w	r2, [r8]
 8005dd8:	605a      	strne	r2, [r3, #4]
 8005dda:	e7eb      	b.n	8005db4 <_malloc_r+0xa8>
 8005ddc:	4623      	mov	r3, r4
 8005dde:	6864      	ldr	r4, [r4, #4]
 8005de0:	e7ae      	b.n	8005d40 <_malloc_r+0x34>
 8005de2:	463c      	mov	r4, r7
 8005de4:	687f      	ldr	r7, [r7, #4]
 8005de6:	e7b6      	b.n	8005d56 <_malloc_r+0x4a>
 8005de8:	461a      	mov	r2, r3
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	42a3      	cmp	r3, r4
 8005dee:	d1fb      	bne.n	8005de8 <_malloc_r+0xdc>
 8005df0:	2300      	movs	r3, #0
 8005df2:	6053      	str	r3, [r2, #4]
 8005df4:	e7de      	b.n	8005db4 <_malloc_r+0xa8>
 8005df6:	230c      	movs	r3, #12
 8005df8:	4630      	mov	r0, r6
 8005dfa:	6033      	str	r3, [r6, #0]
 8005dfc:	f000 f80c 	bl	8005e18 <__malloc_unlock>
 8005e00:	e794      	b.n	8005d2c <_malloc_r+0x20>
 8005e02:	6005      	str	r5, [r0, #0]
 8005e04:	e7d6      	b.n	8005db4 <_malloc_r+0xa8>
 8005e06:	bf00      	nop
 8005e08:	20000520 	.word	0x20000520

08005e0c <__malloc_lock>:
 8005e0c:	4801      	ldr	r0, [pc, #4]	@ (8005e14 <__malloc_lock+0x8>)
 8005e0e:	f7ff b8a8 	b.w	8004f62 <__retarget_lock_acquire_recursive>
 8005e12:	bf00      	nop
 8005e14:	20000518 	.word	0x20000518

08005e18 <__malloc_unlock>:
 8005e18:	4801      	ldr	r0, [pc, #4]	@ (8005e20 <__malloc_unlock+0x8>)
 8005e1a:	f7ff b8a3 	b.w	8004f64 <__retarget_lock_release_recursive>
 8005e1e:	bf00      	nop
 8005e20:	20000518 	.word	0x20000518

08005e24 <_Balloc>:
 8005e24:	b570      	push	{r4, r5, r6, lr}
 8005e26:	69c6      	ldr	r6, [r0, #28]
 8005e28:	4604      	mov	r4, r0
 8005e2a:	460d      	mov	r5, r1
 8005e2c:	b976      	cbnz	r6, 8005e4c <_Balloc+0x28>
 8005e2e:	2010      	movs	r0, #16
 8005e30:	f7ff ff42 	bl	8005cb8 <malloc>
 8005e34:	4602      	mov	r2, r0
 8005e36:	61e0      	str	r0, [r4, #28]
 8005e38:	b920      	cbnz	r0, 8005e44 <_Balloc+0x20>
 8005e3a:	216b      	movs	r1, #107	@ 0x6b
 8005e3c:	4b17      	ldr	r3, [pc, #92]	@ (8005e9c <_Balloc+0x78>)
 8005e3e:	4818      	ldr	r0, [pc, #96]	@ (8005ea0 <_Balloc+0x7c>)
 8005e40:	f000 fda8 	bl	8006994 <__assert_func>
 8005e44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e48:	6006      	str	r6, [r0, #0]
 8005e4a:	60c6      	str	r6, [r0, #12]
 8005e4c:	69e6      	ldr	r6, [r4, #28]
 8005e4e:	68f3      	ldr	r3, [r6, #12]
 8005e50:	b183      	cbz	r3, 8005e74 <_Balloc+0x50>
 8005e52:	69e3      	ldr	r3, [r4, #28]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e5a:	b9b8      	cbnz	r0, 8005e8c <_Balloc+0x68>
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	fa01 f605 	lsl.w	r6, r1, r5
 8005e62:	1d72      	adds	r2, r6, #5
 8005e64:	4620      	mov	r0, r4
 8005e66:	0092      	lsls	r2, r2, #2
 8005e68:	f000 fdb2 	bl	80069d0 <_calloc_r>
 8005e6c:	b160      	cbz	r0, 8005e88 <_Balloc+0x64>
 8005e6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005e72:	e00e      	b.n	8005e92 <_Balloc+0x6e>
 8005e74:	2221      	movs	r2, #33	@ 0x21
 8005e76:	2104      	movs	r1, #4
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f000 fda9 	bl	80069d0 <_calloc_r>
 8005e7e:	69e3      	ldr	r3, [r4, #28]
 8005e80:	60f0      	str	r0, [r6, #12]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e4      	bne.n	8005e52 <_Balloc+0x2e>
 8005e88:	2000      	movs	r0, #0
 8005e8a:	bd70      	pop	{r4, r5, r6, pc}
 8005e8c:	6802      	ldr	r2, [r0, #0]
 8005e8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e92:	2300      	movs	r3, #0
 8005e94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e98:	e7f7      	b.n	8005e8a <_Balloc+0x66>
 8005e9a:	bf00      	nop
 8005e9c:	08007157 	.word	0x08007157
 8005ea0:	080071d7 	.word	0x080071d7

08005ea4 <_Bfree>:
 8005ea4:	b570      	push	{r4, r5, r6, lr}
 8005ea6:	69c6      	ldr	r6, [r0, #28]
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	460c      	mov	r4, r1
 8005eac:	b976      	cbnz	r6, 8005ecc <_Bfree+0x28>
 8005eae:	2010      	movs	r0, #16
 8005eb0:	f7ff ff02 	bl	8005cb8 <malloc>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	61e8      	str	r0, [r5, #28]
 8005eb8:	b920      	cbnz	r0, 8005ec4 <_Bfree+0x20>
 8005eba:	218f      	movs	r1, #143	@ 0x8f
 8005ebc:	4b08      	ldr	r3, [pc, #32]	@ (8005ee0 <_Bfree+0x3c>)
 8005ebe:	4809      	ldr	r0, [pc, #36]	@ (8005ee4 <_Bfree+0x40>)
 8005ec0:	f000 fd68 	bl	8006994 <__assert_func>
 8005ec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ec8:	6006      	str	r6, [r0, #0]
 8005eca:	60c6      	str	r6, [r0, #12]
 8005ecc:	b13c      	cbz	r4, 8005ede <_Bfree+0x3a>
 8005ece:	69eb      	ldr	r3, [r5, #28]
 8005ed0:	6862      	ldr	r2, [r4, #4]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ed8:	6021      	str	r1, [r4, #0]
 8005eda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ede:	bd70      	pop	{r4, r5, r6, pc}
 8005ee0:	08007157 	.word	0x08007157
 8005ee4:	080071d7 	.word	0x080071d7

08005ee8 <__multadd>:
 8005ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eec:	4607      	mov	r7, r0
 8005eee:	460c      	mov	r4, r1
 8005ef0:	461e      	mov	r6, r3
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	690d      	ldr	r5, [r1, #16]
 8005ef6:	f101 0c14 	add.w	ip, r1, #20
 8005efa:	f8dc 3000 	ldr.w	r3, [ip]
 8005efe:	3001      	adds	r0, #1
 8005f00:	b299      	uxth	r1, r3
 8005f02:	fb02 6101 	mla	r1, r2, r1, r6
 8005f06:	0c1e      	lsrs	r6, r3, #16
 8005f08:	0c0b      	lsrs	r3, r1, #16
 8005f0a:	fb02 3306 	mla	r3, r2, r6, r3
 8005f0e:	b289      	uxth	r1, r1
 8005f10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f14:	4285      	cmp	r5, r0
 8005f16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f1a:	f84c 1b04 	str.w	r1, [ip], #4
 8005f1e:	dcec      	bgt.n	8005efa <__multadd+0x12>
 8005f20:	b30e      	cbz	r6, 8005f66 <__multadd+0x7e>
 8005f22:	68a3      	ldr	r3, [r4, #8]
 8005f24:	42ab      	cmp	r3, r5
 8005f26:	dc19      	bgt.n	8005f5c <__multadd+0x74>
 8005f28:	6861      	ldr	r1, [r4, #4]
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	3101      	adds	r1, #1
 8005f2e:	f7ff ff79 	bl	8005e24 <_Balloc>
 8005f32:	4680      	mov	r8, r0
 8005f34:	b928      	cbnz	r0, 8005f42 <__multadd+0x5a>
 8005f36:	4602      	mov	r2, r0
 8005f38:	21ba      	movs	r1, #186	@ 0xba
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f6c <__multadd+0x84>)
 8005f3c:	480c      	ldr	r0, [pc, #48]	@ (8005f70 <__multadd+0x88>)
 8005f3e:	f000 fd29 	bl	8006994 <__assert_func>
 8005f42:	6922      	ldr	r2, [r4, #16]
 8005f44:	f104 010c 	add.w	r1, r4, #12
 8005f48:	3202      	adds	r2, #2
 8005f4a:	0092      	lsls	r2, r2, #2
 8005f4c:	300c      	adds	r0, #12
 8005f4e:	f000 fd13 	bl	8006978 <memcpy>
 8005f52:	4621      	mov	r1, r4
 8005f54:	4638      	mov	r0, r7
 8005f56:	f7ff ffa5 	bl	8005ea4 <_Bfree>
 8005f5a:	4644      	mov	r4, r8
 8005f5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f60:	3501      	adds	r5, #1
 8005f62:	615e      	str	r6, [r3, #20]
 8005f64:	6125      	str	r5, [r4, #16]
 8005f66:	4620      	mov	r0, r4
 8005f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f6c:	080071c6 	.word	0x080071c6
 8005f70:	080071d7 	.word	0x080071d7

08005f74 <__hi0bits>:
 8005f74:	4603      	mov	r3, r0
 8005f76:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005f7a:	bf3a      	itte	cc
 8005f7c:	0403      	lslcc	r3, r0, #16
 8005f7e:	2010      	movcc	r0, #16
 8005f80:	2000      	movcs	r0, #0
 8005f82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f86:	bf3c      	itt	cc
 8005f88:	021b      	lslcc	r3, r3, #8
 8005f8a:	3008      	addcc	r0, #8
 8005f8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f90:	bf3c      	itt	cc
 8005f92:	011b      	lslcc	r3, r3, #4
 8005f94:	3004      	addcc	r0, #4
 8005f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f9a:	bf3c      	itt	cc
 8005f9c:	009b      	lslcc	r3, r3, #2
 8005f9e:	3002      	addcc	r0, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	db05      	blt.n	8005fb0 <__hi0bits+0x3c>
 8005fa4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005fa8:	f100 0001 	add.w	r0, r0, #1
 8005fac:	bf08      	it	eq
 8005fae:	2020      	moveq	r0, #32
 8005fb0:	4770      	bx	lr

08005fb2 <__lo0bits>:
 8005fb2:	6803      	ldr	r3, [r0, #0]
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	f013 0007 	ands.w	r0, r3, #7
 8005fba:	d00b      	beq.n	8005fd4 <__lo0bits+0x22>
 8005fbc:	07d9      	lsls	r1, r3, #31
 8005fbe:	d421      	bmi.n	8006004 <__lo0bits+0x52>
 8005fc0:	0798      	lsls	r0, r3, #30
 8005fc2:	bf49      	itett	mi
 8005fc4:	085b      	lsrmi	r3, r3, #1
 8005fc6:	089b      	lsrpl	r3, r3, #2
 8005fc8:	2001      	movmi	r0, #1
 8005fca:	6013      	strmi	r3, [r2, #0]
 8005fcc:	bf5c      	itt	pl
 8005fce:	2002      	movpl	r0, #2
 8005fd0:	6013      	strpl	r3, [r2, #0]
 8005fd2:	4770      	bx	lr
 8005fd4:	b299      	uxth	r1, r3
 8005fd6:	b909      	cbnz	r1, 8005fdc <__lo0bits+0x2a>
 8005fd8:	2010      	movs	r0, #16
 8005fda:	0c1b      	lsrs	r3, r3, #16
 8005fdc:	b2d9      	uxtb	r1, r3
 8005fde:	b909      	cbnz	r1, 8005fe4 <__lo0bits+0x32>
 8005fe0:	3008      	adds	r0, #8
 8005fe2:	0a1b      	lsrs	r3, r3, #8
 8005fe4:	0719      	lsls	r1, r3, #28
 8005fe6:	bf04      	itt	eq
 8005fe8:	091b      	lsreq	r3, r3, #4
 8005fea:	3004      	addeq	r0, #4
 8005fec:	0799      	lsls	r1, r3, #30
 8005fee:	bf04      	itt	eq
 8005ff0:	089b      	lsreq	r3, r3, #2
 8005ff2:	3002      	addeq	r0, #2
 8005ff4:	07d9      	lsls	r1, r3, #31
 8005ff6:	d403      	bmi.n	8006000 <__lo0bits+0x4e>
 8005ff8:	085b      	lsrs	r3, r3, #1
 8005ffa:	f100 0001 	add.w	r0, r0, #1
 8005ffe:	d003      	beq.n	8006008 <__lo0bits+0x56>
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	4770      	bx	lr
 8006004:	2000      	movs	r0, #0
 8006006:	4770      	bx	lr
 8006008:	2020      	movs	r0, #32
 800600a:	4770      	bx	lr

0800600c <__i2b>:
 800600c:	b510      	push	{r4, lr}
 800600e:	460c      	mov	r4, r1
 8006010:	2101      	movs	r1, #1
 8006012:	f7ff ff07 	bl	8005e24 <_Balloc>
 8006016:	4602      	mov	r2, r0
 8006018:	b928      	cbnz	r0, 8006026 <__i2b+0x1a>
 800601a:	f240 1145 	movw	r1, #325	@ 0x145
 800601e:	4b04      	ldr	r3, [pc, #16]	@ (8006030 <__i2b+0x24>)
 8006020:	4804      	ldr	r0, [pc, #16]	@ (8006034 <__i2b+0x28>)
 8006022:	f000 fcb7 	bl	8006994 <__assert_func>
 8006026:	2301      	movs	r3, #1
 8006028:	6144      	str	r4, [r0, #20]
 800602a:	6103      	str	r3, [r0, #16]
 800602c:	bd10      	pop	{r4, pc}
 800602e:	bf00      	nop
 8006030:	080071c6 	.word	0x080071c6
 8006034:	080071d7 	.word	0x080071d7

08006038 <__multiply>:
 8006038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603c:	4614      	mov	r4, r2
 800603e:	690a      	ldr	r2, [r1, #16]
 8006040:	6923      	ldr	r3, [r4, #16]
 8006042:	460f      	mov	r7, r1
 8006044:	429a      	cmp	r2, r3
 8006046:	bfa2      	ittt	ge
 8006048:	4623      	movge	r3, r4
 800604a:	460c      	movge	r4, r1
 800604c:	461f      	movge	r7, r3
 800604e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006052:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006056:	68a3      	ldr	r3, [r4, #8]
 8006058:	6861      	ldr	r1, [r4, #4]
 800605a:	eb0a 0609 	add.w	r6, sl, r9
 800605e:	42b3      	cmp	r3, r6
 8006060:	b085      	sub	sp, #20
 8006062:	bfb8      	it	lt
 8006064:	3101      	addlt	r1, #1
 8006066:	f7ff fedd 	bl	8005e24 <_Balloc>
 800606a:	b930      	cbnz	r0, 800607a <__multiply+0x42>
 800606c:	4602      	mov	r2, r0
 800606e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006072:	4b43      	ldr	r3, [pc, #268]	@ (8006180 <__multiply+0x148>)
 8006074:	4843      	ldr	r0, [pc, #268]	@ (8006184 <__multiply+0x14c>)
 8006076:	f000 fc8d 	bl	8006994 <__assert_func>
 800607a:	f100 0514 	add.w	r5, r0, #20
 800607e:	462b      	mov	r3, r5
 8006080:	2200      	movs	r2, #0
 8006082:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006086:	4543      	cmp	r3, r8
 8006088:	d321      	bcc.n	80060ce <__multiply+0x96>
 800608a:	f107 0114 	add.w	r1, r7, #20
 800608e:	f104 0214 	add.w	r2, r4, #20
 8006092:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006096:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800609a:	9302      	str	r3, [sp, #8]
 800609c:	1b13      	subs	r3, r2, r4
 800609e:	3b15      	subs	r3, #21
 80060a0:	f023 0303 	bic.w	r3, r3, #3
 80060a4:	3304      	adds	r3, #4
 80060a6:	f104 0715 	add.w	r7, r4, #21
 80060aa:	42ba      	cmp	r2, r7
 80060ac:	bf38      	it	cc
 80060ae:	2304      	movcc	r3, #4
 80060b0:	9301      	str	r3, [sp, #4]
 80060b2:	9b02      	ldr	r3, [sp, #8]
 80060b4:	9103      	str	r1, [sp, #12]
 80060b6:	428b      	cmp	r3, r1
 80060b8:	d80c      	bhi.n	80060d4 <__multiply+0x9c>
 80060ba:	2e00      	cmp	r6, #0
 80060bc:	dd03      	ble.n	80060c6 <__multiply+0x8e>
 80060be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d05a      	beq.n	800617c <__multiply+0x144>
 80060c6:	6106      	str	r6, [r0, #16]
 80060c8:	b005      	add	sp, #20
 80060ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ce:	f843 2b04 	str.w	r2, [r3], #4
 80060d2:	e7d8      	b.n	8006086 <__multiply+0x4e>
 80060d4:	f8b1 a000 	ldrh.w	sl, [r1]
 80060d8:	f1ba 0f00 	cmp.w	sl, #0
 80060dc:	d023      	beq.n	8006126 <__multiply+0xee>
 80060de:	46a9      	mov	r9, r5
 80060e0:	f04f 0c00 	mov.w	ip, #0
 80060e4:	f104 0e14 	add.w	lr, r4, #20
 80060e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80060ec:	f8d9 3000 	ldr.w	r3, [r9]
 80060f0:	fa1f fb87 	uxth.w	fp, r7
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	fb0a 330b 	mla	r3, sl, fp, r3
 80060fa:	4463      	add	r3, ip
 80060fc:	f8d9 c000 	ldr.w	ip, [r9]
 8006100:	0c3f      	lsrs	r7, r7, #16
 8006102:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006106:	fb0a c707 	mla	r7, sl, r7, ip
 800610a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800610e:	b29b      	uxth	r3, r3
 8006110:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006114:	4572      	cmp	r2, lr
 8006116:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800611a:	f849 3b04 	str.w	r3, [r9], #4
 800611e:	d8e3      	bhi.n	80060e8 <__multiply+0xb0>
 8006120:	9b01      	ldr	r3, [sp, #4]
 8006122:	f845 c003 	str.w	ip, [r5, r3]
 8006126:	9b03      	ldr	r3, [sp, #12]
 8006128:	3104      	adds	r1, #4
 800612a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800612e:	f1b9 0f00 	cmp.w	r9, #0
 8006132:	d021      	beq.n	8006178 <__multiply+0x140>
 8006134:	46ae      	mov	lr, r5
 8006136:	f04f 0a00 	mov.w	sl, #0
 800613a:	682b      	ldr	r3, [r5, #0]
 800613c:	f104 0c14 	add.w	ip, r4, #20
 8006140:	f8bc b000 	ldrh.w	fp, [ip]
 8006144:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006148:	b29b      	uxth	r3, r3
 800614a:	fb09 770b 	mla	r7, r9, fp, r7
 800614e:	4457      	add	r7, sl
 8006150:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006154:	f84e 3b04 	str.w	r3, [lr], #4
 8006158:	f85c 3b04 	ldr.w	r3, [ip], #4
 800615c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006160:	f8be 3000 	ldrh.w	r3, [lr]
 8006164:	4562      	cmp	r2, ip
 8006166:	fb09 330a 	mla	r3, r9, sl, r3
 800616a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800616e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006172:	d8e5      	bhi.n	8006140 <__multiply+0x108>
 8006174:	9f01      	ldr	r7, [sp, #4]
 8006176:	51eb      	str	r3, [r5, r7]
 8006178:	3504      	adds	r5, #4
 800617a:	e79a      	b.n	80060b2 <__multiply+0x7a>
 800617c:	3e01      	subs	r6, #1
 800617e:	e79c      	b.n	80060ba <__multiply+0x82>
 8006180:	080071c6 	.word	0x080071c6
 8006184:	080071d7 	.word	0x080071d7

08006188 <__pow5mult>:
 8006188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800618c:	4615      	mov	r5, r2
 800618e:	f012 0203 	ands.w	r2, r2, #3
 8006192:	4607      	mov	r7, r0
 8006194:	460e      	mov	r6, r1
 8006196:	d007      	beq.n	80061a8 <__pow5mult+0x20>
 8006198:	4c25      	ldr	r4, [pc, #148]	@ (8006230 <__pow5mult+0xa8>)
 800619a:	3a01      	subs	r2, #1
 800619c:	2300      	movs	r3, #0
 800619e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061a2:	f7ff fea1 	bl	8005ee8 <__multadd>
 80061a6:	4606      	mov	r6, r0
 80061a8:	10ad      	asrs	r5, r5, #2
 80061aa:	d03d      	beq.n	8006228 <__pow5mult+0xa0>
 80061ac:	69fc      	ldr	r4, [r7, #28]
 80061ae:	b97c      	cbnz	r4, 80061d0 <__pow5mult+0x48>
 80061b0:	2010      	movs	r0, #16
 80061b2:	f7ff fd81 	bl	8005cb8 <malloc>
 80061b6:	4602      	mov	r2, r0
 80061b8:	61f8      	str	r0, [r7, #28]
 80061ba:	b928      	cbnz	r0, 80061c8 <__pow5mult+0x40>
 80061bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80061c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006234 <__pow5mult+0xac>)
 80061c2:	481d      	ldr	r0, [pc, #116]	@ (8006238 <__pow5mult+0xb0>)
 80061c4:	f000 fbe6 	bl	8006994 <__assert_func>
 80061c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061cc:	6004      	str	r4, [r0, #0]
 80061ce:	60c4      	str	r4, [r0, #12]
 80061d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80061d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80061d8:	b94c      	cbnz	r4, 80061ee <__pow5mult+0x66>
 80061da:	f240 2171 	movw	r1, #625	@ 0x271
 80061de:	4638      	mov	r0, r7
 80061e0:	f7ff ff14 	bl	800600c <__i2b>
 80061e4:	2300      	movs	r3, #0
 80061e6:	4604      	mov	r4, r0
 80061e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80061ec:	6003      	str	r3, [r0, #0]
 80061ee:	f04f 0900 	mov.w	r9, #0
 80061f2:	07eb      	lsls	r3, r5, #31
 80061f4:	d50a      	bpl.n	800620c <__pow5mult+0x84>
 80061f6:	4631      	mov	r1, r6
 80061f8:	4622      	mov	r2, r4
 80061fa:	4638      	mov	r0, r7
 80061fc:	f7ff ff1c 	bl	8006038 <__multiply>
 8006200:	4680      	mov	r8, r0
 8006202:	4631      	mov	r1, r6
 8006204:	4638      	mov	r0, r7
 8006206:	f7ff fe4d 	bl	8005ea4 <_Bfree>
 800620a:	4646      	mov	r6, r8
 800620c:	106d      	asrs	r5, r5, #1
 800620e:	d00b      	beq.n	8006228 <__pow5mult+0xa0>
 8006210:	6820      	ldr	r0, [r4, #0]
 8006212:	b938      	cbnz	r0, 8006224 <__pow5mult+0x9c>
 8006214:	4622      	mov	r2, r4
 8006216:	4621      	mov	r1, r4
 8006218:	4638      	mov	r0, r7
 800621a:	f7ff ff0d 	bl	8006038 <__multiply>
 800621e:	6020      	str	r0, [r4, #0]
 8006220:	f8c0 9000 	str.w	r9, [r0]
 8006224:	4604      	mov	r4, r0
 8006226:	e7e4      	b.n	80061f2 <__pow5mult+0x6a>
 8006228:	4630      	mov	r0, r6
 800622a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800622e:	bf00      	nop
 8006230:	08007230 	.word	0x08007230
 8006234:	08007157 	.word	0x08007157
 8006238:	080071d7 	.word	0x080071d7

0800623c <__lshift>:
 800623c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006240:	460c      	mov	r4, r1
 8006242:	4607      	mov	r7, r0
 8006244:	4691      	mov	r9, r2
 8006246:	6923      	ldr	r3, [r4, #16]
 8006248:	6849      	ldr	r1, [r1, #4]
 800624a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800624e:	68a3      	ldr	r3, [r4, #8]
 8006250:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006254:	f108 0601 	add.w	r6, r8, #1
 8006258:	42b3      	cmp	r3, r6
 800625a:	db0b      	blt.n	8006274 <__lshift+0x38>
 800625c:	4638      	mov	r0, r7
 800625e:	f7ff fde1 	bl	8005e24 <_Balloc>
 8006262:	4605      	mov	r5, r0
 8006264:	b948      	cbnz	r0, 800627a <__lshift+0x3e>
 8006266:	4602      	mov	r2, r0
 8006268:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800626c:	4b27      	ldr	r3, [pc, #156]	@ (800630c <__lshift+0xd0>)
 800626e:	4828      	ldr	r0, [pc, #160]	@ (8006310 <__lshift+0xd4>)
 8006270:	f000 fb90 	bl	8006994 <__assert_func>
 8006274:	3101      	adds	r1, #1
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	e7ee      	b.n	8006258 <__lshift+0x1c>
 800627a:	2300      	movs	r3, #0
 800627c:	f100 0114 	add.w	r1, r0, #20
 8006280:	f100 0210 	add.w	r2, r0, #16
 8006284:	4618      	mov	r0, r3
 8006286:	4553      	cmp	r3, sl
 8006288:	db33      	blt.n	80062f2 <__lshift+0xb6>
 800628a:	6920      	ldr	r0, [r4, #16]
 800628c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006290:	f104 0314 	add.w	r3, r4, #20
 8006294:	f019 091f 	ands.w	r9, r9, #31
 8006298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800629c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062a0:	d02b      	beq.n	80062fa <__lshift+0xbe>
 80062a2:	468a      	mov	sl, r1
 80062a4:	2200      	movs	r2, #0
 80062a6:	f1c9 0e20 	rsb	lr, r9, #32
 80062aa:	6818      	ldr	r0, [r3, #0]
 80062ac:	fa00 f009 	lsl.w	r0, r0, r9
 80062b0:	4310      	orrs	r0, r2
 80062b2:	f84a 0b04 	str.w	r0, [sl], #4
 80062b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80062ba:	459c      	cmp	ip, r3
 80062bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80062c0:	d8f3      	bhi.n	80062aa <__lshift+0x6e>
 80062c2:	ebac 0304 	sub.w	r3, ip, r4
 80062c6:	3b15      	subs	r3, #21
 80062c8:	f023 0303 	bic.w	r3, r3, #3
 80062cc:	3304      	adds	r3, #4
 80062ce:	f104 0015 	add.w	r0, r4, #21
 80062d2:	4584      	cmp	ip, r0
 80062d4:	bf38      	it	cc
 80062d6:	2304      	movcc	r3, #4
 80062d8:	50ca      	str	r2, [r1, r3]
 80062da:	b10a      	cbz	r2, 80062e0 <__lshift+0xa4>
 80062dc:	f108 0602 	add.w	r6, r8, #2
 80062e0:	3e01      	subs	r6, #1
 80062e2:	4638      	mov	r0, r7
 80062e4:	4621      	mov	r1, r4
 80062e6:	612e      	str	r6, [r5, #16]
 80062e8:	f7ff fddc 	bl	8005ea4 <_Bfree>
 80062ec:	4628      	mov	r0, r5
 80062ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80062f6:	3301      	adds	r3, #1
 80062f8:	e7c5      	b.n	8006286 <__lshift+0x4a>
 80062fa:	3904      	subs	r1, #4
 80062fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006300:	459c      	cmp	ip, r3
 8006302:	f841 2f04 	str.w	r2, [r1, #4]!
 8006306:	d8f9      	bhi.n	80062fc <__lshift+0xc0>
 8006308:	e7ea      	b.n	80062e0 <__lshift+0xa4>
 800630a:	bf00      	nop
 800630c:	080071c6 	.word	0x080071c6
 8006310:	080071d7 	.word	0x080071d7

08006314 <__mcmp>:
 8006314:	4603      	mov	r3, r0
 8006316:	690a      	ldr	r2, [r1, #16]
 8006318:	6900      	ldr	r0, [r0, #16]
 800631a:	b530      	push	{r4, r5, lr}
 800631c:	1a80      	subs	r0, r0, r2
 800631e:	d10e      	bne.n	800633e <__mcmp+0x2a>
 8006320:	3314      	adds	r3, #20
 8006322:	3114      	adds	r1, #20
 8006324:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006328:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800632c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006330:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006334:	4295      	cmp	r5, r2
 8006336:	d003      	beq.n	8006340 <__mcmp+0x2c>
 8006338:	d205      	bcs.n	8006346 <__mcmp+0x32>
 800633a:	f04f 30ff 	mov.w	r0, #4294967295
 800633e:	bd30      	pop	{r4, r5, pc}
 8006340:	42a3      	cmp	r3, r4
 8006342:	d3f3      	bcc.n	800632c <__mcmp+0x18>
 8006344:	e7fb      	b.n	800633e <__mcmp+0x2a>
 8006346:	2001      	movs	r0, #1
 8006348:	e7f9      	b.n	800633e <__mcmp+0x2a>
	...

0800634c <__mdiff>:
 800634c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006350:	4689      	mov	r9, r1
 8006352:	4606      	mov	r6, r0
 8006354:	4611      	mov	r1, r2
 8006356:	4648      	mov	r0, r9
 8006358:	4614      	mov	r4, r2
 800635a:	f7ff ffdb 	bl	8006314 <__mcmp>
 800635e:	1e05      	subs	r5, r0, #0
 8006360:	d112      	bne.n	8006388 <__mdiff+0x3c>
 8006362:	4629      	mov	r1, r5
 8006364:	4630      	mov	r0, r6
 8006366:	f7ff fd5d 	bl	8005e24 <_Balloc>
 800636a:	4602      	mov	r2, r0
 800636c:	b928      	cbnz	r0, 800637a <__mdiff+0x2e>
 800636e:	f240 2137 	movw	r1, #567	@ 0x237
 8006372:	4b3e      	ldr	r3, [pc, #248]	@ (800646c <__mdiff+0x120>)
 8006374:	483e      	ldr	r0, [pc, #248]	@ (8006470 <__mdiff+0x124>)
 8006376:	f000 fb0d 	bl	8006994 <__assert_func>
 800637a:	2301      	movs	r3, #1
 800637c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006380:	4610      	mov	r0, r2
 8006382:	b003      	add	sp, #12
 8006384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006388:	bfbc      	itt	lt
 800638a:	464b      	movlt	r3, r9
 800638c:	46a1      	movlt	r9, r4
 800638e:	4630      	mov	r0, r6
 8006390:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006394:	bfba      	itte	lt
 8006396:	461c      	movlt	r4, r3
 8006398:	2501      	movlt	r5, #1
 800639a:	2500      	movge	r5, #0
 800639c:	f7ff fd42 	bl	8005e24 <_Balloc>
 80063a0:	4602      	mov	r2, r0
 80063a2:	b918      	cbnz	r0, 80063ac <__mdiff+0x60>
 80063a4:	f240 2145 	movw	r1, #581	@ 0x245
 80063a8:	4b30      	ldr	r3, [pc, #192]	@ (800646c <__mdiff+0x120>)
 80063aa:	e7e3      	b.n	8006374 <__mdiff+0x28>
 80063ac:	f100 0b14 	add.w	fp, r0, #20
 80063b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80063b4:	f109 0310 	add.w	r3, r9, #16
 80063b8:	60c5      	str	r5, [r0, #12]
 80063ba:	f04f 0c00 	mov.w	ip, #0
 80063be:	f109 0514 	add.w	r5, r9, #20
 80063c2:	46d9      	mov	r9, fp
 80063c4:	6926      	ldr	r6, [r4, #16]
 80063c6:	f104 0e14 	add.w	lr, r4, #20
 80063ca:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80063ce:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80063d2:	9301      	str	r3, [sp, #4]
 80063d4:	9b01      	ldr	r3, [sp, #4]
 80063d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80063da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80063de:	b281      	uxth	r1, r0
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	fa1f f38a 	uxth.w	r3, sl
 80063e6:	1a5b      	subs	r3, r3, r1
 80063e8:	0c00      	lsrs	r0, r0, #16
 80063ea:	4463      	add	r3, ip
 80063ec:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80063f0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80063fa:	4576      	cmp	r6, lr
 80063fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006400:	f849 3b04 	str.w	r3, [r9], #4
 8006404:	d8e6      	bhi.n	80063d4 <__mdiff+0x88>
 8006406:	1b33      	subs	r3, r6, r4
 8006408:	3b15      	subs	r3, #21
 800640a:	f023 0303 	bic.w	r3, r3, #3
 800640e:	3415      	adds	r4, #21
 8006410:	3304      	adds	r3, #4
 8006412:	42a6      	cmp	r6, r4
 8006414:	bf38      	it	cc
 8006416:	2304      	movcc	r3, #4
 8006418:	441d      	add	r5, r3
 800641a:	445b      	add	r3, fp
 800641c:	461e      	mov	r6, r3
 800641e:	462c      	mov	r4, r5
 8006420:	4544      	cmp	r4, r8
 8006422:	d30e      	bcc.n	8006442 <__mdiff+0xf6>
 8006424:	f108 0103 	add.w	r1, r8, #3
 8006428:	1b49      	subs	r1, r1, r5
 800642a:	f021 0103 	bic.w	r1, r1, #3
 800642e:	3d03      	subs	r5, #3
 8006430:	45a8      	cmp	r8, r5
 8006432:	bf38      	it	cc
 8006434:	2100      	movcc	r1, #0
 8006436:	440b      	add	r3, r1
 8006438:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800643c:	b199      	cbz	r1, 8006466 <__mdiff+0x11a>
 800643e:	6117      	str	r7, [r2, #16]
 8006440:	e79e      	b.n	8006380 <__mdiff+0x34>
 8006442:	46e6      	mov	lr, ip
 8006444:	f854 1b04 	ldr.w	r1, [r4], #4
 8006448:	fa1f fc81 	uxth.w	ip, r1
 800644c:	44f4      	add	ip, lr
 800644e:	0c08      	lsrs	r0, r1, #16
 8006450:	4471      	add	r1, lr
 8006452:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006456:	b289      	uxth	r1, r1
 8006458:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800645c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006460:	f846 1b04 	str.w	r1, [r6], #4
 8006464:	e7dc      	b.n	8006420 <__mdiff+0xd4>
 8006466:	3f01      	subs	r7, #1
 8006468:	e7e6      	b.n	8006438 <__mdiff+0xec>
 800646a:	bf00      	nop
 800646c:	080071c6 	.word	0x080071c6
 8006470:	080071d7 	.word	0x080071d7

08006474 <__d2b>:
 8006474:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006478:	2101      	movs	r1, #1
 800647a:	4690      	mov	r8, r2
 800647c:	4699      	mov	r9, r3
 800647e:	9e08      	ldr	r6, [sp, #32]
 8006480:	f7ff fcd0 	bl	8005e24 <_Balloc>
 8006484:	4604      	mov	r4, r0
 8006486:	b930      	cbnz	r0, 8006496 <__d2b+0x22>
 8006488:	4602      	mov	r2, r0
 800648a:	f240 310f 	movw	r1, #783	@ 0x30f
 800648e:	4b23      	ldr	r3, [pc, #140]	@ (800651c <__d2b+0xa8>)
 8006490:	4823      	ldr	r0, [pc, #140]	@ (8006520 <__d2b+0xac>)
 8006492:	f000 fa7f 	bl	8006994 <__assert_func>
 8006496:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800649a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800649e:	b10d      	cbz	r5, 80064a4 <__d2b+0x30>
 80064a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064a4:	9301      	str	r3, [sp, #4]
 80064a6:	f1b8 0300 	subs.w	r3, r8, #0
 80064aa:	d024      	beq.n	80064f6 <__d2b+0x82>
 80064ac:	4668      	mov	r0, sp
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	f7ff fd7f 	bl	8005fb2 <__lo0bits>
 80064b4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80064b8:	b1d8      	cbz	r0, 80064f2 <__d2b+0x7e>
 80064ba:	f1c0 0320 	rsb	r3, r0, #32
 80064be:	fa02 f303 	lsl.w	r3, r2, r3
 80064c2:	430b      	orrs	r3, r1
 80064c4:	40c2      	lsrs	r2, r0
 80064c6:	6163      	str	r3, [r4, #20]
 80064c8:	9201      	str	r2, [sp, #4]
 80064ca:	9b01      	ldr	r3, [sp, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	bf0c      	ite	eq
 80064d0:	2201      	moveq	r2, #1
 80064d2:	2202      	movne	r2, #2
 80064d4:	61a3      	str	r3, [r4, #24]
 80064d6:	6122      	str	r2, [r4, #16]
 80064d8:	b1ad      	cbz	r5, 8006506 <__d2b+0x92>
 80064da:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80064de:	4405      	add	r5, r0
 80064e0:	6035      	str	r5, [r6, #0]
 80064e2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80064e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064e8:	6018      	str	r0, [r3, #0]
 80064ea:	4620      	mov	r0, r4
 80064ec:	b002      	add	sp, #8
 80064ee:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80064f2:	6161      	str	r1, [r4, #20]
 80064f4:	e7e9      	b.n	80064ca <__d2b+0x56>
 80064f6:	a801      	add	r0, sp, #4
 80064f8:	f7ff fd5b 	bl	8005fb2 <__lo0bits>
 80064fc:	9b01      	ldr	r3, [sp, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	6163      	str	r3, [r4, #20]
 8006502:	3020      	adds	r0, #32
 8006504:	e7e7      	b.n	80064d6 <__d2b+0x62>
 8006506:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800650a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800650e:	6030      	str	r0, [r6, #0]
 8006510:	6918      	ldr	r0, [r3, #16]
 8006512:	f7ff fd2f 	bl	8005f74 <__hi0bits>
 8006516:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800651a:	e7e4      	b.n	80064e6 <__d2b+0x72>
 800651c:	080071c6 	.word	0x080071c6
 8006520:	080071d7 	.word	0x080071d7

08006524 <__ssputs_r>:
 8006524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006528:	461f      	mov	r7, r3
 800652a:	688e      	ldr	r6, [r1, #8]
 800652c:	4682      	mov	sl, r0
 800652e:	42be      	cmp	r6, r7
 8006530:	460c      	mov	r4, r1
 8006532:	4690      	mov	r8, r2
 8006534:	680b      	ldr	r3, [r1, #0]
 8006536:	d82d      	bhi.n	8006594 <__ssputs_r+0x70>
 8006538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800653c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006540:	d026      	beq.n	8006590 <__ssputs_r+0x6c>
 8006542:	6965      	ldr	r5, [r4, #20]
 8006544:	6909      	ldr	r1, [r1, #16]
 8006546:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800654a:	eba3 0901 	sub.w	r9, r3, r1
 800654e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006552:	1c7b      	adds	r3, r7, #1
 8006554:	444b      	add	r3, r9
 8006556:	106d      	asrs	r5, r5, #1
 8006558:	429d      	cmp	r5, r3
 800655a:	bf38      	it	cc
 800655c:	461d      	movcc	r5, r3
 800655e:	0553      	lsls	r3, r2, #21
 8006560:	d527      	bpl.n	80065b2 <__ssputs_r+0x8e>
 8006562:	4629      	mov	r1, r5
 8006564:	f7ff fbd2 	bl	8005d0c <_malloc_r>
 8006568:	4606      	mov	r6, r0
 800656a:	b360      	cbz	r0, 80065c6 <__ssputs_r+0xa2>
 800656c:	464a      	mov	r2, r9
 800656e:	6921      	ldr	r1, [r4, #16]
 8006570:	f000 fa02 	bl	8006978 <memcpy>
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800657a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800657e:	81a3      	strh	r3, [r4, #12]
 8006580:	6126      	str	r6, [r4, #16]
 8006582:	444e      	add	r6, r9
 8006584:	6026      	str	r6, [r4, #0]
 8006586:	463e      	mov	r6, r7
 8006588:	6165      	str	r5, [r4, #20]
 800658a:	eba5 0509 	sub.w	r5, r5, r9
 800658e:	60a5      	str	r5, [r4, #8]
 8006590:	42be      	cmp	r6, r7
 8006592:	d900      	bls.n	8006596 <__ssputs_r+0x72>
 8006594:	463e      	mov	r6, r7
 8006596:	4632      	mov	r2, r6
 8006598:	4641      	mov	r1, r8
 800659a:	6820      	ldr	r0, [r4, #0]
 800659c:	f000 f9c2 	bl	8006924 <memmove>
 80065a0:	2000      	movs	r0, #0
 80065a2:	68a3      	ldr	r3, [r4, #8]
 80065a4:	1b9b      	subs	r3, r3, r6
 80065a6:	60a3      	str	r3, [r4, #8]
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	4433      	add	r3, r6
 80065ac:	6023      	str	r3, [r4, #0]
 80065ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b2:	462a      	mov	r2, r5
 80065b4:	f000 fa32 	bl	8006a1c <_realloc_r>
 80065b8:	4606      	mov	r6, r0
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d1e0      	bne.n	8006580 <__ssputs_r+0x5c>
 80065be:	4650      	mov	r0, sl
 80065c0:	6921      	ldr	r1, [r4, #16]
 80065c2:	f7ff fb31 	bl	8005c28 <_free_r>
 80065c6:	230c      	movs	r3, #12
 80065c8:	f8ca 3000 	str.w	r3, [sl]
 80065cc:	89a3      	ldrh	r3, [r4, #12]
 80065ce:	f04f 30ff 	mov.w	r0, #4294967295
 80065d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065d6:	81a3      	strh	r3, [r4, #12]
 80065d8:	e7e9      	b.n	80065ae <__ssputs_r+0x8a>
	...

080065dc <_svfiprintf_r>:
 80065dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e0:	4698      	mov	r8, r3
 80065e2:	898b      	ldrh	r3, [r1, #12]
 80065e4:	4607      	mov	r7, r0
 80065e6:	061b      	lsls	r3, r3, #24
 80065e8:	460d      	mov	r5, r1
 80065ea:	4614      	mov	r4, r2
 80065ec:	b09d      	sub	sp, #116	@ 0x74
 80065ee:	d510      	bpl.n	8006612 <_svfiprintf_r+0x36>
 80065f0:	690b      	ldr	r3, [r1, #16]
 80065f2:	b973      	cbnz	r3, 8006612 <_svfiprintf_r+0x36>
 80065f4:	2140      	movs	r1, #64	@ 0x40
 80065f6:	f7ff fb89 	bl	8005d0c <_malloc_r>
 80065fa:	6028      	str	r0, [r5, #0]
 80065fc:	6128      	str	r0, [r5, #16]
 80065fe:	b930      	cbnz	r0, 800660e <_svfiprintf_r+0x32>
 8006600:	230c      	movs	r3, #12
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	f04f 30ff 	mov.w	r0, #4294967295
 8006608:	b01d      	add	sp, #116	@ 0x74
 800660a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660e:	2340      	movs	r3, #64	@ 0x40
 8006610:	616b      	str	r3, [r5, #20]
 8006612:	2300      	movs	r3, #0
 8006614:	9309      	str	r3, [sp, #36]	@ 0x24
 8006616:	2320      	movs	r3, #32
 8006618:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800661c:	2330      	movs	r3, #48	@ 0x30
 800661e:	f04f 0901 	mov.w	r9, #1
 8006622:	f8cd 800c 	str.w	r8, [sp, #12]
 8006626:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80067c0 <_svfiprintf_r+0x1e4>
 800662a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800662e:	4623      	mov	r3, r4
 8006630:	469a      	mov	sl, r3
 8006632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006636:	b10a      	cbz	r2, 800663c <_svfiprintf_r+0x60>
 8006638:	2a25      	cmp	r2, #37	@ 0x25
 800663a:	d1f9      	bne.n	8006630 <_svfiprintf_r+0x54>
 800663c:	ebba 0b04 	subs.w	fp, sl, r4
 8006640:	d00b      	beq.n	800665a <_svfiprintf_r+0x7e>
 8006642:	465b      	mov	r3, fp
 8006644:	4622      	mov	r2, r4
 8006646:	4629      	mov	r1, r5
 8006648:	4638      	mov	r0, r7
 800664a:	f7ff ff6b 	bl	8006524 <__ssputs_r>
 800664e:	3001      	adds	r0, #1
 8006650:	f000 80a7 	beq.w	80067a2 <_svfiprintf_r+0x1c6>
 8006654:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006656:	445a      	add	r2, fp
 8006658:	9209      	str	r2, [sp, #36]	@ 0x24
 800665a:	f89a 3000 	ldrb.w	r3, [sl]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 809f 	beq.w	80067a2 <_svfiprintf_r+0x1c6>
 8006664:	2300      	movs	r3, #0
 8006666:	f04f 32ff 	mov.w	r2, #4294967295
 800666a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800666e:	f10a 0a01 	add.w	sl, sl, #1
 8006672:	9304      	str	r3, [sp, #16]
 8006674:	9307      	str	r3, [sp, #28]
 8006676:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800667a:	931a      	str	r3, [sp, #104]	@ 0x68
 800667c:	4654      	mov	r4, sl
 800667e:	2205      	movs	r2, #5
 8006680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006684:	484e      	ldr	r0, [pc, #312]	@ (80067c0 <_svfiprintf_r+0x1e4>)
 8006686:	f7fe fc6e 	bl	8004f66 <memchr>
 800668a:	9a04      	ldr	r2, [sp, #16]
 800668c:	b9d8      	cbnz	r0, 80066c6 <_svfiprintf_r+0xea>
 800668e:	06d0      	lsls	r0, r2, #27
 8006690:	bf44      	itt	mi
 8006692:	2320      	movmi	r3, #32
 8006694:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006698:	0711      	lsls	r1, r2, #28
 800669a:	bf44      	itt	mi
 800669c:	232b      	movmi	r3, #43	@ 0x2b
 800669e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066a2:	f89a 3000 	ldrb.w	r3, [sl]
 80066a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80066a8:	d015      	beq.n	80066d6 <_svfiprintf_r+0xfa>
 80066aa:	4654      	mov	r4, sl
 80066ac:	2000      	movs	r0, #0
 80066ae:	f04f 0c0a 	mov.w	ip, #10
 80066b2:	9a07      	ldr	r2, [sp, #28]
 80066b4:	4621      	mov	r1, r4
 80066b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066ba:	3b30      	subs	r3, #48	@ 0x30
 80066bc:	2b09      	cmp	r3, #9
 80066be:	d94b      	bls.n	8006758 <_svfiprintf_r+0x17c>
 80066c0:	b1b0      	cbz	r0, 80066f0 <_svfiprintf_r+0x114>
 80066c2:	9207      	str	r2, [sp, #28]
 80066c4:	e014      	b.n	80066f0 <_svfiprintf_r+0x114>
 80066c6:	eba0 0308 	sub.w	r3, r0, r8
 80066ca:	fa09 f303 	lsl.w	r3, r9, r3
 80066ce:	4313      	orrs	r3, r2
 80066d0:	46a2      	mov	sl, r4
 80066d2:	9304      	str	r3, [sp, #16]
 80066d4:	e7d2      	b.n	800667c <_svfiprintf_r+0xa0>
 80066d6:	9b03      	ldr	r3, [sp, #12]
 80066d8:	1d19      	adds	r1, r3, #4
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	9103      	str	r1, [sp, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	bfbb      	ittet	lt
 80066e2:	425b      	neglt	r3, r3
 80066e4:	f042 0202 	orrlt.w	r2, r2, #2
 80066e8:	9307      	strge	r3, [sp, #28]
 80066ea:	9307      	strlt	r3, [sp, #28]
 80066ec:	bfb8      	it	lt
 80066ee:	9204      	strlt	r2, [sp, #16]
 80066f0:	7823      	ldrb	r3, [r4, #0]
 80066f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80066f4:	d10a      	bne.n	800670c <_svfiprintf_r+0x130>
 80066f6:	7863      	ldrb	r3, [r4, #1]
 80066f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80066fa:	d132      	bne.n	8006762 <_svfiprintf_r+0x186>
 80066fc:	9b03      	ldr	r3, [sp, #12]
 80066fe:	3402      	adds	r4, #2
 8006700:	1d1a      	adds	r2, r3, #4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	9203      	str	r2, [sp, #12]
 8006706:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800670a:	9305      	str	r3, [sp, #20]
 800670c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80067c4 <_svfiprintf_r+0x1e8>
 8006710:	2203      	movs	r2, #3
 8006712:	4650      	mov	r0, sl
 8006714:	7821      	ldrb	r1, [r4, #0]
 8006716:	f7fe fc26 	bl	8004f66 <memchr>
 800671a:	b138      	cbz	r0, 800672c <_svfiprintf_r+0x150>
 800671c:	2240      	movs	r2, #64	@ 0x40
 800671e:	9b04      	ldr	r3, [sp, #16]
 8006720:	eba0 000a 	sub.w	r0, r0, sl
 8006724:	4082      	lsls	r2, r0
 8006726:	4313      	orrs	r3, r2
 8006728:	3401      	adds	r4, #1
 800672a:	9304      	str	r3, [sp, #16]
 800672c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006730:	2206      	movs	r2, #6
 8006732:	4825      	ldr	r0, [pc, #148]	@ (80067c8 <_svfiprintf_r+0x1ec>)
 8006734:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006738:	f7fe fc15 	bl	8004f66 <memchr>
 800673c:	2800      	cmp	r0, #0
 800673e:	d036      	beq.n	80067ae <_svfiprintf_r+0x1d2>
 8006740:	4b22      	ldr	r3, [pc, #136]	@ (80067cc <_svfiprintf_r+0x1f0>)
 8006742:	bb1b      	cbnz	r3, 800678c <_svfiprintf_r+0x1b0>
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	3307      	adds	r3, #7
 8006748:	f023 0307 	bic.w	r3, r3, #7
 800674c:	3308      	adds	r3, #8
 800674e:	9303      	str	r3, [sp, #12]
 8006750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006752:	4433      	add	r3, r6
 8006754:	9309      	str	r3, [sp, #36]	@ 0x24
 8006756:	e76a      	b.n	800662e <_svfiprintf_r+0x52>
 8006758:	460c      	mov	r4, r1
 800675a:	2001      	movs	r0, #1
 800675c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006760:	e7a8      	b.n	80066b4 <_svfiprintf_r+0xd8>
 8006762:	2300      	movs	r3, #0
 8006764:	f04f 0c0a 	mov.w	ip, #10
 8006768:	4619      	mov	r1, r3
 800676a:	3401      	adds	r4, #1
 800676c:	9305      	str	r3, [sp, #20]
 800676e:	4620      	mov	r0, r4
 8006770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006774:	3a30      	subs	r2, #48	@ 0x30
 8006776:	2a09      	cmp	r2, #9
 8006778:	d903      	bls.n	8006782 <_svfiprintf_r+0x1a6>
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0c6      	beq.n	800670c <_svfiprintf_r+0x130>
 800677e:	9105      	str	r1, [sp, #20]
 8006780:	e7c4      	b.n	800670c <_svfiprintf_r+0x130>
 8006782:	4604      	mov	r4, r0
 8006784:	2301      	movs	r3, #1
 8006786:	fb0c 2101 	mla	r1, ip, r1, r2
 800678a:	e7f0      	b.n	800676e <_svfiprintf_r+0x192>
 800678c:	ab03      	add	r3, sp, #12
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	462a      	mov	r2, r5
 8006792:	4638      	mov	r0, r7
 8006794:	4b0e      	ldr	r3, [pc, #56]	@ (80067d0 <_svfiprintf_r+0x1f4>)
 8006796:	a904      	add	r1, sp, #16
 8006798:	f7fd fe6e 	bl	8004478 <_printf_float>
 800679c:	1c42      	adds	r2, r0, #1
 800679e:	4606      	mov	r6, r0
 80067a0:	d1d6      	bne.n	8006750 <_svfiprintf_r+0x174>
 80067a2:	89ab      	ldrh	r3, [r5, #12]
 80067a4:	065b      	lsls	r3, r3, #25
 80067a6:	f53f af2d 	bmi.w	8006604 <_svfiprintf_r+0x28>
 80067aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067ac:	e72c      	b.n	8006608 <_svfiprintf_r+0x2c>
 80067ae:	ab03      	add	r3, sp, #12
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	462a      	mov	r2, r5
 80067b4:	4638      	mov	r0, r7
 80067b6:	4b06      	ldr	r3, [pc, #24]	@ (80067d0 <_svfiprintf_r+0x1f4>)
 80067b8:	a904      	add	r1, sp, #16
 80067ba:	f7fe f8fb 	bl	80049b4 <_printf_i>
 80067be:	e7ed      	b.n	800679c <_svfiprintf_r+0x1c0>
 80067c0:	08007330 	.word	0x08007330
 80067c4:	08007336 	.word	0x08007336
 80067c8:	0800733a 	.word	0x0800733a
 80067cc:	08004479 	.word	0x08004479
 80067d0:	08006525 	.word	0x08006525

080067d4 <__sflush_r>:
 80067d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	0716      	lsls	r6, r2, #28
 80067dc:	4605      	mov	r5, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	d454      	bmi.n	800688c <__sflush_r+0xb8>
 80067e2:	684b      	ldr	r3, [r1, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	dc02      	bgt.n	80067ee <__sflush_r+0x1a>
 80067e8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	dd48      	ble.n	8006880 <__sflush_r+0xac>
 80067ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067f0:	2e00      	cmp	r6, #0
 80067f2:	d045      	beq.n	8006880 <__sflush_r+0xac>
 80067f4:	2300      	movs	r3, #0
 80067f6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80067fa:	682f      	ldr	r7, [r5, #0]
 80067fc:	6a21      	ldr	r1, [r4, #32]
 80067fe:	602b      	str	r3, [r5, #0]
 8006800:	d030      	beq.n	8006864 <__sflush_r+0x90>
 8006802:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	0759      	lsls	r1, r3, #29
 8006808:	d505      	bpl.n	8006816 <__sflush_r+0x42>
 800680a:	6863      	ldr	r3, [r4, #4]
 800680c:	1ad2      	subs	r2, r2, r3
 800680e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006810:	b10b      	cbz	r3, 8006816 <__sflush_r+0x42>
 8006812:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006814:	1ad2      	subs	r2, r2, r3
 8006816:	2300      	movs	r3, #0
 8006818:	4628      	mov	r0, r5
 800681a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800681c:	6a21      	ldr	r1, [r4, #32]
 800681e:	47b0      	blx	r6
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	89a3      	ldrh	r3, [r4, #12]
 8006824:	d106      	bne.n	8006834 <__sflush_r+0x60>
 8006826:	6829      	ldr	r1, [r5, #0]
 8006828:	291d      	cmp	r1, #29
 800682a:	d82b      	bhi.n	8006884 <__sflush_r+0xb0>
 800682c:	4a28      	ldr	r2, [pc, #160]	@ (80068d0 <__sflush_r+0xfc>)
 800682e:	410a      	asrs	r2, r1
 8006830:	07d6      	lsls	r6, r2, #31
 8006832:	d427      	bmi.n	8006884 <__sflush_r+0xb0>
 8006834:	2200      	movs	r2, #0
 8006836:	6062      	str	r2, [r4, #4]
 8006838:	6922      	ldr	r2, [r4, #16]
 800683a:	04d9      	lsls	r1, r3, #19
 800683c:	6022      	str	r2, [r4, #0]
 800683e:	d504      	bpl.n	800684a <__sflush_r+0x76>
 8006840:	1c42      	adds	r2, r0, #1
 8006842:	d101      	bne.n	8006848 <__sflush_r+0x74>
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	b903      	cbnz	r3, 800684a <__sflush_r+0x76>
 8006848:	6560      	str	r0, [r4, #84]	@ 0x54
 800684a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800684c:	602f      	str	r7, [r5, #0]
 800684e:	b1b9      	cbz	r1, 8006880 <__sflush_r+0xac>
 8006850:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006854:	4299      	cmp	r1, r3
 8006856:	d002      	beq.n	800685e <__sflush_r+0x8a>
 8006858:	4628      	mov	r0, r5
 800685a:	f7ff f9e5 	bl	8005c28 <_free_r>
 800685e:	2300      	movs	r3, #0
 8006860:	6363      	str	r3, [r4, #52]	@ 0x34
 8006862:	e00d      	b.n	8006880 <__sflush_r+0xac>
 8006864:	2301      	movs	r3, #1
 8006866:	4628      	mov	r0, r5
 8006868:	47b0      	blx	r6
 800686a:	4602      	mov	r2, r0
 800686c:	1c50      	adds	r0, r2, #1
 800686e:	d1c9      	bne.n	8006804 <__sflush_r+0x30>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0c6      	beq.n	8006804 <__sflush_r+0x30>
 8006876:	2b1d      	cmp	r3, #29
 8006878:	d001      	beq.n	800687e <__sflush_r+0xaa>
 800687a:	2b16      	cmp	r3, #22
 800687c:	d11d      	bne.n	80068ba <__sflush_r+0xe6>
 800687e:	602f      	str	r7, [r5, #0]
 8006880:	2000      	movs	r0, #0
 8006882:	e021      	b.n	80068c8 <__sflush_r+0xf4>
 8006884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006888:	b21b      	sxth	r3, r3
 800688a:	e01a      	b.n	80068c2 <__sflush_r+0xee>
 800688c:	690f      	ldr	r7, [r1, #16]
 800688e:	2f00      	cmp	r7, #0
 8006890:	d0f6      	beq.n	8006880 <__sflush_r+0xac>
 8006892:	0793      	lsls	r3, r2, #30
 8006894:	bf18      	it	ne
 8006896:	2300      	movne	r3, #0
 8006898:	680e      	ldr	r6, [r1, #0]
 800689a:	bf08      	it	eq
 800689c:	694b      	ldreq	r3, [r1, #20]
 800689e:	1bf6      	subs	r6, r6, r7
 80068a0:	600f      	str	r7, [r1, #0]
 80068a2:	608b      	str	r3, [r1, #8]
 80068a4:	2e00      	cmp	r6, #0
 80068a6:	ddeb      	ble.n	8006880 <__sflush_r+0xac>
 80068a8:	4633      	mov	r3, r6
 80068aa:	463a      	mov	r2, r7
 80068ac:	4628      	mov	r0, r5
 80068ae:	6a21      	ldr	r1, [r4, #32]
 80068b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80068b4:	47e0      	blx	ip
 80068b6:	2800      	cmp	r0, #0
 80068b8:	dc07      	bgt.n	80068ca <__sflush_r+0xf6>
 80068ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068c2:	f04f 30ff 	mov.w	r0, #4294967295
 80068c6:	81a3      	strh	r3, [r4, #12]
 80068c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ca:	4407      	add	r7, r0
 80068cc:	1a36      	subs	r6, r6, r0
 80068ce:	e7e9      	b.n	80068a4 <__sflush_r+0xd0>
 80068d0:	dfbffffe 	.word	0xdfbffffe

080068d4 <_fflush_r>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	690b      	ldr	r3, [r1, #16]
 80068d8:	4605      	mov	r5, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	b913      	cbnz	r3, 80068e4 <_fflush_r+0x10>
 80068de:	2500      	movs	r5, #0
 80068e0:	4628      	mov	r0, r5
 80068e2:	bd38      	pop	{r3, r4, r5, pc}
 80068e4:	b118      	cbz	r0, 80068ee <_fflush_r+0x1a>
 80068e6:	6a03      	ldr	r3, [r0, #32]
 80068e8:	b90b      	cbnz	r3, 80068ee <_fflush_r+0x1a>
 80068ea:	f7fe fa0f 	bl	8004d0c <__sinit>
 80068ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0f3      	beq.n	80068de <_fflush_r+0xa>
 80068f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80068f8:	07d0      	lsls	r0, r2, #31
 80068fa:	d404      	bmi.n	8006906 <_fflush_r+0x32>
 80068fc:	0599      	lsls	r1, r3, #22
 80068fe:	d402      	bmi.n	8006906 <_fflush_r+0x32>
 8006900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006902:	f7fe fb2e 	bl	8004f62 <__retarget_lock_acquire_recursive>
 8006906:	4628      	mov	r0, r5
 8006908:	4621      	mov	r1, r4
 800690a:	f7ff ff63 	bl	80067d4 <__sflush_r>
 800690e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006910:	4605      	mov	r5, r0
 8006912:	07da      	lsls	r2, r3, #31
 8006914:	d4e4      	bmi.n	80068e0 <_fflush_r+0xc>
 8006916:	89a3      	ldrh	r3, [r4, #12]
 8006918:	059b      	lsls	r3, r3, #22
 800691a:	d4e1      	bmi.n	80068e0 <_fflush_r+0xc>
 800691c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800691e:	f7fe fb21 	bl	8004f64 <__retarget_lock_release_recursive>
 8006922:	e7dd      	b.n	80068e0 <_fflush_r+0xc>

08006924 <memmove>:
 8006924:	4288      	cmp	r0, r1
 8006926:	b510      	push	{r4, lr}
 8006928:	eb01 0402 	add.w	r4, r1, r2
 800692c:	d902      	bls.n	8006934 <memmove+0x10>
 800692e:	4284      	cmp	r4, r0
 8006930:	4623      	mov	r3, r4
 8006932:	d807      	bhi.n	8006944 <memmove+0x20>
 8006934:	1e43      	subs	r3, r0, #1
 8006936:	42a1      	cmp	r1, r4
 8006938:	d008      	beq.n	800694c <memmove+0x28>
 800693a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800693e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006942:	e7f8      	b.n	8006936 <memmove+0x12>
 8006944:	4601      	mov	r1, r0
 8006946:	4402      	add	r2, r0
 8006948:	428a      	cmp	r2, r1
 800694a:	d100      	bne.n	800694e <memmove+0x2a>
 800694c:	bd10      	pop	{r4, pc}
 800694e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006952:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006956:	e7f7      	b.n	8006948 <memmove+0x24>

08006958 <_sbrk_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	2300      	movs	r3, #0
 800695c:	4d05      	ldr	r5, [pc, #20]	@ (8006974 <_sbrk_r+0x1c>)
 800695e:	4604      	mov	r4, r0
 8006960:	4608      	mov	r0, r1
 8006962:	602b      	str	r3, [r5, #0]
 8006964:	f7fb fed2 	bl	800270c <_sbrk>
 8006968:	1c43      	adds	r3, r0, #1
 800696a:	d102      	bne.n	8006972 <_sbrk_r+0x1a>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	b103      	cbz	r3, 8006972 <_sbrk_r+0x1a>
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	bd38      	pop	{r3, r4, r5, pc}
 8006974:	20000514 	.word	0x20000514

08006978 <memcpy>:
 8006978:	440a      	add	r2, r1
 800697a:	4291      	cmp	r1, r2
 800697c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006980:	d100      	bne.n	8006984 <memcpy+0xc>
 8006982:	4770      	bx	lr
 8006984:	b510      	push	{r4, lr}
 8006986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800698a:	4291      	cmp	r1, r2
 800698c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006990:	d1f9      	bne.n	8006986 <memcpy+0xe>
 8006992:	bd10      	pop	{r4, pc}

08006994 <__assert_func>:
 8006994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006996:	4614      	mov	r4, r2
 8006998:	461a      	mov	r2, r3
 800699a:	4b09      	ldr	r3, [pc, #36]	@ (80069c0 <__assert_func+0x2c>)
 800699c:	4605      	mov	r5, r0
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68d8      	ldr	r0, [r3, #12]
 80069a2:	b954      	cbnz	r4, 80069ba <__assert_func+0x26>
 80069a4:	4b07      	ldr	r3, [pc, #28]	@ (80069c4 <__assert_func+0x30>)
 80069a6:	461c      	mov	r4, r3
 80069a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80069ac:	9100      	str	r1, [sp, #0]
 80069ae:	462b      	mov	r3, r5
 80069b0:	4905      	ldr	r1, [pc, #20]	@ (80069c8 <__assert_func+0x34>)
 80069b2:	f000 f86f 	bl	8006a94 <fiprintf>
 80069b6:	f000 f87f 	bl	8006ab8 <abort>
 80069ba:	4b04      	ldr	r3, [pc, #16]	@ (80069cc <__assert_func+0x38>)
 80069bc:	e7f4      	b.n	80069a8 <__assert_func+0x14>
 80069be:	bf00      	nop
 80069c0:	20000078 	.word	0x20000078
 80069c4:	08007386 	.word	0x08007386
 80069c8:	08007358 	.word	0x08007358
 80069cc:	0800734b 	.word	0x0800734b

080069d0 <_calloc_r>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	fba1 5402 	umull	r5, r4, r1, r2
 80069d6:	b93c      	cbnz	r4, 80069e8 <_calloc_r+0x18>
 80069d8:	4629      	mov	r1, r5
 80069da:	f7ff f997 	bl	8005d0c <_malloc_r>
 80069de:	4606      	mov	r6, r0
 80069e0:	b928      	cbnz	r0, 80069ee <_calloc_r+0x1e>
 80069e2:	2600      	movs	r6, #0
 80069e4:	4630      	mov	r0, r6
 80069e6:	bd70      	pop	{r4, r5, r6, pc}
 80069e8:	220c      	movs	r2, #12
 80069ea:	6002      	str	r2, [r0, #0]
 80069ec:	e7f9      	b.n	80069e2 <_calloc_r+0x12>
 80069ee:	462a      	mov	r2, r5
 80069f0:	4621      	mov	r1, r4
 80069f2:	f7fe fa38 	bl	8004e66 <memset>
 80069f6:	e7f5      	b.n	80069e4 <_calloc_r+0x14>

080069f8 <__ascii_mbtowc>:
 80069f8:	b082      	sub	sp, #8
 80069fa:	b901      	cbnz	r1, 80069fe <__ascii_mbtowc+0x6>
 80069fc:	a901      	add	r1, sp, #4
 80069fe:	b142      	cbz	r2, 8006a12 <__ascii_mbtowc+0x1a>
 8006a00:	b14b      	cbz	r3, 8006a16 <__ascii_mbtowc+0x1e>
 8006a02:	7813      	ldrb	r3, [r2, #0]
 8006a04:	600b      	str	r3, [r1, #0]
 8006a06:	7812      	ldrb	r2, [r2, #0]
 8006a08:	1e10      	subs	r0, r2, #0
 8006a0a:	bf18      	it	ne
 8006a0c:	2001      	movne	r0, #1
 8006a0e:	b002      	add	sp, #8
 8006a10:	4770      	bx	lr
 8006a12:	4610      	mov	r0, r2
 8006a14:	e7fb      	b.n	8006a0e <__ascii_mbtowc+0x16>
 8006a16:	f06f 0001 	mvn.w	r0, #1
 8006a1a:	e7f8      	b.n	8006a0e <__ascii_mbtowc+0x16>

08006a1c <_realloc_r>:
 8006a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a20:	4680      	mov	r8, r0
 8006a22:	4615      	mov	r5, r2
 8006a24:	460c      	mov	r4, r1
 8006a26:	b921      	cbnz	r1, 8006a32 <_realloc_r+0x16>
 8006a28:	4611      	mov	r1, r2
 8006a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2e:	f7ff b96d 	b.w	8005d0c <_malloc_r>
 8006a32:	b92a      	cbnz	r2, 8006a40 <_realloc_r+0x24>
 8006a34:	f7ff f8f8 	bl	8005c28 <_free_r>
 8006a38:	2400      	movs	r4, #0
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a40:	f000 f841 	bl	8006ac6 <_malloc_usable_size_r>
 8006a44:	4285      	cmp	r5, r0
 8006a46:	4606      	mov	r6, r0
 8006a48:	d802      	bhi.n	8006a50 <_realloc_r+0x34>
 8006a4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006a4e:	d8f4      	bhi.n	8006a3a <_realloc_r+0x1e>
 8006a50:	4629      	mov	r1, r5
 8006a52:	4640      	mov	r0, r8
 8006a54:	f7ff f95a 	bl	8005d0c <_malloc_r>
 8006a58:	4607      	mov	r7, r0
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d0ec      	beq.n	8006a38 <_realloc_r+0x1c>
 8006a5e:	42b5      	cmp	r5, r6
 8006a60:	462a      	mov	r2, r5
 8006a62:	4621      	mov	r1, r4
 8006a64:	bf28      	it	cs
 8006a66:	4632      	movcs	r2, r6
 8006a68:	f7ff ff86 	bl	8006978 <memcpy>
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	4640      	mov	r0, r8
 8006a70:	f7ff f8da 	bl	8005c28 <_free_r>
 8006a74:	463c      	mov	r4, r7
 8006a76:	e7e0      	b.n	8006a3a <_realloc_r+0x1e>

08006a78 <__ascii_wctomb>:
 8006a78:	4603      	mov	r3, r0
 8006a7a:	4608      	mov	r0, r1
 8006a7c:	b141      	cbz	r1, 8006a90 <__ascii_wctomb+0x18>
 8006a7e:	2aff      	cmp	r2, #255	@ 0xff
 8006a80:	d904      	bls.n	8006a8c <__ascii_wctomb+0x14>
 8006a82:	228a      	movs	r2, #138	@ 0x8a
 8006a84:	f04f 30ff 	mov.w	r0, #4294967295
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	4770      	bx	lr
 8006a8c:	2001      	movs	r0, #1
 8006a8e:	700a      	strb	r2, [r1, #0]
 8006a90:	4770      	bx	lr
	...

08006a94 <fiprintf>:
 8006a94:	b40e      	push	{r1, r2, r3}
 8006a96:	b503      	push	{r0, r1, lr}
 8006a98:	4601      	mov	r1, r0
 8006a9a:	ab03      	add	r3, sp, #12
 8006a9c:	4805      	ldr	r0, [pc, #20]	@ (8006ab4 <fiprintf+0x20>)
 8006a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aa2:	6800      	ldr	r0, [r0, #0]
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	f000 f83d 	bl	8006b24 <_vfiprintf_r>
 8006aaa:	b002      	add	sp, #8
 8006aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ab0:	b003      	add	sp, #12
 8006ab2:	4770      	bx	lr
 8006ab4:	20000078 	.word	0x20000078

08006ab8 <abort>:
 8006ab8:	2006      	movs	r0, #6
 8006aba:	b508      	push	{r3, lr}
 8006abc:	f000 fa06 	bl	8006ecc <raise>
 8006ac0:	2001      	movs	r0, #1
 8006ac2:	f7fb fdae 	bl	8002622 <_exit>

08006ac6 <_malloc_usable_size_r>:
 8006ac6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aca:	1f18      	subs	r0, r3, #4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	bfbc      	itt	lt
 8006ad0:	580b      	ldrlt	r3, [r1, r0]
 8006ad2:	18c0      	addlt	r0, r0, r3
 8006ad4:	4770      	bx	lr

08006ad6 <__sfputc_r>:
 8006ad6:	6893      	ldr	r3, [r2, #8]
 8006ad8:	b410      	push	{r4}
 8006ada:	3b01      	subs	r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	6093      	str	r3, [r2, #8]
 8006ae0:	da07      	bge.n	8006af2 <__sfputc_r+0x1c>
 8006ae2:	6994      	ldr	r4, [r2, #24]
 8006ae4:	42a3      	cmp	r3, r4
 8006ae6:	db01      	blt.n	8006aec <__sfputc_r+0x16>
 8006ae8:	290a      	cmp	r1, #10
 8006aea:	d102      	bne.n	8006af2 <__sfputc_r+0x1c>
 8006aec:	bc10      	pop	{r4}
 8006aee:	f000 b931 	b.w	8006d54 <__swbuf_r>
 8006af2:	6813      	ldr	r3, [r2, #0]
 8006af4:	1c58      	adds	r0, r3, #1
 8006af6:	6010      	str	r0, [r2, #0]
 8006af8:	7019      	strb	r1, [r3, #0]
 8006afa:	4608      	mov	r0, r1
 8006afc:	bc10      	pop	{r4}
 8006afe:	4770      	bx	lr

08006b00 <__sfputs_r>:
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b02:	4606      	mov	r6, r0
 8006b04:	460f      	mov	r7, r1
 8006b06:	4614      	mov	r4, r2
 8006b08:	18d5      	adds	r5, r2, r3
 8006b0a:	42ac      	cmp	r4, r5
 8006b0c:	d101      	bne.n	8006b12 <__sfputs_r+0x12>
 8006b0e:	2000      	movs	r0, #0
 8006b10:	e007      	b.n	8006b22 <__sfputs_r+0x22>
 8006b12:	463a      	mov	r2, r7
 8006b14:	4630      	mov	r0, r6
 8006b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b1a:	f7ff ffdc 	bl	8006ad6 <__sfputc_r>
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	d1f3      	bne.n	8006b0a <__sfputs_r+0xa>
 8006b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b24 <_vfiprintf_r>:
 8006b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b28:	460d      	mov	r5, r1
 8006b2a:	4614      	mov	r4, r2
 8006b2c:	4698      	mov	r8, r3
 8006b2e:	4606      	mov	r6, r0
 8006b30:	b09d      	sub	sp, #116	@ 0x74
 8006b32:	b118      	cbz	r0, 8006b3c <_vfiprintf_r+0x18>
 8006b34:	6a03      	ldr	r3, [r0, #32]
 8006b36:	b90b      	cbnz	r3, 8006b3c <_vfiprintf_r+0x18>
 8006b38:	f7fe f8e8 	bl	8004d0c <__sinit>
 8006b3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b3e:	07d9      	lsls	r1, r3, #31
 8006b40:	d405      	bmi.n	8006b4e <_vfiprintf_r+0x2a>
 8006b42:	89ab      	ldrh	r3, [r5, #12]
 8006b44:	059a      	lsls	r2, r3, #22
 8006b46:	d402      	bmi.n	8006b4e <_vfiprintf_r+0x2a>
 8006b48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b4a:	f7fe fa0a 	bl	8004f62 <__retarget_lock_acquire_recursive>
 8006b4e:	89ab      	ldrh	r3, [r5, #12]
 8006b50:	071b      	lsls	r3, r3, #28
 8006b52:	d501      	bpl.n	8006b58 <_vfiprintf_r+0x34>
 8006b54:	692b      	ldr	r3, [r5, #16]
 8006b56:	b99b      	cbnz	r3, 8006b80 <_vfiprintf_r+0x5c>
 8006b58:	4629      	mov	r1, r5
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	f000 f938 	bl	8006dd0 <__swsetup_r>
 8006b60:	b170      	cbz	r0, 8006b80 <_vfiprintf_r+0x5c>
 8006b62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b64:	07dc      	lsls	r4, r3, #31
 8006b66:	d504      	bpl.n	8006b72 <_vfiprintf_r+0x4e>
 8006b68:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6c:	b01d      	add	sp, #116	@ 0x74
 8006b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b72:	89ab      	ldrh	r3, [r5, #12]
 8006b74:	0598      	lsls	r0, r3, #22
 8006b76:	d4f7      	bmi.n	8006b68 <_vfiprintf_r+0x44>
 8006b78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b7a:	f7fe f9f3 	bl	8004f64 <__retarget_lock_release_recursive>
 8006b7e:	e7f3      	b.n	8006b68 <_vfiprintf_r+0x44>
 8006b80:	2300      	movs	r3, #0
 8006b82:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b84:	2320      	movs	r3, #32
 8006b86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b8a:	2330      	movs	r3, #48	@ 0x30
 8006b8c:	f04f 0901 	mov.w	r9, #1
 8006b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b94:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006d40 <_vfiprintf_r+0x21c>
 8006b98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b9c:	4623      	mov	r3, r4
 8006b9e:	469a      	mov	sl, r3
 8006ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ba4:	b10a      	cbz	r2, 8006baa <_vfiprintf_r+0x86>
 8006ba6:	2a25      	cmp	r2, #37	@ 0x25
 8006ba8:	d1f9      	bne.n	8006b9e <_vfiprintf_r+0x7a>
 8006baa:	ebba 0b04 	subs.w	fp, sl, r4
 8006bae:	d00b      	beq.n	8006bc8 <_vfiprintf_r+0xa4>
 8006bb0:	465b      	mov	r3, fp
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f7ff ffa2 	bl	8006b00 <__sfputs_r>
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	f000 80a7 	beq.w	8006d10 <_vfiprintf_r+0x1ec>
 8006bc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bc4:	445a      	add	r2, fp
 8006bc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 809f 	beq.w	8006d10 <_vfiprintf_r+0x1ec>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bdc:	f10a 0a01 	add.w	sl, sl, #1
 8006be0:	9304      	str	r3, [sp, #16]
 8006be2:	9307      	str	r3, [sp, #28]
 8006be4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006be8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bea:	4654      	mov	r4, sl
 8006bec:	2205      	movs	r2, #5
 8006bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf2:	4853      	ldr	r0, [pc, #332]	@ (8006d40 <_vfiprintf_r+0x21c>)
 8006bf4:	f7fe f9b7 	bl	8004f66 <memchr>
 8006bf8:	9a04      	ldr	r2, [sp, #16]
 8006bfa:	b9d8      	cbnz	r0, 8006c34 <_vfiprintf_r+0x110>
 8006bfc:	06d1      	lsls	r1, r2, #27
 8006bfe:	bf44      	itt	mi
 8006c00:	2320      	movmi	r3, #32
 8006c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c06:	0713      	lsls	r3, r2, #28
 8006c08:	bf44      	itt	mi
 8006c0a:	232b      	movmi	r3, #43	@ 0x2b
 8006c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c10:	f89a 3000 	ldrb.w	r3, [sl]
 8006c14:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c16:	d015      	beq.n	8006c44 <_vfiprintf_r+0x120>
 8006c18:	4654      	mov	r4, sl
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	f04f 0c0a 	mov.w	ip, #10
 8006c20:	9a07      	ldr	r2, [sp, #28]
 8006c22:	4621      	mov	r1, r4
 8006c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c28:	3b30      	subs	r3, #48	@ 0x30
 8006c2a:	2b09      	cmp	r3, #9
 8006c2c:	d94b      	bls.n	8006cc6 <_vfiprintf_r+0x1a2>
 8006c2e:	b1b0      	cbz	r0, 8006c5e <_vfiprintf_r+0x13a>
 8006c30:	9207      	str	r2, [sp, #28]
 8006c32:	e014      	b.n	8006c5e <_vfiprintf_r+0x13a>
 8006c34:	eba0 0308 	sub.w	r3, r0, r8
 8006c38:	fa09 f303 	lsl.w	r3, r9, r3
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	46a2      	mov	sl, r4
 8006c40:	9304      	str	r3, [sp, #16]
 8006c42:	e7d2      	b.n	8006bea <_vfiprintf_r+0xc6>
 8006c44:	9b03      	ldr	r3, [sp, #12]
 8006c46:	1d19      	adds	r1, r3, #4
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	9103      	str	r1, [sp, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	bfbb      	ittet	lt
 8006c50:	425b      	neglt	r3, r3
 8006c52:	f042 0202 	orrlt.w	r2, r2, #2
 8006c56:	9307      	strge	r3, [sp, #28]
 8006c58:	9307      	strlt	r3, [sp, #28]
 8006c5a:	bfb8      	it	lt
 8006c5c:	9204      	strlt	r2, [sp, #16]
 8006c5e:	7823      	ldrb	r3, [r4, #0]
 8006c60:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c62:	d10a      	bne.n	8006c7a <_vfiprintf_r+0x156>
 8006c64:	7863      	ldrb	r3, [r4, #1]
 8006c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c68:	d132      	bne.n	8006cd0 <_vfiprintf_r+0x1ac>
 8006c6a:	9b03      	ldr	r3, [sp, #12]
 8006c6c:	3402      	adds	r4, #2
 8006c6e:	1d1a      	adds	r2, r3, #4
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	9203      	str	r2, [sp, #12]
 8006c74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c78:	9305      	str	r3, [sp, #20]
 8006c7a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006d44 <_vfiprintf_r+0x220>
 8006c7e:	2203      	movs	r2, #3
 8006c80:	4650      	mov	r0, sl
 8006c82:	7821      	ldrb	r1, [r4, #0]
 8006c84:	f7fe f96f 	bl	8004f66 <memchr>
 8006c88:	b138      	cbz	r0, 8006c9a <_vfiprintf_r+0x176>
 8006c8a:	2240      	movs	r2, #64	@ 0x40
 8006c8c:	9b04      	ldr	r3, [sp, #16]
 8006c8e:	eba0 000a 	sub.w	r0, r0, sl
 8006c92:	4082      	lsls	r2, r0
 8006c94:	4313      	orrs	r3, r2
 8006c96:	3401      	adds	r4, #1
 8006c98:	9304      	str	r3, [sp, #16]
 8006c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c9e:	2206      	movs	r2, #6
 8006ca0:	4829      	ldr	r0, [pc, #164]	@ (8006d48 <_vfiprintf_r+0x224>)
 8006ca2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ca6:	f7fe f95e 	bl	8004f66 <memchr>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d03f      	beq.n	8006d2e <_vfiprintf_r+0x20a>
 8006cae:	4b27      	ldr	r3, [pc, #156]	@ (8006d4c <_vfiprintf_r+0x228>)
 8006cb0:	bb1b      	cbnz	r3, 8006cfa <_vfiprintf_r+0x1d6>
 8006cb2:	9b03      	ldr	r3, [sp, #12]
 8006cb4:	3307      	adds	r3, #7
 8006cb6:	f023 0307 	bic.w	r3, r3, #7
 8006cba:	3308      	adds	r3, #8
 8006cbc:	9303      	str	r3, [sp, #12]
 8006cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc0:	443b      	add	r3, r7
 8006cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cc4:	e76a      	b.n	8006b9c <_vfiprintf_r+0x78>
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	2001      	movs	r0, #1
 8006cca:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cce:	e7a8      	b.n	8006c22 <_vfiprintf_r+0xfe>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f04f 0c0a 	mov.w	ip, #10
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	3401      	adds	r4, #1
 8006cda:	9305      	str	r3, [sp, #20]
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ce2:	3a30      	subs	r2, #48	@ 0x30
 8006ce4:	2a09      	cmp	r2, #9
 8006ce6:	d903      	bls.n	8006cf0 <_vfiprintf_r+0x1cc>
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d0c6      	beq.n	8006c7a <_vfiprintf_r+0x156>
 8006cec:	9105      	str	r1, [sp, #20]
 8006cee:	e7c4      	b.n	8006c7a <_vfiprintf_r+0x156>
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cf8:	e7f0      	b.n	8006cdc <_vfiprintf_r+0x1b8>
 8006cfa:	ab03      	add	r3, sp, #12
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	462a      	mov	r2, r5
 8006d00:	4630      	mov	r0, r6
 8006d02:	4b13      	ldr	r3, [pc, #76]	@ (8006d50 <_vfiprintf_r+0x22c>)
 8006d04:	a904      	add	r1, sp, #16
 8006d06:	f7fd fbb7 	bl	8004478 <_printf_float>
 8006d0a:	4607      	mov	r7, r0
 8006d0c:	1c78      	adds	r0, r7, #1
 8006d0e:	d1d6      	bne.n	8006cbe <_vfiprintf_r+0x19a>
 8006d10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d12:	07d9      	lsls	r1, r3, #31
 8006d14:	d405      	bmi.n	8006d22 <_vfiprintf_r+0x1fe>
 8006d16:	89ab      	ldrh	r3, [r5, #12]
 8006d18:	059a      	lsls	r2, r3, #22
 8006d1a:	d402      	bmi.n	8006d22 <_vfiprintf_r+0x1fe>
 8006d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d1e:	f7fe f921 	bl	8004f64 <__retarget_lock_release_recursive>
 8006d22:	89ab      	ldrh	r3, [r5, #12]
 8006d24:	065b      	lsls	r3, r3, #25
 8006d26:	f53f af1f 	bmi.w	8006b68 <_vfiprintf_r+0x44>
 8006d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d2c:	e71e      	b.n	8006b6c <_vfiprintf_r+0x48>
 8006d2e:	ab03      	add	r3, sp, #12
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	462a      	mov	r2, r5
 8006d34:	4630      	mov	r0, r6
 8006d36:	4b06      	ldr	r3, [pc, #24]	@ (8006d50 <_vfiprintf_r+0x22c>)
 8006d38:	a904      	add	r1, sp, #16
 8006d3a:	f7fd fe3b 	bl	80049b4 <_printf_i>
 8006d3e:	e7e4      	b.n	8006d0a <_vfiprintf_r+0x1e6>
 8006d40:	08007330 	.word	0x08007330
 8006d44:	08007336 	.word	0x08007336
 8006d48:	0800733a 	.word	0x0800733a
 8006d4c:	08004479 	.word	0x08004479
 8006d50:	08006b01 	.word	0x08006b01

08006d54 <__swbuf_r>:
 8006d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d56:	460e      	mov	r6, r1
 8006d58:	4614      	mov	r4, r2
 8006d5a:	4605      	mov	r5, r0
 8006d5c:	b118      	cbz	r0, 8006d66 <__swbuf_r+0x12>
 8006d5e:	6a03      	ldr	r3, [r0, #32]
 8006d60:	b90b      	cbnz	r3, 8006d66 <__swbuf_r+0x12>
 8006d62:	f7fd ffd3 	bl	8004d0c <__sinit>
 8006d66:	69a3      	ldr	r3, [r4, #24]
 8006d68:	60a3      	str	r3, [r4, #8]
 8006d6a:	89a3      	ldrh	r3, [r4, #12]
 8006d6c:	071a      	lsls	r2, r3, #28
 8006d6e:	d501      	bpl.n	8006d74 <__swbuf_r+0x20>
 8006d70:	6923      	ldr	r3, [r4, #16]
 8006d72:	b943      	cbnz	r3, 8006d86 <__swbuf_r+0x32>
 8006d74:	4621      	mov	r1, r4
 8006d76:	4628      	mov	r0, r5
 8006d78:	f000 f82a 	bl	8006dd0 <__swsetup_r>
 8006d7c:	b118      	cbz	r0, 8006d86 <__swbuf_r+0x32>
 8006d7e:	f04f 37ff 	mov.w	r7, #4294967295
 8006d82:	4638      	mov	r0, r7
 8006d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	6922      	ldr	r2, [r4, #16]
 8006d8a:	b2f6      	uxtb	r6, r6
 8006d8c:	1a98      	subs	r0, r3, r2
 8006d8e:	6963      	ldr	r3, [r4, #20]
 8006d90:	4637      	mov	r7, r6
 8006d92:	4283      	cmp	r3, r0
 8006d94:	dc05      	bgt.n	8006da2 <__swbuf_r+0x4e>
 8006d96:	4621      	mov	r1, r4
 8006d98:	4628      	mov	r0, r5
 8006d9a:	f7ff fd9b 	bl	80068d4 <_fflush_r>
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d1ed      	bne.n	8006d7e <__swbuf_r+0x2a>
 8006da2:	68a3      	ldr	r3, [r4, #8]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	60a3      	str	r3, [r4, #8]
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	6022      	str	r2, [r4, #0]
 8006dae:	701e      	strb	r6, [r3, #0]
 8006db0:	6962      	ldr	r2, [r4, #20]
 8006db2:	1c43      	adds	r3, r0, #1
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d004      	beq.n	8006dc2 <__swbuf_r+0x6e>
 8006db8:	89a3      	ldrh	r3, [r4, #12]
 8006dba:	07db      	lsls	r3, r3, #31
 8006dbc:	d5e1      	bpl.n	8006d82 <__swbuf_r+0x2e>
 8006dbe:	2e0a      	cmp	r6, #10
 8006dc0:	d1df      	bne.n	8006d82 <__swbuf_r+0x2e>
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f7ff fd85 	bl	80068d4 <_fflush_r>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d0d9      	beq.n	8006d82 <__swbuf_r+0x2e>
 8006dce:	e7d6      	b.n	8006d7e <__swbuf_r+0x2a>

08006dd0 <__swsetup_r>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4b29      	ldr	r3, [pc, #164]	@ (8006e78 <__swsetup_r+0xa8>)
 8006dd4:	4605      	mov	r5, r0
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	460c      	mov	r4, r1
 8006dda:	b118      	cbz	r0, 8006de4 <__swsetup_r+0x14>
 8006ddc:	6a03      	ldr	r3, [r0, #32]
 8006dde:	b90b      	cbnz	r3, 8006de4 <__swsetup_r+0x14>
 8006de0:	f7fd ff94 	bl	8004d0c <__sinit>
 8006de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006de8:	0719      	lsls	r1, r3, #28
 8006dea:	d422      	bmi.n	8006e32 <__swsetup_r+0x62>
 8006dec:	06da      	lsls	r2, r3, #27
 8006dee:	d407      	bmi.n	8006e00 <__swsetup_r+0x30>
 8006df0:	2209      	movs	r2, #9
 8006df2:	602a      	str	r2, [r5, #0]
 8006df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006df8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfc:	81a3      	strh	r3, [r4, #12]
 8006dfe:	e033      	b.n	8006e68 <__swsetup_r+0x98>
 8006e00:	0758      	lsls	r0, r3, #29
 8006e02:	d512      	bpl.n	8006e2a <__swsetup_r+0x5a>
 8006e04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e06:	b141      	cbz	r1, 8006e1a <__swsetup_r+0x4a>
 8006e08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e0c:	4299      	cmp	r1, r3
 8006e0e:	d002      	beq.n	8006e16 <__swsetup_r+0x46>
 8006e10:	4628      	mov	r0, r5
 8006e12:	f7fe ff09 	bl	8005c28 <_free_r>
 8006e16:	2300      	movs	r3, #0
 8006e18:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e20:	81a3      	strh	r3, [r4, #12]
 8006e22:	2300      	movs	r3, #0
 8006e24:	6063      	str	r3, [r4, #4]
 8006e26:	6923      	ldr	r3, [r4, #16]
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	f043 0308 	orr.w	r3, r3, #8
 8006e30:	81a3      	strh	r3, [r4, #12]
 8006e32:	6923      	ldr	r3, [r4, #16]
 8006e34:	b94b      	cbnz	r3, 8006e4a <__swsetup_r+0x7a>
 8006e36:	89a3      	ldrh	r3, [r4, #12]
 8006e38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e40:	d003      	beq.n	8006e4a <__swsetup_r+0x7a>
 8006e42:	4621      	mov	r1, r4
 8006e44:	4628      	mov	r0, r5
 8006e46:	f000 f882 	bl	8006f4e <__smakebuf_r>
 8006e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e4e:	f013 0201 	ands.w	r2, r3, #1
 8006e52:	d00a      	beq.n	8006e6a <__swsetup_r+0x9a>
 8006e54:	2200      	movs	r2, #0
 8006e56:	60a2      	str	r2, [r4, #8]
 8006e58:	6962      	ldr	r2, [r4, #20]
 8006e5a:	4252      	negs	r2, r2
 8006e5c:	61a2      	str	r2, [r4, #24]
 8006e5e:	6922      	ldr	r2, [r4, #16]
 8006e60:	b942      	cbnz	r2, 8006e74 <__swsetup_r+0xa4>
 8006e62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e66:	d1c5      	bne.n	8006df4 <__swsetup_r+0x24>
 8006e68:	bd38      	pop	{r3, r4, r5, pc}
 8006e6a:	0799      	lsls	r1, r3, #30
 8006e6c:	bf58      	it	pl
 8006e6e:	6962      	ldrpl	r2, [r4, #20]
 8006e70:	60a2      	str	r2, [r4, #8]
 8006e72:	e7f4      	b.n	8006e5e <__swsetup_r+0x8e>
 8006e74:	2000      	movs	r0, #0
 8006e76:	e7f7      	b.n	8006e68 <__swsetup_r+0x98>
 8006e78:	20000078 	.word	0x20000078

08006e7c <_raise_r>:
 8006e7c:	291f      	cmp	r1, #31
 8006e7e:	b538      	push	{r3, r4, r5, lr}
 8006e80:	4605      	mov	r5, r0
 8006e82:	460c      	mov	r4, r1
 8006e84:	d904      	bls.n	8006e90 <_raise_r+0x14>
 8006e86:	2316      	movs	r3, #22
 8006e88:	6003      	str	r3, [r0, #0]
 8006e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
 8006e90:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006e92:	b112      	cbz	r2, 8006e9a <_raise_r+0x1e>
 8006e94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e98:	b94b      	cbnz	r3, 8006eae <_raise_r+0x32>
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f000 f830 	bl	8006f00 <_getpid_r>
 8006ea0:	4622      	mov	r2, r4
 8006ea2:	4601      	mov	r1, r0
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eaa:	f000 b817 	b.w	8006edc <_kill_r>
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d00a      	beq.n	8006ec8 <_raise_r+0x4c>
 8006eb2:	1c59      	adds	r1, r3, #1
 8006eb4:	d103      	bne.n	8006ebe <_raise_r+0x42>
 8006eb6:	2316      	movs	r3, #22
 8006eb8:	6003      	str	r3, [r0, #0]
 8006eba:	2001      	movs	r0, #1
 8006ebc:	e7e7      	b.n	8006e8e <_raise_r+0x12>
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006ec6:	4798      	blx	r3
 8006ec8:	2000      	movs	r0, #0
 8006eca:	e7e0      	b.n	8006e8e <_raise_r+0x12>

08006ecc <raise>:
 8006ecc:	4b02      	ldr	r3, [pc, #8]	@ (8006ed8 <raise+0xc>)
 8006ece:	4601      	mov	r1, r0
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	f7ff bfd3 	b.w	8006e7c <_raise_r>
 8006ed6:	bf00      	nop
 8006ed8:	20000078 	.word	0x20000078

08006edc <_kill_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	2300      	movs	r3, #0
 8006ee0:	4d06      	ldr	r5, [pc, #24]	@ (8006efc <_kill_r+0x20>)
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	602b      	str	r3, [r5, #0]
 8006eea:	f7fb fb8a 	bl	8002602 <_kill>
 8006eee:	1c43      	adds	r3, r0, #1
 8006ef0:	d102      	bne.n	8006ef8 <_kill_r+0x1c>
 8006ef2:	682b      	ldr	r3, [r5, #0]
 8006ef4:	b103      	cbz	r3, 8006ef8 <_kill_r+0x1c>
 8006ef6:	6023      	str	r3, [r4, #0]
 8006ef8:	bd38      	pop	{r3, r4, r5, pc}
 8006efa:	bf00      	nop
 8006efc:	20000514 	.word	0x20000514

08006f00 <_getpid_r>:
 8006f00:	f7fb bb78 	b.w	80025f4 <_getpid>

08006f04 <__swhatbuf_r>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	460c      	mov	r4, r1
 8006f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f0c:	4615      	mov	r5, r2
 8006f0e:	2900      	cmp	r1, #0
 8006f10:	461e      	mov	r6, r3
 8006f12:	b096      	sub	sp, #88	@ 0x58
 8006f14:	da0c      	bge.n	8006f30 <__swhatbuf_r+0x2c>
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	2100      	movs	r1, #0
 8006f1a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f1e:	bf14      	ite	ne
 8006f20:	2340      	movne	r3, #64	@ 0x40
 8006f22:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f26:	2000      	movs	r0, #0
 8006f28:	6031      	str	r1, [r6, #0]
 8006f2a:	602b      	str	r3, [r5, #0]
 8006f2c:	b016      	add	sp, #88	@ 0x58
 8006f2e:	bd70      	pop	{r4, r5, r6, pc}
 8006f30:	466a      	mov	r2, sp
 8006f32:	f000 f849 	bl	8006fc8 <_fstat_r>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	dbed      	blt.n	8006f16 <__swhatbuf_r+0x12>
 8006f3a:	9901      	ldr	r1, [sp, #4]
 8006f3c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f40:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f44:	4259      	negs	r1, r3
 8006f46:	4159      	adcs	r1, r3
 8006f48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f4c:	e7eb      	b.n	8006f26 <__swhatbuf_r+0x22>

08006f4e <__smakebuf_r>:
 8006f4e:	898b      	ldrh	r3, [r1, #12]
 8006f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f52:	079d      	lsls	r5, r3, #30
 8006f54:	4606      	mov	r6, r0
 8006f56:	460c      	mov	r4, r1
 8006f58:	d507      	bpl.n	8006f6a <__smakebuf_r+0x1c>
 8006f5a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f5e:	6023      	str	r3, [r4, #0]
 8006f60:	6123      	str	r3, [r4, #16]
 8006f62:	2301      	movs	r3, #1
 8006f64:	6163      	str	r3, [r4, #20]
 8006f66:	b003      	add	sp, #12
 8006f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f6a:	466a      	mov	r2, sp
 8006f6c:	ab01      	add	r3, sp, #4
 8006f6e:	f7ff ffc9 	bl	8006f04 <__swhatbuf_r>
 8006f72:	9f00      	ldr	r7, [sp, #0]
 8006f74:	4605      	mov	r5, r0
 8006f76:	4639      	mov	r1, r7
 8006f78:	4630      	mov	r0, r6
 8006f7a:	f7fe fec7 	bl	8005d0c <_malloc_r>
 8006f7e:	b948      	cbnz	r0, 8006f94 <__smakebuf_r+0x46>
 8006f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f84:	059a      	lsls	r2, r3, #22
 8006f86:	d4ee      	bmi.n	8006f66 <__smakebuf_r+0x18>
 8006f88:	f023 0303 	bic.w	r3, r3, #3
 8006f8c:	f043 0302 	orr.w	r3, r3, #2
 8006f90:	81a3      	strh	r3, [r4, #12]
 8006f92:	e7e2      	b.n	8006f5a <__smakebuf_r+0xc>
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f9e:	81a3      	strh	r3, [r4, #12]
 8006fa0:	9b01      	ldr	r3, [sp, #4]
 8006fa2:	6020      	str	r0, [r4, #0]
 8006fa4:	b15b      	cbz	r3, 8006fbe <__smakebuf_r+0x70>
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fac:	f000 f81e 	bl	8006fec <_isatty_r>
 8006fb0:	b128      	cbz	r0, 8006fbe <__smakebuf_r+0x70>
 8006fb2:	89a3      	ldrh	r3, [r4, #12]
 8006fb4:	f023 0303 	bic.w	r3, r3, #3
 8006fb8:	f043 0301 	orr.w	r3, r3, #1
 8006fbc:	81a3      	strh	r3, [r4, #12]
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	431d      	orrs	r5, r3
 8006fc2:	81a5      	strh	r5, [r4, #12]
 8006fc4:	e7cf      	b.n	8006f66 <__smakebuf_r+0x18>
	...

08006fc8 <_fstat_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	2300      	movs	r3, #0
 8006fcc:	4d06      	ldr	r5, [pc, #24]	@ (8006fe8 <_fstat_r+0x20>)
 8006fce:	4604      	mov	r4, r0
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	602b      	str	r3, [r5, #0]
 8006fd6:	f7fb fb73 	bl	80026c0 <_fstat>
 8006fda:	1c43      	adds	r3, r0, #1
 8006fdc:	d102      	bne.n	8006fe4 <_fstat_r+0x1c>
 8006fde:	682b      	ldr	r3, [r5, #0]
 8006fe0:	b103      	cbz	r3, 8006fe4 <_fstat_r+0x1c>
 8006fe2:	6023      	str	r3, [r4, #0]
 8006fe4:	bd38      	pop	{r3, r4, r5, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20000514 	.word	0x20000514

08006fec <_isatty_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	2300      	movs	r3, #0
 8006ff0:	4d05      	ldr	r5, [pc, #20]	@ (8007008 <_isatty_r+0x1c>)
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	602b      	str	r3, [r5, #0]
 8006ff8:	f7fb fb71 	bl	80026de <_isatty>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d102      	bne.n	8007006 <_isatty_r+0x1a>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	b103      	cbz	r3, 8007006 <_isatty_r+0x1a>
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	20000514 	.word	0x20000514

0800700c <_init>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	bf00      	nop
 8007010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007012:	bc08      	pop	{r3}
 8007014:	469e      	mov	lr, r3
 8007016:	4770      	bx	lr

08007018 <_fini>:
 8007018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701a:	bf00      	nop
 800701c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701e:	bc08      	pop	{r3}
 8007020:	469e      	mov	lr, r3
 8007022:	4770      	bx	lr
