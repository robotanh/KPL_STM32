
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003568  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003674  08003674  00004674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003718  08003718  00005098  2**0
                  CONTENTS
  4 .ARM          00000008  08003718  08003718  00004718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003720  08003720  00005098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003720  08003720  00004720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003724  08003724  00004724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08003728  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000098  080037c0  00005098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  080037c0  00005370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8fe  00000000  00000000  000050c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f97  00000000  00000000  0000f9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00011958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000939  00000000  00000000  00012560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180a1  00000000  00000000  00012e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7b4  00000000  00000000  0002af3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ed1  00000000  00000000  000386ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c25bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003628  00000000  00000000  000c2604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000c5c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	0800365c 	.word	0x0800365c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	0800365c 	.word	0x0800365c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <KeyPad_Scan>:
    /* Set all rows to high */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
}

/* Scan the 4x5 keypad and return the pressed key value */
uint8_t KeyPad_Scan(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
    uint32_t currentMillis = HAL_GetTick();
 8000162:	f001 f8a1 	bl	80012a8 <HAL_GetTick>
 8000166:	6038      	str	r0, [r7, #0]

    if (currentMillis - lastDebounceTime < DEBOUNCE_DELAY) {
 8000168:	4b24      	ldr	r3, [pc, #144]	@ (80001fc <KeyPad_Scan+0xa0>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	683a      	ldr	r2, [r7, #0]
 800016e:	1ad3      	subs	r3, r2, r3
 8000170:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000174:	d201      	bcs.n	800017a <KeyPad_Scan+0x1e>
        return 0xFF;
 8000176:	23ff      	movs	r3, #255	@ 0xff
 8000178:	e03b      	b.n	80001f2 <KeyPad_Scan+0x96>
    }

    for (uint8_t row = 0; row < 4; row++) {
 800017a:	2300      	movs	r3, #0
 800017c:	71fb      	strb	r3, [r7, #7]
 800017e:	e034      	b.n	80001ea <KeyPad_Scan+0x8e>
        /* Set all rows low */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000186:	481e      	ldr	r0, [pc, #120]	@ (8000200 <KeyPad_Scan+0xa4>)
 8000188:	f001 fb41 	bl	800180e <HAL_GPIO_WritePin>

        /* Set the current row high */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 << row, GPIO_PIN_SET);
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	2240      	movs	r2, #64	@ 0x40
 8000190:	fa02 f303 	lsl.w	r3, r2, r3
 8000194:	b29b      	uxth	r3, r3
 8000196:	2201      	movs	r2, #1
 8000198:	4619      	mov	r1, r3
 800019a:	4819      	ldr	r0, [pc, #100]	@ (8000200 <KeyPad_Scan+0xa4>)
 800019c:	f001 fb37 	bl	800180e <HAL_GPIO_WritePin>

        /* Read each column */
        for (uint8_t col = 0; col < 5; col++) {
 80001a0:	2300      	movs	r3, #0
 80001a2:	71bb      	strb	r3, [r7, #6]
 80001a4:	e01b      	b.n	80001de <KeyPad_Scan+0x82>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 << col) == GPIO_PIN_SET) {
 80001a6:	79bb      	ldrb	r3, [r7, #6]
 80001a8:	2201      	movs	r2, #1
 80001aa:	fa02 f303 	lsl.w	r3, r2, r3
 80001ae:	b29b      	uxth	r3, r3
 80001b0:	4619      	mov	r1, r3
 80001b2:	4813      	ldr	r0, [pc, #76]	@ (8000200 <KeyPad_Scan+0xa4>)
 80001b4:	f001 fb14 	bl	80017e0 <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b01      	cmp	r3, #1
 80001bc:	d10c      	bne.n	80001d8 <KeyPad_Scan+0x7c>
                lastDebounceTime = currentMillis;
 80001be:	4a0f      	ldr	r2, [pc, #60]	@ (80001fc <KeyPad_Scan+0xa0>)
 80001c0:	683b      	ldr	r3, [r7, #0]
 80001c2:	6013      	str	r3, [r2, #0]
                return keyMap[row][col];
 80001c4:	79fa      	ldrb	r2, [r7, #7]
 80001c6:	79b9      	ldrb	r1, [r7, #6]
 80001c8:	480e      	ldr	r0, [pc, #56]	@ (8000204 <KeyPad_Scan+0xa8>)
 80001ca:	4613      	mov	r3, r2
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	4413      	add	r3, r2
 80001d0:	4403      	add	r3, r0
 80001d2:	440b      	add	r3, r1
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	e00c      	b.n	80001f2 <KeyPad_Scan+0x96>
        for (uint8_t col = 0; col < 5; col++) {
 80001d8:	79bb      	ldrb	r3, [r7, #6]
 80001da:	3301      	adds	r3, #1
 80001dc:	71bb      	strb	r3, [r7, #6]
 80001de:	79bb      	ldrb	r3, [r7, #6]
 80001e0:	2b04      	cmp	r3, #4
 80001e2:	d9e0      	bls.n	80001a6 <KeyPad_Scan+0x4a>
    for (uint8_t row = 0; row < 4; row++) {
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	3301      	adds	r3, #1
 80001e8:	71fb      	strb	r3, [r7, #7]
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2b03      	cmp	r3, #3
 80001ee:	d9c7      	bls.n	8000180 <KeyPad_Scan+0x24>
            }
        }
    }

    return 0xFF;
 80001f0:	23ff      	movs	r3, #255	@ 0xff
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	200000b4 	.word	0x200000b4
 8000200:	40010c00 	.word	0x40010c00
 8000204:	080036ac 	.word	0x080036ac

08000208 <formatTotalLiters>:
// T + L pressed show total from beginning
void formatTotalLiters(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	60b9      	str	r1, [r7, #8]
 8000212:	607a      	str	r2, [r7, #4]
	if (total < 100000000) {
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	4a1b      	ldr	r2, [pc, #108]	@ (8000284 <formatTotalLiters+0x7c>)
 8000218:	4293      	cmp	r3, r2
 800021a:	d815      	bhi.n	8000248 <formatTotalLiters+0x40>
		* buffer1 = total / 1000000;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	4a1a      	ldr	r2, [pc, #104]	@ (8000288 <formatTotalLiters+0x80>)
 8000220:	fba2 2303 	umull	r2, r3, r2, r3
 8000224:	0c9a      	lsrs	r2, r3, #18
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	4b16      	ldr	r3, [pc, #88]	@ (8000288 <formatTotalLiters+0x80>)
 800022e:	fba3 1302 	umull	r1, r3, r3, r2
 8000232:	0c9b      	lsrs	r3, r3, #18
 8000234:	4915      	ldr	r1, [pc, #84]	@ (800028c <formatTotalLiters+0x84>)
 8000236:	fb01 f303 	mul.w	r3, r1, r3
 800023a:	1ad3      	subs	r3, r2, r3
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 8000240:	4b13      	ldr	r3, [pc, #76]	@ (8000290 <formatTotalLiters+0x88>)
 8000242:	2203      	movs	r2, #3
 8000244:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 = total / 100000000;
		* buffer2 = (total % 100000000 ) /100;
		LEDPointFlag = 1;
	}
}
 8000246:	e018      	b.n	800027a <formatTotalLiters+0x72>
		* buffer1 = total / 100000000;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	4a12      	ldr	r2, [pc, #72]	@ (8000294 <formatTotalLiters+0x8c>)
 800024c:	fba2 2303 	umull	r2, r3, r2, r3
 8000250:	0e5a      	lsrs	r2, r3, #25
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	601a      	str	r2, [r3, #0]
		* buffer2 = (total % 100000000 ) /100;
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4b0e      	ldr	r3, [pc, #56]	@ (8000294 <formatTotalLiters+0x8c>)
 800025a:	fba3 1302 	umull	r1, r3, r3, r2
 800025e:	0e5b      	lsrs	r3, r3, #25
 8000260:	490d      	ldr	r1, [pc, #52]	@ (8000298 <formatTotalLiters+0x90>)
 8000262:	fb01 f303 	mul.w	r3, r1, r3
 8000266:	1ad3      	subs	r3, r2, r3
 8000268:	4a0c      	ldr	r2, [pc, #48]	@ (800029c <formatTotalLiters+0x94>)
 800026a:	fba2 2303 	umull	r2, r3, r2, r3
 800026e:	095a      	lsrs	r2, r3, #5
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	601a      	str	r2, [r3, #0]
		LEDPointFlag = 1;
 8000274:	4b06      	ldr	r3, [pc, #24]	@ (8000290 <formatTotalLiters+0x88>)
 8000276:	2201      	movs	r2, #1
 8000278:	601a      	str	r2, [r3, #0]
}
 800027a:	bf00      	nop
 800027c:	3714      	adds	r7, #20
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	05f5e0ff 	.word	0x05f5e0ff
 8000288:	431bde83 	.word	0x431bde83
 800028c:	000f4240 	.word	0x000f4240
 8000290:	20000038 	.word	0x20000038
 8000294:	55e63b89 	.word	0x55e63b89
 8000298:	05f5e100 	.word	0x05f5e100
 800029c:	51eb851f 	.word	0x51eb851f

080002a0 <formatTotalLitersShift>:
// T + $ pressed show total per shift
void formatTotalLitersShift(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
	if (total < 1000000000) {
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	4a14      	ldr	r2, [pc, #80]	@ (8000300 <formatTotalLitersShift+0x60>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d815      	bhi.n	80002e0 <formatTotalLitersShift+0x40>

		* buffer1 = total / 1000000;
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4a13      	ldr	r2, [pc, #76]	@ (8000304 <formatTotalLitersShift+0x64>)
 80002b8:	fba2 2303 	umull	r2, r3, r2, r3
 80002bc:	0c9a      	lsrs	r2, r3, #18
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <formatTotalLitersShift+0x64>)
 80002c6:	fba3 1302 	umull	r1, r3, r3, r2
 80002ca:	0c9b      	lsrs	r3, r3, #18
 80002cc:	490e      	ldr	r1, [pc, #56]	@ (8000308 <formatTotalLitersShift+0x68>)
 80002ce:	fb01 f303 	mul.w	r3, r1, r3
 80002d2:	1ad3      	subs	r3, r2, r3
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	@ (800030c <formatTotalLitersShift+0x6c>)
 80002da:	2203      	movs	r2, #3
 80002dc:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 =0;
		* buffer2 = 0;
		LEDPointFlag = -11;
	}
}
 80002de:	e009      	b.n	80002f4 <formatTotalLitersShift+0x54>
		* buffer1 =0;
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
		* buffer2 = 0;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
		LEDPointFlag = -11;
 80002ec:	4b07      	ldr	r3, [pc, #28]	@ (800030c <formatTotalLitersShift+0x6c>)
 80002ee:	f06f 020a 	mvn.w	r2, #10
 80002f2:	601a      	str	r2, [r3, #0]
}
 80002f4:	bf00      	nop
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	3b9ac9ff 	.word	0x3b9ac9ff
 8000304:	431bde83 	.word	0x431bde83
 8000308:	000f4240 	.word	0x000f4240
 800030c:	20000038 	.word	0x20000038

08000310 <KeyLogic>:

void KeyLogic() {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	keyPressed = KeyPad_Scan();
 8000314:	f7ff ff22 	bl	800015c <KeyPad_Scan>
 8000318:	4603      	mov	r3, r0
 800031a:	461a      	mov	r2, r3
 800031c:	4ba4      	ldr	r3, [pc, #656]	@ (80005b0 <KeyLogic+0x2a0>)
 800031e:	701a      	strb	r2, [r3, #0]
	if (keyPressed != 0xFF) {
 8000320:	4ba3      	ldr	r3, [pc, #652]	@ (80005b0 <KeyLogic+0x2a0>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2bff      	cmp	r3, #255	@ 0xff
 8000326:	f000 8140 	beq.w	80005aa <KeyLogic+0x29a>
        if (seqState == SEQ_NUMBER) {
 800032a:	4ba2      	ldr	r3, [pc, #648]	@ (80005b4 <KeyLogic+0x2a4>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b06      	cmp	r3, #6
 8000330:	d12a      	bne.n	8000388 <KeyLogic+0x78>
            if (keyPressed >= '0' && keyPressed <= '9') {
 8000332:	4b9f      	ldr	r3, [pc, #636]	@ (80005b0 <KeyLogic+0x2a0>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b2f      	cmp	r3, #47	@ 0x2f
 8000338:	d91c      	bls.n	8000374 <KeyLogic+0x64>
 800033a:	4b9d      	ldr	r3, [pc, #628]	@ (80005b0 <KeyLogic+0x2a0>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b39      	cmp	r3, #57	@ 0x39
 8000340:	d818      	bhi.n	8000374 <KeyLogic+0x64>
                if (numberOfDigits < 6) {
 8000342:	4b9d      	ldr	r3, [pc, #628]	@ (80005b8 <KeyLogic+0x2a8>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b05      	cmp	r3, #5
 8000348:	f200 812c 	bhi.w	80005a4 <KeyLogic+0x294>
                    accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 800034c:	4b9b      	ldr	r3, [pc, #620]	@ (80005bc <KeyLogic+0x2ac>)
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	4613      	mov	r3, r2
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	4413      	add	r3, r2
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	461a      	mov	r2, r3
 800035a:	4b95      	ldr	r3, [pc, #596]	@ (80005b0 <KeyLogic+0x2a0>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	4413      	add	r3, r2
 8000360:	3b30      	subs	r3, #48	@ 0x30
 8000362:	4a96      	ldr	r2, [pc, #600]	@ (80005bc <KeyLogic+0x2ac>)
 8000364:	6013      	str	r3, [r2, #0]
                    numberOfDigits++;
 8000366:	4b94      	ldr	r3, [pc, #592]	@ (80005b8 <KeyLogic+0x2a8>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	3301      	adds	r3, #1
 800036c:	b2da      	uxtb	r2, r3
 800036e:	4b92      	ldr	r3, [pc, #584]	@ (80005b8 <KeyLogic+0x2a8>)
 8000370:	701a      	strb	r2, [r3, #0]
                if (numberOfDigits < 6) {
 8000372:	e117      	b.n	80005a4 <KeyLogic+0x294>
                }
            } else {
                seqState = SEQ_IDLE;
 8000374:	4b8f      	ldr	r3, [pc, #572]	@ (80005b4 <KeyLogic+0x2a4>)
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]
                numberOfDigits = 0;
 800037a:	4b8f      	ldr	r3, [pc, #572]	@ (80005b8 <KeyLogic+0x2a8>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
                accumulatedNumber = 0;
 8000380:	4b8e      	ldr	r3, [pc, #568]	@ (80005bc <KeyLogic+0x2ac>)
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	e10d      	b.n	80005a4 <KeyLogic+0x294>
            }
        } else {
            switch (keyPressed) {
 8000388:	4b89      	ldr	r3, [pc, #548]	@ (80005b0 <KeyLogic+0x2a0>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	3b24      	subs	r3, #36	@ 0x24
 800038e:	2b30      	cmp	r3, #48	@ 0x30
 8000390:	f200 80ef 	bhi.w	8000572 <KeyLogic+0x262>
 8000394:	a201      	add	r2, pc, #4	@ (adr r2, 800039c <KeyLogic+0x8c>)
 8000396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039a:	bf00      	nop
 800039c:	08000513 	.word	0x08000513
 80003a0:	08000573 	.word	0x08000573
 80003a4:	08000573 	.word	0x08000573
 80003a8:	08000573 	.word	0x08000573
 80003ac:	08000573 	.word	0x08000573
 80003b0:	08000573 	.word	0x08000573
 80003b4:	08000573 	.word	0x08000573
 80003b8:	08000573 	.word	0x08000573
 80003bc:	08000573 	.word	0x08000573
 80003c0:	08000573 	.word	0x08000573
 80003c4:	08000573 	.word	0x08000573
 80003c8:	08000573 	.word	0x08000573
 80003cc:	08000573 	.word	0x08000573
 80003d0:	08000573 	.word	0x08000573
 80003d4:	08000573 	.word	0x08000573
 80003d8:	08000573 	.word	0x08000573
 80003dc:	08000573 	.word	0x08000573
 80003e0:	08000573 	.word	0x08000573
 80003e4:	08000573 	.word	0x08000573
 80003e8:	08000573 	.word	0x08000573
 80003ec:	08000573 	.word	0x08000573
 80003f0:	08000573 	.word	0x08000573
 80003f4:	08000573 	.word	0x08000573
 80003f8:	08000573 	.word	0x08000573
 80003fc:	08000573 	.word	0x08000573
 8000400:	08000573 	.word	0x08000573
 8000404:	08000573 	.word	0x08000573
 8000408:	08000573 	.word	0x08000573
 800040c:	08000573 	.word	0x08000573
 8000410:	08000461 	.word	0x08000461
 8000414:	08000489 	.word	0x08000489
 8000418:	080004af 	.word	0x080004af
 800041c:	08000543 	.word	0x08000543
 8000420:	080004d5 	.word	0x080004d5
 8000424:	0800055b 	.word	0x0800055b
 8000428:	08000573 	.word	0x08000573
 800042c:	08000573 	.word	0x08000573
 8000430:	08000573 	.word	0x08000573
 8000434:	08000573 	.word	0x08000573
 8000438:	08000573 	.word	0x08000573
 800043c:	0800052b 	.word	0x0800052b
 8000440:	08000573 	.word	0x08000573
 8000444:	08000573 	.word	0x08000573
 8000448:	08000573 	.word	0x08000573
 800044c:	08000573 	.word	0x08000573
 8000450:	08000573 	.word	0x08000573
 8000454:	08000573 	.word	0x08000573
 8000458:	08000573 	.word	0x08000573
 800045c:	080004fb 	.word	0x080004fb
                case 'A':
                    snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000460:	2300      	movs	r3, #0
 8000462:	4a57      	ldr	r2, [pc, #348]	@ (80005c0 <KeyLogic+0x2b0>)
 8000464:	2107      	movs	r1, #7
 8000466:	4857      	ldr	r0, [pc, #348]	@ (80005c4 <KeyLogic+0x2b4>)
 8000468:	f002 fc34 	bl	8002cd4 <sniprintf>
                    snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 10000);
 800046c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000470:	4a53      	ldr	r2, [pc, #332]	@ (80005c0 <KeyLogic+0x2b0>)
 8000472:	2107      	movs	r1, #7
 8000474:	4854      	ldr	r0, [pc, #336]	@ (80005c8 <KeyLogic+0x2b8>)
 8000476:	f002 fc2d 	bl	8002cd4 <sniprintf>
                    snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 800047a:	2300      	movs	r3, #0
 800047c:	4a50      	ldr	r2, [pc, #320]	@ (80005c0 <KeyLogic+0x2b0>)
 800047e:	2107      	movs	r1, #7
 8000480:	4852      	ldr	r0, [pc, #328]	@ (80005cc <KeyLogic+0x2bc>)
 8000482:	f002 fc27 	bl	8002cd4 <sniprintf>
                    break;
 8000486:	e08d      	b.n	80005a4 <KeyLogic+0x294>
                case 'B':
                    snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000488:	2300      	movs	r3, #0
 800048a:	4a4d      	ldr	r2, [pc, #308]	@ (80005c0 <KeyLogic+0x2b0>)
 800048c:	2107      	movs	r1, #7
 800048e:	484d      	ldr	r0, [pc, #308]	@ (80005c4 <KeyLogic+0x2b4>)
 8000490:	f002 fc20 	bl	8002cd4 <sniprintf>
                    snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 100000);
 8000494:	4b4e      	ldr	r3, [pc, #312]	@ (80005d0 <KeyLogic+0x2c0>)
 8000496:	4a4a      	ldr	r2, [pc, #296]	@ (80005c0 <KeyLogic+0x2b0>)
 8000498:	2107      	movs	r1, #7
 800049a:	484b      	ldr	r0, [pc, #300]	@ (80005c8 <KeyLogic+0x2b8>)
 800049c:	f002 fc1a 	bl	8002cd4 <sniprintf>
                    snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80004a0:	2300      	movs	r3, #0
 80004a2:	4a47      	ldr	r2, [pc, #284]	@ (80005c0 <KeyLogic+0x2b0>)
 80004a4:	2107      	movs	r1, #7
 80004a6:	4849      	ldr	r0, [pc, #292]	@ (80005cc <KeyLogic+0x2bc>)
 80004a8:	f002 fc14 	bl	8002cd4 <sniprintf>
                    break;
 80004ac:	e07a      	b.n	80005a4 <KeyLogic+0x294>
                case 'C':
                    snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 80004ae:	2300      	movs	r3, #0
 80004b0:	4a43      	ldr	r2, [pc, #268]	@ (80005c0 <KeyLogic+0x2b0>)
 80004b2:	2107      	movs	r1, #7
 80004b4:	4843      	ldr	r0, [pc, #268]	@ (80005c4 <KeyLogic+0x2b4>)
 80004b6:	f002 fc0d 	bl	8002cd4 <sniprintf>
                    snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80004ba:	2300      	movs	r3, #0
 80004bc:	4a40      	ldr	r2, [pc, #256]	@ (80005c0 <KeyLogic+0x2b0>)
 80004be:	2107      	movs	r1, #7
 80004c0:	4841      	ldr	r0, [pc, #260]	@ (80005c8 <KeyLogic+0x2b8>)
 80004c2:	f002 fc07 	bl	8002cd4 <sniprintf>
                    snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 1);
 80004c6:	2301      	movs	r3, #1
 80004c8:	4a3d      	ldr	r2, [pc, #244]	@ (80005c0 <KeyLogic+0x2b0>)
 80004ca:	2107      	movs	r1, #7
 80004cc:	483f      	ldr	r0, [pc, #252]	@ (80005cc <KeyLogic+0x2bc>)
 80004ce:	f002 fc01 	bl	8002cd4 <sniprintf>
                    break;
 80004d2:	e067      	b.n	80005a4 <KeyLogic+0x294>
                case 'E':
                    snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 80004d4:	2300      	movs	r3, #0
 80004d6:	4a3a      	ldr	r2, [pc, #232]	@ (80005c0 <KeyLogic+0x2b0>)
 80004d8:	2107      	movs	r1, #7
 80004da:	483a      	ldr	r0, [pc, #232]	@ (80005c4 <KeyLogic+0x2b4>)
 80004dc:	f002 fbfa 	bl	8002cd4 <sniprintf>
                    snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80004e0:	2300      	movs	r3, #0
 80004e2:	4a37      	ldr	r2, [pc, #220]	@ (80005c0 <KeyLogic+0x2b0>)
 80004e4:	2107      	movs	r1, #7
 80004e6:	4838      	ldr	r0, [pc, #224]	@ (80005c8 <KeyLogic+0x2b8>)
 80004e8:	f002 fbf4 	bl	8002cd4 <sniprintf>
                    snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 100);
 80004ec:	2364      	movs	r3, #100	@ 0x64
 80004ee:	4a34      	ldr	r2, [pc, #208]	@ (80005c0 <KeyLogic+0x2b0>)
 80004f0:	2107      	movs	r1, #7
 80004f2:	4836      	ldr	r0, [pc, #216]	@ (80005cc <KeyLogic+0x2bc>)
 80004f4:	f002 fbee 	bl	8002cd4 <sniprintf>
                    break;
 80004f8:	e054      	b.n	80005a4 <KeyLogic+0x294>
                case 'T':
                    if (seqState == SEQ_IDLE) {
 80004fa:	4b2e      	ldr	r3, [pc, #184]	@ (80005b4 <KeyLogic+0x2a4>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d103      	bne.n	800050a <KeyLogic+0x1fa>
                        seqState = SEQ_PRESSED_T;
 8000502:	4b2c      	ldr	r3, [pc, #176]	@ (80005b4 <KeyLogic+0x2a4>)
 8000504:	2201      	movs	r2, #1
 8000506:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 8000508:	e04c      	b.n	80005a4 <KeyLogic+0x294>
                        seqState = SEQ_IDLE;
 800050a:	4b2a      	ldr	r3, [pc, #168]	@ (80005b4 <KeyLogic+0x2a4>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
                    break;
 8000510:	e048      	b.n	80005a4 <KeyLogic+0x294>
                case '$':
                    if (seqState == SEQ_PRESSED_T) {
 8000512:	4b28      	ldr	r3, [pc, #160]	@ (80005b4 <KeyLogic+0x2a4>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d103      	bne.n	8000522 <KeyLogic+0x212>
                        seqState = SEQ_PRESSED_T_$;
 800051a:	4b26      	ldr	r3, [pc, #152]	@ (80005b4 <KeyLogic+0x2a4>)
 800051c:	2203      	movs	r2, #3
 800051e:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 8000520:	e040      	b.n	80005a4 <KeyLogic+0x294>
                        seqState = SEQ_IDLE;
 8000522:	4b24      	ldr	r3, [pc, #144]	@ (80005b4 <KeyLogic+0x2a4>)
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]
                    break;
 8000528:	e03c      	b.n	80005a4 <KeyLogic+0x294>
                case 'L':
                    if (seqState == SEQ_PRESSED_T) {
 800052a:	4b22      	ldr	r3, [pc, #136]	@ (80005b4 <KeyLogic+0x2a4>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d103      	bne.n	800053a <KeyLogic+0x22a>
                        seqState = SEQ_PRESSED_T_L;
 8000532:	4b20      	ldr	r3, [pc, #128]	@ (80005b4 <KeyLogic+0x2a4>)
 8000534:	2202      	movs	r2, #2
 8000536:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 8000538:	e034      	b.n	80005a4 <KeyLogic+0x294>
                        seqState = SEQ_IDLE;
 800053a:	4b1e      	ldr	r3, [pc, #120]	@ (80005b4 <KeyLogic+0x2a4>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
                    break;
 8000540:	e030      	b.n	80005a4 <KeyLogic+0x294>
                case 'D':
                    if (seqState == SEQ_PRESSED_T) {
 8000542:	4b1c      	ldr	r3, [pc, #112]	@ (80005b4 <KeyLogic+0x2a4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d103      	bne.n	8000552 <KeyLogic+0x242>
                        seqState = SEQ_PRESSED_T_F3;
 800054a:	4b1a      	ldr	r3, [pc, #104]	@ (80005b4 <KeyLogic+0x2a4>)
 800054c:	2204      	movs	r2, #4
 800054e:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 8000550:	e028      	b.n	80005a4 <KeyLogic+0x294>
                        seqState = SEQ_IDLE;
 8000552:	4b18      	ldr	r3, [pc, #96]	@ (80005b4 <KeyLogic+0x2a4>)
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
                    break;
 8000558:	e024      	b.n	80005a4 <KeyLogic+0x294>
                case 'F':
                    if (seqState == SEQ_PRESSED_T) {
 800055a:	4b16      	ldr	r3, [pc, #88]	@ (80005b4 <KeyLogic+0x2a4>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d103      	bne.n	800056a <KeyLogic+0x25a>
                        seqState = SEQ_PRESSED_T_F4;
 8000562:	4b14      	ldr	r3, [pc, #80]	@ (80005b4 <KeyLogic+0x2a4>)
 8000564:	2205      	movs	r2, #5
 8000566:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 8000568:	e01c      	b.n	80005a4 <KeyLogic+0x294>
                        seqState = SEQ_IDLE;
 800056a:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <KeyLogic+0x2a4>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
                    break;
 8000570:	e018      	b.n	80005a4 <KeyLogic+0x294>
                default:
                    if (keyPressed >= '0' && keyPressed <= '9') {
 8000572:	4b0f      	ldr	r3, [pc, #60]	@ (80005b0 <KeyLogic+0x2a0>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b2f      	cmp	r3, #47	@ 0x2f
 8000578:	d910      	bls.n	800059c <KeyLogic+0x28c>
 800057a:	4b0d      	ldr	r3, [pc, #52]	@ (80005b0 <KeyLogic+0x2a0>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b39      	cmp	r3, #57	@ 0x39
 8000580:	d80c      	bhi.n	800059c <KeyLogic+0x28c>
                        seqState = SEQ_NUMBER;
 8000582:	4b0c      	ldr	r3, [pc, #48]	@ (80005b4 <KeyLogic+0x2a4>)
 8000584:	2206      	movs	r2, #6
 8000586:	701a      	strb	r2, [r3, #0]
                        accumulatedNumber = keyPressed - '0';
 8000588:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <KeyLogic+0x2a0>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	3b30      	subs	r3, #48	@ 0x30
 800058e:	461a      	mov	r2, r3
 8000590:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <KeyLogic+0x2ac>)
 8000592:	601a      	str	r2, [r3, #0]
                        numberOfDigits = 1;
 8000594:	4b08      	ldr	r3, [pc, #32]	@ (80005b8 <KeyLogic+0x2a8>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 800059a:	e002      	b.n	80005a2 <KeyLogic+0x292>
                        seqState = SEQ_IDLE;
 800059c:	4b05      	ldr	r3, [pc, #20]	@ (80005b4 <KeyLogic+0x2a4>)
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
                    break;
 80005a2:	bf00      	nop
            }
        }
        keyPressed = 0xFF;
 80005a4:	4b02      	ldr	r3, [pc, #8]	@ (80005b0 <KeyLogic+0x2a0>)
 80005a6:	22ff      	movs	r2, #255	@ 0xff
 80005a8:	701a      	strb	r2, [r3, #0]
	}
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	2000002d 	.word	0x2000002d
 80005b4:	200000c8 	.word	0x200000c8
 80005b8:	200000bc 	.word	0x200000bc
 80005bc:	200000b8 	.word	0x200000b8
 80005c0:	08003674 	.word	0x08003674
 80005c4:	20000018 	.word	0x20000018
 80005c8:	2000001f 	.word	0x2000001f
 80005cc:	20000026 	.word	0x20000026
 80005d0:	000186a0 	.word	0x000186a0

080005d4 <KeyLogic_Action>:

void KeyLogic_Action() {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	@ 0x30
 80005d8:	af00      	add	r7, sp, #0
    char buffer[7];
    switch (seqState) {
 80005da:	4b9a      	ldr	r3, [pc, #616]	@ (8000844 <KeyLogic_Action+0x270>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b06      	cmp	r3, #6
 80005e0:	f200 8119 	bhi.w	8000816 <KeyLogic_Action+0x242>
 80005e4:	a201      	add	r2, pc, #4	@ (adr r2, 80005ec <KeyLogic_Action+0x18>)
 80005e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ea:	bf00      	nop
 80005ec:	08000609 	.word	0x08000609
 80005f0:	0800062f 	.word	0x0800062f
 80005f4:	080006f3 	.word	0x080006f3
 80005f8:	08000655 	.word	0x08000655
 80005fc:	0800078b 	.word	0x0800078b
 8000600:	080007b1 	.word	0x080007b1
 8000604:	080007d7 	.word	0x080007d7
        case SEQ_IDLE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000608:	2300      	movs	r3, #0
 800060a:	4a8f      	ldr	r2, [pc, #572]	@ (8000848 <KeyLogic_Action+0x274>)
 800060c:	2107      	movs	r1, #7
 800060e:	488f      	ldr	r0, [pc, #572]	@ (800084c <KeyLogic_Action+0x278>)
 8000610:	f002 fb60 	bl	8002cd4 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000614:	2300      	movs	r3, #0
 8000616:	4a8c      	ldr	r2, [pc, #560]	@ (8000848 <KeyLogic_Action+0x274>)
 8000618:	2107      	movs	r1, #7
 800061a:	488d      	ldr	r0, [pc, #564]	@ (8000850 <KeyLogic_Action+0x27c>)
 800061c:	f002 fb5a 	bl	8002cd4 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000620:	2300      	movs	r3, #0
 8000622:	4a89      	ldr	r2, [pc, #548]	@ (8000848 <KeyLogic_Action+0x274>)
 8000624:	2107      	movs	r1, #7
 8000626:	488b      	ldr	r0, [pc, #556]	@ (8000854 <KeyLogic_Action+0x280>)
 8000628:	f002 fb54 	bl	8002cd4 <sniprintf>
            break;
 800062c:	e106      	b.n	800083c <KeyLogic_Action+0x268>
        case SEQ_PRESSED_T:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 800062e:	2300      	movs	r3, #0
 8000630:	4a85      	ldr	r2, [pc, #532]	@ (8000848 <KeyLogic_Action+0x274>)
 8000632:	2107      	movs	r1, #7
 8000634:	4885      	ldr	r0, [pc, #532]	@ (800084c <KeyLogic_Action+0x278>)
 8000636:	f002 fb4d 	bl	8002cd4 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800063a:	2300      	movs	r3, #0
 800063c:	4a82      	ldr	r2, [pc, #520]	@ (8000848 <KeyLogic_Action+0x274>)
 800063e:	2107      	movs	r1, #7
 8000640:	4883      	ldr	r0, [pc, #524]	@ (8000850 <KeyLogic_Action+0x27c>)
 8000642:	f002 fb47 	bl	8002cd4 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 999999);
 8000646:	4b84      	ldr	r3, [pc, #528]	@ (8000858 <KeyLogic_Action+0x284>)
 8000648:	4a7f      	ldr	r2, [pc, #508]	@ (8000848 <KeyLogic_Action+0x274>)
 800064a:	2107      	movs	r1, #7
 800064c:	4881      	ldr	r0, [pc, #516]	@ (8000854 <KeyLogic_Action+0x280>)
 800064e:	f002 fb41 	bl	8002cd4 <sniprintf>
            break;
 8000652:	e0f3      	b.n	800083c <KeyLogic_Action+0x268>
        case SEQ_PRESSED_T_$:
        	// Format the total liters into two parts
			formatTotalLitersShift(totalLitersShift, &row1, &row2);
 8000654:	4b81      	ldr	r3, [pc, #516]	@ (800085c <KeyLogic_Action+0x288>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a81      	ldr	r2, [pc, #516]	@ (8000860 <KeyLogic_Action+0x28c>)
 800065a:	4982      	ldr	r1, [pc, #520]	@ (8000864 <KeyLogic_Action+0x290>)
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff fe1f 	bl	80002a0 <formatTotalLitersShift>

			// Ensure the combined string fits into the buffer
			char row1StrShift[7]; // Buffer to hold formatted row1 string
			snprintf(row1StrShift, sizeof(row1StrShift), "%06ld", row1);
 8000662:	4b80      	ldr	r3, [pc, #512]	@ (8000864 <KeyLogic_Action+0x290>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f107 0018 	add.w	r0, r7, #24
 800066a:	4a7f      	ldr	r2, [pc, #508]	@ (8000868 <KeyLogic_Action+0x294>)
 800066c:	2107      	movs	r1, #7
 800066e:	f002 fb31 	bl	8002cd4 <sniprintf>

			// Combine "L.. " with the last two digits of row1
			char combinedStrShift[8]; // Buffer to hold combined string "L.. " and last two digits of row1
			snprintf(combinedStrShift, sizeof(combinedStrShift), "SH.%04ld", row1 % 10000); // Extract last two digits of row1
 8000672:	4b7c      	ldr	r3, [pc, #496]	@ (8000864 <KeyLogic_Action+0x290>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4b7d      	ldr	r3, [pc, #500]	@ (800086c <KeyLogic_Action+0x298>)
 8000678:	fba3 1302 	umull	r1, r3, r3, r2
 800067c:	0b5b      	lsrs	r3, r3, #13
 800067e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000682:	fb01 f303 	mul.w	r3, r1, r3
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	f107 0010 	add.w	r0, r7, #16
 800068c:	4a78      	ldr	r2, [pc, #480]	@ (8000870 <KeyLogic_Action+0x29c>)
 800068e:	2108      	movs	r1, #8
 8000690:	f002 fb20 	bl	8002cd4 <sniprintf>

			// Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
			for (int i = 0; i < 6; ++i) {
 8000694:	2300      	movs	r3, #0
 8000696:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000698:	e01b      	b.n	80006d2 <KeyLogic_Action+0xfe>
				if (i < strlen(combinedStrShift)) {
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fd54 	bl	800014c <strlen>
 80006a4:	4602      	mov	r2, r0
 80006a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d90a      	bls.n	80006c2 <KeyLogic_Action+0xee>
					SevenSegBuffer[0][i] = combinedStrShift[i];
 80006ac:	f107 0210 	add.w	r2, r7, #16
 80006b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006b2:	4413      	add	r3, r2
 80006b4:	7819      	ldrb	r1, [r3, #0]
 80006b6:	4a65      	ldr	r2, [pc, #404]	@ (800084c <KeyLogic_Action+0x278>)
 80006b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006ba:	4413      	add	r3, r2
 80006bc:	460a      	mov	r2, r1
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	e004      	b.n	80006cc <KeyLogic_Action+0xf8>
				} else {
					SevenSegBuffer[0][i] = ' '; // Pad with spaces
 80006c2:	4a62      	ldr	r2, [pc, #392]	@ (800084c <KeyLogic_Action+0x278>)
 80006c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006c6:	4413      	add	r3, r2
 80006c8:	2220      	movs	r2, #32
 80006ca:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; ++i) {
 80006cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006ce:	3301      	adds	r3, #1
 80006d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006d4:	2b05      	cmp	r3, #5
 80006d6:	dde0      	ble.n	800069a <KeyLogic_Action+0xc6>
				}
			}
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 80006d8:	4b61      	ldr	r3, [pc, #388]	@ (8000860 <KeyLogic_Action+0x28c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a62      	ldr	r2, [pc, #392]	@ (8000868 <KeyLogic_Action+0x294>)
 80006de:	2107      	movs	r1, #7
 80006e0:	485b      	ldr	r0, [pc, #364]	@ (8000850 <KeyLogic_Action+0x27c>)
 80006e2:	f002 faf7 	bl	8002cd4 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SHIFT ");
 80006e6:	4a63      	ldr	r2, [pc, #396]	@ (8000874 <KeyLogic_Action+0x2a0>)
 80006e8:	2107      	movs	r1, #7
 80006ea:	485a      	ldr	r0, [pc, #360]	@ (8000854 <KeyLogic_Action+0x280>)
 80006ec:	f002 faf2 	bl	8002cd4 <sniprintf>

            break;
 80006f0:	e0a4      	b.n	800083c <KeyLogic_Action+0x268>
        case SEQ_PRESSED_T_L:
            // Format the total liters into two parts
            formatTotalLiters(totalLiters, &row1, &row2);
 80006f2:	4b61      	ldr	r3, [pc, #388]	@ (8000878 <KeyLogic_Action+0x2a4>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a5a      	ldr	r2, [pc, #360]	@ (8000860 <KeyLogic_Action+0x28c>)
 80006f8:	495a      	ldr	r1, [pc, #360]	@ (8000864 <KeyLogic_Action+0x290>)
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd84 	bl	8000208 <formatTotalLiters>

            // Ensure the combined string fits into the buffer
            char row1Str[7]; // Buffer to hold formatted row1 string
            snprintf(row1Str, sizeof(row1Str), "%06ld", row1);
 8000700:	4b58      	ldr	r3, [pc, #352]	@ (8000864 <KeyLogic_Action+0x290>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f107 0008 	add.w	r0, r7, #8
 8000708:	4a57      	ldr	r2, [pc, #348]	@ (8000868 <KeyLogic_Action+0x294>)
 800070a:	2107      	movs	r1, #7
 800070c:	f002 fae2 	bl	8002cd4 <sniprintf>

            // Combine "L.. " with the last two digits of row1
            char combinedStr[8]; // Buffer to hold combined string "L.. " and last two digits of row1
            snprintf(combinedStr, sizeof(combinedStr), "L.%04ld", row1 % 10000); // Extract last two digits of row1
 8000710:	4b54      	ldr	r3, [pc, #336]	@ (8000864 <KeyLogic_Action+0x290>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b55      	ldr	r3, [pc, #340]	@ (800086c <KeyLogic_Action+0x298>)
 8000716:	fba3 1302 	umull	r1, r3, r3, r2
 800071a:	0b5b      	lsrs	r3, r3, #13
 800071c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000720:	fb01 f303 	mul.w	r3, r1, r3
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	4638      	mov	r0, r7
 8000728:	4a54      	ldr	r2, [pc, #336]	@ (800087c <KeyLogic_Action+0x2a8>)
 800072a:	2108      	movs	r1, #8
 800072c:	f002 fad2 	bl	8002cd4 <sniprintf>

            // Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
            for (int i = 0; i < 6; ++i) {
 8000730:	2300      	movs	r3, #0
 8000732:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000734:	e019      	b.n	800076a <KeyLogic_Action+0x196>
                if (i < strlen(combinedStr)) {
 8000736:	463b      	mov	r3, r7
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fd07 	bl	800014c <strlen>
 800073e:	4602      	mov	r2, r0
 8000740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000742:	429a      	cmp	r2, r3
 8000744:	d909      	bls.n	800075a <KeyLogic_Action+0x186>
                    SevenSegBuffer[0][i] = combinedStr[i];
 8000746:	463a      	mov	r2, r7
 8000748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800074a:	4413      	add	r3, r2
 800074c:	7819      	ldrb	r1, [r3, #0]
 800074e:	4a3f      	ldr	r2, [pc, #252]	@ (800084c <KeyLogic_Action+0x278>)
 8000750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000752:	4413      	add	r3, r2
 8000754:	460a      	mov	r2, r1
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	e004      	b.n	8000764 <KeyLogic_Action+0x190>
                } else {
                    SevenSegBuffer[0][i] = ' '; // Pad with spaces
 800075a:	4a3c      	ldr	r2, [pc, #240]	@ (800084c <KeyLogic_Action+0x278>)
 800075c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800075e:	4413      	add	r3, r2
 8000760:	2220      	movs	r2, #32
 8000762:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; ++i) {
 8000764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000766:	3301      	adds	r3, #1
 8000768:	62bb      	str	r3, [r7, #40]	@ 0x28
 800076a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800076c:	2b05      	cmp	r3, #5
 800076e:	dde2      	ble.n	8000736 <KeyLogic_Action+0x162>
                }
            }


            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8000770:	4b3b      	ldr	r3, [pc, #236]	@ (8000860 <KeyLogic_Action+0x28c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a3c      	ldr	r2, [pc, #240]	@ (8000868 <KeyLogic_Action+0x294>)
 8000776:	2107      	movs	r1, #7
 8000778:	4835      	ldr	r0, [pc, #212]	@ (8000850 <KeyLogic_Action+0x27c>)
 800077a:	f002 faab 	bl	8002cd4 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "TOTAL ");
 800077e:	4a40      	ldr	r2, [pc, #256]	@ (8000880 <KeyLogic_Action+0x2ac>)
 8000780:	2107      	movs	r1, #7
 8000782:	4834      	ldr	r0, [pc, #208]	@ (8000854 <KeyLogic_Action+0x280>)
 8000784:	f002 faa6 	bl	8002cd4 <sniprintf>


            break;
 8000788:	e058      	b.n	800083c <KeyLogic_Action+0x268>
        case SEQ_PRESSED_T_F3:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 333333);
 800078a:	4b3e      	ldr	r3, [pc, #248]	@ (8000884 <KeyLogic_Action+0x2b0>)
 800078c:	4a2e      	ldr	r2, [pc, #184]	@ (8000848 <KeyLogic_Action+0x274>)
 800078e:	2107      	movs	r1, #7
 8000790:	482e      	ldr	r0, [pc, #184]	@ (800084c <KeyLogic_Action+0x278>)
 8000792:	f002 fa9f 	bl	8002cd4 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000796:	2300      	movs	r3, #0
 8000798:	4a2b      	ldr	r2, [pc, #172]	@ (8000848 <KeyLogic_Action+0x274>)
 800079a:	2107      	movs	r1, #7
 800079c:	482c      	ldr	r0, [pc, #176]	@ (8000850 <KeyLogic_Action+0x27c>)
 800079e:	f002 fa99 	bl	8002cd4 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80007a2:	2300      	movs	r3, #0
 80007a4:	4a28      	ldr	r2, [pc, #160]	@ (8000848 <KeyLogic_Action+0x274>)
 80007a6:	2107      	movs	r1, #7
 80007a8:	482a      	ldr	r0, [pc, #168]	@ (8000854 <KeyLogic_Action+0x280>)
 80007aa:	f002 fa93 	bl	8002cd4 <sniprintf>
            break;
 80007ae:	e045      	b.n	800083c <KeyLogic_Action+0x268>
        case SEQ_PRESSED_T_F4:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 444444);
 80007b0:	4b35      	ldr	r3, [pc, #212]	@ (8000888 <KeyLogic_Action+0x2b4>)
 80007b2:	4a25      	ldr	r2, [pc, #148]	@ (8000848 <KeyLogic_Action+0x274>)
 80007b4:	2107      	movs	r1, #7
 80007b6:	4825      	ldr	r0, [pc, #148]	@ (800084c <KeyLogic_Action+0x278>)
 80007b8:	f002 fa8c 	bl	8002cd4 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80007bc:	2300      	movs	r3, #0
 80007be:	4a22      	ldr	r2, [pc, #136]	@ (8000848 <KeyLogic_Action+0x274>)
 80007c0:	2107      	movs	r1, #7
 80007c2:	4823      	ldr	r0, [pc, #140]	@ (8000850 <KeyLogic_Action+0x27c>)
 80007c4:	f002 fa86 	bl	8002cd4 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80007c8:	2300      	movs	r3, #0
 80007ca:	4a1f      	ldr	r2, [pc, #124]	@ (8000848 <KeyLogic_Action+0x274>)
 80007cc:	2107      	movs	r1, #7
 80007ce:	4821      	ldr	r0, [pc, #132]	@ (8000854 <KeyLogic_Action+0x280>)
 80007d0:	f002 fa80 	bl	8002cd4 <sniprintf>
            break;
 80007d4:	e032      	b.n	800083c <KeyLogic_Action+0x268>
        case SEQ_NUMBER:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 80007d6:	4b2d      	ldr	r3, [pc, #180]	@ (800088c <KeyLogic_Action+0x2b8>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f107 0020 	add.w	r0, r7, #32
 80007de:	4a22      	ldr	r2, [pc, #136]	@ (8000868 <KeyLogic_Action+0x294>)
 80007e0:	2107      	movs	r1, #7
 80007e2:	f002 fa77 	bl	8002cd4 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	4a29      	ldr	r2, [pc, #164]	@ (8000890 <KeyLogic_Action+0x2bc>)
 80007ec:	2107      	movs	r1, #7
 80007ee:	4817      	ldr	r0, [pc, #92]	@ (800084c <KeyLogic_Action+0x278>)
 80007f0:	f002 fa70 	bl	8002cd4 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80007f4:	2300      	movs	r3, #0
 80007f6:	4a14      	ldr	r2, [pc, #80]	@ (8000848 <KeyLogic_Action+0x274>)
 80007f8:	2107      	movs	r1, #7
 80007fa:	4815      	ldr	r0, [pc, #84]	@ (8000850 <KeyLogic_Action+0x27c>)
 80007fc:	f002 fa6a 	bl	8002cd4 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000800:	2300      	movs	r3, #0
 8000802:	4a11      	ldr	r2, [pc, #68]	@ (8000848 <KeyLogic_Action+0x274>)
 8000804:	2107      	movs	r1, #7
 8000806:	4813      	ldr	r0, [pc, #76]	@ (8000854 <KeyLogic_Action+0x280>)
 8000808:	f002 fa64 	bl	8002cd4 <sniprintf>
            LEDPointFlag = -1;
 800080c:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <KeyLogic_Action+0x2c0>)
 800080e:	f04f 32ff 	mov.w	r2, #4294967295
 8000812:	601a      	str	r2, [r3, #0]
            break;
 8000814:	e012      	b.n	800083c <KeyLogic_Action+0x268>
        default:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000816:	2300      	movs	r3, #0
 8000818:	4a0b      	ldr	r2, [pc, #44]	@ (8000848 <KeyLogic_Action+0x274>)
 800081a:	2107      	movs	r1, #7
 800081c:	480b      	ldr	r0, [pc, #44]	@ (800084c <KeyLogic_Action+0x278>)
 800081e:	f002 fa59 	bl	8002cd4 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000822:	2300      	movs	r3, #0
 8000824:	4a08      	ldr	r2, [pc, #32]	@ (8000848 <KeyLogic_Action+0x274>)
 8000826:	2107      	movs	r1, #7
 8000828:	4809      	ldr	r0, [pc, #36]	@ (8000850 <KeyLogic_Action+0x27c>)
 800082a:	f002 fa53 	bl	8002cd4 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 800082e:	2300      	movs	r3, #0
 8000830:	4a05      	ldr	r2, [pc, #20]	@ (8000848 <KeyLogic_Action+0x274>)
 8000832:	2107      	movs	r1, #7
 8000834:	4807      	ldr	r0, [pc, #28]	@ (8000854 <KeyLogic_Action+0x280>)
 8000836:	f002 fa4d 	bl	8002cd4 <sniprintf>
            break;
 800083a:	bf00      	nop
    }
}
 800083c:	bf00      	nop
 800083e:	3730      	adds	r7, #48	@ 0x30
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000c8 	.word	0x200000c8
 8000848:	08003674 	.word	0x08003674
 800084c:	20000018 	.word	0x20000018
 8000850:	2000001f 	.word	0x2000001f
 8000854:	20000026 	.word	0x20000026
 8000858:	000f423f 	.word	0x000f423f
 800085c:	20000034 	.word	0x20000034
 8000860:	200000c4 	.word	0x200000c4
 8000864:	200000c0 	.word	0x200000c0
 8000868:	0800367c 	.word	0x0800367c
 800086c:	d1b71759 	.word	0xd1b71759
 8000870:	08003684 	.word	0x08003684
 8000874:	08003690 	.word	0x08003690
 8000878:	20000030 	.word	0x20000030
 800087c:	08003698 	.word	0x08003698
 8000880:	080036a0 	.word	0x080036a0
 8000884:	00051615 	.word	0x00051615
 8000888:	0006c81c 	.word	0x0006c81c
 800088c:	200000b8 	.word	0x200000b8
 8000890:	080036a8 	.word	0x080036a8
 8000894:	20000038 	.word	0x20000038

08000898 <CharToSegment>:
//uint32_t SevenSegBuffer[3]={123456, 654321, 987654};
char SevenSegBuffer[3][7] = {"123456", "654321", "987654"};
uint8_t displayBuffer[5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;

uint8_t CharToSegment(char c) {
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80008a6:	d907      	bls.n	80008b8 <CharToSegment+0x20>
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b39      	cmp	r3, #57	@ 0x39
 80008ac:	d804      	bhi.n	80008b8 <CharToSegment+0x20>
        return digitMapWithOutDP[c - '0'];
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	3b30      	subs	r3, #48	@ 0x30
 80008b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000930 <CharToSegment+0x98>)
 80008b4:	5cd3      	ldrb	r3, [r2, r3]
 80008b6:	e036      	b.n	8000926 <CharToSegment+0x8e>
    } else if (c == 'L') {
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	2b4c      	cmp	r3, #76	@ 0x4c
 80008bc:	d102      	bne.n	80008c4 <CharToSegment+0x2c>
        return specialCharMap[0];
 80008be:	4b1d      	ldr	r3, [pc, #116]	@ (8000934 <CharToSegment+0x9c>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	e030      	b.n	8000926 <CharToSegment+0x8e>
    } else if (c == '.') {
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80008c8:	d102      	bne.n	80008d0 <CharToSegment+0x38>
        return specialCharMap[1];
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <CharToSegment+0x9c>)
 80008cc:	785b      	ldrb	r3, [r3, #1]
 80008ce:	e02a      	b.n	8000926 <CharToSegment+0x8e>
    } else if (c == 'T') {
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	2b54      	cmp	r3, #84	@ 0x54
 80008d4:	d102      	bne.n	80008dc <CharToSegment+0x44>
		return specialCharMap[2];
 80008d6:	4b17      	ldr	r3, [pc, #92]	@ (8000934 <CharToSegment+0x9c>)
 80008d8:	789b      	ldrb	r3, [r3, #2]
 80008da:	e024      	b.n	8000926 <CharToSegment+0x8e>
    } else if (c == 'O') {
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b4f      	cmp	r3, #79	@ 0x4f
 80008e0:	d102      	bne.n	80008e8 <CharToSegment+0x50>
		return specialCharMap[3];
 80008e2:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <CharToSegment+0x9c>)
 80008e4:	78db      	ldrb	r3, [r3, #3]
 80008e6:	e01e      	b.n	8000926 <CharToSegment+0x8e>
    } else if (c == 'A') {
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b41      	cmp	r3, #65	@ 0x41
 80008ec:	d102      	bne.n	80008f4 <CharToSegment+0x5c>
		return specialCharMap[4];
 80008ee:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <CharToSegment+0x9c>)
 80008f0:	791b      	ldrb	r3, [r3, #4]
 80008f2:	e018      	b.n	8000926 <CharToSegment+0x8e>
    } else if (c == 'S') {
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	2b53      	cmp	r3, #83	@ 0x53
 80008f8:	d102      	bne.n	8000900 <CharToSegment+0x68>
        return specialCharMap[5];
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <CharToSegment+0x9c>)
 80008fc:	795b      	ldrb	r3, [r3, #5]
 80008fe:	e012      	b.n	8000926 <CharToSegment+0x8e>
    } else if (c == 'H') {
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	2b48      	cmp	r3, #72	@ 0x48
 8000904:	d102      	bne.n	800090c <CharToSegment+0x74>
        return specialCharMap[6];
 8000906:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <CharToSegment+0x9c>)
 8000908:	799b      	ldrb	r3, [r3, #6]
 800090a:	e00c      	b.n	8000926 <CharToSegment+0x8e>
    } else if (c == 'I') {
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b49      	cmp	r3, #73	@ 0x49
 8000910:	d102      	bne.n	8000918 <CharToSegment+0x80>
        return specialCharMap[7];
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <CharToSegment+0x9c>)
 8000914:	79db      	ldrb	r3, [r3, #7]
 8000916:	e006      	b.n	8000926 <CharToSegment+0x8e>
    } else if (c == 'F') {
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2b46      	cmp	r3, #70	@ 0x46
 800091c:	d102      	bne.n	8000924 <CharToSegment+0x8c>
        return specialCharMap[8];
 800091e:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <CharToSegment+0x9c>)
 8000920:	7a1b      	ldrb	r3, [r3, #8]
 8000922:	e000      	b.n	8000926 <CharToSegment+0x8e>
    } else {
        return 0b11111111; // Blank
 8000924:	23ff      	movs	r3, #255	@ 0xff
    }
}
 8000926:	4618      	mov	r0, r3
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000000 	.word	0x20000000
 8000934:	2000000c 	.word	0x2000000c

08000938 <SevenSegLEDsHandler>:

uint8_t* SevenSegLEDsHandler(char buffer[3][7], uint8_t scan_state) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    for (int i = 0; i < 3; i++) {
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	e035      	b.n	80009b6 <SevenSegLEDsHandler+0x7e>
        int len = strlen(buffer[i]);
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	4613      	mov	r3, r2
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	1a9b      	subs	r3, r3, r2
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fbf8 	bl	800014c <strlen>
 800095c:	4603      	mov	r3, r0
 800095e:	60bb      	str	r3, [r7, #8]
        if (scan_state < 6) {
 8000960:	78fb      	ldrb	r3, [r7, #3]
 8000962:	2b05      	cmp	r3, #5
 8000964:	d81f      	bhi.n	80009a6 <SevenSegLEDsHandler+0x6e>
            if (scan_state < len) {
 8000966:	78fb      	ldrb	r3, [r7, #3]
 8000968:	68ba      	ldr	r2, [r7, #8]
 800096a:	429a      	cmp	r2, r3
 800096c:	dd15      	ble.n	800099a <SevenSegLEDsHandler+0x62>
                output[i] = CharToSegment(buffer[i][len - 1 - scan_state]);
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4613      	mov	r3, r2
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	1a9b      	subs	r3, r3, r2
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	441a      	add	r2, r3
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	1e59      	subs	r1, r3, #1
 800097e:	78fb      	ldrb	r3, [r7, #3]
 8000980:	1acb      	subs	r3, r1, r3
 8000982:	5cd3      	ldrb	r3, [r2, r3]
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff87 	bl	8000898 <CharToSegment>
 800098a:	4603      	mov	r3, r0
 800098c:	4619      	mov	r1, r3
 800098e:	4a0e      	ldr	r2, [pc, #56]	@ (80009c8 <SevenSegLEDsHandler+0x90>)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	460a      	mov	r2, r1
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	e00a      	b.n	80009b0 <SevenSegLEDsHandler+0x78>
            } else {
                output[i] = 0b11111111; // Blank
 800099a:	4a0b      	ldr	r2, [pc, #44]	@ (80009c8 <SevenSegLEDsHandler+0x90>)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4413      	add	r3, r2
 80009a0:	22ff      	movs	r2, #255	@ 0xff
 80009a2:	701a      	strb	r2, [r3, #0]
 80009a4:	e004      	b.n	80009b0 <SevenSegLEDsHandler+0x78>
            }
        } else {
            output[i] = 0b11111111; // Blank
 80009a6:	4a08      	ldr	r2, [pc, #32]	@ (80009c8 <SevenSegLEDsHandler+0x90>)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4413      	add	r3, r2
 80009ac:	22ff      	movs	r2, #255	@ 0xff
 80009ae:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	3301      	adds	r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	ddc6      	ble.n	800094a <SevenSegLEDsHandler+0x12>
        }
    }
    return output;
 80009bc:	4b02      	ldr	r3, [pc, #8]	@ (80009c8 <SevenSegLEDsHandler+0x90>)
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000d4 	.word	0x200000d4

080009cc <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(char buffer[3][7], uint8_t scan_state) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	70fb      	strb	r3, [r7, #3]
	uint8_t* curr_digit=SevenSegLEDsHandler(buffer,scan_state);
 80009d8:	78fb      	ldrb	r3, [r7, #3]
 80009da:	4619      	mov	r1, r3
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ffab 	bl	8000938 <SevenSegLEDsHandler>
 80009e2:	60b8      	str	r0, [r7, #8]
	uint8_t curr_scan;
	switch (scan_state) {
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	2b05      	cmp	r3, #5
 80009e8:	d820      	bhi.n	8000a2c <UpdateDisplayBuffer+0x60>
 80009ea:	a201      	add	r2, pc, #4	@ (adr r2, 80009f0 <UpdateDisplayBuffer+0x24>)
 80009ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f0:	08000a09 	.word	0x08000a09
 80009f4:	08000a0f 	.word	0x08000a0f
 80009f8:	08000a15 	.word	0x08000a15
 80009fc:	08000a1b 	.word	0x08000a1b
 8000a00:	08000a21 	.word	0x08000a21
 8000a04:	08000a27 	.word	0x08000a27
		case 0:
			curr_scan=0b00100000;
 8000a08:	2320      	movs	r3, #32
 8000a0a:	73fb      	strb	r3, [r7, #15]
			break;
 8000a0c:	e011      	b.n	8000a32 <UpdateDisplayBuffer+0x66>
		case 1:
			curr_scan=0b00010000;
 8000a0e:	2310      	movs	r3, #16
 8000a10:	73fb      	strb	r3, [r7, #15]
			break;
 8000a12:	e00e      	b.n	8000a32 <UpdateDisplayBuffer+0x66>
		case 2:
			curr_scan=0b00001000;
 8000a14:	2308      	movs	r3, #8
 8000a16:	73fb      	strb	r3, [r7, #15]
			break;
 8000a18:	e00b      	b.n	8000a32 <UpdateDisplayBuffer+0x66>
		case 3:
			curr_scan=0b00000100;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	73fb      	strb	r3, [r7, #15]
			break;
 8000a1e:	e008      	b.n	8000a32 <UpdateDisplayBuffer+0x66>
		case 4:
			curr_scan=0b00000010;
 8000a20:	2302      	movs	r3, #2
 8000a22:	73fb      	strb	r3, [r7, #15]
			break;
 8000a24:	e005      	b.n	8000a32 <UpdateDisplayBuffer+0x66>
		case 5:
			curr_scan=0b00000001;
 8000a26:	2301      	movs	r3, #1
 8000a28:	73fb      	strb	r3, [r7, #15]
			break;
 8000a2a:	e002      	b.n	8000a32 <UpdateDisplayBuffer+0x66>
		default:
			curr_scan=0b00000001;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	73fb      	strb	r3, [r7, #15]
			break;
 8000a30:	bf00      	nop
	}
	if(LEDPointFlag >=0 && LEDPointFlag <=5){
 8000a32:	4b22      	ldr	r3, [pc, #136]	@ (8000abc <UpdateDisplayBuffer+0xf0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	db2c      	blt.n	8000a94 <UpdateDisplayBuffer+0xc8>
 8000a3a:	4b20      	ldr	r3, [pc, #128]	@ (8000abc <UpdateDisplayBuffer+0xf0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b05      	cmp	r3, #5
 8000a40:	dc28      	bgt.n	8000a94 <UpdateDisplayBuffer+0xc8>
	    	if (scan_state == LEDPointFlag){
 8000a42:	78fa      	ldrb	r2, [r7, #3]
 8000a44:	4b1d      	ldr	r3, [pc, #116]	@ (8000abc <UpdateDisplayBuffer+0xf0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d113      	bne.n	8000a74 <UpdateDisplayBuffer+0xa8>
				displayBuffer[0] = curr_scan;
 8000a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac0 <UpdateDisplayBuffer+0xf4>)
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	7013      	strb	r3, [r2, #0]
				displayBuffer[1] = curr_digit[2];
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	789a      	ldrb	r2, [r3, #2]
 8000a56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <UpdateDisplayBuffer+0xf4>)
 8000a58:	705a      	strb	r2, [r3, #1]
				displayBuffer[2] = curr_digit[1] & 0b01111111; //Add point to second row
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <UpdateDisplayBuffer+0xf4>)
 8000a68:	709a      	strb	r2, [r3, #2]
				displayBuffer[3] = curr_digit[0];
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	781a      	ldrb	r2, [r3, #0]
 8000a6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <UpdateDisplayBuffer+0xf4>)
 8000a70:	70da      	strb	r2, [r3, #3]
	    	if (scan_state == LEDPointFlag){
 8000a72:	e01f      	b.n	8000ab4 <UpdateDisplayBuffer+0xe8>
	    	}
	    	else
	    	{
	    		displayBuffer[0] = curr_scan;
 8000a74:	4a12      	ldr	r2, [pc, #72]	@ (8000ac0 <UpdateDisplayBuffer+0xf4>)
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	7013      	strb	r3, [r2, #0]
	    		displayBuffer[1] = curr_digit[2];
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	789a      	ldrb	r2, [r3, #2]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <UpdateDisplayBuffer+0xf4>)
 8000a80:	705a      	strb	r2, [r3, #1]
	    		displayBuffer[2] = curr_digit[1];
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	785a      	ldrb	r2, [r3, #1]
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <UpdateDisplayBuffer+0xf4>)
 8000a88:	709a      	strb	r2, [r3, #2]
	    		displayBuffer[3] = curr_digit[0];
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	781a      	ldrb	r2, [r3, #0]
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <UpdateDisplayBuffer+0xf4>)
 8000a90:	70da      	strb	r2, [r3, #3]
	    	if (scan_state == LEDPointFlag){
 8000a92:	e00f      	b.n	8000ab4 <UpdateDisplayBuffer+0xe8>
	    	}
	    }
	    else
	    {
			displayBuffer[0] = curr_scan;
 8000a94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <UpdateDisplayBuffer+0xf4>)
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	7013      	strb	r3, [r2, #0]
			displayBuffer[1] = curr_digit[2];
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	789a      	ldrb	r2, [r3, #2]
 8000a9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <UpdateDisplayBuffer+0xf4>)
 8000aa0:	705a      	strb	r2, [r3, #1]
			displayBuffer[2] = curr_digit[1];
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	785a      	ldrb	r2, [r3, #1]
 8000aa6:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <UpdateDisplayBuffer+0xf4>)
 8000aa8:	709a      	strb	r2, [r3, #2]
			displayBuffer[3] = curr_digit[0];
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	4b04      	ldr	r3, [pc, #16]	@ (8000ac0 <UpdateDisplayBuffer+0xf4>)
 8000ab0:	70da      	strb	r2, [r3, #3]
	    }
}
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000038 	.word	0x20000038
 8000ac0:	200000cc 	.word	0x200000cc

08000ac4 <SevenSegLEDsScan>:

//
void SevenSegLEDsScan(){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
//	uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
	UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState);
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <SevenSegLEDsScan+0x40>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480d      	ldr	r0, [pc, #52]	@ (8000b08 <SevenSegLEDsScan+0x44>)
 8000ad2:	f7ff ff7b 	bl	80009cc <UpdateDisplayBuffer>
	ShiftOut_SPI(displayBuffer, 4);
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <SevenSegLEDsScan+0x48>)
 8000ada:	f000 f81b 	bl	8000b14 <ShiftOut_SPI>
//    currentBufferIndex = bufferIndex;  // Swap buffers
    SevenSegScanState = (SevenSegScanState + 1) % 6;
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <SevenSegLEDsScan+0x40>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	1c5a      	adds	r2, r3, #1
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <SevenSegLEDsScan+0x4c>)
 8000ae8:	fb83 3102 	smull	r3, r1, r3, r2
 8000aec:	17d3      	asrs	r3, r2, #31
 8000aee:	1ac9      	subs	r1, r1, r3
 8000af0:	460b      	mov	r3, r1
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	440b      	add	r3, r1
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	1ad1      	subs	r1, r2, r3
 8000afa:	b2ca      	uxtb	r2, r1
 8000afc:	4b01      	ldr	r3, [pc, #4]	@ (8000b04 <SevenSegLEDsScan+0x40>)
 8000afe:	701a      	strb	r2, [r3, #0]
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000c9 	.word	0x200000c9
 8000b08:	20000018 	.word	0x20000018
 8000b0c:	200000cc 	.word	0x200000cc
 8000b10:	2aaaaaab 	.word	0x2aaaaaab

08000b14 <ShiftOut_SPI>:
 *      Author: clong
 */
#include "SPI_shift.h"

void ShiftOut_SPI(uint8_t *data, size_t size)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Pull STCP (Latch) low
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b24:	480a      	ldr	r0, [pc, #40]	@ (8000b50 <ShiftOut_SPI+0x3c>)
 8000b26:	f000 fe72 	bl	800180e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, 300); // Transmit data
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	4807      	ldr	r0, [pc, #28]	@ (8000b54 <ShiftOut_SPI+0x40>)
 8000b36:	f001 fae5 	bl	8002104 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Pull STCP (Latch) high
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b40:	4803      	ldr	r0, [pc, #12]	@ (8000b50 <ShiftOut_SPI+0x3c>)
 8000b42:	f000 fe64 	bl	800180e <HAL_GPIO_WritePin>

}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40010c00 	.word	0x40010c00
 8000b54:	20000130 	.word	0x20000130

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f000 fb4c 	bl	80011f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f832 	bl	8000bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b64:	f000 f924 	bl	8000db0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000b68:	f000 f8a0 	bl	8000cac <MX_SPI2_Init>
  MX_TIM2_Init();
 8000b6c:	f000 f8d4 	bl	8000d18 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000b70:	f000 f866 	bl	8000c40 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b74:	4812      	ldr	r0, [pc, #72]	@ (8000bc0 <main+0x68>)
 8000b76:	f001 fcff 	bl	8002578 <HAL_TIM_Base_Start_IT>
  setTimer(0,100);
 8000b7a:	2164      	movs	r1, #100	@ 0x64
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f000 facd 	bl	800111c <setTimer>
  setTimer(1,100);
 8000b82:	2164      	movs	r1, #100	@ 0x64
 8000b84:	2001      	movs	r0, #1
 8000b86:	f000 fac9 	bl	800111c <setTimer>
  setTimer(2,100);
 8000b8a:	2164      	movs	r1, #100	@ 0x64
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f000 fac5 	bl	800111c <setTimer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {
	  // TIMER 0 /////////////////////////////////////
	  if(timer_flag[0]==1){
 8000b92:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <main+0x6c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d105      	bne.n	8000ba6 <main+0x4e>

		  SevenSegLEDsScan();
 8000b9a:	f7ff ff93 	bl	8000ac4 <SevenSegLEDsScan>
		  setTimer(0,5);
 8000b9e:	2105      	movs	r1, #5
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f000 fabb 	bl	800111c <setTimer>
	  }

	  // TIMER 1 /////////////////////////////////////
	  if(timer_flag[1]==1){
 8000ba6:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <main+0x6c>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d1f1      	bne.n	8000b92 <main+0x3a>
		  KeyLogic();
 8000bae:	f7ff fbaf 	bl	8000310 <KeyLogic>
		  KeyLogic_Action();
 8000bb2:	f7ff fd0f 	bl	80005d4 <KeyLogic_Action>
		  setTimer(1,10);
 8000bb6:	210a      	movs	r1, #10
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f000 faaf 	bl	800111c <setTimer>
	  if(timer_flag[0]==1){
 8000bbe:	e7e8      	b.n	8000b92 <main+0x3a>
 8000bc0:	20000188 	.word	0x20000188
 8000bc4:	200001fc 	.word	0x200001fc

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b090      	sub	sp, #64	@ 0x40
 8000bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	f107 0318 	add.w	r3, r7, #24
 8000bd2:	2228      	movs	r2, #40	@ 0x28
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 f8b0 	bl	8002d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 fe1e 	bl	8001840 <HAL_RCC_OscConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c0a:	f000 f94b 	bl	8000ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0e:	230f      	movs	r3, #15
 8000c10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 f88c 	bl	8001d44 <HAL_RCC_ClockConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c32:	f000 f937 	bl	8000ea4 <Error_Handler>
  }
}
 8000c36:	bf00      	nop
 8000c38:	3740      	adds	r7, #64	@ 0x40
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c46:	4a18      	ldr	r2, [pc, #96]	@ (8000ca8 <MX_SPI1_Init+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c52:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c8c:	220a      	movs	r2, #10
 8000c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c92:	f001 f9b3 	bl	8001ffc <HAL_SPI_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c9c:	f000 f902 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200000d8 	.word	0x200000d8
 8000ca8:	40013000 	.word	0x40013000

08000cac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <MX_SPI2_Init+0x64>)
 8000cb2:	4a18      	ldr	r2, [pc, #96]	@ (8000d14 <MX_SPI2_Init+0x68>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <MX_SPI2_Init+0x64>)
 8000cb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_SPI2_Init+0x64>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_SPI2_Init+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_SPI2_Init+0x64>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_SPI2_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_SPI2_Init+0x64>)
 8000cd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cdc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_SPI2_Init+0x64>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <MX_SPI2_Init+0x64>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_SPI2_Init+0x64>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <MX_SPI2_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_SPI2_Init+0x64>)
 8000cf8:	220a      	movs	r2, #10
 8000cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <MX_SPI2_Init+0x64>)
 8000cfe:	f001 f97d 	bl	8001ffc <HAL_SPI_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d08:	f000 f8cc 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000130 	.word	0x20000130
 8000d14:	40003800 	.word	0x40003800

08000d18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d34:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d3e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000d42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d44:	4b19      	ldr	r3, [pc, #100]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d4a:	4b18      	ldr	r3, [pc, #96]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d4c:	2209      	movs	r2, #9
 8000d4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d50:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d5c:	4813      	ldr	r0, [pc, #76]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d5e:	f001 fbbb 	bl	80024d8 <HAL_TIM_Base_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d68:	f000 f89c 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	4619      	mov	r1, r3
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d7a:	f001 fd57 	bl	800282c <HAL_TIM_ConfigClockSource>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d84:	f000 f88e 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d90:	463b      	mov	r3, r7
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_TIM2_Init+0x94>)
 8000d96:	f001 ff2d 	bl	8002bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000da0:	f000 f880 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000188 	.word	0x20000188

08000db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e84 <MX_GPIO_Init+0xd4>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a2e      	ldr	r2, [pc, #184]	@ (8000e84 <MX_GPIO_Init+0xd4>)
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e84 <MX_GPIO_Init+0xd4>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ddc:	4b29      	ldr	r3, [pc, #164]	@ (8000e84 <MX_GPIO_Init+0xd4>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a28      	ldr	r2, [pc, #160]	@ (8000e84 <MX_GPIO_Init+0xd4>)
 8000de2:	f043 0308 	orr.w	r3, r3, #8
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b26      	ldr	r3, [pc, #152]	@ (8000e84 <MX_GPIO_Init+0xd4>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f003 0308 	and.w	r3, r3, #8
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2140      	movs	r1, #64	@ 0x40
 8000df8:	4823      	ldr	r0, [pc, #140]	@ (8000e88 <MX_GPIO_Init+0xd8>)
 8000dfa:	f000 fd08 	bl	800180e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8000e04:	4821      	ldr	r0, [pc, #132]	@ (8000e8c <MX_GPIO_Init+0xdc>)
 8000e06:	f000 fd02 	bl	800180e <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Latch_SPI1_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin;
 8000e0a:	2340      	movs	r3, #64	@ 0x40
 8000e0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2302      	movs	r3, #2
 8000e18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI1_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0308 	add.w	r3, r7, #8
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4819      	ldr	r0, [pc, #100]	@ (8000e88 <MX_GPIO_Init+0xd8>)
 8000e22:	f000 fb59 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8000e26:	231f      	movs	r3, #31
 8000e28:	60bb      	str	r3, [r7, #8]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f107 0308 	add.w	r3, r7, #8
 8000e36:	4619      	mov	r1, r3
 8000e38:	4814      	ldr	r0, [pc, #80]	@ (8000e8c <MX_GPIO_Init+0xdc>)
 8000e3a:	f000 fb4d 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Latch_SPI_Pin */
  GPIO_InitStruct.Pin = Latch_SPI_Pin;
 8000e3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	@ (8000e8c <MX_GPIO_Init+0xdc>)
 8000e58:	f000 fb3e 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin OUT2_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin;
 8000e5c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000e60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <MX_GPIO_Init+0xdc>)
 8000e76:	f000 fb2f 	bl	80014d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010800 	.word	0x40010800
 8000e8c:	40010c00 	.word	0x40010c00

08000e90 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	timerRun();
 8000e98:	f000 f958 	bl	800114c <timerRun>

}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <Error_Handler+0x8>

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	4a14      	ldr	r2, [pc, #80]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6193      	str	r3, [r2, #24]
 8000ec2:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	61d3      	str	r3, [r2, #28]
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <HAL_MspInit+0x60>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <HAL_MspInit+0x60>)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010000 	.word	0x40010000

08000f14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	@ 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0318 	add.w	r3, r7, #24
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8000fdc <HAL_SPI_MspInit+0xc8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d124      	bne.n	8000f7e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f34:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe0 <HAL_SPI_MspInit+0xcc>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a29      	ldr	r2, [pc, #164]	@ (8000fe0 <HAL_SPI_MspInit+0xcc>)
 8000f3a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <HAL_SPI_MspInit+0xcc>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4b24      	ldr	r3, [pc, #144]	@ (8000fe0 <HAL_SPI_MspInit+0xcc>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a23      	ldr	r2, [pc, #140]	@ (8000fe0 <HAL_SPI_MspInit+0xcc>)
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b21      	ldr	r3, [pc, #132]	@ (8000fe0 <HAL_SPI_MspInit+0xcc>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f64:	23a0      	movs	r3, #160	@ 0xa0
 8000f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 0318 	add.w	r3, r7, #24
 8000f74:	4619      	mov	r1, r3
 8000f76:	481b      	ldr	r0, [pc, #108]	@ (8000fe4 <HAL_SPI_MspInit+0xd0>)
 8000f78:	f000 faae 	bl	80014d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f7c:	e029      	b.n	8000fd2 <HAL_SPI_MspInit+0xbe>
  else if(hspi->Instance==SPI2)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a19      	ldr	r2, [pc, #100]	@ (8000fe8 <HAL_SPI_MspInit+0xd4>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d124      	bne.n	8000fd2 <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f88:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <HAL_SPI_MspInit+0xcc>)
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	4a14      	ldr	r2, [pc, #80]	@ (8000fe0 <HAL_SPI_MspInit+0xcc>)
 8000f8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <HAL_SPI_MspInit+0xcc>)
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <HAL_SPI_MspInit+0xcc>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe0 <HAL_SPI_MspInit+0xcc>)
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <HAL_SPI_MspInit+0xcc>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000fb8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 0318 	add.w	r3, r7, #24
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4807      	ldr	r0, [pc, #28]	@ (8000fec <HAL_SPI_MspInit+0xd8>)
 8000fce:	f000 fa83 	bl	80014d8 <HAL_GPIO_Init>
}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	@ 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40013000 	.word	0x40013000
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40010800 	.word	0x40010800
 8000fe8:	40003800 	.word	0x40003800
 8000fec:	40010c00 	.word	0x40010c00

08000ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001000:	d113      	bne.n	800102a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <HAL_TIM_Base_MspInit+0x44>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	4a0b      	ldr	r2, [pc, #44]	@ (8001034 <HAL_TIM_Base_MspInit+0x44>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	61d3      	str	r3, [r2, #28]
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <HAL_TIM_Base_MspInit+0x44>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2101      	movs	r1, #1
 800101e:	201c      	movs	r0, #28
 8001020:	f000 fa23 	bl	800146a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001024:	201c      	movs	r0, #28
 8001026:	f000 fa3c 	bl	80014a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <NMI_Handler+0x4>

08001040 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <HardFault_Handler+0x4>

08001048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <MemManage_Handler+0x4>

08001050 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <BusFault_Handler+0x4>

08001058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <UsageFault_Handler+0x4>

08001060 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001088:	f000 f8fc 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <TIM2_IRQHandler+0x10>)
 8001096:	f001 fac1 	bl	800261c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000188 	.word	0x20000188

080010a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ac:	4a14      	ldr	r2, [pc, #80]	@ (8001100 <_sbrk+0x5c>)
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <_sbrk+0x60>)
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b8:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c0:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <_sbrk+0x64>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	@ (800110c <_sbrk+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c6:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d207      	bcs.n	80010e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d4:	f001 fe3a 	bl	8002d4c <__errno>
 80010d8:	4603      	mov	r3, r0
 80010da:	220c      	movs	r2, #12
 80010dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	e009      	b.n	80010f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a05      	ldr	r2, [pc, #20]	@ (8001108 <_sbrk+0x64>)
 80010f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20005000 	.word	0x20005000
 8001104:	00000400 	.word	0x00000400
 8001108:	200001d0 	.word	0x200001d0
 800110c:	20000370 	.word	0x20000370

08001110 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <setTimer>:

#define TIMERNUM 10
int timer_counter[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};
int timer_flag[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};

void setTimer(int INDEX,int duration){
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
	timer_counter[INDEX]=duration;
 8001126:	4907      	ldr	r1, [pc, #28]	@ (8001144 <setTimer+0x28>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[INDEX]=0;
 8001130:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <setTimer+0x2c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2100      	movs	r1, #0
 8001136:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	200001d4 	.word	0x200001d4
 8001148:	200001fc 	.word	0x200001fc

0800114c <timerRun>:

void timerRun(){
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
	for(int i=0;i<TIMERNUM;i++){
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	e01c      	b.n	8001192 <timerRun+0x46>
		if(timer_counter[i] > 0){
 8001158:	4a12      	ldr	r2, [pc, #72]	@ (80011a4 <timerRun+0x58>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001160:	2b00      	cmp	r3, #0
 8001162:	dd13      	ble.n	800118c <timerRun+0x40>
			timer_counter[i]--;
 8001164:	4a0f      	ldr	r2, [pc, #60]	@ (80011a4 <timerRun+0x58>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116c:	1e5a      	subs	r2, r3, #1
 800116e:	490d      	ldr	r1, [pc, #52]	@ (80011a4 <timerRun+0x58>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <=0){
 8001176:	4a0b      	ldr	r2, [pc, #44]	@ (80011a4 <timerRun+0x58>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	2b00      	cmp	r3, #0
 8001180:	dc04      	bgt.n	800118c <timerRun+0x40>
				timer_flag[i]=1;
 8001182:	4a09      	ldr	r2, [pc, #36]	@ (80011a8 <timerRun+0x5c>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2101      	movs	r1, #1
 8001188:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<TIMERNUM;i++){
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3301      	adds	r3, #1
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b09      	cmp	r3, #9
 8001196:	dddf      	ble.n	8001158 <timerRun+0xc>
			}
		}
	}
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	200001d4 	.word	0x200001d4
 80011a8:	200001fc 	.word	0x200001fc

080011ac <Reset_Handler>:
 80011ac:	f7ff ffb0 	bl	8001110 <SystemInit>
 80011b0:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <LoopFillZerobss+0xe>)
 80011b2:	490c      	ldr	r1, [pc, #48]	@ (80011e4 <LoopFillZerobss+0x12>)
 80011b4:	4a0c      	ldr	r2, [pc, #48]	@ (80011e8 <LoopFillZerobss+0x16>)
 80011b6:	2300      	movs	r3, #0
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:
 80011ba:	58d4      	ldr	r4, [r2, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:
 80011c0:	18c4      	adds	r4, r0, r3
 80011c2:	428c      	cmp	r4, r1
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
 80011c6:	4a09      	ldr	r2, [pc, #36]	@ (80011ec <LoopFillZerobss+0x1a>)
 80011c8:	4c09      	ldr	r4, [pc, #36]	@ (80011f0 <LoopFillZerobss+0x1e>)
 80011ca:	2300      	movs	r3, #0
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:
 80011d2:	42a2      	cmp	r2, r4
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>
 80011d6:	f001 fdbf 	bl	8002d58 <__libc_init_array>
 80011da:	f7ff fcbd 	bl	8000b58 <main>
 80011de:	4770      	bx	lr
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000098 	.word	0x20000098
 80011e8:	08003728 	.word	0x08003728
 80011ec:	20000098 	.word	0x20000098
 80011f0:	20000370 	.word	0x20000370

080011f4 <ADC1_2_IRQHandler>:
 80011f4:	e7fe      	b.n	80011f4 <ADC1_2_IRQHandler>
	...

080011f8 <HAL_Init>:
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <HAL_Init+0x28>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <HAL_Init+0x28>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	2003      	movs	r0, #3
 800120a:	f000 f923 	bl	8001454 <HAL_NVIC_SetPriorityGrouping>
 800120e:	200f      	movs	r0, #15
 8001210:	f000 f808 	bl	8001224 <HAL_InitTick>
 8001214:	f7ff fe4c 	bl	8000eb0 <HAL_MspInit>
 8001218:	2300      	movs	r3, #0
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40022000 	.word	0x40022000

08001224 <HAL_InitTick>:
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f93b 	bl	80014be <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 f903 	bl	800146a <HAL_NVIC_SetPriority>
 8001264:	4a06      	ldr	r2, [pc, #24]	@ (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
 800126e:	2301      	movs	r3, #1
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000003c 	.word	0x2000003c
 800127c:	20000044 	.word	0x20000044
 8001280:	20000040 	.word	0x20000040

08001284 <HAL_IncTick>:
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <HAL_IncTick+0x1c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <HAL_IncTick+0x20>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a03      	ldr	r2, [pc, #12]	@ (80012a4 <HAL_IncTick+0x20>)
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	20000044 	.word	0x20000044
 80012a4:	20000224 	.word	0x20000224

080012a8 <HAL_GetTick>:
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4b02      	ldr	r3, [pc, #8]	@ (80012b8 <HAL_GetTick+0x10>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	20000224 	.word	0x20000224

080012bc <__NVIC_SetPriorityGrouping>:
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
 8001308:	4b04      	ldr	r3, [pc, #16]	@ (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_EnableIRQ>:
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db0b      	blt.n	800134a <__NVIC_EnableIRQ+0x2a>
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	4906      	ldr	r1, [pc, #24]	@ (8001354 <__NVIC_EnableIRQ+0x34>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2001      	movs	r0, #1
 8001342:	fa00 f202 	lsl.w	r2, r0, r2
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100

08001358 <__NVIC_SetPriority>:
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	2b00      	cmp	r3, #0
 800136a:	db0a      	blt.n	8001382 <__NVIC_SetPriority+0x2a>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	490c      	ldr	r1, [pc, #48]	@ (80013a4 <__NVIC_SetPriority+0x4c>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	0112      	lsls	r2, r2, #4
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	440b      	add	r3, r1
 800137c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001380:	e00a      	b.n	8001398 <__NVIC_SetPriority+0x40>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4908      	ldr	r1, [pc, #32]	@ (80013a8 <__NVIC_SetPriority+0x50>)
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	3b04      	subs	r3, #4
 8001390:	0112      	lsls	r2, r2, #4
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	440b      	add	r3, r1
 8001396:	761a      	strb	r2, [r3, #24]
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <NVIC_EncodePriority>:
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	@ 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f1c3 0307 	rsb	r3, r3, #7
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	bf28      	it	cs
 80013ca:	2304      	movcs	r3, #4
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3304      	adds	r3, #4
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d902      	bls.n	80013dc <NVIC_EncodePriority+0x30>
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3b03      	subs	r3, #3
 80013da:	e000      	b.n	80013de <NVIC_EncodePriority+0x32>
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	401a      	ands	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
 80013f4:	f04f 31ff 	mov.w	r1, #4294967295
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	43d9      	mvns	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	400b      	ands	r3, r1
 8001404:	4313      	orrs	r3, r2
 8001406:	4618      	mov	r0, r3
 8001408:	3724      	adds	r7, #36	@ 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <SysTick_Config>:
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001420:	d301      	bcc.n	8001426 <SysTick_Config+0x16>
 8001422:	2301      	movs	r3, #1
 8001424:	e00f      	b.n	8001446 <SysTick_Config+0x36>
 8001426:	4a0a      	ldr	r2, [pc, #40]	@ (8001450 <SysTick_Config+0x40>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	6053      	str	r3, [r2, #4]
 800142e:	210f      	movs	r1, #15
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f7ff ff90 	bl	8001358 <__NVIC_SetPriority>
 8001438:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <SysTick_Config+0x40>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	4b04      	ldr	r3, [pc, #16]	@ (8001450 <SysTick_Config+0x40>)
 8001440:	2207      	movs	r2, #7
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	2300      	movs	r3, #0
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	e000e010 	.word	0xe000e010

08001454 <HAL_NVIC_SetPriorityGrouping>:
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff2d 	bl	80012bc <__NVIC_SetPriorityGrouping>
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_SetPriority>:
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	f7ff ff42 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001480:	6178      	str	r0, [r7, #20]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	6978      	ldr	r0, [r7, #20]
 8001488:	f7ff ff90 	bl	80013ac <NVIC_EncodePriority>
 800148c:	4602      	mov	r2, r0
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff5f 	bl	8001358 <__NVIC_SetPriority>
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_EnableIRQ>:
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff35 	bl	8001320 <__NVIC_EnableIRQ>
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_SYSTICK_Config>:
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffa2 	bl	8001410 <SysTick_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_GPIO_Init>:
 80014d8:	b480      	push	{r7}
 80014da:	b08b      	sub	sp, #44	@ 0x2c
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
 80014ea:	e169      	b.n	80017c0 <HAL_GPIO_Init+0x2e8>
 80014ec:	2201      	movs	r2, #1
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	429a      	cmp	r2, r3
 8001506:	f040 8158 	bne.w	80017ba <HAL_GPIO_Init+0x2e2>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	4a9a      	ldr	r2, [pc, #616]	@ (8001778 <HAL_GPIO_Init+0x2a0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d05e      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
 8001514:	4a98      	ldr	r2, [pc, #608]	@ (8001778 <HAL_GPIO_Init+0x2a0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d875      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 800151a:	4a98      	ldr	r2, [pc, #608]	@ (800177c <HAL_GPIO_Init+0x2a4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d058      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
 8001520:	4a96      	ldr	r2, [pc, #600]	@ (800177c <HAL_GPIO_Init+0x2a4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d86f      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 8001526:	4a96      	ldr	r2, [pc, #600]	@ (8001780 <HAL_GPIO_Init+0x2a8>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d052      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
 800152c:	4a94      	ldr	r2, [pc, #592]	@ (8001780 <HAL_GPIO_Init+0x2a8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d869      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 8001532:	4a94      	ldr	r2, [pc, #592]	@ (8001784 <HAL_GPIO_Init+0x2ac>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d04c      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
 8001538:	4a92      	ldr	r2, [pc, #584]	@ (8001784 <HAL_GPIO_Init+0x2ac>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d863      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 800153e:	4a92      	ldr	r2, [pc, #584]	@ (8001788 <HAL_GPIO_Init+0x2b0>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d046      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
 8001544:	4a90      	ldr	r2, [pc, #576]	@ (8001788 <HAL_GPIO_Init+0x2b0>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d85d      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 800154a:	2b12      	cmp	r3, #18
 800154c:	d82a      	bhi.n	80015a4 <HAL_GPIO_Init+0xcc>
 800154e:	2b12      	cmp	r3, #18
 8001550:	d859      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 8001552:	a201      	add	r2, pc, #4	@ (adr r2, 8001558 <HAL_GPIO_Init+0x80>)
 8001554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001558:	080015d3 	.word	0x080015d3
 800155c:	080015ad 	.word	0x080015ad
 8001560:	080015bf 	.word	0x080015bf
 8001564:	08001601 	.word	0x08001601
 8001568:	08001607 	.word	0x08001607
 800156c:	08001607 	.word	0x08001607
 8001570:	08001607 	.word	0x08001607
 8001574:	08001607 	.word	0x08001607
 8001578:	08001607 	.word	0x08001607
 800157c:	08001607 	.word	0x08001607
 8001580:	08001607 	.word	0x08001607
 8001584:	08001607 	.word	0x08001607
 8001588:	08001607 	.word	0x08001607
 800158c:	08001607 	.word	0x08001607
 8001590:	08001607 	.word	0x08001607
 8001594:	08001607 	.word	0x08001607
 8001598:	08001607 	.word	0x08001607
 800159c:	080015b5 	.word	0x080015b5
 80015a0:	080015c9 	.word	0x080015c9
 80015a4:	4a79      	ldr	r2, [pc, #484]	@ (800178c <HAL_GPIO_Init+0x2b4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d013      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
 80015aa:	e02c      	b.n	8001606 <HAL_GPIO_Init+0x12e>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	623b      	str	r3, [r7, #32]
 80015b2:	e029      	b.n	8001608 <HAL_GPIO_Init+0x130>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	3304      	adds	r3, #4
 80015ba:	623b      	str	r3, [r7, #32]
 80015bc:	e024      	b.n	8001608 <HAL_GPIO_Init+0x130>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	3308      	adds	r3, #8
 80015c4:	623b      	str	r3, [r7, #32]
 80015c6:	e01f      	b.n	8001608 <HAL_GPIO_Init+0x130>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	330c      	adds	r3, #12
 80015ce:	623b      	str	r3, [r7, #32]
 80015d0:	e01a      	b.n	8001608 <HAL_GPIO_Init+0x130>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <HAL_GPIO_Init+0x108>
 80015da:	2304      	movs	r3, #4
 80015dc:	623b      	str	r3, [r7, #32]
 80015de:	e013      	b.n	8001608 <HAL_GPIO_Init+0x130>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d105      	bne.n	80015f4 <HAL_GPIO_Init+0x11c>
 80015e8:	2308      	movs	r3, #8
 80015ea:	623b      	str	r3, [r7, #32]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	611a      	str	r2, [r3, #16]
 80015f2:	e009      	b.n	8001608 <HAL_GPIO_Init+0x130>
 80015f4:	2308      	movs	r3, #8
 80015f6:	623b      	str	r3, [r7, #32]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69fa      	ldr	r2, [r7, #28]
 80015fc:	615a      	str	r2, [r3, #20]
 80015fe:	e003      	b.n	8001608 <HAL_GPIO_Init+0x130>
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
 8001604:	e000      	b.n	8001608 <HAL_GPIO_Init+0x130>
 8001606:	bf00      	nop
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2bff      	cmp	r3, #255	@ 0xff
 800160c:	d801      	bhi.n	8001612 <HAL_GPIO_Init+0x13a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	e001      	b.n	8001616 <HAL_GPIO_Init+0x13e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3304      	adds	r3, #4
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2bff      	cmp	r3, #255	@ 0xff
 800161c:	d802      	bhi.n	8001624 <HAL_GPIO_Init+0x14c>
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	e002      	b.n	800162a <HAL_GPIO_Init+0x152>
 8001624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001626:	3b08      	subs	r3, #8
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	210f      	movs	r1, #15
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	401a      	ands	r2, r3
 800163c:	6a39      	ldr	r1, [r7, #32]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	431a      	orrs	r2, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 80b1 	beq.w	80017ba <HAL_GPIO_Init+0x2e2>
 8001658:	4b4d      	ldr	r3, [pc, #308]	@ (8001790 <HAL_GPIO_Init+0x2b8>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a4c      	ldr	r2, [pc, #304]	@ (8001790 <HAL_GPIO_Init+0x2b8>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b4a      	ldr	r3, [pc, #296]	@ (8001790 <HAL_GPIO_Init+0x2b8>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	4a48      	ldr	r2, [pc, #288]	@ (8001794 <HAL_GPIO_Init+0x2bc>)
 8001672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a40      	ldr	r2, [pc, #256]	@ (8001798 <HAL_GPIO_Init+0x2c0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d013      	beq.n	80016c4 <HAL_GPIO_Init+0x1ec>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a3f      	ldr	r2, [pc, #252]	@ (800179c <HAL_GPIO_Init+0x2c4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d00d      	beq.n	80016c0 <HAL_GPIO_Init+0x1e8>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a3e      	ldr	r2, [pc, #248]	@ (80017a0 <HAL_GPIO_Init+0x2c8>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d007      	beq.n	80016bc <HAL_GPIO_Init+0x1e4>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a3d      	ldr	r2, [pc, #244]	@ (80017a4 <HAL_GPIO_Init+0x2cc>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d101      	bne.n	80016b8 <HAL_GPIO_Init+0x1e0>
 80016b4:	2303      	movs	r3, #3
 80016b6:	e006      	b.n	80016c6 <HAL_GPIO_Init+0x1ee>
 80016b8:	2304      	movs	r3, #4
 80016ba:	e004      	b.n	80016c6 <HAL_GPIO_Init+0x1ee>
 80016bc:	2302      	movs	r3, #2
 80016be:	e002      	b.n	80016c6 <HAL_GPIO_Init+0x1ee>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <HAL_GPIO_Init+0x1ee>
 80016c4:	2300      	movs	r3, #0
 80016c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016c8:	f002 0203 	and.w	r2, r2, #3
 80016cc:	0092      	lsls	r2, r2, #2
 80016ce:	4093      	lsls	r3, r2
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	492f      	ldr	r1, [pc, #188]	@ (8001794 <HAL_GPIO_Init+0x2bc>)
 80016d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	3302      	adds	r3, #2
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <HAL_GPIO_Init+0x226>
 80016f0:	4b2d      	ldr	r3, [pc, #180]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	492c      	ldr	r1, [pc, #176]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x234>
 80016fe:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	43db      	mvns	r3, r3
 8001706:	4928      	ldr	r1, [pc, #160]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001708:	4013      	ands	r3, r2
 800170a:	608b      	str	r3, [r1, #8]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d006      	beq.n	8001726 <HAL_GPIO_Init+0x24e>
 8001718:	4b23      	ldr	r3, [pc, #140]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	4922      	ldr	r1, [pc, #136]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	60cb      	str	r3, [r1, #12]
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x25c>
 8001726:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	43db      	mvns	r3, r3
 800172e:	491e      	ldr	r1, [pc, #120]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001730:	4013      	ands	r3, r2
 8001732:	60cb      	str	r3, [r1, #12]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d006      	beq.n	800174e <HAL_GPIO_Init+0x276>
 8001740:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	4918      	ldr	r1, [pc, #96]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
 800174c:	e006      	b.n	800175c <HAL_GPIO_Init+0x284>
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	43db      	mvns	r3, r3
 8001756:	4914      	ldr	r1, [pc, #80]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001758:	4013      	ands	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d021      	beq.n	80017ac <HAL_GPIO_Init+0x2d4>
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	490e      	ldr	r1, [pc, #56]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
 8001774:	e021      	b.n	80017ba <HAL_GPIO_Init+0x2e2>
 8001776:	bf00      	nop
 8001778:	10320000 	.word	0x10320000
 800177c:	10310000 	.word	0x10310000
 8001780:	10220000 	.word	0x10220000
 8001784:	10210000 	.word	0x10210000
 8001788:	10120000 	.word	0x10120000
 800178c:	10110000 	.word	0x10110000
 8001790:	40021000 	.word	0x40021000
 8001794:	40010000 	.word	0x40010000
 8001798:	40010800 	.word	0x40010800
 800179c:	40010c00 	.word	0x40010c00
 80017a0:	40011000 	.word	0x40011000
 80017a4:	40011400 	.word	0x40011400
 80017a8:	40010400 	.word	0x40010400
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <HAL_GPIO_Init+0x304>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	4909      	ldr	r1, [pc, #36]	@ (80017dc <HAL_GPIO_Init+0x304>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017bc:	3301      	adds	r3, #1
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f47f ae8e 	bne.w	80014ec <HAL_GPIO_Init+0x14>
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	372c      	adds	r7, #44	@ 0x2c
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	40010400 	.word	0x40010400

080017e0 <HAL_GPIO_ReadPin>:
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <HAL_GPIO_ReadPin+0x1e>
 80017f8:	2301      	movs	r3, #1
 80017fa:	73fb      	strb	r3, [r7, #15]
 80017fc:	e001      	b.n	8001802 <HAL_GPIO_ReadPin+0x22>
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <HAL_GPIO_WritePin>:
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	807b      	strh	r3, [r7, #2]
 800181a:	4613      	mov	r3, r2
 800181c:	707b      	strb	r3, [r7, #1]
 800181e:	787b      	ldrb	r3, [r7, #1]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_WritePin+0x1e>
 8001824:	887a      	ldrh	r2, [r7, #2]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	611a      	str	r2, [r3, #16]
 800182a:	e003      	b.n	8001834 <HAL_GPIO_WritePin+0x26>
 800182c:	887b      	ldrh	r3, [r7, #2]
 800182e:	041a      	lsls	r2, r3, #16
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	611a      	str	r2, [r3, #16]
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
	...

08001840 <HAL_RCC_OscConfig>:
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_OscConfig+0x12>
 800184e:	2301      	movs	r3, #1
 8001850:	e272      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8087 	beq.w	800196e <HAL_RCC_OscConfig+0x12e>
 8001860:	4b92      	ldr	r3, [pc, #584]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b04      	cmp	r3, #4
 800186a:	d00c      	beq.n	8001886 <HAL_RCC_OscConfig+0x46>
 800186c:	4b8f      	ldr	r3, [pc, #572]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 030c 	and.w	r3, r3, #12
 8001874:	2b08      	cmp	r3, #8
 8001876:	d112      	bne.n	800189e <HAL_RCC_OscConfig+0x5e>
 8001878:	4b8c      	ldr	r3, [pc, #560]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001884:	d10b      	bne.n	800189e <HAL_RCC_OscConfig+0x5e>
 8001886:	4b89      	ldr	r3, [pc, #548]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d06c      	beq.n	800196c <HAL_RCC_OscConfig+0x12c>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d168      	bne.n	800196c <HAL_RCC_OscConfig+0x12c>
 800189a:	2301      	movs	r3, #1
 800189c:	e24c      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x76>
 80018a8:	4b80      	ldr	r3, [pc, #512]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a7f      	ldr	r2, [pc, #508]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	e02e      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x98>
 80018be:	4b7b      	ldr	r3, [pc, #492]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a7a      	ldr	r2, [pc, #488]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b78      	ldr	r3, [pc, #480]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a77      	ldr	r2, [pc, #476]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e01d      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0xbc>
 80018e2:	4b72      	ldr	r3, [pc, #456]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a71      	ldr	r2, [pc, #452]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b6f      	ldr	r3, [pc, #444]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a6e      	ldr	r2, [pc, #440]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018fc:	4b6b      	ldr	r3, [pc, #428]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a6a      	ldr	r2, [pc, #424]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b68      	ldr	r3, [pc, #416]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a67      	ldr	r2, [pc, #412]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 800190e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <HAL_RCC_OscConfig+0x104>
 800191c:	f7ff fcc4 	bl	80012a8 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0xf6>
 8001924:	f7ff fcc0 	bl	80012a8 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	@ 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0xf6>
 8001932:	2303      	movs	r3, #3
 8001934:	e200      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 8001936:	4b5d      	ldr	r3, [pc, #372]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0xe4>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x12e>
 8001944:	f7ff fcb0 	bl	80012a8 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x11e>
 800194c:	f7ff fcac 	bl	80012a8 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	@ 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x11e>
 800195a:	2303      	movs	r3, #3
 800195c:	e1ec      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 800195e:	4b53      	ldr	r3, [pc, #332]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x10c>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x12e>
 800196c:	bf00      	nop
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d063      	beq.n	8001a42 <HAL_RCC_OscConfig+0x202>
 800197a:	4b4c      	ldr	r3, [pc, #304]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <HAL_RCC_OscConfig+0x15e>
 8001986:	4b49      	ldr	r3, [pc, #292]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b08      	cmp	r3, #8
 8001990:	d11c      	bne.n	80019cc <HAL_RCC_OscConfig+0x18c>
 8001992:	4b46      	ldr	r3, [pc, #280]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d116      	bne.n	80019cc <HAL_RCC_OscConfig+0x18c>
 800199e:	4b43      	ldr	r3, [pc, #268]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <HAL_RCC_OscConfig+0x176>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x176>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e1c0      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 80019b6:	4b3d      	ldr	r3, [pc, #244]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4939      	ldr	r1, [pc, #228]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
 80019ca:	e03a      	b.n	8001a42 <HAL_RCC_OscConfig+0x202>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d020      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1d6>
 80019d4:	4b36      	ldr	r3, [pc, #216]	@ (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	f7ff fc65 	bl	80012a8 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x1b4>
 80019e2:	f7ff fc61 	bl	80012a8 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x1b4>
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1a1      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 80019f4:	4b2d      	ldr	r3, [pc, #180]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1a2>
 8001a00:	4b2a      	ldr	r3, [pc, #168]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4927      	ldr	r1, [pc, #156]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
 8001a14:	e015      	b.n	8001a42 <HAL_RCC_OscConfig+0x202>
 8001a16:	4b26      	ldr	r3, [pc, #152]	@ (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	f7ff fc44 	bl	80012a8 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x1f6>
 8001a24:	f7ff fc40 	bl	80012a8 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x1f6>
 8001a32:	2303      	movs	r3, #3
 8001a34:	e180      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 8001a36:	4b1d      	ldr	r3, [pc, #116]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x1e4>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d03a      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x284>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d019      	beq.n	8001a8a <HAL_RCC_OscConfig+0x24a>
 8001a56:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <HAL_RCC_OscConfig+0x274>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	f7ff fc24 	bl	80012a8 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x236>
 8001a64:	f7ff fc20 	bl	80012a8 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x236>
 8001a72:	2303      	movs	r3, #3
 8001a74:	e160      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 8001a76:	4b0d      	ldr	r3, [pc, #52]	@ (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x224>
 8001a82:	2001      	movs	r0, #1
 8001a84:	f000 fa9c 	bl	8001fc0 <RCC_Delay>
 8001a88:	e01c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x284>
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab4 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	f7ff fc0a 	bl	80012a8 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]
 8001a96:	e00f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x278>
 8001a98:	f7ff fc06 	bl	80012a8 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d908      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x278>
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e146      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	42420000 	.word	0x42420000
 8001ab4:	42420480 	.word	0x42420480
 8001ab8:	4b92      	ldr	r3, [pc, #584]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1e9      	bne.n	8001a98 <HAL_RCC_OscConfig+0x258>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a6 	beq.w	8001c1e <HAL_RCC_OscConfig+0x3de>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	75fb      	strb	r3, [r7, #23]
 8001ad6:	4b8b      	ldr	r3, [pc, #556]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10d      	bne.n	8001afe <HAL_RCC_OscConfig+0x2be>
 8001ae2:	4b88      	ldr	r3, [pc, #544]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	4a87      	ldr	r2, [pc, #540]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aec:	61d3      	str	r3, [r2, #28]
 8001aee:	4b85      	ldr	r3, [pc, #532]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2301      	movs	r3, #1
 8001afc:	75fb      	strb	r3, [r7, #23]
 8001afe:	4b82      	ldr	r3, [pc, #520]	@ (8001d08 <HAL_RCC_OscConfig+0x4c8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d118      	bne.n	8001b3c <HAL_RCC_OscConfig+0x2fc>
 8001b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d08 <HAL_RCC_OscConfig+0x4c8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a7e      	ldr	r2, [pc, #504]	@ (8001d08 <HAL_RCC_OscConfig+0x4c8>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	f7ff fbc7 	bl	80012a8 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x2f0>
 8001b1e:	f7ff fbc3 	bl	80012a8 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b64      	cmp	r3, #100	@ 0x64
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2f0>
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e103      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 8001b30:	4b75      	ldr	r3, [pc, #468]	@ (8001d08 <HAL_RCC_OscConfig+0x4c8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2de>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x312>
 8001b44:	4b6f      	ldr	r3, [pc, #444]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4a6e      	ldr	r2, [pc, #440]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6213      	str	r3, [r2, #32]
 8001b50:	e02d      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x334>
 8001b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a69      	ldr	r2, [pc, #420]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6213      	str	r3, [r2, #32]
 8001b66:	4b67      	ldr	r3, [pc, #412]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4a66      	ldr	r2, [pc, #408]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	6213      	str	r3, [r2, #32]
 8001b72:	e01c      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b05      	cmp	r3, #5
 8001b7a:	d10c      	bne.n	8001b96 <HAL_RCC_OscConfig+0x356>
 8001b7c:	4b61      	ldr	r3, [pc, #388]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a60      	ldr	r2, [pc, #384]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	6213      	str	r3, [r2, #32]
 8001b88:	4b5e      	ldr	r3, [pc, #376]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4a5d      	ldr	r2, [pc, #372]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6213      	str	r3, [r2, #32]
 8001b94:	e00b      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b96:	4b5b      	ldr	r3, [pc, #364]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a5a      	ldr	r2, [pc, #360]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6213      	str	r3, [r2, #32]
 8001ba2:	4b58      	ldr	r3, [pc, #352]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4a57      	ldr	r2, [pc, #348]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	6213      	str	r3, [r2, #32]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d015      	beq.n	8001be2 <HAL_RCC_OscConfig+0x3a2>
 8001bb6:	f7ff fb77 	bl	80012a8 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x394>
 8001bbe:	f7ff fb73 	bl	80012a8 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x394>
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0b1      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 8001bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0ee      	beq.n	8001bbe <HAL_RCC_OscConfig+0x37e>
 8001be0:	e014      	b.n	8001c0c <HAL_RCC_OscConfig+0x3cc>
 8001be2:	f7ff fb61 	bl	80012a8 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x3c0>
 8001bea:	f7ff fb5d 	bl	80012a8 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x3c0>
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e09b      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 8001c00:	4b40      	ldr	r3, [pc, #256]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ee      	bne.n	8001bea <HAL_RCC_OscConfig+0x3aa>
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d105      	bne.n	8001c1e <HAL_RCC_OscConfig+0x3de>
 8001c12:	4b3c      	ldr	r3, [pc, #240]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a3b      	ldr	r2, [pc, #236]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c1c:	61d3      	str	r3, [r2, #28]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8087 	beq.w	8001d36 <HAL_RCC_OscConfig+0x4f6>
 8001c28:	4b36      	ldr	r3, [pc, #216]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d061      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x4b8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d146      	bne.n	8001cca <HAL_RCC_OscConfig+0x48a>
 8001c3c:	4b33      	ldr	r3, [pc, #204]	@ (8001d0c <HAL_RCC_OscConfig+0x4cc>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	f7ff fb31 	bl	80012a8 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x41c>
 8001c4a:	f7ff fb2d 	bl	80012a8 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x41c>
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e06d      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 8001c5c:	4b29      	ldr	r3, [pc, #164]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x40a>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c70:	d108      	bne.n	8001c84 <HAL_RCC_OscConfig+0x444>
 8001c72:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	4921      	ldr	r1, [pc, #132]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
 8001c84:	4b1f      	ldr	r3, [pc, #124]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a19      	ldr	r1, [r3, #32]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c94:	430b      	orrs	r3, r1
 8001c96:	491b      	ldr	r1, [pc, #108]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d0c <HAL_RCC_OscConfig+0x4cc>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	f7ff fb01 	bl	80012a8 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x47c>
 8001caa:	f7ff fafd 	bl	80012a8 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x47c>
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e03d      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x46a>
 8001cc8:	e035      	b.n	8001d36 <HAL_RCC_OscConfig+0x4f6>
 8001cca:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <HAL_RCC_OscConfig+0x4cc>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	f7ff faea 	bl	80012a8 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x4aa>
 8001cd8:	f7ff fae6 	bl	80012a8 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x4aa>
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e026      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 8001cea:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x498>
 8001cf6:	e01e      	b.n	8001d36 <HAL_RCC_OscConfig+0x4f6>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d107      	bne.n	8001d10 <HAL_RCC_OscConfig+0x4d0>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e019      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40007000 	.word	0x40007000
 8001d0c:	42420060 	.word	0x42420060
 8001d10:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <HAL_RCC_OscConfig+0x500>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d106      	bne.n	8001d32 <HAL_RCC_OscConfig+0x4f2>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_OscConfig+0x4f6>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 8001d36:	2300      	movs	r3, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000

08001d44 <HAL_RCC_ClockConfig>:
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x14>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0d0      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
 8001d58:	4b6a      	ldr	r3, [pc, #424]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d910      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x44>
 8001d66:	4b67      	ldr	r3, [pc, #412]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 0207 	bic.w	r2, r3, #7
 8001d6e:	4965      	ldr	r1, [pc, #404]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
 8001d76:	4b63      	ldr	r3, [pc, #396]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x44>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0b8      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d020      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x92>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_ClockConfig+0x68>
 8001da0:	4b59      	ldr	r3, [pc, #356]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4a58      	ldr	r2, [pc, #352]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001daa:	6053      	str	r3, [r2, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x80>
 8001db8:	4b53      	ldr	r3, [pc, #332]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4a52      	ldr	r2, [pc, #328]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001dc2:	6053      	str	r3, [r2, #4]
 8001dc4:	4b50      	ldr	r3, [pc, #320]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	494d      	ldr	r1, [pc, #308]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d040      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x120>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d107      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xb6>
 8001dea:	4b47      	ldr	r3, [pc, #284]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d115      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e07f      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xce>
 8001e02:	4b41      	ldr	r3, [pc, #260]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e073      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
 8001e12:	4b3d      	ldr	r3, [pc, #244]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e06b      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
 8001e22:	4b39      	ldr	r3, [pc, #228]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f023 0203 	bic.w	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4936      	ldr	r1, [pc, #216]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
 8001e34:	f7ff fa38 	bl	80012a8 <HAL_GetTick>
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCC_ClockConfig+0x10e>
 8001e3c:	f7ff fa34 	bl	80012a8 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x10e>
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e053      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
 8001e52:	4b2d      	ldr	r3, [pc, #180]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 020c 	and.w	r2, r3, #12
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d1eb      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xf8>
 8001e64:	4b27      	ldr	r3, [pc, #156]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d210      	bcs.n	8001e94 <HAL_RCC_ClockConfig+0x150>
 8001e72:	4b24      	ldr	r3, [pc, #144]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 0207 	bic.w	r2, r3, #7
 8001e7a:	4922      	ldr	r1, [pc, #136]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]
 8001e82:	4b20      	ldr	r3, [pc, #128]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x150>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e032      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x16e>
 8001ea0:	4b19      	ldr	r3, [pc, #100]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4916      	ldr	r1, [pc, #88]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d009      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x18e>
 8001ebe:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	490e      	ldr	r1, [pc, #56]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	604b      	str	r3, [r1, #4]
 8001ed2:	f000 f821 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	490a      	ldr	r1, [pc, #40]	@ (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ee4:	5ccb      	ldrb	r3, [r1, r3]
 8001ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eea:	4a09      	ldr	r2, [pc, #36]	@ (8001f10 <HAL_RCC_ClockConfig+0x1cc>)
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <HAL_RCC_ClockConfig+0x1d0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f996 	bl	8001224 <HAL_InitTick>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40022000 	.word	0x40022000
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	080036c0 	.word	0x080036c0
 8001f10:	2000003c 	.word	0x2000003c
 8001f14:	20000040 	.word	0x20000040

08001f18 <HAL_RCC_GetSysClockFreq>:
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	4b1e      	ldr	r3, [pc, #120]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x94>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d002      	beq.n	8001f48 <HAL_RCC_GetSysClockFreq+0x30>
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d003      	beq.n	8001f4e <HAL_RCC_GetSysClockFreq+0x36>
 8001f46:	e027      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x80>
 8001f48:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	e027      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x86>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	0c9b      	lsrs	r3, r3, #18
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	4a17      	ldr	r2, [pc, #92]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f58:	5cd3      	ldrb	r3, [r2, r3]
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d010      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x70>
 8001f66:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x94>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	0c5b      	lsrs	r3, r3, #17
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	4a11      	ldr	r2, [pc, #68]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f72:	5cd3      	ldrb	r3, [r2, r3]
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f7a:	fb03 f202 	mul.w	r2, r3, r2
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	e004      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x7a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	e002      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x86>
 8001f98:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	bf00      	nop
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	007a1200 	.word	0x007a1200
 8001fb4:	080036d0 	.word	0x080036d0
 8001fb8:	080036e0 	.word	0x080036e0
 8001fbc:	003d0900 	.word	0x003d0900

08001fc0 <RCC_Delay>:
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <RCC_Delay+0x34>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff8 <RCC_Delay+0x38>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	0a5b      	lsrs	r3, r3, #9
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	bf00      	nop
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1e5a      	subs	r2, r3, #1
 8001fe2:	60fa      	str	r2, [r7, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f9      	bne.n	8001fdc <RCC_Delay+0x1c>
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	2000003c 	.word	0x2000003c
 8001ff8:	10624dd3 	.word	0x10624dd3

08001ffc <HAL_SPI_Init>:
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_SPI_Init+0x12>
 800200a:	2301      	movs	r3, #1
 800200c:	e076      	b.n	80020fc <HAL_SPI_Init+0x100>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002012:	2b00      	cmp	r3, #0
 8002014:	d108      	bne.n	8002028 <HAL_SPI_Init+0x2c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800201e:	d009      	beq.n	8002034 <HAL_SPI_Init+0x38>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
 8002026:	e005      	b.n	8002034 <HAL_SPI_Init+0x38>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	615a      	str	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	629a      	str	r2, [r3, #40]	@ 0x28
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d106      	bne.n	8002054 <HAL_SPI_Init+0x58>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7fe ff60 	bl	8000f14 <HAL_SPI_MspInit>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b8:	ea42 0103 	orr.w	r1, r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	0c1a      	lsrs	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f002 0204 	and.w	r2, r2, #4
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020ea:	61da      	str	r2, [r3, #28]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	655a      	str	r2, [r3, #84]	@ 0x54
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80020fa:	2300      	movs	r3, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_SPI_Transmit>:
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	4613      	mov	r3, r2
 8002112:	80fb      	strh	r3, [r7, #6]
 8002114:	2300      	movs	r3, #0
 8002116:	77fb      	strb	r3, [r7, #31]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_SPI_Transmit+0x22>
 8002122:	2302      	movs	r3, #2
 8002124:	e12d      	b.n	8002382 <HAL_SPI_Transmit+0x27e>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800212e:	f7ff f8bb 	bl	80012a8 <HAL_GetTick>
 8002132:	61b8      	str	r0, [r7, #24]
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	82fb      	strh	r3, [r7, #22]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d002      	beq.n	800214a <HAL_SPI_Transmit+0x46>
 8002144:	2302      	movs	r3, #2
 8002146:	77fb      	strb	r3, [r7, #31]
 8002148:	e116      	b.n	8002378 <HAL_SPI_Transmit+0x274>
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_SPI_Transmit+0x52>
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <HAL_SPI_Transmit+0x58>
 8002156:	2301      	movs	r3, #1
 8002158:	77fb      	strb	r3, [r7, #31]
 800215a:	e10d      	b.n	8002378 <HAL_SPI_Transmit+0x274>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2203      	movs	r2, #3
 8002160:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	655a      	str	r2, [r3, #84]	@ 0x54
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	88fa      	ldrh	r2, [r7, #6]
 8002174:	869a      	strh	r2, [r3, #52]	@ 0x34
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	88fa      	ldrh	r2, [r7, #6]
 800217a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	639a      	str	r2, [r3, #56]	@ 0x38
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	645a      	str	r2, [r3, #68]	@ 0x44
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	641a      	str	r2, [r3, #64]	@ 0x40
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021a2:	d10f      	bne.n	80021c4 <HAL_SPI_Transmit+0xc0>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ce:	2b40      	cmp	r3, #64	@ 0x40
 80021d0:	d007      	beq.n	80021e2 <HAL_SPI_Transmit+0xde>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021ea:	d14f      	bne.n	800228c <HAL_SPI_Transmit+0x188>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <HAL_SPI_Transmit+0xf6>
 80021f4:	8afb      	ldrh	r3, [r7, #22]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d142      	bne.n	8002280 <HAL_SPI_Transmit+0x17c>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	881a      	ldrh	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	1c9a      	adds	r2, r3, #2
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002214:	b29b      	uxth	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800221e:	e02f      	b.n	8002280 <HAL_SPI_Transmit+0x17c>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b02      	cmp	r3, #2
 800222c:	d112      	bne.n	8002254 <HAL_SPI_Transmit+0x150>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	881a      	ldrh	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	1c9a      	adds	r2, r3, #2
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	631a      	str	r2, [r3, #48]	@ 0x30
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002248:	b29b      	uxth	r3, r3
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002252:	e015      	b.n	8002280 <HAL_SPI_Transmit+0x17c>
 8002254:	f7ff f828 	bl	80012a8 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d803      	bhi.n	800226c <HAL_SPI_Transmit+0x168>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226a:	d102      	bne.n	8002272 <HAL_SPI_Transmit+0x16e>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <HAL_SPI_Transmit+0x17c>
 8002272:	2303      	movs	r3, #3
 8002274:	77fb      	strb	r3, [r7, #31]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800227e:	e07b      	b.n	8002378 <HAL_SPI_Transmit+0x274>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002284:	b29b      	uxth	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1ca      	bne.n	8002220 <HAL_SPI_Transmit+0x11c>
 800228a:	e050      	b.n	800232e <HAL_SPI_Transmit+0x22a>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <HAL_SPI_Transmit+0x196>
 8002294:	8afb      	ldrh	r3, [r7, #22]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d144      	bne.n	8002324 <HAL_SPI_Transmit+0x220>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	330c      	adds	r3, #12
 80022a4:	7812      	ldrb	r2, [r2, #0]
 80022a6:	701a      	strb	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80022c0:	e030      	b.n	8002324 <HAL_SPI_Transmit+0x220>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d113      	bne.n	80022f8 <HAL_SPI_Transmit+0x1f4>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	330c      	adds	r3, #12
 80022da:	7812      	ldrb	r2, [r2, #0]
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80022f6:	e015      	b.n	8002324 <HAL_SPI_Transmit+0x220>
 80022f8:	f7fe ffd6 	bl	80012a8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d803      	bhi.n	8002310 <HAL_SPI_Transmit+0x20c>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230e:	d102      	bne.n	8002316 <HAL_SPI_Transmit+0x212>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_SPI_Transmit+0x220>
 8002316:	2303      	movs	r3, #3
 8002318:	77fb      	strb	r3, [r7, #31]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002322:	e029      	b.n	8002378 <HAL_SPI_Transmit+0x274>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002328:	b29b      	uxth	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1c9      	bne.n	80022c2 <HAL_SPI_Transmit+0x1be>
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	6839      	ldr	r1, [r7, #0]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f8b2 	bl	800249c <SPI_EndRxTxTransaction>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_SPI_Transmit+0x240>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2220      	movs	r2, #32
 8002342:	655a      	str	r2, [r3, #84]	@ 0x54
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10a      	bne.n	8002362 <HAL_SPI_Transmit+0x25e>
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_SPI_Transmit+0x26c>
 800236a:	2301      	movs	r3, #1
 800236c:	77fb      	strb	r3, [r7, #31]
 800236e:	e003      	b.n	8002378 <HAL_SPI_Transmit+0x274>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002380:	7ffb      	ldrb	r3, [r7, #31]
 8002382:	4618      	mov	r0, r3
 8002384:	3720      	adds	r7, #32
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <SPI_WaitFlagStateUntilTimeout>:
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	71fb      	strb	r3, [r7, #7]
 800239c:	f7fe ff84 	bl	80012a8 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	4413      	add	r3, r2
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	f7fe ff7c 	bl	80012a8 <HAL_GetTick>
 80023b0:	61b8      	str	r0, [r7, #24]
 80023b2:	4b39      	ldr	r3, [pc, #228]	@ (8002498 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	015b      	lsls	r3, r3, #5
 80023b8:	0d1b      	lsrs	r3, r3, #20
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e054      	b.n	800246e <SPI_WaitFlagStateUntilTimeout+0xe2>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ca:	d050      	beq.n	800246e <SPI_WaitFlagStateUntilTimeout+0xe2>
 80023cc:	f7fe ff6c 	bl	80012a8 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d902      	bls.n	80023e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d13d      	bne.n	800245e <SPI_WaitFlagStateUntilTimeout+0xd2>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023fa:	d111      	bne.n	8002420 <SPI_WaitFlagStateUntilTimeout+0x94>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002404:	d004      	beq.n	8002410 <SPI_WaitFlagStateUntilTimeout+0x84>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800240e:	d107      	bne.n	8002420 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002428:	d10f      	bne.n	800244a <SPI_WaitFlagStateUntilTimeout+0xbe>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800245a:	2303      	movs	r3, #3
 800245c:	e017      	b.n	800248e <SPI_WaitFlagStateUntilTimeout+0x102>
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3b01      	subs	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4013      	ands	r3, r2
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	429a      	cmp	r2, r3
 800247c:	bf0c      	ite	eq
 800247e:	2301      	moveq	r3, #1
 8002480:	2300      	movne	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	429a      	cmp	r2, r3
 800248a:	d19b      	bne.n	80023c4 <SPI_WaitFlagStateUntilTimeout+0x38>
 800248c:	2300      	movs	r3, #0
 800248e:	4618      	mov	r0, r3
 8002490:	3720      	adds	r7, #32
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	2000003c 	.word	0x2000003c

0800249c <SPI_EndRxTxTransaction>:
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2200      	movs	r2, #0
 80024b0:	2180      	movs	r1, #128	@ 0x80
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f7ff ff6a 	bl	800238c <SPI_WaitFlagStateUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d007      	beq.n	80024ce <SPI_EndRxTxTransaction+0x32>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c2:	f043 0220 	orr.w	r2, r3, #32
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	655a      	str	r2, [r3, #84]	@ 0x54
 80024ca:	2303      	movs	r3, #3
 80024cc:	e000      	b.n	80024d0 <SPI_EndRxTxTransaction+0x34>
 80024ce:	2300      	movs	r3, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_TIM_Base_Init>:
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_TIM_Base_Init+0x12>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e041      	b.n	800256e <HAL_TIM_Base_Init+0x96>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_TIM_Base_Init+0x2c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7fe fd76 	bl	8000ff0 <HAL_TIM_Base_MspInit>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3304      	adds	r3, #4
 8002514:	4619      	mov	r1, r3
 8002516:	4610      	mov	r0, r2
 8002518:	f000 fa74 	bl	8002a04 <TIM_Base_SetConfig>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800256c:	2300      	movs	r3, #0
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <HAL_TIM_Base_Start_IT>:
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d001      	beq.n	8002590 <HAL_TIM_Base_Start_IT+0x18>
 800258c:	2301      	movs	r3, #1
 800258e:	e03a      	b.n	8002606 <HAL_TIM_Base_Start_IT+0x8e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	60da      	str	r2, [r3, #12]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a18      	ldr	r2, [pc, #96]	@ (8002610 <HAL_TIM_Base_Start_IT+0x98>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00e      	beq.n	80025d0 <HAL_TIM_Base_Start_IT+0x58>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ba:	d009      	beq.n	80025d0 <HAL_TIM_Base_Start_IT+0x58>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a14      	ldr	r2, [pc, #80]	@ (8002614 <HAL_TIM_Base_Start_IT+0x9c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d004      	beq.n	80025d0 <HAL_TIM_Base_Start_IT+0x58>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a13      	ldr	r2, [pc, #76]	@ (8002618 <HAL_TIM_Base_Start_IT+0xa0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d111      	bne.n	80025f4 <HAL_TIM_Base_Start_IT+0x7c>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d010      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x8c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e007      	b.n	8002604 <HAL_TIM_Base_Start_IT+0x8c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	2300      	movs	r3, #0
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	40012c00 	.word	0x40012c00
 8002614:	40000400 	.word	0x40000400
 8002618:	40000800 	.word	0x40000800

0800261c <HAL_TIM_IRQHandler>:
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d122      	bne.n	8002678 <HAL_TIM_IRQHandler+0x5c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b02      	cmp	r3, #2
 800263e:	d11b      	bne.n	8002678 <HAL_TIM_IRQHandler+0x5c>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0202 	mvn.w	r2, #2
 8002648:	611a      	str	r2, [r3, #16]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	771a      	strb	r2, [r3, #28]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_TIM_IRQHandler+0x4a>
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f9b4 	bl	80029cc <HAL_TIM_IC_CaptureCallback>
 8002664:	e005      	b.n	8002672 <HAL_TIM_IRQHandler+0x56>
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f9a7 	bl	80029ba <HAL_TIM_OC_DelayElapsedCallback>
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f9b6 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	771a      	strb	r2, [r3, #28]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b04      	cmp	r3, #4
 8002684:	d122      	bne.n	80026cc <HAL_TIM_IRQHandler+0xb0>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b04      	cmp	r3, #4
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IRQHandler+0xb0>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0204 	mvn.w	r2, #4
 800269c:	611a      	str	r2, [r3, #16]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2202      	movs	r2, #2
 80026a2:	771a      	strb	r2, [r3, #28]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0x9e>
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f98a 	bl	80029cc <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0xaa>
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f97d 	bl	80029ba <HAL_TIM_OC_DelayElapsedCallback>
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f98c 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d122      	bne.n	8002720 <HAL_TIM_IRQHandler+0x104>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IRQHandler+0x104>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0208 	mvn.w	r2, #8
 80026f0:	611a      	str	r2, [r3, #16]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2204      	movs	r2, #4
 80026f6:	771a      	strb	r2, [r3, #28]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0xf2>
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f960 	bl	80029cc <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0xfe>
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f953 	bl	80029ba <HAL_TIM_OC_DelayElapsedCallback>
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f962 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b10      	cmp	r3, #16
 800272c:	d122      	bne.n	8002774 <HAL_TIM_IRQHandler+0x158>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b10      	cmp	r3, #16
 800273a:	d11b      	bne.n	8002774 <HAL_TIM_IRQHandler+0x158>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0210 	mvn.w	r2, #16
 8002744:	611a      	str	r2, [r3, #16]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2208      	movs	r2, #8
 800274a:	771a      	strb	r2, [r3, #28]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_TIM_IRQHandler+0x146>
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f936 	bl	80029cc <HAL_TIM_IC_CaptureCallback>
 8002760:	e005      	b.n	800276e <HAL_TIM_IRQHandler+0x152>
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f929 	bl	80029ba <HAL_TIM_OC_DelayElapsedCallback>
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f938 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	771a      	strb	r2, [r3, #28]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d10e      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x184>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d107      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x184>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0201 	mvn.w	r2, #1
 8002798:	611a      	str	r2, [r3, #16]
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe fb78 	bl	8000e90 <HAL_TIM_PeriodElapsedCallback>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027aa:	2b80      	cmp	r3, #128	@ 0x80
 80027ac:	d10e      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1b0>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b8:	2b80      	cmp	r3, #128	@ 0x80
 80027ba:	d107      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1b0>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80027c4:	611a      	str	r2, [r3, #16]
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fa7b 	bl	8002cc2 <HAL_TIMEx_BreakCallback>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d6:	2b40      	cmp	r3, #64	@ 0x40
 80027d8:	d10e      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1dc>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e4:	2b40      	cmp	r3, #64	@ 0x40
 80027e6:	d107      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1dc>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80027f0:	611a      	str	r2, [r3, #16]
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f8fc 	bl	80029f0 <HAL_TIM_TriggerCallback>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b20      	cmp	r3, #32
 8002804:	d10e      	bne.n	8002824 <HAL_TIM_IRQHandler+0x208>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b20      	cmp	r3, #32
 8002812:	d107      	bne.n	8002824 <HAL_TIM_IRQHandler+0x208>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0220 	mvn.w	r2, #32
 800281c:	611a      	str	r2, [r3, #16]
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fa46 	bl	8002cb0 <HAL_TIMEx_CommutCallback>
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIM_ConfigClockSource>:
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_TIM_ConfigClockSource+0x1c>
 8002844:	2302      	movs	r3, #2
 8002846:	e0b4      	b.n	80029b2 <HAL_TIM_ConfigClockSource+0x186>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002880:	d03e      	beq.n	8002900 <HAL_TIM_ConfigClockSource+0xd4>
 8002882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002886:	f200 8087 	bhi.w	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 800288a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800288e:	f000 8086 	beq.w	800299e <HAL_TIM_ConfigClockSource+0x172>
 8002892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002896:	d87f      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 8002898:	2b70      	cmp	r3, #112	@ 0x70
 800289a:	d01a      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0xa6>
 800289c:	2b70      	cmp	r3, #112	@ 0x70
 800289e:	d87b      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028a0:	2b60      	cmp	r3, #96	@ 0x60
 80028a2:	d050      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x11a>
 80028a4:	2b60      	cmp	r3, #96	@ 0x60
 80028a6:	d877      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028a8:	2b50      	cmp	r3, #80	@ 0x50
 80028aa:	d03c      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0xfa>
 80028ac:	2b50      	cmp	r3, #80	@ 0x50
 80028ae:	d873      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028b0:	2b40      	cmp	r3, #64	@ 0x40
 80028b2:	d058      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x13a>
 80028b4:	2b40      	cmp	r3, #64	@ 0x40
 80028b6:	d86f      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028b8:	2b30      	cmp	r3, #48	@ 0x30
 80028ba:	d064      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x15a>
 80028bc:	2b30      	cmp	r3, #48	@ 0x30
 80028be:	d86b      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d060      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x15a>
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d867      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d05c      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x15a>
 80028cc:	2b10      	cmp	r3, #16
 80028ce:	d05a      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x15a>
 80028d0:	e062      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6899      	ldr	r1, [r3, #8]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f000 f968 	bl	8002bb6 <TIM_ETR_SetConfig>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	e04f      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6899      	ldr	r1, [r3, #8]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f000 f951 	bl	8002bb6 <TIM_ETR_SetConfig>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	e03c      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	461a      	mov	r2, r3
 8002934:	f000 f8c8 	bl	8002ac8 <TIM_TI1_ConfigInputStage>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2150      	movs	r1, #80	@ 0x50
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f91f 	bl	8002b82 <TIM_ITRx_SetConfig>
 8002944:	e02c      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	461a      	mov	r2, r3
 8002954:	f000 f8e6 	bl	8002b24 <TIM_TI2_ConfigInputStage>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2160      	movs	r1, #96	@ 0x60
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f90f 	bl	8002b82 <TIM_ITRx_SetConfig>
 8002964:	e01c      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6859      	ldr	r1, [r3, #4]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	461a      	mov	r2, r3
 8002974:	f000 f8a8 	bl	8002ac8 <TIM_TI1_ConfigInputStage>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2140      	movs	r1, #64	@ 0x40
 800297e:	4618      	mov	r0, r3
 8002980:	f000 f8ff 	bl	8002b82 <TIM_ITRx_SetConfig>
 8002984:	e00c      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4619      	mov	r1, r3
 8002990:	4610      	mov	r0, r2
 8002992:	f000 f8f6 	bl	8002b82 <TIM_ITRx_SetConfig>
 8002996:	e003      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
 800299c:	e000      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
 800299e:	bf00      	nop
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_TIM_OC_DelayElapsedCallback>:
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <HAL_TIM_IC_CaptureCallback>:
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <HAL_TIM_PWM_PulseFinishedCallback>:
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIM_TriggerCallback>:
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
	...

08002a04 <TIM_Base_SetConfig>:
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a29      	ldr	r2, [pc, #164]	@ (8002abc <TIM_Base_SetConfig+0xb8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00b      	beq.n	8002a34 <TIM_Base_SetConfig+0x30>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a22:	d007      	beq.n	8002a34 <TIM_Base_SetConfig+0x30>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a26      	ldr	r2, [pc, #152]	@ (8002ac0 <TIM_Base_SetConfig+0xbc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <TIM_Base_SetConfig+0x30>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a25      	ldr	r2, [pc, #148]	@ (8002ac4 <TIM_Base_SetConfig+0xc0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d108      	bne.n	8002a46 <TIM_Base_SetConfig+0x42>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a1c      	ldr	r2, [pc, #112]	@ (8002abc <TIM_Base_SetConfig+0xb8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00b      	beq.n	8002a66 <TIM_Base_SetConfig+0x62>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a54:	d007      	beq.n	8002a66 <TIM_Base_SetConfig+0x62>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a19      	ldr	r2, [pc, #100]	@ (8002ac0 <TIM_Base_SetConfig+0xbc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d003      	beq.n	8002a66 <TIM_Base_SetConfig+0x62>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a18      	ldr	r2, [pc, #96]	@ (8002ac4 <TIM_Base_SetConfig+0xc0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d108      	bne.n	8002a78 <TIM_Base_SetConfig+0x74>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a07      	ldr	r2, [pc, #28]	@ (8002abc <TIM_Base_SetConfig+0xb8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d103      	bne.n	8002aac <TIM_Base_SetConfig+0xa8>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	615a      	str	r2, [r3, #20]
 8002ab2:	bf00      	nop
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	40000800 	.word	0x40000800

08002ac8 <TIM_TI1_ConfigInputStage>:
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	f023 0201 	bic.w	r2, r3, #1
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	621a      	str	r2, [r3, #32]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f023 030a 	bic.w	r3, r3, #10
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	619a      	str	r2, [r3, #24]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	621a      	str	r2, [r3, #32]
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <TIM_TI2_ConfigInputStage>:
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f023 0210 	bic.w	r2, r3, #16
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	621a      	str	r2, [r3, #32]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	031b      	lsls	r3, r3, #12
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	619a      	str	r2, [r3, #24]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	621a      	str	r2, [r3, #32]
 8002b78:	bf00      	nop
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <TIM_ITRx_SetConfig>:
 8002b82:	b480      	push	{r7}
 8002b84:	b085      	sub	sp, #20
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f043 0307 	orr.w	r3, r3, #7
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <TIM_ETR_SetConfig>:
 8002bb6:	b480      	push	{r7}
 8002bb8:	b087      	sub	sp, #28
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	021a      	lsls	r2, r3, #8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	bf00      	nop
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_TIMEx_MasterConfigSynchronization>:
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e046      	b.n	8002c9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a16      	ldr	r2, [pc, #88]	@ (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00e      	beq.n	8002c6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c58:	d009      	beq.n	8002c6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a12      	ldr	r2, [pc, #72]	@ (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d004      	beq.n	8002c6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a10      	ldr	r2, [pc, #64]	@ (8002cac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10c      	bne.n	8002c88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002c98:	2300      	movs	r3, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40000800 	.word	0x40000800

08002cb0 <HAL_TIMEx_CommutCallback>:
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_TIMEx_BreakCallback>:
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <sniprintf>:
 8002cd4:	b40c      	push	{r2, r3}
 8002cd6:	b530      	push	{r4, r5, lr}
 8002cd8:	4b17      	ldr	r3, [pc, #92]	@ (8002d38 <sniprintf+0x64>)
 8002cda:	1e0c      	subs	r4, r1, #0
 8002cdc:	681d      	ldr	r5, [r3, #0]
 8002cde:	b09d      	sub	sp, #116	@ 0x74
 8002ce0:	da08      	bge.n	8002cf4 <sniprintf+0x20>
 8002ce2:	238b      	movs	r3, #139	@ 0x8b
 8002ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce8:	602b      	str	r3, [r5, #0]
 8002cea:	b01d      	add	sp, #116	@ 0x74
 8002cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002cf0:	b002      	add	sp, #8
 8002cf2:	4770      	bx	lr
 8002cf4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002cf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002cfc:	bf0c      	ite	eq
 8002cfe:	4623      	moveq	r3, r4
 8002d00:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002d04:	9304      	str	r3, [sp, #16]
 8002d06:	9307      	str	r3, [sp, #28]
 8002d08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d0c:	9002      	str	r0, [sp, #8]
 8002d0e:	9006      	str	r0, [sp, #24]
 8002d10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002d14:	4628      	mov	r0, r5
 8002d16:	ab21      	add	r3, sp, #132	@ 0x84
 8002d18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002d1a:	a902      	add	r1, sp, #8
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	f000 f993 	bl	8003048 <_svfiprintf_r>
 8002d22:	1c43      	adds	r3, r0, #1
 8002d24:	bfbc      	itt	lt
 8002d26:	238b      	movlt	r3, #139	@ 0x8b
 8002d28:	602b      	strlt	r3, [r5, #0]
 8002d2a:	2c00      	cmp	r4, #0
 8002d2c:	d0dd      	beq.n	8002cea <sniprintf+0x16>
 8002d2e:	2200      	movs	r2, #0
 8002d30:	9b02      	ldr	r3, [sp, #8]
 8002d32:	701a      	strb	r2, [r3, #0]
 8002d34:	e7d9      	b.n	8002cea <sniprintf+0x16>
 8002d36:	bf00      	nop
 8002d38:	20000048 	.word	0x20000048

08002d3c <memset>:
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4402      	add	r2, r0
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d100      	bne.n	8002d46 <memset+0xa>
 8002d44:	4770      	bx	lr
 8002d46:	f803 1b01 	strb.w	r1, [r3], #1
 8002d4a:	e7f9      	b.n	8002d40 <memset+0x4>

08002d4c <__errno>:
 8002d4c:	4b01      	ldr	r3, [pc, #4]	@ (8002d54 <__errno+0x8>)
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000048 	.word	0x20000048

08002d58 <__libc_init_array>:
 8002d58:	b570      	push	{r4, r5, r6, lr}
 8002d5a:	2600      	movs	r6, #0
 8002d5c:	4d0c      	ldr	r5, [pc, #48]	@ (8002d90 <__libc_init_array+0x38>)
 8002d5e:	4c0d      	ldr	r4, [pc, #52]	@ (8002d94 <__libc_init_array+0x3c>)
 8002d60:	1b64      	subs	r4, r4, r5
 8002d62:	10a4      	asrs	r4, r4, #2
 8002d64:	42a6      	cmp	r6, r4
 8002d66:	d109      	bne.n	8002d7c <__libc_init_array+0x24>
 8002d68:	f000 fc78 	bl	800365c <_init>
 8002d6c:	2600      	movs	r6, #0
 8002d6e:	4d0a      	ldr	r5, [pc, #40]	@ (8002d98 <__libc_init_array+0x40>)
 8002d70:	4c0a      	ldr	r4, [pc, #40]	@ (8002d9c <__libc_init_array+0x44>)
 8002d72:	1b64      	subs	r4, r4, r5
 8002d74:	10a4      	asrs	r4, r4, #2
 8002d76:	42a6      	cmp	r6, r4
 8002d78:	d105      	bne.n	8002d86 <__libc_init_array+0x2e>
 8002d7a:	bd70      	pop	{r4, r5, r6, pc}
 8002d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d80:	4798      	blx	r3
 8002d82:	3601      	adds	r6, #1
 8002d84:	e7ee      	b.n	8002d64 <__libc_init_array+0xc>
 8002d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d8a:	4798      	blx	r3
 8002d8c:	3601      	adds	r6, #1
 8002d8e:	e7f2      	b.n	8002d76 <__libc_init_array+0x1e>
 8002d90:	08003720 	.word	0x08003720
 8002d94:	08003720 	.word	0x08003720
 8002d98:	08003720 	.word	0x08003720
 8002d9c:	08003724 	.word	0x08003724

08002da0 <__retarget_lock_acquire_recursive>:
 8002da0:	4770      	bx	lr

08002da2 <__retarget_lock_release_recursive>:
 8002da2:	4770      	bx	lr

08002da4 <_free_r>:
 8002da4:	b538      	push	{r3, r4, r5, lr}
 8002da6:	4605      	mov	r5, r0
 8002da8:	2900      	cmp	r1, #0
 8002daa:	d040      	beq.n	8002e2e <_free_r+0x8a>
 8002dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002db0:	1f0c      	subs	r4, r1, #4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bfb8      	it	lt
 8002db6:	18e4      	addlt	r4, r4, r3
 8002db8:	f000 f8de 	bl	8002f78 <__malloc_lock>
 8002dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8002e30 <_free_r+0x8c>)
 8002dbe:	6813      	ldr	r3, [r2, #0]
 8002dc0:	b933      	cbnz	r3, 8002dd0 <_free_r+0x2c>
 8002dc2:	6063      	str	r3, [r4, #4]
 8002dc4:	6014      	str	r4, [r2, #0]
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dcc:	f000 b8da 	b.w	8002f84 <__malloc_unlock>
 8002dd0:	42a3      	cmp	r3, r4
 8002dd2:	d908      	bls.n	8002de6 <_free_r+0x42>
 8002dd4:	6820      	ldr	r0, [r4, #0]
 8002dd6:	1821      	adds	r1, r4, r0
 8002dd8:	428b      	cmp	r3, r1
 8002dda:	bf01      	itttt	eq
 8002ddc:	6819      	ldreq	r1, [r3, #0]
 8002dde:	685b      	ldreq	r3, [r3, #4]
 8002de0:	1809      	addeq	r1, r1, r0
 8002de2:	6021      	streq	r1, [r4, #0]
 8002de4:	e7ed      	b.n	8002dc2 <_free_r+0x1e>
 8002de6:	461a      	mov	r2, r3
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	b10b      	cbz	r3, 8002df0 <_free_r+0x4c>
 8002dec:	42a3      	cmp	r3, r4
 8002dee:	d9fa      	bls.n	8002de6 <_free_r+0x42>
 8002df0:	6811      	ldr	r1, [r2, #0]
 8002df2:	1850      	adds	r0, r2, r1
 8002df4:	42a0      	cmp	r0, r4
 8002df6:	d10b      	bne.n	8002e10 <_free_r+0x6c>
 8002df8:	6820      	ldr	r0, [r4, #0]
 8002dfa:	4401      	add	r1, r0
 8002dfc:	1850      	adds	r0, r2, r1
 8002dfe:	4283      	cmp	r3, r0
 8002e00:	6011      	str	r1, [r2, #0]
 8002e02:	d1e0      	bne.n	8002dc6 <_free_r+0x22>
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4408      	add	r0, r1
 8002e0a:	6010      	str	r0, [r2, #0]
 8002e0c:	6053      	str	r3, [r2, #4]
 8002e0e:	e7da      	b.n	8002dc6 <_free_r+0x22>
 8002e10:	d902      	bls.n	8002e18 <_free_r+0x74>
 8002e12:	230c      	movs	r3, #12
 8002e14:	602b      	str	r3, [r5, #0]
 8002e16:	e7d6      	b.n	8002dc6 <_free_r+0x22>
 8002e18:	6820      	ldr	r0, [r4, #0]
 8002e1a:	1821      	adds	r1, r4, r0
 8002e1c:	428b      	cmp	r3, r1
 8002e1e:	bf01      	itttt	eq
 8002e20:	6819      	ldreq	r1, [r3, #0]
 8002e22:	685b      	ldreq	r3, [r3, #4]
 8002e24:	1809      	addeq	r1, r1, r0
 8002e26:	6021      	streq	r1, [r4, #0]
 8002e28:	6063      	str	r3, [r4, #4]
 8002e2a:	6054      	str	r4, [r2, #4]
 8002e2c:	e7cb      	b.n	8002dc6 <_free_r+0x22>
 8002e2e:	bd38      	pop	{r3, r4, r5, pc}
 8002e30:	2000036c 	.word	0x2000036c

08002e34 <sbrk_aligned>:
 8002e34:	b570      	push	{r4, r5, r6, lr}
 8002e36:	4e0f      	ldr	r6, [pc, #60]	@ (8002e74 <sbrk_aligned+0x40>)
 8002e38:	460c      	mov	r4, r1
 8002e3a:	6831      	ldr	r1, [r6, #0]
 8002e3c:	4605      	mov	r5, r0
 8002e3e:	b911      	cbnz	r1, 8002e46 <sbrk_aligned+0x12>
 8002e40:	f000 fbaa 	bl	8003598 <_sbrk_r>
 8002e44:	6030      	str	r0, [r6, #0]
 8002e46:	4621      	mov	r1, r4
 8002e48:	4628      	mov	r0, r5
 8002e4a:	f000 fba5 	bl	8003598 <_sbrk_r>
 8002e4e:	1c43      	adds	r3, r0, #1
 8002e50:	d103      	bne.n	8002e5a <sbrk_aligned+0x26>
 8002e52:	f04f 34ff 	mov.w	r4, #4294967295
 8002e56:	4620      	mov	r0, r4
 8002e58:	bd70      	pop	{r4, r5, r6, pc}
 8002e5a:	1cc4      	adds	r4, r0, #3
 8002e5c:	f024 0403 	bic.w	r4, r4, #3
 8002e60:	42a0      	cmp	r0, r4
 8002e62:	d0f8      	beq.n	8002e56 <sbrk_aligned+0x22>
 8002e64:	1a21      	subs	r1, r4, r0
 8002e66:	4628      	mov	r0, r5
 8002e68:	f000 fb96 	bl	8003598 <_sbrk_r>
 8002e6c:	3001      	adds	r0, #1
 8002e6e:	d1f2      	bne.n	8002e56 <sbrk_aligned+0x22>
 8002e70:	e7ef      	b.n	8002e52 <sbrk_aligned+0x1e>
 8002e72:	bf00      	nop
 8002e74:	20000368 	.word	0x20000368

08002e78 <_malloc_r>:
 8002e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e7c:	1ccd      	adds	r5, r1, #3
 8002e7e:	f025 0503 	bic.w	r5, r5, #3
 8002e82:	3508      	adds	r5, #8
 8002e84:	2d0c      	cmp	r5, #12
 8002e86:	bf38      	it	cc
 8002e88:	250c      	movcc	r5, #12
 8002e8a:	2d00      	cmp	r5, #0
 8002e8c:	4606      	mov	r6, r0
 8002e8e:	db01      	blt.n	8002e94 <_malloc_r+0x1c>
 8002e90:	42a9      	cmp	r1, r5
 8002e92:	d904      	bls.n	8002e9e <_malloc_r+0x26>
 8002e94:	230c      	movs	r3, #12
 8002e96:	6033      	str	r3, [r6, #0]
 8002e98:	2000      	movs	r0, #0
 8002e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002f74 <_malloc_r+0xfc>
 8002ea2:	f000 f869 	bl	8002f78 <__malloc_lock>
 8002ea6:	f8d8 3000 	ldr.w	r3, [r8]
 8002eaa:	461c      	mov	r4, r3
 8002eac:	bb44      	cbnz	r4, 8002f00 <_malloc_r+0x88>
 8002eae:	4629      	mov	r1, r5
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	f7ff ffbf 	bl	8002e34 <sbrk_aligned>
 8002eb6:	1c43      	adds	r3, r0, #1
 8002eb8:	4604      	mov	r4, r0
 8002eba:	d158      	bne.n	8002f6e <_malloc_r+0xf6>
 8002ebc:	f8d8 4000 	ldr.w	r4, [r8]
 8002ec0:	4627      	mov	r7, r4
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d143      	bne.n	8002f4e <_malloc_r+0xd6>
 8002ec6:	2c00      	cmp	r4, #0
 8002ec8:	d04b      	beq.n	8002f62 <_malloc_r+0xea>
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	4639      	mov	r1, r7
 8002ece:	4630      	mov	r0, r6
 8002ed0:	eb04 0903 	add.w	r9, r4, r3
 8002ed4:	f000 fb60 	bl	8003598 <_sbrk_r>
 8002ed8:	4581      	cmp	r9, r0
 8002eda:	d142      	bne.n	8002f62 <_malloc_r+0xea>
 8002edc:	6821      	ldr	r1, [r4, #0]
 8002ede:	4630      	mov	r0, r6
 8002ee0:	1a6d      	subs	r5, r5, r1
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	f7ff ffa6 	bl	8002e34 <sbrk_aligned>
 8002ee8:	3001      	adds	r0, #1
 8002eea:	d03a      	beq.n	8002f62 <_malloc_r+0xea>
 8002eec:	6823      	ldr	r3, [r4, #0]
 8002eee:	442b      	add	r3, r5
 8002ef0:	6023      	str	r3, [r4, #0]
 8002ef2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	bb62      	cbnz	r2, 8002f54 <_malloc_r+0xdc>
 8002efa:	f8c8 7000 	str.w	r7, [r8]
 8002efe:	e00f      	b.n	8002f20 <_malloc_r+0xa8>
 8002f00:	6822      	ldr	r2, [r4, #0]
 8002f02:	1b52      	subs	r2, r2, r5
 8002f04:	d420      	bmi.n	8002f48 <_malloc_r+0xd0>
 8002f06:	2a0b      	cmp	r2, #11
 8002f08:	d917      	bls.n	8002f3a <_malloc_r+0xc2>
 8002f0a:	1961      	adds	r1, r4, r5
 8002f0c:	42a3      	cmp	r3, r4
 8002f0e:	6025      	str	r5, [r4, #0]
 8002f10:	bf18      	it	ne
 8002f12:	6059      	strne	r1, [r3, #4]
 8002f14:	6863      	ldr	r3, [r4, #4]
 8002f16:	bf08      	it	eq
 8002f18:	f8c8 1000 	streq.w	r1, [r8]
 8002f1c:	5162      	str	r2, [r4, r5]
 8002f1e:	604b      	str	r3, [r1, #4]
 8002f20:	4630      	mov	r0, r6
 8002f22:	f000 f82f 	bl	8002f84 <__malloc_unlock>
 8002f26:	f104 000b 	add.w	r0, r4, #11
 8002f2a:	1d23      	adds	r3, r4, #4
 8002f2c:	f020 0007 	bic.w	r0, r0, #7
 8002f30:	1ac2      	subs	r2, r0, r3
 8002f32:	bf1c      	itt	ne
 8002f34:	1a1b      	subne	r3, r3, r0
 8002f36:	50a3      	strne	r3, [r4, r2]
 8002f38:	e7af      	b.n	8002e9a <_malloc_r+0x22>
 8002f3a:	6862      	ldr	r2, [r4, #4]
 8002f3c:	42a3      	cmp	r3, r4
 8002f3e:	bf0c      	ite	eq
 8002f40:	f8c8 2000 	streq.w	r2, [r8]
 8002f44:	605a      	strne	r2, [r3, #4]
 8002f46:	e7eb      	b.n	8002f20 <_malloc_r+0xa8>
 8002f48:	4623      	mov	r3, r4
 8002f4a:	6864      	ldr	r4, [r4, #4]
 8002f4c:	e7ae      	b.n	8002eac <_malloc_r+0x34>
 8002f4e:	463c      	mov	r4, r7
 8002f50:	687f      	ldr	r7, [r7, #4]
 8002f52:	e7b6      	b.n	8002ec2 <_malloc_r+0x4a>
 8002f54:	461a      	mov	r2, r3
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	42a3      	cmp	r3, r4
 8002f5a:	d1fb      	bne.n	8002f54 <_malloc_r+0xdc>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	6053      	str	r3, [r2, #4]
 8002f60:	e7de      	b.n	8002f20 <_malloc_r+0xa8>
 8002f62:	230c      	movs	r3, #12
 8002f64:	4630      	mov	r0, r6
 8002f66:	6033      	str	r3, [r6, #0]
 8002f68:	f000 f80c 	bl	8002f84 <__malloc_unlock>
 8002f6c:	e794      	b.n	8002e98 <_malloc_r+0x20>
 8002f6e:	6005      	str	r5, [r0, #0]
 8002f70:	e7d6      	b.n	8002f20 <_malloc_r+0xa8>
 8002f72:	bf00      	nop
 8002f74:	2000036c 	.word	0x2000036c

08002f78 <__malloc_lock>:
 8002f78:	4801      	ldr	r0, [pc, #4]	@ (8002f80 <__malloc_lock+0x8>)
 8002f7a:	f7ff bf11 	b.w	8002da0 <__retarget_lock_acquire_recursive>
 8002f7e:	bf00      	nop
 8002f80:	20000364 	.word	0x20000364

08002f84 <__malloc_unlock>:
 8002f84:	4801      	ldr	r0, [pc, #4]	@ (8002f8c <__malloc_unlock+0x8>)
 8002f86:	f7ff bf0c 	b.w	8002da2 <__retarget_lock_release_recursive>
 8002f8a:	bf00      	nop
 8002f8c:	20000364 	.word	0x20000364

08002f90 <__ssputs_r>:
 8002f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f94:	461f      	mov	r7, r3
 8002f96:	688e      	ldr	r6, [r1, #8]
 8002f98:	4682      	mov	sl, r0
 8002f9a:	42be      	cmp	r6, r7
 8002f9c:	460c      	mov	r4, r1
 8002f9e:	4690      	mov	r8, r2
 8002fa0:	680b      	ldr	r3, [r1, #0]
 8002fa2:	d82d      	bhi.n	8003000 <__ssputs_r+0x70>
 8002fa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002fa8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002fac:	d026      	beq.n	8002ffc <__ssputs_r+0x6c>
 8002fae:	6965      	ldr	r5, [r4, #20]
 8002fb0:	6909      	ldr	r1, [r1, #16]
 8002fb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fb6:	eba3 0901 	sub.w	r9, r3, r1
 8002fba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002fbe:	1c7b      	adds	r3, r7, #1
 8002fc0:	444b      	add	r3, r9
 8002fc2:	106d      	asrs	r5, r5, #1
 8002fc4:	429d      	cmp	r5, r3
 8002fc6:	bf38      	it	cc
 8002fc8:	461d      	movcc	r5, r3
 8002fca:	0553      	lsls	r3, r2, #21
 8002fcc:	d527      	bpl.n	800301e <__ssputs_r+0x8e>
 8002fce:	4629      	mov	r1, r5
 8002fd0:	f7ff ff52 	bl	8002e78 <_malloc_r>
 8002fd4:	4606      	mov	r6, r0
 8002fd6:	b360      	cbz	r0, 8003032 <__ssputs_r+0xa2>
 8002fd8:	464a      	mov	r2, r9
 8002fda:	6921      	ldr	r1, [r4, #16]
 8002fdc:	f000 fafa 	bl	80035d4 <memcpy>
 8002fe0:	89a3      	ldrh	r3, [r4, #12]
 8002fe2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fea:	81a3      	strh	r3, [r4, #12]
 8002fec:	6126      	str	r6, [r4, #16]
 8002fee:	444e      	add	r6, r9
 8002ff0:	6026      	str	r6, [r4, #0]
 8002ff2:	463e      	mov	r6, r7
 8002ff4:	6165      	str	r5, [r4, #20]
 8002ff6:	eba5 0509 	sub.w	r5, r5, r9
 8002ffa:	60a5      	str	r5, [r4, #8]
 8002ffc:	42be      	cmp	r6, r7
 8002ffe:	d900      	bls.n	8003002 <__ssputs_r+0x72>
 8003000:	463e      	mov	r6, r7
 8003002:	4632      	mov	r2, r6
 8003004:	4641      	mov	r1, r8
 8003006:	6820      	ldr	r0, [r4, #0]
 8003008:	f000 faac 	bl	8003564 <memmove>
 800300c:	2000      	movs	r0, #0
 800300e:	68a3      	ldr	r3, [r4, #8]
 8003010:	1b9b      	subs	r3, r3, r6
 8003012:	60a3      	str	r3, [r4, #8]
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	4433      	add	r3, r6
 8003018:	6023      	str	r3, [r4, #0]
 800301a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800301e:	462a      	mov	r2, r5
 8003020:	f000 fae6 	bl	80035f0 <_realloc_r>
 8003024:	4606      	mov	r6, r0
 8003026:	2800      	cmp	r0, #0
 8003028:	d1e0      	bne.n	8002fec <__ssputs_r+0x5c>
 800302a:	4650      	mov	r0, sl
 800302c:	6921      	ldr	r1, [r4, #16]
 800302e:	f7ff feb9 	bl	8002da4 <_free_r>
 8003032:	230c      	movs	r3, #12
 8003034:	f8ca 3000 	str.w	r3, [sl]
 8003038:	89a3      	ldrh	r3, [r4, #12]
 800303a:	f04f 30ff 	mov.w	r0, #4294967295
 800303e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003042:	81a3      	strh	r3, [r4, #12]
 8003044:	e7e9      	b.n	800301a <__ssputs_r+0x8a>
	...

08003048 <_svfiprintf_r>:
 8003048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800304c:	4698      	mov	r8, r3
 800304e:	898b      	ldrh	r3, [r1, #12]
 8003050:	4607      	mov	r7, r0
 8003052:	061b      	lsls	r3, r3, #24
 8003054:	460d      	mov	r5, r1
 8003056:	4614      	mov	r4, r2
 8003058:	b09d      	sub	sp, #116	@ 0x74
 800305a:	d510      	bpl.n	800307e <_svfiprintf_r+0x36>
 800305c:	690b      	ldr	r3, [r1, #16]
 800305e:	b973      	cbnz	r3, 800307e <_svfiprintf_r+0x36>
 8003060:	2140      	movs	r1, #64	@ 0x40
 8003062:	f7ff ff09 	bl	8002e78 <_malloc_r>
 8003066:	6028      	str	r0, [r5, #0]
 8003068:	6128      	str	r0, [r5, #16]
 800306a:	b930      	cbnz	r0, 800307a <_svfiprintf_r+0x32>
 800306c:	230c      	movs	r3, #12
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	b01d      	add	sp, #116	@ 0x74
 8003076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800307a:	2340      	movs	r3, #64	@ 0x40
 800307c:	616b      	str	r3, [r5, #20]
 800307e:	2300      	movs	r3, #0
 8003080:	9309      	str	r3, [sp, #36]	@ 0x24
 8003082:	2320      	movs	r3, #32
 8003084:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003088:	2330      	movs	r3, #48	@ 0x30
 800308a:	f04f 0901 	mov.w	r9, #1
 800308e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003092:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800322c <_svfiprintf_r+0x1e4>
 8003096:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800309a:	4623      	mov	r3, r4
 800309c:	469a      	mov	sl, r3
 800309e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030a2:	b10a      	cbz	r2, 80030a8 <_svfiprintf_r+0x60>
 80030a4:	2a25      	cmp	r2, #37	@ 0x25
 80030a6:	d1f9      	bne.n	800309c <_svfiprintf_r+0x54>
 80030a8:	ebba 0b04 	subs.w	fp, sl, r4
 80030ac:	d00b      	beq.n	80030c6 <_svfiprintf_r+0x7e>
 80030ae:	465b      	mov	r3, fp
 80030b0:	4622      	mov	r2, r4
 80030b2:	4629      	mov	r1, r5
 80030b4:	4638      	mov	r0, r7
 80030b6:	f7ff ff6b 	bl	8002f90 <__ssputs_r>
 80030ba:	3001      	adds	r0, #1
 80030bc:	f000 80a7 	beq.w	800320e <_svfiprintf_r+0x1c6>
 80030c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80030c2:	445a      	add	r2, fp
 80030c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80030c6:	f89a 3000 	ldrb.w	r3, [sl]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 809f 	beq.w	800320e <_svfiprintf_r+0x1c6>
 80030d0:	2300      	movs	r3, #0
 80030d2:	f04f 32ff 	mov.w	r2, #4294967295
 80030d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030da:	f10a 0a01 	add.w	sl, sl, #1
 80030de:	9304      	str	r3, [sp, #16]
 80030e0:	9307      	str	r3, [sp, #28]
 80030e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80030e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80030e8:	4654      	mov	r4, sl
 80030ea:	2205      	movs	r2, #5
 80030ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030f0:	484e      	ldr	r0, [pc, #312]	@ (800322c <_svfiprintf_r+0x1e4>)
 80030f2:	f000 fa61 	bl	80035b8 <memchr>
 80030f6:	9a04      	ldr	r2, [sp, #16]
 80030f8:	b9d8      	cbnz	r0, 8003132 <_svfiprintf_r+0xea>
 80030fa:	06d0      	lsls	r0, r2, #27
 80030fc:	bf44      	itt	mi
 80030fe:	2320      	movmi	r3, #32
 8003100:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003104:	0711      	lsls	r1, r2, #28
 8003106:	bf44      	itt	mi
 8003108:	232b      	movmi	r3, #43	@ 0x2b
 800310a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800310e:	f89a 3000 	ldrb.w	r3, [sl]
 8003112:	2b2a      	cmp	r3, #42	@ 0x2a
 8003114:	d015      	beq.n	8003142 <_svfiprintf_r+0xfa>
 8003116:	4654      	mov	r4, sl
 8003118:	2000      	movs	r0, #0
 800311a:	f04f 0c0a 	mov.w	ip, #10
 800311e:	9a07      	ldr	r2, [sp, #28]
 8003120:	4621      	mov	r1, r4
 8003122:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003126:	3b30      	subs	r3, #48	@ 0x30
 8003128:	2b09      	cmp	r3, #9
 800312a:	d94b      	bls.n	80031c4 <_svfiprintf_r+0x17c>
 800312c:	b1b0      	cbz	r0, 800315c <_svfiprintf_r+0x114>
 800312e:	9207      	str	r2, [sp, #28]
 8003130:	e014      	b.n	800315c <_svfiprintf_r+0x114>
 8003132:	eba0 0308 	sub.w	r3, r0, r8
 8003136:	fa09 f303 	lsl.w	r3, r9, r3
 800313a:	4313      	orrs	r3, r2
 800313c:	46a2      	mov	sl, r4
 800313e:	9304      	str	r3, [sp, #16]
 8003140:	e7d2      	b.n	80030e8 <_svfiprintf_r+0xa0>
 8003142:	9b03      	ldr	r3, [sp, #12]
 8003144:	1d19      	adds	r1, r3, #4
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	9103      	str	r1, [sp, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	bfbb      	ittet	lt
 800314e:	425b      	neglt	r3, r3
 8003150:	f042 0202 	orrlt.w	r2, r2, #2
 8003154:	9307      	strge	r3, [sp, #28]
 8003156:	9307      	strlt	r3, [sp, #28]
 8003158:	bfb8      	it	lt
 800315a:	9204      	strlt	r2, [sp, #16]
 800315c:	7823      	ldrb	r3, [r4, #0]
 800315e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003160:	d10a      	bne.n	8003178 <_svfiprintf_r+0x130>
 8003162:	7863      	ldrb	r3, [r4, #1]
 8003164:	2b2a      	cmp	r3, #42	@ 0x2a
 8003166:	d132      	bne.n	80031ce <_svfiprintf_r+0x186>
 8003168:	9b03      	ldr	r3, [sp, #12]
 800316a:	3402      	adds	r4, #2
 800316c:	1d1a      	adds	r2, r3, #4
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	9203      	str	r2, [sp, #12]
 8003172:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003176:	9305      	str	r3, [sp, #20]
 8003178:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003230 <_svfiprintf_r+0x1e8>
 800317c:	2203      	movs	r2, #3
 800317e:	4650      	mov	r0, sl
 8003180:	7821      	ldrb	r1, [r4, #0]
 8003182:	f000 fa19 	bl	80035b8 <memchr>
 8003186:	b138      	cbz	r0, 8003198 <_svfiprintf_r+0x150>
 8003188:	2240      	movs	r2, #64	@ 0x40
 800318a:	9b04      	ldr	r3, [sp, #16]
 800318c:	eba0 000a 	sub.w	r0, r0, sl
 8003190:	4082      	lsls	r2, r0
 8003192:	4313      	orrs	r3, r2
 8003194:	3401      	adds	r4, #1
 8003196:	9304      	str	r3, [sp, #16]
 8003198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800319c:	2206      	movs	r2, #6
 800319e:	4825      	ldr	r0, [pc, #148]	@ (8003234 <_svfiprintf_r+0x1ec>)
 80031a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80031a4:	f000 fa08 	bl	80035b8 <memchr>
 80031a8:	2800      	cmp	r0, #0
 80031aa:	d036      	beq.n	800321a <_svfiprintf_r+0x1d2>
 80031ac:	4b22      	ldr	r3, [pc, #136]	@ (8003238 <_svfiprintf_r+0x1f0>)
 80031ae:	bb1b      	cbnz	r3, 80031f8 <_svfiprintf_r+0x1b0>
 80031b0:	9b03      	ldr	r3, [sp, #12]
 80031b2:	3307      	adds	r3, #7
 80031b4:	f023 0307 	bic.w	r3, r3, #7
 80031b8:	3308      	adds	r3, #8
 80031ba:	9303      	str	r3, [sp, #12]
 80031bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80031be:	4433      	add	r3, r6
 80031c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80031c2:	e76a      	b.n	800309a <_svfiprintf_r+0x52>
 80031c4:	460c      	mov	r4, r1
 80031c6:	2001      	movs	r0, #1
 80031c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80031cc:	e7a8      	b.n	8003120 <_svfiprintf_r+0xd8>
 80031ce:	2300      	movs	r3, #0
 80031d0:	f04f 0c0a 	mov.w	ip, #10
 80031d4:	4619      	mov	r1, r3
 80031d6:	3401      	adds	r4, #1
 80031d8:	9305      	str	r3, [sp, #20]
 80031da:	4620      	mov	r0, r4
 80031dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031e0:	3a30      	subs	r2, #48	@ 0x30
 80031e2:	2a09      	cmp	r2, #9
 80031e4:	d903      	bls.n	80031ee <_svfiprintf_r+0x1a6>
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0c6      	beq.n	8003178 <_svfiprintf_r+0x130>
 80031ea:	9105      	str	r1, [sp, #20]
 80031ec:	e7c4      	b.n	8003178 <_svfiprintf_r+0x130>
 80031ee:	4604      	mov	r4, r0
 80031f0:	2301      	movs	r3, #1
 80031f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80031f6:	e7f0      	b.n	80031da <_svfiprintf_r+0x192>
 80031f8:	ab03      	add	r3, sp, #12
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	462a      	mov	r2, r5
 80031fe:	4638      	mov	r0, r7
 8003200:	4b0e      	ldr	r3, [pc, #56]	@ (800323c <_svfiprintf_r+0x1f4>)
 8003202:	a904      	add	r1, sp, #16
 8003204:	f3af 8000 	nop.w
 8003208:	1c42      	adds	r2, r0, #1
 800320a:	4606      	mov	r6, r0
 800320c:	d1d6      	bne.n	80031bc <_svfiprintf_r+0x174>
 800320e:	89ab      	ldrh	r3, [r5, #12]
 8003210:	065b      	lsls	r3, r3, #25
 8003212:	f53f af2d 	bmi.w	8003070 <_svfiprintf_r+0x28>
 8003216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003218:	e72c      	b.n	8003074 <_svfiprintf_r+0x2c>
 800321a:	ab03      	add	r3, sp, #12
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	462a      	mov	r2, r5
 8003220:	4638      	mov	r0, r7
 8003222:	4b06      	ldr	r3, [pc, #24]	@ (800323c <_svfiprintf_r+0x1f4>)
 8003224:	a904      	add	r1, sp, #16
 8003226:	f000 f87d 	bl	8003324 <_printf_i>
 800322a:	e7ed      	b.n	8003208 <_svfiprintf_r+0x1c0>
 800322c:	080036e2 	.word	0x080036e2
 8003230:	080036e8 	.word	0x080036e8
 8003234:	080036ec 	.word	0x080036ec
 8003238:	00000000 	.word	0x00000000
 800323c:	08002f91 	.word	0x08002f91

08003240 <_printf_common>:
 8003240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003244:	4616      	mov	r6, r2
 8003246:	4698      	mov	r8, r3
 8003248:	688a      	ldr	r2, [r1, #8]
 800324a:	690b      	ldr	r3, [r1, #16]
 800324c:	4607      	mov	r7, r0
 800324e:	4293      	cmp	r3, r2
 8003250:	bfb8      	it	lt
 8003252:	4613      	movlt	r3, r2
 8003254:	6033      	str	r3, [r6, #0]
 8003256:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800325a:	460c      	mov	r4, r1
 800325c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003260:	b10a      	cbz	r2, 8003266 <_printf_common+0x26>
 8003262:	3301      	adds	r3, #1
 8003264:	6033      	str	r3, [r6, #0]
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	0699      	lsls	r1, r3, #26
 800326a:	bf42      	ittt	mi
 800326c:	6833      	ldrmi	r3, [r6, #0]
 800326e:	3302      	addmi	r3, #2
 8003270:	6033      	strmi	r3, [r6, #0]
 8003272:	6825      	ldr	r5, [r4, #0]
 8003274:	f015 0506 	ands.w	r5, r5, #6
 8003278:	d106      	bne.n	8003288 <_printf_common+0x48>
 800327a:	f104 0a19 	add.w	sl, r4, #25
 800327e:	68e3      	ldr	r3, [r4, #12]
 8003280:	6832      	ldr	r2, [r6, #0]
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	42ab      	cmp	r3, r5
 8003286:	dc2b      	bgt.n	80032e0 <_printf_common+0xa0>
 8003288:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800328c:	6822      	ldr	r2, [r4, #0]
 800328e:	3b00      	subs	r3, #0
 8003290:	bf18      	it	ne
 8003292:	2301      	movne	r3, #1
 8003294:	0692      	lsls	r2, r2, #26
 8003296:	d430      	bmi.n	80032fa <_printf_common+0xba>
 8003298:	4641      	mov	r1, r8
 800329a:	4638      	mov	r0, r7
 800329c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80032a0:	47c8      	blx	r9
 80032a2:	3001      	adds	r0, #1
 80032a4:	d023      	beq.n	80032ee <_printf_common+0xae>
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	6922      	ldr	r2, [r4, #16]
 80032aa:	f003 0306 	and.w	r3, r3, #6
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	bf14      	ite	ne
 80032b2:	2500      	movne	r5, #0
 80032b4:	6833      	ldreq	r3, [r6, #0]
 80032b6:	f04f 0600 	mov.w	r6, #0
 80032ba:	bf08      	it	eq
 80032bc:	68e5      	ldreq	r5, [r4, #12]
 80032be:	f104 041a 	add.w	r4, r4, #26
 80032c2:	bf08      	it	eq
 80032c4:	1aed      	subeq	r5, r5, r3
 80032c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80032ca:	bf08      	it	eq
 80032cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032d0:	4293      	cmp	r3, r2
 80032d2:	bfc4      	itt	gt
 80032d4:	1a9b      	subgt	r3, r3, r2
 80032d6:	18ed      	addgt	r5, r5, r3
 80032d8:	42b5      	cmp	r5, r6
 80032da:	d11a      	bne.n	8003312 <_printf_common+0xd2>
 80032dc:	2000      	movs	r0, #0
 80032de:	e008      	b.n	80032f2 <_printf_common+0xb2>
 80032e0:	2301      	movs	r3, #1
 80032e2:	4652      	mov	r2, sl
 80032e4:	4641      	mov	r1, r8
 80032e6:	4638      	mov	r0, r7
 80032e8:	47c8      	blx	r9
 80032ea:	3001      	adds	r0, #1
 80032ec:	d103      	bne.n	80032f6 <_printf_common+0xb6>
 80032ee:	f04f 30ff 	mov.w	r0, #4294967295
 80032f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032f6:	3501      	adds	r5, #1
 80032f8:	e7c1      	b.n	800327e <_printf_common+0x3e>
 80032fa:	2030      	movs	r0, #48	@ 0x30
 80032fc:	18e1      	adds	r1, r4, r3
 80032fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003308:	4422      	add	r2, r4
 800330a:	3302      	adds	r3, #2
 800330c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003310:	e7c2      	b.n	8003298 <_printf_common+0x58>
 8003312:	2301      	movs	r3, #1
 8003314:	4622      	mov	r2, r4
 8003316:	4641      	mov	r1, r8
 8003318:	4638      	mov	r0, r7
 800331a:	47c8      	blx	r9
 800331c:	3001      	adds	r0, #1
 800331e:	d0e6      	beq.n	80032ee <_printf_common+0xae>
 8003320:	3601      	adds	r6, #1
 8003322:	e7d9      	b.n	80032d8 <_printf_common+0x98>

08003324 <_printf_i>:
 8003324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003328:	7e0f      	ldrb	r7, [r1, #24]
 800332a:	4691      	mov	r9, r2
 800332c:	2f78      	cmp	r7, #120	@ 0x78
 800332e:	4680      	mov	r8, r0
 8003330:	460c      	mov	r4, r1
 8003332:	469a      	mov	sl, r3
 8003334:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003336:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800333a:	d807      	bhi.n	800334c <_printf_i+0x28>
 800333c:	2f62      	cmp	r7, #98	@ 0x62
 800333e:	d80a      	bhi.n	8003356 <_printf_i+0x32>
 8003340:	2f00      	cmp	r7, #0
 8003342:	f000 80d3 	beq.w	80034ec <_printf_i+0x1c8>
 8003346:	2f58      	cmp	r7, #88	@ 0x58
 8003348:	f000 80ba 	beq.w	80034c0 <_printf_i+0x19c>
 800334c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003350:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003354:	e03a      	b.n	80033cc <_printf_i+0xa8>
 8003356:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800335a:	2b15      	cmp	r3, #21
 800335c:	d8f6      	bhi.n	800334c <_printf_i+0x28>
 800335e:	a101      	add	r1, pc, #4	@ (adr r1, 8003364 <_printf_i+0x40>)
 8003360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003364:	080033bd 	.word	0x080033bd
 8003368:	080033d1 	.word	0x080033d1
 800336c:	0800334d 	.word	0x0800334d
 8003370:	0800334d 	.word	0x0800334d
 8003374:	0800334d 	.word	0x0800334d
 8003378:	0800334d 	.word	0x0800334d
 800337c:	080033d1 	.word	0x080033d1
 8003380:	0800334d 	.word	0x0800334d
 8003384:	0800334d 	.word	0x0800334d
 8003388:	0800334d 	.word	0x0800334d
 800338c:	0800334d 	.word	0x0800334d
 8003390:	080034d3 	.word	0x080034d3
 8003394:	080033fb 	.word	0x080033fb
 8003398:	0800348d 	.word	0x0800348d
 800339c:	0800334d 	.word	0x0800334d
 80033a0:	0800334d 	.word	0x0800334d
 80033a4:	080034f5 	.word	0x080034f5
 80033a8:	0800334d 	.word	0x0800334d
 80033ac:	080033fb 	.word	0x080033fb
 80033b0:	0800334d 	.word	0x0800334d
 80033b4:	0800334d 	.word	0x0800334d
 80033b8:	08003495 	.word	0x08003495
 80033bc:	6833      	ldr	r3, [r6, #0]
 80033be:	1d1a      	adds	r2, r3, #4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6032      	str	r2, [r6, #0]
 80033c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80033cc:	2301      	movs	r3, #1
 80033ce:	e09e      	b.n	800350e <_printf_i+0x1ea>
 80033d0:	6833      	ldr	r3, [r6, #0]
 80033d2:	6820      	ldr	r0, [r4, #0]
 80033d4:	1d19      	adds	r1, r3, #4
 80033d6:	6031      	str	r1, [r6, #0]
 80033d8:	0606      	lsls	r6, r0, #24
 80033da:	d501      	bpl.n	80033e0 <_printf_i+0xbc>
 80033dc:	681d      	ldr	r5, [r3, #0]
 80033de:	e003      	b.n	80033e8 <_printf_i+0xc4>
 80033e0:	0645      	lsls	r5, r0, #25
 80033e2:	d5fb      	bpl.n	80033dc <_printf_i+0xb8>
 80033e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80033e8:	2d00      	cmp	r5, #0
 80033ea:	da03      	bge.n	80033f4 <_printf_i+0xd0>
 80033ec:	232d      	movs	r3, #45	@ 0x2d
 80033ee:	426d      	negs	r5, r5
 80033f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033f4:	230a      	movs	r3, #10
 80033f6:	4859      	ldr	r0, [pc, #356]	@ (800355c <_printf_i+0x238>)
 80033f8:	e011      	b.n	800341e <_printf_i+0xfa>
 80033fa:	6821      	ldr	r1, [r4, #0]
 80033fc:	6833      	ldr	r3, [r6, #0]
 80033fe:	0608      	lsls	r0, r1, #24
 8003400:	f853 5b04 	ldr.w	r5, [r3], #4
 8003404:	d402      	bmi.n	800340c <_printf_i+0xe8>
 8003406:	0649      	lsls	r1, r1, #25
 8003408:	bf48      	it	mi
 800340a:	b2ad      	uxthmi	r5, r5
 800340c:	2f6f      	cmp	r7, #111	@ 0x6f
 800340e:	6033      	str	r3, [r6, #0]
 8003410:	bf14      	ite	ne
 8003412:	230a      	movne	r3, #10
 8003414:	2308      	moveq	r3, #8
 8003416:	4851      	ldr	r0, [pc, #324]	@ (800355c <_printf_i+0x238>)
 8003418:	2100      	movs	r1, #0
 800341a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800341e:	6866      	ldr	r6, [r4, #4]
 8003420:	2e00      	cmp	r6, #0
 8003422:	bfa8      	it	ge
 8003424:	6821      	ldrge	r1, [r4, #0]
 8003426:	60a6      	str	r6, [r4, #8]
 8003428:	bfa4      	itt	ge
 800342a:	f021 0104 	bicge.w	r1, r1, #4
 800342e:	6021      	strge	r1, [r4, #0]
 8003430:	b90d      	cbnz	r5, 8003436 <_printf_i+0x112>
 8003432:	2e00      	cmp	r6, #0
 8003434:	d04b      	beq.n	80034ce <_printf_i+0x1aa>
 8003436:	4616      	mov	r6, r2
 8003438:	fbb5 f1f3 	udiv	r1, r5, r3
 800343c:	fb03 5711 	mls	r7, r3, r1, r5
 8003440:	5dc7      	ldrb	r7, [r0, r7]
 8003442:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003446:	462f      	mov	r7, r5
 8003448:	42bb      	cmp	r3, r7
 800344a:	460d      	mov	r5, r1
 800344c:	d9f4      	bls.n	8003438 <_printf_i+0x114>
 800344e:	2b08      	cmp	r3, #8
 8003450:	d10b      	bne.n	800346a <_printf_i+0x146>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	07df      	lsls	r7, r3, #31
 8003456:	d508      	bpl.n	800346a <_printf_i+0x146>
 8003458:	6923      	ldr	r3, [r4, #16]
 800345a:	6861      	ldr	r1, [r4, #4]
 800345c:	4299      	cmp	r1, r3
 800345e:	bfde      	ittt	le
 8003460:	2330      	movle	r3, #48	@ 0x30
 8003462:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003466:	f106 36ff 	addle.w	r6, r6, #4294967295
 800346a:	1b92      	subs	r2, r2, r6
 800346c:	6122      	str	r2, [r4, #16]
 800346e:	464b      	mov	r3, r9
 8003470:	4621      	mov	r1, r4
 8003472:	4640      	mov	r0, r8
 8003474:	f8cd a000 	str.w	sl, [sp]
 8003478:	aa03      	add	r2, sp, #12
 800347a:	f7ff fee1 	bl	8003240 <_printf_common>
 800347e:	3001      	adds	r0, #1
 8003480:	d14a      	bne.n	8003518 <_printf_i+0x1f4>
 8003482:	f04f 30ff 	mov.w	r0, #4294967295
 8003486:	b004      	add	sp, #16
 8003488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	f043 0320 	orr.w	r3, r3, #32
 8003492:	6023      	str	r3, [r4, #0]
 8003494:	2778      	movs	r7, #120	@ 0x78
 8003496:	4832      	ldr	r0, [pc, #200]	@ (8003560 <_printf_i+0x23c>)
 8003498:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	6831      	ldr	r1, [r6, #0]
 80034a0:	061f      	lsls	r7, r3, #24
 80034a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80034a6:	d402      	bmi.n	80034ae <_printf_i+0x18a>
 80034a8:	065f      	lsls	r7, r3, #25
 80034aa:	bf48      	it	mi
 80034ac:	b2ad      	uxthmi	r5, r5
 80034ae:	6031      	str	r1, [r6, #0]
 80034b0:	07d9      	lsls	r1, r3, #31
 80034b2:	bf44      	itt	mi
 80034b4:	f043 0320 	orrmi.w	r3, r3, #32
 80034b8:	6023      	strmi	r3, [r4, #0]
 80034ba:	b11d      	cbz	r5, 80034c4 <_printf_i+0x1a0>
 80034bc:	2310      	movs	r3, #16
 80034be:	e7ab      	b.n	8003418 <_printf_i+0xf4>
 80034c0:	4826      	ldr	r0, [pc, #152]	@ (800355c <_printf_i+0x238>)
 80034c2:	e7e9      	b.n	8003498 <_printf_i+0x174>
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	f023 0320 	bic.w	r3, r3, #32
 80034ca:	6023      	str	r3, [r4, #0]
 80034cc:	e7f6      	b.n	80034bc <_printf_i+0x198>
 80034ce:	4616      	mov	r6, r2
 80034d0:	e7bd      	b.n	800344e <_printf_i+0x12a>
 80034d2:	6833      	ldr	r3, [r6, #0]
 80034d4:	6825      	ldr	r5, [r4, #0]
 80034d6:	1d18      	adds	r0, r3, #4
 80034d8:	6961      	ldr	r1, [r4, #20]
 80034da:	6030      	str	r0, [r6, #0]
 80034dc:	062e      	lsls	r6, r5, #24
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	d501      	bpl.n	80034e6 <_printf_i+0x1c2>
 80034e2:	6019      	str	r1, [r3, #0]
 80034e4:	e002      	b.n	80034ec <_printf_i+0x1c8>
 80034e6:	0668      	lsls	r0, r5, #25
 80034e8:	d5fb      	bpl.n	80034e2 <_printf_i+0x1be>
 80034ea:	8019      	strh	r1, [r3, #0]
 80034ec:	2300      	movs	r3, #0
 80034ee:	4616      	mov	r6, r2
 80034f0:	6123      	str	r3, [r4, #16]
 80034f2:	e7bc      	b.n	800346e <_printf_i+0x14a>
 80034f4:	6833      	ldr	r3, [r6, #0]
 80034f6:	2100      	movs	r1, #0
 80034f8:	1d1a      	adds	r2, r3, #4
 80034fa:	6032      	str	r2, [r6, #0]
 80034fc:	681e      	ldr	r6, [r3, #0]
 80034fe:	6862      	ldr	r2, [r4, #4]
 8003500:	4630      	mov	r0, r6
 8003502:	f000 f859 	bl	80035b8 <memchr>
 8003506:	b108      	cbz	r0, 800350c <_printf_i+0x1e8>
 8003508:	1b80      	subs	r0, r0, r6
 800350a:	6060      	str	r0, [r4, #4]
 800350c:	6863      	ldr	r3, [r4, #4]
 800350e:	6123      	str	r3, [r4, #16]
 8003510:	2300      	movs	r3, #0
 8003512:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003516:	e7aa      	b.n	800346e <_printf_i+0x14a>
 8003518:	4632      	mov	r2, r6
 800351a:	4649      	mov	r1, r9
 800351c:	4640      	mov	r0, r8
 800351e:	6923      	ldr	r3, [r4, #16]
 8003520:	47d0      	blx	sl
 8003522:	3001      	adds	r0, #1
 8003524:	d0ad      	beq.n	8003482 <_printf_i+0x15e>
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	079b      	lsls	r3, r3, #30
 800352a:	d413      	bmi.n	8003554 <_printf_i+0x230>
 800352c:	68e0      	ldr	r0, [r4, #12]
 800352e:	9b03      	ldr	r3, [sp, #12]
 8003530:	4298      	cmp	r0, r3
 8003532:	bfb8      	it	lt
 8003534:	4618      	movlt	r0, r3
 8003536:	e7a6      	b.n	8003486 <_printf_i+0x162>
 8003538:	2301      	movs	r3, #1
 800353a:	4632      	mov	r2, r6
 800353c:	4649      	mov	r1, r9
 800353e:	4640      	mov	r0, r8
 8003540:	47d0      	blx	sl
 8003542:	3001      	adds	r0, #1
 8003544:	d09d      	beq.n	8003482 <_printf_i+0x15e>
 8003546:	3501      	adds	r5, #1
 8003548:	68e3      	ldr	r3, [r4, #12]
 800354a:	9903      	ldr	r1, [sp, #12]
 800354c:	1a5b      	subs	r3, r3, r1
 800354e:	42ab      	cmp	r3, r5
 8003550:	dcf2      	bgt.n	8003538 <_printf_i+0x214>
 8003552:	e7eb      	b.n	800352c <_printf_i+0x208>
 8003554:	2500      	movs	r5, #0
 8003556:	f104 0619 	add.w	r6, r4, #25
 800355a:	e7f5      	b.n	8003548 <_printf_i+0x224>
 800355c:	080036f3 	.word	0x080036f3
 8003560:	08003704 	.word	0x08003704

08003564 <memmove>:
 8003564:	4288      	cmp	r0, r1
 8003566:	b510      	push	{r4, lr}
 8003568:	eb01 0402 	add.w	r4, r1, r2
 800356c:	d902      	bls.n	8003574 <memmove+0x10>
 800356e:	4284      	cmp	r4, r0
 8003570:	4623      	mov	r3, r4
 8003572:	d807      	bhi.n	8003584 <memmove+0x20>
 8003574:	1e43      	subs	r3, r0, #1
 8003576:	42a1      	cmp	r1, r4
 8003578:	d008      	beq.n	800358c <memmove+0x28>
 800357a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800357e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003582:	e7f8      	b.n	8003576 <memmove+0x12>
 8003584:	4601      	mov	r1, r0
 8003586:	4402      	add	r2, r0
 8003588:	428a      	cmp	r2, r1
 800358a:	d100      	bne.n	800358e <memmove+0x2a>
 800358c:	bd10      	pop	{r4, pc}
 800358e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003596:	e7f7      	b.n	8003588 <memmove+0x24>

08003598 <_sbrk_r>:
 8003598:	b538      	push	{r3, r4, r5, lr}
 800359a:	2300      	movs	r3, #0
 800359c:	4d05      	ldr	r5, [pc, #20]	@ (80035b4 <_sbrk_r+0x1c>)
 800359e:	4604      	mov	r4, r0
 80035a0:	4608      	mov	r0, r1
 80035a2:	602b      	str	r3, [r5, #0]
 80035a4:	f7fd fd7e 	bl	80010a4 <_sbrk>
 80035a8:	1c43      	adds	r3, r0, #1
 80035aa:	d102      	bne.n	80035b2 <_sbrk_r+0x1a>
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	b103      	cbz	r3, 80035b2 <_sbrk_r+0x1a>
 80035b0:	6023      	str	r3, [r4, #0]
 80035b2:	bd38      	pop	{r3, r4, r5, pc}
 80035b4:	20000360 	.word	0x20000360

080035b8 <memchr>:
 80035b8:	4603      	mov	r3, r0
 80035ba:	b510      	push	{r4, lr}
 80035bc:	b2c9      	uxtb	r1, r1
 80035be:	4402      	add	r2, r0
 80035c0:	4293      	cmp	r3, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	d101      	bne.n	80035ca <memchr+0x12>
 80035c6:	2000      	movs	r0, #0
 80035c8:	e003      	b.n	80035d2 <memchr+0x1a>
 80035ca:	7804      	ldrb	r4, [r0, #0]
 80035cc:	3301      	adds	r3, #1
 80035ce:	428c      	cmp	r4, r1
 80035d0:	d1f6      	bne.n	80035c0 <memchr+0x8>
 80035d2:	bd10      	pop	{r4, pc}

080035d4 <memcpy>:
 80035d4:	440a      	add	r2, r1
 80035d6:	4291      	cmp	r1, r2
 80035d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80035dc:	d100      	bne.n	80035e0 <memcpy+0xc>
 80035de:	4770      	bx	lr
 80035e0:	b510      	push	{r4, lr}
 80035e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035e6:	4291      	cmp	r1, r2
 80035e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035ec:	d1f9      	bne.n	80035e2 <memcpy+0xe>
 80035ee:	bd10      	pop	{r4, pc}

080035f0 <_realloc_r>:
 80035f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035f4:	4680      	mov	r8, r0
 80035f6:	4615      	mov	r5, r2
 80035f8:	460c      	mov	r4, r1
 80035fa:	b921      	cbnz	r1, 8003606 <_realloc_r+0x16>
 80035fc:	4611      	mov	r1, r2
 80035fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003602:	f7ff bc39 	b.w	8002e78 <_malloc_r>
 8003606:	b92a      	cbnz	r2, 8003614 <_realloc_r+0x24>
 8003608:	f7ff fbcc 	bl	8002da4 <_free_r>
 800360c:	2400      	movs	r4, #0
 800360e:	4620      	mov	r0, r4
 8003610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003614:	f000 f81a 	bl	800364c <_malloc_usable_size_r>
 8003618:	4285      	cmp	r5, r0
 800361a:	4606      	mov	r6, r0
 800361c:	d802      	bhi.n	8003624 <_realloc_r+0x34>
 800361e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003622:	d8f4      	bhi.n	800360e <_realloc_r+0x1e>
 8003624:	4629      	mov	r1, r5
 8003626:	4640      	mov	r0, r8
 8003628:	f7ff fc26 	bl	8002e78 <_malloc_r>
 800362c:	4607      	mov	r7, r0
 800362e:	2800      	cmp	r0, #0
 8003630:	d0ec      	beq.n	800360c <_realloc_r+0x1c>
 8003632:	42b5      	cmp	r5, r6
 8003634:	462a      	mov	r2, r5
 8003636:	4621      	mov	r1, r4
 8003638:	bf28      	it	cs
 800363a:	4632      	movcs	r2, r6
 800363c:	f7ff ffca 	bl	80035d4 <memcpy>
 8003640:	4621      	mov	r1, r4
 8003642:	4640      	mov	r0, r8
 8003644:	f7ff fbae 	bl	8002da4 <_free_r>
 8003648:	463c      	mov	r4, r7
 800364a:	e7e0      	b.n	800360e <_realloc_r+0x1e>

0800364c <_malloc_usable_size_r>:
 800364c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003650:	1f18      	subs	r0, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	bfbc      	itt	lt
 8003656:	580b      	ldrlt	r3, [r1, r0]
 8003658:	18c0      	addlt	r0, r0, r3
 800365a:	4770      	bx	lr

0800365c <_init>:
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365e:	bf00      	nop
 8003660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003662:	bc08      	pop	{r3}
 8003664:	469e      	mov	lr, r3
 8003666:	4770      	bx	lr

08003668 <_fini>:
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	bf00      	nop
 800366c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366e:	bc08      	pop	{r3}
 8003670:	469e      	mov	lr, r3
 8003672:	4770      	bx	lr
