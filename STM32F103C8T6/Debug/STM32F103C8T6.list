
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000235c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002468  08002468  00003468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024a0  080024a0  00004018  2**0
                  CONTENTS
  4 .ARM          00000000  080024a0  080024a0  00004018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024a0  080024a0  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024a0  080024a0  000034a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024a4  080024a4  000034a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080024a8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000018  080024c0  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  080024c0  00004184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bc9  00000000  00000000  00004041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b69  00000000  00000000  0000dc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  0000f778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008de  00000000  00000000  000102f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176bb  00000000  00000000  00010bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbca  00000000  00000000  00028291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089670  00000000  00000000  00033e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd4cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f6c  00000000  00000000  000bd510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000c047c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002450 	.word	0x08002450

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002450 	.word	0x08002450

0800014c <KeyPad_Scan>:
    /* Set all rows to high */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
}

/* Scan the 4x5 keypad and return the pressed key value */
uint8_t KeyPad_Scan(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    uint32_t currentMillis = HAL_GetTick();
 8000152:	f000 fc23 	bl	800099c <HAL_GetTick>
 8000156:	6038      	str	r0, [r7, #0]

    if (currentMillis - lastDebounceTime < DEBOUNCE_DELAY) {
 8000158:	4b23      	ldr	r3, [pc, #140]	@ (80001e8 <KeyPad_Scan+0x9c>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	683a      	ldr	r2, [r7, #0]
 800015e:	1ad3      	subs	r3, r2, r3
 8000160:	2b63      	cmp	r3, #99	@ 0x63
 8000162:	d801      	bhi.n	8000168 <KeyPad_Scan+0x1c>
        return 0xFF;
 8000164:	23ff      	movs	r3, #255	@ 0xff
 8000166:	e03b      	b.n	80001e0 <KeyPad_Scan+0x94>
    }

    for (uint8_t row = 0; row < 4; row++) {
 8000168:	2300      	movs	r3, #0
 800016a:	71fb      	strb	r3, [r7, #7]
 800016c:	e034      	b.n	80001d8 <KeyPad_Scan+0x8c>
        /* Set all rows low */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000174:	481d      	ldr	r0, [pc, #116]	@ (80001ec <KeyPad_Scan+0xa0>)
 8000176:	f000 fec4 	bl	8000f02 <HAL_GPIO_WritePin>

        /* Set the current row high */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 << row, GPIO_PIN_SET);
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	2240      	movs	r2, #64	@ 0x40
 800017e:	fa02 f303 	lsl.w	r3, r2, r3
 8000182:	b29b      	uxth	r3, r3
 8000184:	2201      	movs	r2, #1
 8000186:	4619      	mov	r1, r3
 8000188:	4818      	ldr	r0, [pc, #96]	@ (80001ec <KeyPad_Scan+0xa0>)
 800018a:	f000 feba 	bl	8000f02 <HAL_GPIO_WritePin>

        /* Read each column */
        for (uint8_t col = 0; col < 5; col++) {
 800018e:	2300      	movs	r3, #0
 8000190:	71bb      	strb	r3, [r7, #6]
 8000192:	e01b      	b.n	80001cc <KeyPad_Scan+0x80>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 << col) == GPIO_PIN_SET) {
 8000194:	79bb      	ldrb	r3, [r7, #6]
 8000196:	2201      	movs	r2, #1
 8000198:	fa02 f303 	lsl.w	r3, r2, r3
 800019c:	b29b      	uxth	r3, r3
 800019e:	4619      	mov	r1, r3
 80001a0:	4812      	ldr	r0, [pc, #72]	@ (80001ec <KeyPad_Scan+0xa0>)
 80001a2:	f000 fe97 	bl	8000ed4 <HAL_GPIO_ReadPin>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b01      	cmp	r3, #1
 80001aa:	d10c      	bne.n	80001c6 <KeyPad_Scan+0x7a>
                lastDebounceTime = currentMillis;
 80001ac:	4a0e      	ldr	r2, [pc, #56]	@ (80001e8 <KeyPad_Scan+0x9c>)
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	6013      	str	r3, [r2, #0]
                return keyMap[row][col];
 80001b2:	79fa      	ldrb	r2, [r7, #7]
 80001b4:	79b9      	ldrb	r1, [r7, #6]
 80001b6:	480e      	ldr	r0, [pc, #56]	@ (80001f0 <KeyPad_Scan+0xa4>)
 80001b8:	4613      	mov	r3, r2
 80001ba:	009b      	lsls	r3, r3, #2
 80001bc:	4413      	add	r3, r2
 80001be:	4403      	add	r3, r0
 80001c0:	440b      	add	r3, r1
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	e00c      	b.n	80001e0 <KeyPad_Scan+0x94>
        for (uint8_t col = 0; col < 5; col++) {
 80001c6:	79bb      	ldrb	r3, [r7, #6]
 80001c8:	3301      	adds	r3, #1
 80001ca:	71bb      	strb	r3, [r7, #6]
 80001cc:	79bb      	ldrb	r3, [r7, #6]
 80001ce:	2b04      	cmp	r3, #4
 80001d0:	d9e0      	bls.n	8000194 <KeyPad_Scan+0x48>
    for (uint8_t row = 0; row < 4; row++) {
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	3301      	adds	r3, #1
 80001d6:	71fb      	strb	r3, [r7, #7]
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	2b03      	cmp	r3, #3
 80001dc:	d9c7      	bls.n	800016e <KeyPad_Scan+0x22>
            }
        }
    }

    return 0xFF;
 80001de:	23ff      	movs	r3, #255	@ 0xff
}
 80001e0:	4618      	mov	r0, r3
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	20000034 	.word	0x20000034
 80001ec:	40010c00 	.word	0x40010c00
 80001f0:	08002468 	.word	0x08002468

080001f4 <ShiftOut_SPI>:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
}
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	6039      	str	r1, [r7, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Pull STCP (Latch) low
 80001fe:	2200      	movs	r2, #0
 8000200:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000204:	480a      	ldr	r0, [pc, #40]	@ (8000230 <ShiftOut_SPI+0x3c>)
 8000206:	f000 fe7c 	bl	8000f02 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, 300); // Transmit data
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	b29a      	uxth	r2, r3
 800020e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000212:	6879      	ldr	r1, [r7, #4]
 8000214:	4807      	ldr	r0, [pc, #28]	@ (8000234 <ShiftOut_SPI+0x40>)
 8000216:	f001 fb07 	bl	8001828 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Pull STCP (Latch) high
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <ShiftOut_SPI+0x3c>)
 8000222:	f000 fe6e 	bl	8000f02 <HAL_GPIO_WritePin>

}
 8000226:	bf00      	nop
 8000228:	3708      	adds	r7, #8
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010c00 	.word	0x40010c00
 8000234:	20000090 	.word	0x20000090

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023e:	f000 fb55 	bl	80008ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000242:	f000 f871 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000246:	f000 f963 	bl	8000510 <MX_GPIO_Init>
  MX_SPI2_Init();
 800024a:	f000 f8df 	bl	800040c <MX_SPI2_Init>
  MX_TIM2_Init();
 800024e:	f000 f913 	bl	8000478 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000252:	f000 f8a5 	bl	80003a0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000256:	482e      	ldr	r0, [pc, #184]	@ (8000310 <main+0xd8>)
 8000258:	f001 fd20 	bl	8001c9c <HAL_TIM_Base_Start_IT>
  int i=0;
 800025c:	2300      	movs	r3, #0
 800025e:	607b      	str	r3, [r7, #4]
   setTimer(0,100);
 8000260:	2164      	movs	r1, #100	@ 0x64
 8000262:	2000      	movs	r0, #0
 8000264:	f000 fad4 	bl	8000810 <setTimer>
   setTimer(1, 100);
 8000268:	2164      	movs	r1, #100	@ 0x64
 800026a:	2001      	movs	r0, #1
 800026c:	f000 fad0 	bl	8000810 <setTimer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {
	  if(timer_flag[0]==1){
 8000270:	4b28      	ldr	r3, [pc, #160]	@ (8000314 <main+0xdc>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d13c      	bne.n	80002f2 <main+0xba>
		  uint8_t data[] = {0b11111111,digitMapWithDP[i%10],digitMapWithDP[(i+1)%10],digitMapWithDP[(i+2)%10]}; // Data to display '1' with DP
 8000278:	23ff      	movs	r3, #255	@ 0xff
 800027a:	703b      	strb	r3, [r7, #0]
 800027c:	6879      	ldr	r1, [r7, #4]
 800027e:	4b26      	ldr	r3, [pc, #152]	@ (8000318 <main+0xe0>)
 8000280:	fb83 2301 	smull	r2, r3, r3, r1
 8000284:	109a      	asrs	r2, r3, #2
 8000286:	17cb      	asrs	r3, r1, #31
 8000288:	1ad2      	subs	r2, r2, r3
 800028a:	4613      	mov	r3, r2
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	4413      	add	r3, r2
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	1aca      	subs	r2, r1, r3
 8000294:	4b21      	ldr	r3, [pc, #132]	@ (800031c <main+0xe4>)
 8000296:	5c9b      	ldrb	r3, [r3, r2]
 8000298:	707b      	strb	r3, [r7, #1]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	1c59      	adds	r1, r3, #1
 800029e:	4b1e      	ldr	r3, [pc, #120]	@ (8000318 <main+0xe0>)
 80002a0:	fb83 2301 	smull	r2, r3, r3, r1
 80002a4:	109a      	asrs	r2, r3, #2
 80002a6:	17cb      	asrs	r3, r1, #31
 80002a8:	1ad2      	subs	r2, r2, r3
 80002aa:	4613      	mov	r3, r2
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	4413      	add	r3, r2
 80002b0:	005b      	lsls	r3, r3, #1
 80002b2:	1aca      	subs	r2, r1, r3
 80002b4:	4b19      	ldr	r3, [pc, #100]	@ (800031c <main+0xe4>)
 80002b6:	5c9b      	ldrb	r3, [r3, r2]
 80002b8:	70bb      	strb	r3, [r7, #2]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	1c99      	adds	r1, r3, #2
 80002be:	4b16      	ldr	r3, [pc, #88]	@ (8000318 <main+0xe0>)
 80002c0:	fb83 2301 	smull	r2, r3, r3, r1
 80002c4:	109a      	asrs	r2, r3, #2
 80002c6:	17cb      	asrs	r3, r1, #31
 80002c8:	1ad2      	subs	r2, r2, r3
 80002ca:	4613      	mov	r3, r2
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	4413      	add	r3, r2
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	1aca      	subs	r2, r1, r3
 80002d4:	4b11      	ldr	r3, [pc, #68]	@ (800031c <main+0xe4>)
 80002d6:	5c9b      	ldrb	r3, [r3, r2]
 80002d8:	70fb      	strb	r3, [r7, #3]
		  ShiftOut_SPI(data, 4);
 80002da:	463b      	mov	r3, r7
 80002dc:	2104      	movs	r1, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff88 	bl	80001f4 <ShiftOut_SPI>
		  i++;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	3301      	adds	r3, #1
 80002e8:	607b      	str	r3, [r7, #4]
		  setTimer(0,100);
 80002ea:	2164      	movs	r1, #100	@ 0x64
 80002ec:	2000      	movs	r0, #0
 80002ee:	f000 fa8f 	bl	8000810 <setTimer>
	  }
//	  if(timer_flag[1]==1){
		  keyPressed = KeyPad_Scan();
 80002f2:	f7ff ff2b 	bl	800014c <KeyPad_Scan>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <main+0xe8>)
 80002fc:	701a      	strb	r2, [r3, #0]
		  	  if (keyPressed != 0xFF) // If a key is pressed
 80002fe:	4b08      	ldr	r3, [pc, #32]	@ (8000320 <main+0xe8>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2bff      	cmp	r3, #255	@ 0xff
 8000304:	d0b4      	beq.n	8000270 <main+0x38>
		  	  {
		  		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000306:	2120      	movs	r1, #32
 8000308:	4806      	ldr	r0, [pc, #24]	@ (8000324 <main+0xec>)
 800030a:	f000 fe12 	bl	8000f32 <HAL_GPIO_TogglePin>
	  if(timer_flag[0]==1){
 800030e:	e7af      	b.n	8000270 <main+0x38>
 8000310:	200000e8 	.word	0x200000e8
 8000314:	20000158 	.word	0x20000158
 8000318:	66666667 	.word	0x66666667
 800031c:	20000000 	.word	0x20000000
 8000320:	2000000a 	.word	0x2000000a
 8000324:	40010800 	.word	0x40010800

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b090      	sub	sp, #64	@ 0x40
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	2228      	movs	r2, #40	@ 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f002 f85e 	bl	80023f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034a:	2302      	movs	r3, #2
 800034c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034e:	2301      	movs	r3, #1
 8000350:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000352:	2310      	movs	r3, #16
 8000354:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000356:	2300      	movs	r3, #0
 8000358:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035a:	f107 0318 	add.w	r3, r7, #24
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fe00 	bl	8000f64 <HAL_RCC_OscConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800036a:	f000 f94b 	bl	8000604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036e:	230f      	movs	r3, #15
 8000370:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000372:	2300      	movs	r3, #0
 8000374:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f001 f86e 	bl	8001468 <HAL_RCC_ClockConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000392:	f000 f937 	bl	8000604 <Error_Handler>
  }
}
 8000396:	bf00      	nop
 8000398:	3740      	adds	r7, #64	@ 0x40
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003a4:	4b17      	ldr	r3, [pc, #92]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003a6:	4a18      	ldr	r2, [pc, #96]	@ (8000408 <MX_SPI1_Init+0x68>)
 80003a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003aa:	4b16      	ldr	r3, [pc, #88]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003b2:	4b14      	ldr	r3, [pc, #80]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003b8:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003be:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003da:	2200      	movs	r2, #0
 80003dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003de:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003e4:	4b07      	ldr	r3, [pc, #28]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003ea:	4b06      	ldr	r3, [pc, #24]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003ec:	220a      	movs	r2, #10
 80003ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003f0:	4804      	ldr	r0, [pc, #16]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003f2:	f001 f995 	bl	8001720 <HAL_SPI_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003fc:	f000 f902 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000038 	.word	0x20000038
 8000408:	40013000 	.word	0x40013000

0800040c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000410:	4b17      	ldr	r3, [pc, #92]	@ (8000470 <MX_SPI2_Init+0x64>)
 8000412:	4a18      	ldr	r2, [pc, #96]	@ (8000474 <MX_SPI2_Init+0x68>)
 8000414:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000416:	4b16      	ldr	r3, [pc, #88]	@ (8000470 <MX_SPI2_Init+0x64>)
 8000418:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800041c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800041e:	4b14      	ldr	r3, [pc, #80]	@ (8000470 <MX_SPI2_Init+0x64>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000424:	4b12      	ldr	r3, [pc, #72]	@ (8000470 <MX_SPI2_Init+0x64>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800042a:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <MX_SPI2_Init+0x64>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000430:	4b0f      	ldr	r3, [pc, #60]	@ (8000470 <MX_SPI2_Init+0x64>)
 8000432:	2200      	movs	r2, #0
 8000434:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000436:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <MX_SPI2_Init+0x64>)
 8000438:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800043c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800043e:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <MX_SPI2_Init+0x64>)
 8000440:	2200      	movs	r2, #0
 8000442:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000444:	4b0a      	ldr	r3, [pc, #40]	@ (8000470 <MX_SPI2_Init+0x64>)
 8000446:	2200      	movs	r2, #0
 8000448:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800044a:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <MX_SPI2_Init+0x64>)
 800044c:	2200      	movs	r2, #0
 800044e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000450:	4b07      	ldr	r3, [pc, #28]	@ (8000470 <MX_SPI2_Init+0x64>)
 8000452:	2200      	movs	r2, #0
 8000454:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000456:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <MX_SPI2_Init+0x64>)
 8000458:	220a      	movs	r2, #10
 800045a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800045c:	4804      	ldr	r0, [pc, #16]	@ (8000470 <MX_SPI2_Init+0x64>)
 800045e:	f001 f95f 	bl	8001720 <HAL_SPI_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000468:	f000 f8cc 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000090 	.word	0x20000090
 8000474:	40003800 	.word	0x40003800

08000478 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800047e:	f107 0308 	add.w	r3, r7, #8
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048c:	463b      	mov	r3, r7
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000494:	4b1d      	ldr	r3, [pc, #116]	@ (800050c <MX_TIM2_Init+0x94>)
 8000496:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800049a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800049c:	4b1b      	ldr	r3, [pc, #108]	@ (800050c <MX_TIM2_Init+0x94>)
 800049e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80004a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a4:	4b19      	ldr	r3, [pc, #100]	@ (800050c <MX_TIM2_Init+0x94>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80004aa:	4b18      	ldr	r3, [pc, #96]	@ (800050c <MX_TIM2_Init+0x94>)
 80004ac:	2209      	movs	r2, #9
 80004ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b0:	4b16      	ldr	r3, [pc, #88]	@ (800050c <MX_TIM2_Init+0x94>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b6:	4b15      	ldr	r3, [pc, #84]	@ (800050c <MX_TIM2_Init+0x94>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004bc:	4813      	ldr	r0, [pc, #76]	@ (800050c <MX_TIM2_Init+0x94>)
 80004be:	f001 fb9d 	bl	8001bfc <HAL_TIM_Base_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80004c8:	f000 f89c 	bl	8000604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	4619      	mov	r1, r3
 80004d8:	480c      	ldr	r0, [pc, #48]	@ (800050c <MX_TIM2_Init+0x94>)
 80004da:	f001 fd39 	bl	8001f50 <HAL_TIM_ConfigClockSource>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004e4:	f000 f88e 	bl	8000604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e8:	2300      	movs	r3, #0
 80004ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ec:	2300      	movs	r3, #0
 80004ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004f0:	463b      	mov	r3, r7
 80004f2:	4619      	mov	r1, r3
 80004f4:	4805      	ldr	r0, [pc, #20]	@ (800050c <MX_TIM2_Init+0x94>)
 80004f6:	f001 ff0f 	bl	8002318 <HAL_TIMEx_MasterConfigSynchronization>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000500:	f000 f880 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000504:	bf00      	nop
 8000506:	3718      	adds	r7, #24
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200000e8 	.word	0x200000e8

08000510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	4b2f      	ldr	r3, [pc, #188]	@ (80005e4 <MX_GPIO_Init+0xd4>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a2e      	ldr	r2, [pc, #184]	@ (80005e4 <MX_GPIO_Init+0xd4>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b2c      	ldr	r3, [pc, #176]	@ (80005e4 <MX_GPIO_Init+0xd4>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0304 	and.w	r3, r3, #4
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053c:	4b29      	ldr	r3, [pc, #164]	@ (80005e4 <MX_GPIO_Init+0xd4>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a28      	ldr	r2, [pc, #160]	@ (80005e4 <MX_GPIO_Init+0xd4>)
 8000542:	f043 0308 	orr.w	r3, r3, #8
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b26      	ldr	r3, [pc, #152]	@ (80005e4 <MX_GPIO_Init+0xd4>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0308 	and.w	r3, r3, #8
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2140      	movs	r1, #64	@ 0x40
 8000558:	4823      	ldr	r0, [pc, #140]	@ (80005e8 <MX_GPIO_Init+0xd8>)
 800055a:	f000 fcd2 	bl	8000f02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 800055e:	2200      	movs	r2, #0
 8000560:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8000564:	4821      	ldr	r0, [pc, #132]	@ (80005ec <MX_GPIO_Init+0xdc>)
 8000566:	f000 fccc 	bl	8000f02 <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Latch_SPI1_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin;
 800056a:	2340      	movs	r3, #64	@ 0x40
 800056c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2302      	movs	r3, #2
 8000578:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI1_GPIO_Port, &GPIO_InitStruct);
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	4619      	mov	r1, r3
 8000580:	4819      	ldr	r0, [pc, #100]	@ (80005e8 <MX_GPIO_Init+0xd8>)
 8000582:	f000 fb23 	bl	8000bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8000586:	231f      	movs	r3, #31
 8000588:	60bb      	str	r3, [r7, #8]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800058e:	2302      	movs	r3, #2
 8000590:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	4619      	mov	r1, r3
 8000598:	4814      	ldr	r0, [pc, #80]	@ (80005ec <MX_GPIO_Init+0xdc>)
 800059a:	f000 fb17 	bl	8000bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : Latch_SPI_Pin */
  GPIO_InitStruct.Pin = Latch_SPI_Pin;
 800059e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ac:	2303      	movs	r3, #3
 80005ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI_GPIO_Port, &GPIO_InitStruct);
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	4619      	mov	r1, r3
 80005b6:	480d      	ldr	r0, [pc, #52]	@ (80005ec <MX_GPIO_Init+0xdc>)
 80005b8:	f000 fb08 	bl	8000bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin OUT2_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin;
 80005bc:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80005c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2302      	movs	r3, #2
 80005cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	@ (80005ec <MX_GPIO_Init+0xdc>)
 80005d6:	f000 faf9 	bl	8000bcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005da:	bf00      	nop
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010800 	.word	0x40010800
 80005ec:	40010c00 	.word	0x40010c00

080005f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	timerRun();
 80005f8:	f000 f922 	bl	8000840 <timerRun>

}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <Error_Handler+0x8>

08000610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000616:	4b15      	ldr	r3, [pc, #84]	@ (800066c <HAL_MspInit+0x5c>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	4a14      	ldr	r2, [pc, #80]	@ (800066c <HAL_MspInit+0x5c>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6193      	str	r3, [r2, #24]
 8000622:	4b12      	ldr	r3, [pc, #72]	@ (800066c <HAL_MspInit+0x5c>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <HAL_MspInit+0x5c>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a0e      	ldr	r2, [pc, #56]	@ (800066c <HAL_MspInit+0x5c>)
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <HAL_MspInit+0x5c>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <HAL_MspInit+0x60>)
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <HAL_MspInit+0x60>)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	40021000 	.word	0x40021000
 8000670:	40010000 	.word	0x40010000

08000674 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0318 	add.w	r3, r7, #24
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a2b      	ldr	r2, [pc, #172]	@ (800073c <HAL_SPI_MspInit+0xc8>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d124      	bne.n	80006de <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <HAL_SPI_MspInit+0xcc>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a29      	ldr	r2, [pc, #164]	@ (8000740 <HAL_SPI_MspInit+0xcc>)
 800069a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <HAL_SPI_MspInit+0xcc>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <HAL_SPI_MspInit+0xcc>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a23      	ldr	r2, [pc, #140]	@ (8000740 <HAL_SPI_MspInit+0xcc>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <HAL_SPI_MspInit+0xcc>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0304 	and.w	r3, r3, #4
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006c4:	23a0      	movs	r3, #160	@ 0xa0
 80006c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	f107 0318 	add.w	r3, r7, #24
 80006d4:	4619      	mov	r1, r3
 80006d6:	481b      	ldr	r0, [pc, #108]	@ (8000744 <HAL_SPI_MspInit+0xd0>)
 80006d8:	f000 fa78 	bl	8000bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80006dc:	e029      	b.n	8000732 <HAL_SPI_MspInit+0xbe>
  else if(hspi->Instance==SPI2)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a19      	ldr	r2, [pc, #100]	@ (8000748 <HAL_SPI_MspInit+0xd4>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d124      	bne.n	8000732 <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006e8:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <HAL_SPI_MspInit+0xcc>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	4a14      	ldr	r2, [pc, #80]	@ (8000740 <HAL_SPI_MspInit+0xcc>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f2:	61d3      	str	r3, [r2, #28]
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <HAL_SPI_MspInit+0xcc>)
 80006f6:	69db      	ldr	r3, [r3, #28]
 80006f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <HAL_SPI_MspInit+0xcc>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a0e      	ldr	r2, [pc, #56]	@ (8000740 <HAL_SPI_MspInit+0xcc>)
 8000706:	f043 0308 	orr.w	r3, r3, #8
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <HAL_SPI_MspInit+0xcc>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0308 	and.w	r3, r3, #8
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000718:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800071c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071e:	2302      	movs	r3, #2
 8000720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000726:	f107 0318 	add.w	r3, r7, #24
 800072a:	4619      	mov	r1, r3
 800072c:	4807      	ldr	r0, [pc, #28]	@ (800074c <HAL_SPI_MspInit+0xd8>)
 800072e:	f000 fa4d 	bl	8000bcc <HAL_GPIO_Init>
}
 8000732:	bf00      	nop
 8000734:	3728      	adds	r7, #40	@ 0x28
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40013000 	.word	0x40013000
 8000740:	40021000 	.word	0x40021000
 8000744:	40010800 	.word	0x40010800
 8000748:	40003800 	.word	0x40003800
 800074c:	40010c00 	.word	0x40010c00

08000750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000760:	d113      	bne.n	800078a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <HAL_TIM_Base_MspInit+0x44>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a0b      	ldr	r2, [pc, #44]	@ (8000794 <HAL_TIM_Base_MspInit+0x44>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <HAL_TIM_Base_MspInit+0x44>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2101      	movs	r1, #1
 800077e:	201c      	movs	r0, #28
 8000780:	f000 f9ed 	bl	8000b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000784:	201c      	movs	r0, #28
 8000786:	f000 fa06 	bl	8000b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <NMI_Handler+0x4>

080007a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <HardFault_Handler+0x4>

080007a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <MemManage_Handler+0x4>

080007b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <UsageFault_Handler+0x4>

080007c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e8:	f000 f8c6 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007f4:	4802      	ldr	r0, [pc, #8]	@ (8000800 <TIM2_IRQHandler+0x10>)
 80007f6:	f001 faa3 	bl	8001d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200000e8 	.word	0x200000e8

08000804 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <setTimer>:
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	4907      	ldr	r1, [pc, #28]	@ (8000838 <setTimer+0x28>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000824:	4a05      	ldr	r2, [pc, #20]	@ (800083c <setTimer+0x2c>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2100      	movs	r1, #0
 800082a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	20000130 	.word	0x20000130
 800083c:	20000158 	.word	0x20000158

08000840 <timerRun>:
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	e01c      	b.n	8000886 <timerRun+0x46>
 800084c:	4a12      	ldr	r2, [pc, #72]	@ (8000898 <timerRun+0x58>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000854:	2b00      	cmp	r3, #0
 8000856:	dd13      	ble.n	8000880 <timerRun+0x40>
 8000858:	4a0f      	ldr	r2, [pc, #60]	@ (8000898 <timerRun+0x58>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000860:	1e5a      	subs	r2, r3, #1
 8000862:	490d      	ldr	r1, [pc, #52]	@ (8000898 <timerRun+0x58>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800086a:	4a0b      	ldr	r2, [pc, #44]	@ (8000898 <timerRun+0x58>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000872:	2b00      	cmp	r3, #0
 8000874:	dc04      	bgt.n	8000880 <timerRun+0x40>
 8000876:	4a09      	ldr	r2, [pc, #36]	@ (800089c <timerRun+0x5c>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2101      	movs	r1, #1
 800087c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3301      	adds	r3, #1
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b09      	cmp	r3, #9
 800088a:	dddf      	ble.n	800084c <timerRun+0xc>
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	20000130 	.word	0x20000130
 800089c:	20000158 	.word	0x20000158

080008a0 <Reset_Handler>:
 80008a0:	f7ff ffb0 	bl	8000804 <SystemInit>
 80008a4:	480b      	ldr	r0, [pc, #44]	@ (80008d4 <LoopFillZerobss+0xe>)
 80008a6:	490c      	ldr	r1, [pc, #48]	@ (80008d8 <LoopFillZerobss+0x12>)
 80008a8:	4a0c      	ldr	r2, [pc, #48]	@ (80008dc <LoopFillZerobss+0x16>)
 80008aa:	2300      	movs	r3, #0
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:
 80008ae:	58d4      	ldr	r4, [r2, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:
 80008b4:	18c4      	adds	r4, r0, r3
 80008b6:	428c      	cmp	r4, r1
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
 80008ba:	4a09      	ldr	r2, [pc, #36]	@ (80008e0 <LoopFillZerobss+0x1a>)
 80008bc:	4c09      	ldr	r4, [pc, #36]	@ (80008e4 <LoopFillZerobss+0x1e>)
 80008be:	2300      	movs	r3, #0
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:
 80008c6:	42a2      	cmp	r2, r4
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>
 80008ca:	f001 fd9d 	bl	8002408 <__libc_init_array>
 80008ce:	f7ff fcb3 	bl	8000238 <main>
 80008d2:	4770      	bx	lr
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000018 	.word	0x20000018
 80008dc:	080024a8 	.word	0x080024a8
 80008e0:	20000018 	.word	0x20000018
 80008e4:	20000184 	.word	0x20000184

080008e8 <ADC1_2_IRQHandler>:
 80008e8:	e7fe      	b.n	80008e8 <ADC1_2_IRQHandler>
	...

080008ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f0:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <HAL_Init+0x28>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a07      	ldr	r2, [pc, #28]	@ (8000914 <HAL_Init+0x28>)
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 f923 	bl	8000b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000902:	200f      	movs	r0, #15
 8000904:	f000 f808 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000908:	f7ff fe82 	bl	8000610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40022000 	.word	0x40022000

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <HAL_InitTick+0x54>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <HAL_InitTick+0x58>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000932:	fbb2 f3f3 	udiv	r3, r2, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f93b 	bl	8000bb2 <HAL_SYSTICK_Config>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e00e      	b.n	8000964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d80a      	bhi.n	8000962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000954:	f000 f903 	bl	8000b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4a06      	ldr	r2, [pc, #24]	@ (8000974 <HAL_InitTick+0x5c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000000c 	.word	0x2000000c
 8000970:	20000014 	.word	0x20000014
 8000974:	20000010 	.word	0x20000010

08000978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <HAL_IncTick+0x1c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <HAL_IncTick+0x20>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a03      	ldr	r2, [pc, #12]	@ (8000998 <HAL_IncTick+0x20>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	20000014 	.word	0x20000014
 8000998:	20000180 	.word	0x20000180

0800099c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b02      	ldr	r3, [pc, #8]	@ (80009ac <HAL_GetTick+0x10>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	20000180 	.word	0x20000180

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	@ (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db0b      	blt.n	8000a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	f003 021f 	and.w	r2, r3, #31
 8000a2c:	4906      	ldr	r1, [pc, #24]	@ (8000a48 <__NVIC_EnableIRQ+0x34>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	2001      	movs	r0, #1
 8000a36:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	e000e100 	.word	0xe000e100

08000a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	490c      	ldr	r1, [pc, #48]	@ (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4908      	ldr	r1, [pc, #32]	@ (8000a9c <__NVIC_SetPriority+0x50>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	3b04      	subs	r3, #4
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	@ 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f1c3 0307 	rsb	r3, r3, #7
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	bf28      	it	cs
 8000abe:	2304      	movcs	r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d902      	bls.n	8000ad0 <NVIC_EncodePriority+0x30>
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	e000      	b.n	8000ad2 <NVIC_EncodePriority+0x32>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43d9      	mvns	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	4313      	orrs	r3, r2
         );
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3724      	adds	r7, #36	@ 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b14:	d301      	bcc.n	8000b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00f      	b.n	8000b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <SysTick_Config+0x40>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b22:	210f      	movs	r1, #15
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b28:	f7ff ff90 	bl	8000a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <SysTick_Config+0x40>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b32:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <SysTick_Config+0x40>)
 8000b34:	2207      	movs	r2, #7
 8000b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff2d 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b70:	f7ff ff42 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	6978      	ldr	r0, [r7, #20]
 8000b7c:	f7ff ff90 	bl	8000aa0 <NVIC_EncodePriority>
 8000b80:	4602      	mov	r2, r0
 8000b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff5f 	bl	8000a4c <__NVIC_SetPriority>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff35 	bl	8000a14 <__NVIC_EnableIRQ>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffa2 	bl	8000b04 <SysTick_Config>
 8000bc0:	4603      	mov	r3, r0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b08b      	sub	sp, #44	@ 0x2c
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bde:	e169      	b.n	8000eb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000be0:	2201      	movs	r2, #1
 8000be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	69fa      	ldr	r2, [r7, #28]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	f040 8158 	bne.w	8000eae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	4a9a      	ldr	r2, [pc, #616]	@ (8000e6c <HAL_GPIO_Init+0x2a0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d05e      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
 8000c08:	4a98      	ldr	r2, [pc, #608]	@ (8000e6c <HAL_GPIO_Init+0x2a0>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d875      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c0e:	4a98      	ldr	r2, [pc, #608]	@ (8000e70 <HAL_GPIO_Init+0x2a4>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d058      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
 8000c14:	4a96      	ldr	r2, [pc, #600]	@ (8000e70 <HAL_GPIO_Init+0x2a4>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d86f      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c1a:	4a96      	ldr	r2, [pc, #600]	@ (8000e74 <HAL_GPIO_Init+0x2a8>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d052      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
 8000c20:	4a94      	ldr	r2, [pc, #592]	@ (8000e74 <HAL_GPIO_Init+0x2a8>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d869      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c26:	4a94      	ldr	r2, [pc, #592]	@ (8000e78 <HAL_GPIO_Init+0x2ac>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d04c      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
 8000c2c:	4a92      	ldr	r2, [pc, #584]	@ (8000e78 <HAL_GPIO_Init+0x2ac>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d863      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c32:	4a92      	ldr	r2, [pc, #584]	@ (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d046      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
 8000c38:	4a90      	ldr	r2, [pc, #576]	@ (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d85d      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c3e:	2b12      	cmp	r3, #18
 8000c40:	d82a      	bhi.n	8000c98 <HAL_GPIO_Init+0xcc>
 8000c42:	2b12      	cmp	r3, #18
 8000c44:	d859      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c46:	a201      	add	r2, pc, #4	@ (adr r2, 8000c4c <HAL_GPIO_Init+0x80>)
 8000c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4c:	08000cc7 	.word	0x08000cc7
 8000c50:	08000ca1 	.word	0x08000ca1
 8000c54:	08000cb3 	.word	0x08000cb3
 8000c58:	08000cf5 	.word	0x08000cf5
 8000c5c:	08000cfb 	.word	0x08000cfb
 8000c60:	08000cfb 	.word	0x08000cfb
 8000c64:	08000cfb 	.word	0x08000cfb
 8000c68:	08000cfb 	.word	0x08000cfb
 8000c6c:	08000cfb 	.word	0x08000cfb
 8000c70:	08000cfb 	.word	0x08000cfb
 8000c74:	08000cfb 	.word	0x08000cfb
 8000c78:	08000cfb 	.word	0x08000cfb
 8000c7c:	08000cfb 	.word	0x08000cfb
 8000c80:	08000cfb 	.word	0x08000cfb
 8000c84:	08000cfb 	.word	0x08000cfb
 8000c88:	08000cfb 	.word	0x08000cfb
 8000c8c:	08000cfb 	.word	0x08000cfb
 8000c90:	08000ca9 	.word	0x08000ca9
 8000c94:	08000cbd 	.word	0x08000cbd
 8000c98:	4a79      	ldr	r2, [pc, #484]	@ (8000e80 <HAL_GPIO_Init+0x2b4>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d013      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c9e:	e02c      	b.n	8000cfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	623b      	str	r3, [r7, #32]
          break;
 8000ca6:	e029      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	3304      	adds	r3, #4
 8000cae:	623b      	str	r3, [r7, #32]
          break;
 8000cb0:	e024      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	3308      	adds	r3, #8
 8000cb8:	623b      	str	r3, [r7, #32]
          break;
 8000cba:	e01f      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	330c      	adds	r3, #12
 8000cc2:	623b      	str	r3, [r7, #32]
          break;
 8000cc4:	e01a      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d102      	bne.n	8000cd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	623b      	str	r3, [r7, #32]
          break;
 8000cd2:	e013      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d105      	bne.n	8000ce8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	611a      	str	r2, [r3, #16]
          break;
 8000ce6:	e009      	b.n	8000cfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69fa      	ldr	r2, [r7, #28]
 8000cf0:	615a      	str	r2, [r3, #20]
          break;
 8000cf2:	e003      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
          break;
 8000cf8:	e000      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          break;
 8000cfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	2bff      	cmp	r3, #255	@ 0xff
 8000d00:	d801      	bhi.n	8000d06 <HAL_GPIO_Init+0x13a>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	e001      	b.n	8000d0a <HAL_GPIO_Init+0x13e>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	2bff      	cmp	r3, #255	@ 0xff
 8000d10:	d802      	bhi.n	8000d18 <HAL_GPIO_Init+0x14c>
 8000d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	e002      	b.n	8000d1e <HAL_GPIO_Init+0x152>
 8000d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1a:	3b08      	subs	r3, #8
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	210f      	movs	r1, #15
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	401a      	ands	r2, r3
 8000d30:	6a39      	ldr	r1, [r7, #32]
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	fa01 f303 	lsl.w	r3, r1, r3
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f000 80b1 	beq.w	8000eae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d4c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a4c      	ldr	r2, [pc, #304]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b4a      	ldr	r3, [pc, #296]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d64:	4a48      	ldr	r2, [pc, #288]	@ (8000e88 <HAL_GPIO_Init+0x2bc>)
 8000d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	4013      	ands	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a40      	ldr	r2, [pc, #256]	@ (8000e8c <HAL_GPIO_Init+0x2c0>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d013      	beq.n	8000db8 <HAL_GPIO_Init+0x1ec>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a3f      	ldr	r2, [pc, #252]	@ (8000e90 <HAL_GPIO_Init+0x2c4>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d00d      	beq.n	8000db4 <HAL_GPIO_Init+0x1e8>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a3e      	ldr	r2, [pc, #248]	@ (8000e94 <HAL_GPIO_Init+0x2c8>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d007      	beq.n	8000db0 <HAL_GPIO_Init+0x1e4>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a3d      	ldr	r2, [pc, #244]	@ (8000e98 <HAL_GPIO_Init+0x2cc>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d101      	bne.n	8000dac <HAL_GPIO_Init+0x1e0>
 8000da8:	2303      	movs	r3, #3
 8000daa:	e006      	b.n	8000dba <HAL_GPIO_Init+0x1ee>
 8000dac:	2304      	movs	r3, #4
 8000dae:	e004      	b.n	8000dba <HAL_GPIO_Init+0x1ee>
 8000db0:	2302      	movs	r3, #2
 8000db2:	e002      	b.n	8000dba <HAL_GPIO_Init+0x1ee>
 8000db4:	2301      	movs	r3, #1
 8000db6:	e000      	b.n	8000dba <HAL_GPIO_Init+0x1ee>
 8000db8:	2300      	movs	r3, #0
 8000dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dbc:	f002 0203 	and.w	r2, r2, #3
 8000dc0:	0092      	lsls	r2, r2, #2
 8000dc2:	4093      	lsls	r3, r2
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dca:	492f      	ldr	r1, [pc, #188]	@ (8000e88 <HAL_GPIO_Init+0x2bc>)
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d006      	beq.n	8000df2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000de4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	492c      	ldr	r1, [pc, #176]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	608b      	str	r3, [r1, #8]
 8000df0:	e006      	b.n	8000e00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000df2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	4928      	ldr	r1, [pc, #160]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e0c:	4b23      	ldr	r3, [pc, #140]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	4922      	ldr	r1, [pc, #136]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	60cb      	str	r3, [r1, #12]
 8000e18:	e006      	b.n	8000e28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e1a:	4b20      	ldr	r3, [pc, #128]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e1c:	68da      	ldr	r2, [r3, #12]
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	491e      	ldr	r1, [pc, #120]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e24:	4013      	ands	r3, r2
 8000e26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e34:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	4918      	ldr	r1, [pc, #96]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	604b      	str	r3, [r1, #4]
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	4914      	ldr	r1, [pc, #80]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d021      	beq.n	8000ea0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	490e      	ldr	r1, [pc, #56]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	600b      	str	r3, [r1, #0]
 8000e68:	e021      	b.n	8000eae <HAL_GPIO_Init+0x2e2>
 8000e6a:	bf00      	nop
 8000e6c:	10320000 	.word	0x10320000
 8000e70:	10310000 	.word	0x10310000
 8000e74:	10220000 	.word	0x10220000
 8000e78:	10210000 	.word	0x10210000
 8000e7c:	10120000 	.word	0x10120000
 8000e80:	10110000 	.word	0x10110000
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	40010800 	.word	0x40010800
 8000e90:	40010c00 	.word	0x40010c00
 8000e94:	40011000 	.word	0x40011000
 8000e98:	40011400 	.word	0x40011400
 8000e9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <HAL_GPIO_Init+0x304>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	4909      	ldr	r1, [pc, #36]	@ (8000ed0 <HAL_GPIO_Init+0x304>)
 8000eaa:	4013      	ands	r3, r2
 8000eac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eba:	fa22 f303 	lsr.w	r3, r2, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f47f ae8e 	bne.w	8000be0 <HAL_GPIO_Init+0x14>
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	372c      	adds	r7, #44	@ 0x2c
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40010400 	.word	0x40010400

08000ed4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	887b      	ldrh	r3, [r7, #2]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	e001      	b.n	8000ef6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	807b      	strh	r3, [r7, #2]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f12:	787b      	ldrb	r3, [r7, #1]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f18:	887a      	ldrh	r2, [r7, #2]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f1e:	e003      	b.n	8000f28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	041a      	lsls	r2, r3, #16
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	611a      	str	r2, [r3, #16]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr

08000f32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b085      	sub	sp, #20
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f44:	887a      	ldrh	r2, [r7, #2]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	041a      	lsls	r2, r3, #16
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	400b      	ands	r3, r1
 8000f54:	431a      	orrs	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	611a      	str	r2, [r3, #16]
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e272      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 8087 	beq.w	8001092 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f84:	4b92      	ldr	r3, [pc, #584]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d00c      	beq.n	8000faa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f90:	4b8f      	ldr	r3, [pc, #572]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 030c 	and.w	r3, r3, #12
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d112      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x5e>
 8000f9c:	4b8c      	ldr	r3, [pc, #560]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa8:	d10b      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000faa:	4b89      	ldr	r3, [pc, #548]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d06c      	beq.n	8001090 <HAL_RCC_OscConfig+0x12c>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d168      	bne.n	8001090 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e24c      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fca:	d106      	bne.n	8000fda <HAL_RCC_OscConfig+0x76>
 8000fcc:	4b80      	ldr	r3, [pc, #512]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a7f      	ldr	r2, [pc, #508]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	e02e      	b.n	8001038 <HAL_RCC_OscConfig+0xd4>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x98>
 8000fe2:	4b7b      	ldr	r3, [pc, #492]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a7a      	ldr	r2, [pc, #488]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	4b78      	ldr	r3, [pc, #480]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a77      	ldr	r2, [pc, #476]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	e01d      	b.n	8001038 <HAL_RCC_OscConfig+0xd4>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001004:	d10c      	bne.n	8001020 <HAL_RCC_OscConfig+0xbc>
 8001006:	4b72      	ldr	r3, [pc, #456]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a71      	ldr	r2, [pc, #452]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800100c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b6f      	ldr	r3, [pc, #444]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a6e      	ldr	r2, [pc, #440]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e00b      	b.n	8001038 <HAL_RCC_OscConfig+0xd4>
 8001020:	4b6b      	ldr	r3, [pc, #428]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a6a      	ldr	r2, [pc, #424]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b68      	ldr	r3, [pc, #416]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a67      	ldr	r2, [pc, #412]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001036:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d013      	beq.n	8001068 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001040:	f7ff fcac 	bl	800099c <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fca8 	bl	800099c <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	@ 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e200      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105a:	4b5d      	ldr	r3, [pc, #372]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f0      	beq.n	8001048 <HAL_RCC_OscConfig+0xe4>
 8001066:	e014      	b.n	8001092 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fc98 	bl	800099c <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001070:	f7ff fc94 	bl	800099c <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b64      	cmp	r3, #100	@ 0x64
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e1ec      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001082:	4b53      	ldr	r3, [pc, #332]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x10c>
 800108e:	e000      	b.n	8001092 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d063      	beq.n	8001166 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800109e:	4b4c      	ldr	r3, [pc, #304]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00b      	beq.n	80010c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010aa:	4b49      	ldr	r3, [pc, #292]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	d11c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x18c>
 80010b6:	4b46      	ldr	r3, [pc, #280]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d116      	bne.n	80010f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c2:	4b43      	ldr	r3, [pc, #268]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d005      	beq.n	80010da <HAL_RCC_OscConfig+0x176>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d001      	beq.n	80010da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e1c0      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010da:	4b3d      	ldr	r3, [pc, #244]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4939      	ldr	r1, [pc, #228]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ee:	e03a      	b.n	8001166 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d020      	beq.n	800113a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f8:	4b36      	ldr	r3, [pc, #216]	@ (80011d4 <HAL_RCC_OscConfig+0x270>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fe:	f7ff fc4d 	bl	800099c <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001106:	f7ff fc49 	bl	800099c <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e1a1      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001118:	4b2d      	ldr	r3, [pc, #180]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f0      	beq.n	8001106 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001124:	4b2a      	ldr	r3, [pc, #168]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4927      	ldr	r1, [pc, #156]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001134:	4313      	orrs	r3, r2
 8001136:	600b      	str	r3, [r1, #0]
 8001138:	e015      	b.n	8001166 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800113a:	4b26      	ldr	r3, [pc, #152]	@ (80011d4 <HAL_RCC_OscConfig+0x270>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fc2c 	bl	800099c <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001148:	f7ff fc28 	bl	800099c <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e180      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115a:	4b1d      	ldr	r3, [pc, #116]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	2b00      	cmp	r3, #0
 8001170:	d03a      	beq.n	80011e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d019      	beq.n	80011ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800117a:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <HAL_RCC_OscConfig+0x274>)
 800117c:	2201      	movs	r2, #1
 800117e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001180:	f7ff fc0c 	bl	800099c <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001188:	f7ff fc08 	bl	800099c <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e160      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119a:	4b0d      	ldr	r3, [pc, #52]	@ (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800119c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f0      	beq.n	8001188 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 fa9c 	bl	80016e4 <RCC_Delay>
 80011ac:	e01c      	b.n	80011e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ae:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <HAL_RCC_OscConfig+0x274>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b4:	f7ff fbf2 	bl	800099c <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ba:	e00f      	b.n	80011dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011bc:	f7ff fbee 	bl	800099c <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d908      	bls.n	80011dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e146      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
 80011d4:	42420000 	.word	0x42420000
 80011d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011dc:	4b92      	ldr	r3, [pc, #584]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80011de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1e9      	bne.n	80011bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 80a6 	beq.w	8001342 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011fa:	4b8b      	ldr	r3, [pc, #556]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10d      	bne.n	8001222 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b88      	ldr	r3, [pc, #544]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a87      	ldr	r2, [pc, #540]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001210:	61d3      	str	r3, [r2, #28]
 8001212:	4b85      	ldr	r3, [pc, #532]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800121e:	2301      	movs	r3, #1
 8001220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001222:	4b82      	ldr	r3, [pc, #520]	@ (800142c <HAL_RCC_OscConfig+0x4c8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800122a:	2b00      	cmp	r3, #0
 800122c:	d118      	bne.n	8001260 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800122e:	4b7f      	ldr	r3, [pc, #508]	@ (800142c <HAL_RCC_OscConfig+0x4c8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a7e      	ldr	r2, [pc, #504]	@ (800142c <HAL_RCC_OscConfig+0x4c8>)
 8001234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800123a:	f7ff fbaf 	bl	800099c <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001242:	f7ff fbab 	bl	800099c <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b64      	cmp	r3, #100	@ 0x64
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e103      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001254:	4b75      	ldr	r3, [pc, #468]	@ (800142c <HAL_RCC_OscConfig+0x4c8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d106      	bne.n	8001276 <HAL_RCC_OscConfig+0x312>
 8001268:	4b6f      	ldr	r3, [pc, #444]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4a6e      	ldr	r2, [pc, #440]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6213      	str	r3, [r2, #32]
 8001274:	e02d      	b.n	80012d2 <HAL_RCC_OscConfig+0x36e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0x334>
 800127e:	4b6a      	ldr	r3, [pc, #424]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4a69      	ldr	r2, [pc, #420]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001284:	f023 0301 	bic.w	r3, r3, #1
 8001288:	6213      	str	r3, [r2, #32]
 800128a:	4b67      	ldr	r3, [pc, #412]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4a66      	ldr	r2, [pc, #408]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001290:	f023 0304 	bic.w	r3, r3, #4
 8001294:	6213      	str	r3, [r2, #32]
 8001296:	e01c      	b.n	80012d2 <HAL_RCC_OscConfig+0x36e>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b05      	cmp	r3, #5
 800129e:	d10c      	bne.n	80012ba <HAL_RCC_OscConfig+0x356>
 80012a0:	4b61      	ldr	r3, [pc, #388]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4a60      	ldr	r2, [pc, #384]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6213      	str	r3, [r2, #32]
 80012ac:	4b5e      	ldr	r3, [pc, #376]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4a5d      	ldr	r2, [pc, #372]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6213      	str	r3, [r2, #32]
 80012b8:	e00b      	b.n	80012d2 <HAL_RCC_OscConfig+0x36e>
 80012ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4a5a      	ldr	r2, [pc, #360]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	f023 0301 	bic.w	r3, r3, #1
 80012c4:	6213      	str	r3, [r2, #32]
 80012c6:	4b58      	ldr	r3, [pc, #352]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	4a57      	ldr	r2, [pc, #348]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	f023 0304 	bic.w	r3, r3, #4
 80012d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d015      	beq.n	8001306 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012da:	f7ff fb5f 	bl	800099c <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e0:	e00a      	b.n	80012f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e2:	f7ff fb5b 	bl	800099c <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e0b1      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f8:	4b4b      	ldr	r3, [pc, #300]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0ee      	beq.n	80012e2 <HAL_RCC_OscConfig+0x37e>
 8001304:	e014      	b.n	8001330 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7ff fb49 	bl	800099c <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130c:	e00a      	b.n	8001324 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130e:	f7ff fb45 	bl	800099c <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800131c:	4293      	cmp	r3, r2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e09b      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001324:	4b40      	ldr	r3, [pc, #256]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1ee      	bne.n	800130e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d105      	bne.n	8001342 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001336:	4b3c      	ldr	r3, [pc, #240]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a3b      	ldr	r2, [pc, #236]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 800133c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001340:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 8087 	beq.w	800145a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800134c:	4b36      	ldr	r3, [pc, #216]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	2b08      	cmp	r3, #8
 8001356:	d061      	beq.n	800141c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d146      	bne.n	80013ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001360:	4b33      	ldr	r3, [pc, #204]	@ (8001430 <HAL_RCC_OscConfig+0x4cc>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff fb19 	bl	800099c <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff fb15 	bl	800099c <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e06d      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001380:	4b29      	ldr	r3, [pc, #164]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001394:	d108      	bne.n	80013a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001396:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	4921      	ldr	r1, [pc, #132]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a19      	ldr	r1, [r3, #32]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b8:	430b      	orrs	r3, r1
 80013ba:	491b      	ldr	r1, [pc, #108]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <HAL_RCC_OscConfig+0x4cc>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c6:	f7ff fae9 	bl	800099c <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ce:	f7ff fae5 	bl	800099c <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e03d      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e0:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x46a>
 80013ec:	e035      	b.n	800145a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <HAL_RCC_OscConfig+0x4cc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fad2 	bl	800099c <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fc:	f7ff face 	bl	800099c <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e026      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x498>
 800141a:	e01e      	b.n	800145a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d107      	bne.n	8001434 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e019      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
 8001428:	40021000 	.word	0x40021000
 800142c:	40007000 	.word	0x40007000
 8001430:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001434:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <HAL_RCC_OscConfig+0x500>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	429a      	cmp	r2, r3
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001452:	429a      	cmp	r2, r3
 8001454:	d001      	beq.n	800145a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e000      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40021000 	.word	0x40021000

08001468 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0d0      	b.n	800161e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800147c:	4b6a      	ldr	r3, [pc, #424]	@ (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d910      	bls.n	80014ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148a:	4b67      	ldr	r3, [pc, #412]	@ (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 0207 	bic.w	r2, r3, #7
 8001492:	4965      	ldr	r1, [pc, #404]	@ (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800149a:	4b63      	ldr	r3, [pc, #396]	@ (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d001      	beq.n	80014ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0b8      	b.n	800161e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d020      	beq.n	80014fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014c4:	4b59      	ldr	r3, [pc, #356]	@ (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4a58      	ldr	r2, [pc, #352]	@ (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014dc:	4b53      	ldr	r3, [pc, #332]	@ (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4a52      	ldr	r2, [pc, #328]	@ (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80014e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e8:	4b50      	ldr	r3, [pc, #320]	@ (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	494d      	ldr	r1, [pc, #308]	@ (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d040      	beq.n	8001588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d107      	bne.n	800151e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	4b47      	ldr	r3, [pc, #284]	@ (800162c <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d115      	bne.n	8001546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e07f      	b.n	800161e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d107      	bne.n	8001536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001526:	4b41      	ldr	r3, [pc, #260]	@ (800162c <HAL_RCC_ClockConfig+0x1c4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d109      	bne.n	8001546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e073      	b.n	800161e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001536:	4b3d      	ldr	r3, [pc, #244]	@ (800162c <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e06b      	b.n	800161e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001546:	4b39      	ldr	r3, [pc, #228]	@ (800162c <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f023 0203 	bic.w	r2, r3, #3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4936      	ldr	r1, [pc, #216]	@ (800162c <HAL_RCC_ClockConfig+0x1c4>)
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001558:	f7ff fa20 	bl	800099c <HAL_GetTick>
 800155c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155e:	e00a      	b.n	8001576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001560:	f7ff fa1c 	bl	800099c <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800156e:	4293      	cmp	r3, r2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e053      	b.n	800161e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001576:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 020c 	and.w	r2, r3, #12
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	429a      	cmp	r2, r3
 8001586:	d1eb      	bne.n	8001560 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001588:	4b27      	ldr	r3, [pc, #156]	@ (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d210      	bcs.n	80015b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	4b24      	ldr	r3, [pc, #144]	@ (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 0207 	bic.w	r2, r3, #7
 800159e:	4922      	ldr	r1, [pc, #136]	@ (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a6:	4b20      	ldr	r3, [pc, #128]	@ (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e032      	b.n	800161e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c4:	4b19      	ldr	r3, [pc, #100]	@ (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	4916      	ldr	r1, [pc, #88]	@ (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d009      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015e2:	4b12      	ldr	r3, [pc, #72]	@ (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	490e      	ldr	r1, [pc, #56]	@ (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015f6:	f000 f821 	bl	800163c <HAL_RCC_GetSysClockFreq>
 80015fa:	4602      	mov	r2, r0
 80015fc:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	490a      	ldr	r1, [pc, #40]	@ (8001630 <HAL_RCC_ClockConfig+0x1c8>)
 8001608:	5ccb      	ldrb	r3, [r1, r3]
 800160a:	fa22 f303 	lsr.w	r3, r2, r3
 800160e:	4a09      	ldr	r2, [pc, #36]	@ (8001634 <HAL_RCC_ClockConfig+0x1cc>)
 8001610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001612:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <HAL_RCC_ClockConfig+0x1d0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff f97e 	bl	8000918 <HAL_InitTick>

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40022000 	.word	0x40022000
 800162c:	40021000 	.word	0x40021000
 8001630:	0800247c 	.word	0x0800247c
 8001634:	2000000c 	.word	0x2000000c
 8001638:	20000010 	.word	0x20000010

0800163c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001656:	4b1e      	ldr	r3, [pc, #120]	@ (80016d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b04      	cmp	r3, #4
 8001664:	d002      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0x30>
 8001666:	2b08      	cmp	r3, #8
 8001668:	d003      	beq.n	8001672 <HAL_RCC_GetSysClockFreq+0x36>
 800166a:	e027      	b.n	80016bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800166c:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800166e:	613b      	str	r3, [r7, #16]
      break;
 8001670:	e027      	b.n	80016c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	0c9b      	lsrs	r3, r3, #18
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	4a17      	ldr	r2, [pc, #92]	@ (80016d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d010      	beq.n	80016ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800168a:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	0c5b      	lsrs	r3, r3, #17
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	4a11      	ldr	r2, [pc, #68]	@ (80016dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001696:	5cd3      	ldrb	r3, [r2, r3]
 8001698:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800169e:	fb03 f202 	mul.w	r2, r3, r2
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	e004      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a0c      	ldr	r2, [pc, #48]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016b0:	fb02 f303 	mul.w	r3, r2, r3
 80016b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	613b      	str	r3, [r7, #16]
      break;
 80016ba:	e002      	b.n	80016c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016bc:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80016be:	613b      	str	r3, [r7, #16]
      break;
 80016c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016c2:	693b      	ldr	r3, [r7, #16]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	371c      	adds	r7, #28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	007a1200 	.word	0x007a1200
 80016d8:	0800248c 	.word	0x0800248c
 80016dc:	0800249c 	.word	0x0800249c
 80016e0:	003d0900 	.word	0x003d0900

080016e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <RCC_Delay+0x34>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <RCC_Delay+0x38>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	0a5b      	lsrs	r3, r3, #9
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	fb02 f303 	mul.w	r3, r2, r3
 80016fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001700:	bf00      	nop
  }
  while (Delay --);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1e5a      	subs	r2, r3, #1
 8001706:	60fa      	str	r2, [r7, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f9      	bne.n	8001700 <RCC_Delay+0x1c>
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	2000000c 	.word	0x2000000c
 800171c:	10624dd3 	.word	0x10624dd3

08001720 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e076      	b.n	8001820 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001736:	2b00      	cmp	r3, #0
 8001738:	d108      	bne.n	800174c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001742:	d009      	beq.n	8001758 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
 800174a:	e005      	b.n	8001758 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7fe ff7e 	bl	8000674 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2202      	movs	r2, #2
 800177c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800178e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017dc:	ea42 0103 	orr.w	r1, r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	0c1a      	lsrs	r2, r3, #16
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f002 0204 	and.w	r2, r2, #4
 80017fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800180e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	4613      	mov	r3, r2
 8001836:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_SPI_Transmit+0x22>
 8001846:	2302      	movs	r3, #2
 8001848:	e12d      	b.n	8001aa6 <HAL_SPI_Transmit+0x27e>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001852:	f7ff f8a3 	bl	800099c <HAL_GetTick>
 8001856:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d002      	beq.n	800186e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001868:	2302      	movs	r3, #2
 800186a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800186c:	e116      	b.n	8001a9c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HAL_SPI_Transmit+0x52>
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800187e:	e10d      	b.n	8001a9c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2203      	movs	r2, #3
 8001884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	88fa      	ldrh	r2, [r7, #6]
 8001898:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	88fa      	ldrh	r2, [r7, #6]
 800189e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018c6:	d10f      	bne.n	80018e8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018f2:	2b40      	cmp	r3, #64	@ 0x40
 80018f4:	d007      	beq.n	8001906 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001904:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800190e:	d14f      	bne.n	80019b0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <HAL_SPI_Transmit+0xf6>
 8001918:	8afb      	ldrh	r3, [r7, #22]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d142      	bne.n	80019a4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	881a      	ldrh	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	1c9a      	adds	r2, r3, #2
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001938:	b29b      	uxth	r3, r3
 800193a:	3b01      	subs	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001942:	e02f      	b.n	80019a4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b02      	cmp	r3, #2
 8001950:	d112      	bne.n	8001978 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	881a      	ldrh	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	1c9a      	adds	r2, r3, #2
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800196c:	b29b      	uxth	r3, r3
 800196e:	3b01      	subs	r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001976:	e015      	b.n	80019a4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001978:	f7ff f810 	bl	800099c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d803      	bhi.n	8001990 <HAL_SPI_Transmit+0x168>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800198e:	d102      	bne.n	8001996 <HAL_SPI_Transmit+0x16e>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80019a2:	e07b      	b.n	8001a9c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ca      	bne.n	8001944 <HAL_SPI_Transmit+0x11c>
 80019ae:	e050      	b.n	8001a52 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <HAL_SPI_Transmit+0x196>
 80019b8:	8afb      	ldrh	r3, [r7, #22]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d144      	bne.n	8001a48 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	330c      	adds	r3, #12
 80019c8:	7812      	ldrb	r2, [r2, #0]
 80019ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019da:	b29b      	uxth	r3, r3
 80019dc:	3b01      	subs	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80019e4:	e030      	b.n	8001a48 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d113      	bne.n	8001a1c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	330c      	adds	r3, #12
 80019fe:	7812      	ldrb	r2, [r2, #0]
 8001a00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001a1a:	e015      	b.n	8001a48 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a1c:	f7fe ffbe 	bl	800099c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d803      	bhi.n	8001a34 <HAL_SPI_Transmit+0x20c>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a32:	d102      	bne.n	8001a3a <HAL_SPI_Transmit+0x212>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d106      	bne.n	8001a48 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001a46:	e029      	b.n	8001a9c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1c9      	bne.n	80019e6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	6839      	ldr	r1, [r7, #0]
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 f8b2 	bl	8001bc0 <SPI_EndRxTxTransaction>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2220      	movs	r2, #32
 8001a66:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10a      	bne.n	8001a86 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a70:	2300      	movs	r3, #0
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	77fb      	strb	r3, [r7, #31]
 8001a92:	e003      	b.n	8001a9c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001aa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3720      	adds	r7, #32
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	4613      	mov	r3, r2
 8001abe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ac0:	f7fe ff6c 	bl	800099c <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ad0:	f7fe ff64 	bl	800099c <HAL_GetTick>
 8001ad4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001ad6:	4b39      	ldr	r3, [pc, #228]	@ (8001bbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	015b      	lsls	r3, r3, #5
 8001adc:	0d1b      	lsrs	r3, r3, #20
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ae6:	e054      	b.n	8001b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001aee:	d050      	beq.n	8001b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001af0:	f7fe ff54 	bl	800099c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d902      	bls.n	8001b06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d13d      	bne.n	8001b82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001b14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b1e:	d111      	bne.n	8001b44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b28:	d004      	beq.n	8001b34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b32:	d107      	bne.n	8001b44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b4c:	d10f      	bne.n	8001b6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e017      	b.n	8001bb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	bf0c      	ite	eq
 8001ba2:	2301      	moveq	r3, #1
 8001ba4:	2300      	movne	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d19b      	bne.n	8001ae8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	2000000c 	.word	0x2000000c

08001bc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2180      	movs	r1, #128	@ 0x80
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f7ff ff6a 	bl	8001ab0 <SPI_WaitFlagStateUntilTimeout>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d007      	beq.n	8001bf2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be6:	f043 0220 	orr.w	r2, r3, #32
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e000      	b.n	8001bf4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e041      	b.n	8001c92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7fe fd94 	bl	8000750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3304      	adds	r3, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f000 fa74 	bl	8002128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d001      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e03a      	b.n	8001d2a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a18      	ldr	r2, [pc, #96]	@ (8001d34 <HAL_TIM_Base_Start_IT+0x98>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00e      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x58>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cde:	d009      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x58>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a14      	ldr	r2, [pc, #80]	@ (8001d38 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d004      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x58>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a13      	ldr	r2, [pc, #76]	@ (8001d3c <HAL_TIM_Base_Start_IT+0xa0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d111      	bne.n	8001d18 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d010      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d16:	e007      	b.n	8001d28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	40012c00 	.word	0x40012c00
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	40000800 	.word	0x40000800

08001d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d122      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d11b      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0202 	mvn.w	r2, #2
 8001d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f9b4 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f9a7 	bl	80020de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f9b6 	bl	8002102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d122      	bne.n	8001df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d11b      	bne.n	8001df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0204 	mvn.w	r2, #4
 8001dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f98a 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8001ddc:	e005      	b.n	8001dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f97d 	bl	80020de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f98c 	bl	8002102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d122      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d11b      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0208 	mvn.w	r2, #8
 8001e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2204      	movs	r2, #4
 8001e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f960 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8001e30:	e005      	b.n	8001e3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f953 	bl	80020de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f962 	bl	8002102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b10      	cmp	r3, #16
 8001e50:	d122      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	2b10      	cmp	r3, #16
 8001e5e:	d11b      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0210 	mvn.w	r2, #16
 8001e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f936 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8001e84:	e005      	b.n	8001e92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f929 	bl	80020de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f938 	bl	8002102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d10e      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d107      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0201 	mvn.w	r2, #1
 8001ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe fb96 	bl	80005f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ece:	2b80      	cmp	r3, #128	@ 0x80
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001edc:	2b80      	cmp	r3, #128	@ 0x80
 8001ede:	d107      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 fa7b 	bl	80023e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001efa:	2b40      	cmp	r3, #64	@ 0x40
 8001efc:	d10e      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f08:	2b40      	cmp	r3, #64	@ 0x40
 8001f0a:	d107      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8fc 	bl	8002114 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d10e      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d107      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0220 	mvn.w	r2, #32
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fa46 	bl	80023d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_TIM_ConfigClockSource+0x1c>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e0b4      	b.n	80020d6 <HAL_TIM_ConfigClockSource+0x186>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fa4:	d03e      	beq.n	8002024 <HAL_TIM_ConfigClockSource+0xd4>
 8001fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001faa:	f200 8087 	bhi.w	80020bc <HAL_TIM_ConfigClockSource+0x16c>
 8001fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fb2:	f000 8086 	beq.w	80020c2 <HAL_TIM_ConfigClockSource+0x172>
 8001fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fba:	d87f      	bhi.n	80020bc <HAL_TIM_ConfigClockSource+0x16c>
 8001fbc:	2b70      	cmp	r3, #112	@ 0x70
 8001fbe:	d01a      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0xa6>
 8001fc0:	2b70      	cmp	r3, #112	@ 0x70
 8001fc2:	d87b      	bhi.n	80020bc <HAL_TIM_ConfigClockSource+0x16c>
 8001fc4:	2b60      	cmp	r3, #96	@ 0x60
 8001fc6:	d050      	beq.n	800206a <HAL_TIM_ConfigClockSource+0x11a>
 8001fc8:	2b60      	cmp	r3, #96	@ 0x60
 8001fca:	d877      	bhi.n	80020bc <HAL_TIM_ConfigClockSource+0x16c>
 8001fcc:	2b50      	cmp	r3, #80	@ 0x50
 8001fce:	d03c      	beq.n	800204a <HAL_TIM_ConfigClockSource+0xfa>
 8001fd0:	2b50      	cmp	r3, #80	@ 0x50
 8001fd2:	d873      	bhi.n	80020bc <HAL_TIM_ConfigClockSource+0x16c>
 8001fd4:	2b40      	cmp	r3, #64	@ 0x40
 8001fd6:	d058      	beq.n	800208a <HAL_TIM_ConfigClockSource+0x13a>
 8001fd8:	2b40      	cmp	r3, #64	@ 0x40
 8001fda:	d86f      	bhi.n	80020bc <HAL_TIM_ConfigClockSource+0x16c>
 8001fdc:	2b30      	cmp	r3, #48	@ 0x30
 8001fde:	d064      	beq.n	80020aa <HAL_TIM_ConfigClockSource+0x15a>
 8001fe0:	2b30      	cmp	r3, #48	@ 0x30
 8001fe2:	d86b      	bhi.n	80020bc <HAL_TIM_ConfigClockSource+0x16c>
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	d060      	beq.n	80020aa <HAL_TIM_ConfigClockSource+0x15a>
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d867      	bhi.n	80020bc <HAL_TIM_ConfigClockSource+0x16c>
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d05c      	beq.n	80020aa <HAL_TIM_ConfigClockSource+0x15a>
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d05a      	beq.n	80020aa <HAL_TIM_ConfigClockSource+0x15a>
 8001ff4:	e062      	b.n	80020bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002006:	f000 f968 	bl	80022da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	609a      	str	r2, [r3, #8]
      break;
 8002022:	e04f      	b.n	80020c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002034:	f000 f951 	bl	80022da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002046:	609a      	str	r2, [r3, #8]
      break;
 8002048:	e03c      	b.n	80020c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002056:	461a      	mov	r2, r3
 8002058:	f000 f8c8 	bl	80021ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2150      	movs	r1, #80	@ 0x50
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f91f 	bl	80022a6 <TIM_ITRx_SetConfig>
      break;
 8002068:	e02c      	b.n	80020c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002076:	461a      	mov	r2, r3
 8002078:	f000 f8e6 	bl	8002248 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2160      	movs	r1, #96	@ 0x60
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f90f 	bl	80022a6 <TIM_ITRx_SetConfig>
      break;
 8002088:	e01c      	b.n	80020c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002096:	461a      	mov	r2, r3
 8002098:	f000 f8a8 	bl	80021ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2140      	movs	r1, #64	@ 0x40
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f8ff 	bl	80022a6 <TIM_ITRx_SetConfig>
      break;
 80020a8:	e00c      	b.n	80020c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4619      	mov	r1, r3
 80020b4:	4610      	mov	r0, r2
 80020b6:	f000 f8f6 	bl	80022a6 <TIM_ITRx_SetConfig>
      break;
 80020ba:	e003      	b.n	80020c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
      break;
 80020c0:	e000      	b.n	80020c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80020c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
	...

08002128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a29      	ldr	r2, [pc, #164]	@ (80021e0 <TIM_Base_SetConfig+0xb8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d00b      	beq.n	8002158 <TIM_Base_SetConfig+0x30>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002146:	d007      	beq.n	8002158 <TIM_Base_SetConfig+0x30>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a26      	ldr	r2, [pc, #152]	@ (80021e4 <TIM_Base_SetConfig+0xbc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d003      	beq.n	8002158 <TIM_Base_SetConfig+0x30>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a25      	ldr	r2, [pc, #148]	@ (80021e8 <TIM_Base_SetConfig+0xc0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d108      	bne.n	800216a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800215e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a1c      	ldr	r2, [pc, #112]	@ (80021e0 <TIM_Base_SetConfig+0xb8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00b      	beq.n	800218a <TIM_Base_SetConfig+0x62>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002178:	d007      	beq.n	800218a <TIM_Base_SetConfig+0x62>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a19      	ldr	r2, [pc, #100]	@ (80021e4 <TIM_Base_SetConfig+0xbc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d003      	beq.n	800218a <TIM_Base_SetConfig+0x62>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a18      	ldr	r2, [pc, #96]	@ (80021e8 <TIM_Base_SetConfig+0xc0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d108      	bne.n	800219c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a07      	ldr	r2, [pc, #28]	@ (80021e0 <TIM_Base_SetConfig+0xb8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d103      	bne.n	80021d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	615a      	str	r2, [r3, #20]
}
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	40012c00 	.word	0x40012c00
 80021e4:	40000400 	.word	0x40000400
 80021e8:	40000800 	.word	0x40000800

080021ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	f023 0201 	bic.w	r2, r3, #1
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f023 030a 	bic.w	r3, r3, #10
 8002228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4313      	orrs	r3, r2
 8002230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	621a      	str	r2, [r3, #32]
}
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	f023 0210 	bic.w	r2, r3, #16
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	031b      	lsls	r3, r3, #12
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002284:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4313      	orrs	r3, r2
 800228e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	621a      	str	r2, [r3, #32]
}
 800229c:	bf00      	nop
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b085      	sub	sp, #20
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f043 0307 	orr.w	r3, r3, #7
 80022c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	609a      	str	r2, [r3, #8]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr

080022da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022da:	b480      	push	{r7}
 80022dc:	b087      	sub	sp, #28
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	021a      	lsls	r2, r3, #8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	431a      	orrs	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	4313      	orrs	r3, r2
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4313      	orrs	r3, r2
 8002306:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	609a      	str	r2, [r3, #8]
}
 800230e:	bf00      	nop
 8002310:	371c      	adds	r7, #28
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800232c:	2302      	movs	r3, #2
 800232e:	e046      	b.n	80023be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a16      	ldr	r2, [pc, #88]	@ (80023c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d00e      	beq.n	8002392 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800237c:	d009      	beq.n	8002392 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a12      	ldr	r2, [pc, #72]	@ (80023cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d004      	beq.n	8002392 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a10      	ldr	r2, [pc, #64]	@ (80023d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d10c      	bne.n	80023ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002398:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	40012c00 	.word	0x40012c00
 80023cc:	40000400 	.word	0x40000400
 80023d0:	40000800 	.word	0x40000800

080023d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <memset>:
 80023f8:	4603      	mov	r3, r0
 80023fa:	4402      	add	r2, r0
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d100      	bne.n	8002402 <memset+0xa>
 8002400:	4770      	bx	lr
 8002402:	f803 1b01 	strb.w	r1, [r3], #1
 8002406:	e7f9      	b.n	80023fc <memset+0x4>

08002408 <__libc_init_array>:
 8002408:	b570      	push	{r4, r5, r6, lr}
 800240a:	2600      	movs	r6, #0
 800240c:	4d0c      	ldr	r5, [pc, #48]	@ (8002440 <__libc_init_array+0x38>)
 800240e:	4c0d      	ldr	r4, [pc, #52]	@ (8002444 <__libc_init_array+0x3c>)
 8002410:	1b64      	subs	r4, r4, r5
 8002412:	10a4      	asrs	r4, r4, #2
 8002414:	42a6      	cmp	r6, r4
 8002416:	d109      	bne.n	800242c <__libc_init_array+0x24>
 8002418:	f000 f81a 	bl	8002450 <_init>
 800241c:	2600      	movs	r6, #0
 800241e:	4d0a      	ldr	r5, [pc, #40]	@ (8002448 <__libc_init_array+0x40>)
 8002420:	4c0a      	ldr	r4, [pc, #40]	@ (800244c <__libc_init_array+0x44>)
 8002422:	1b64      	subs	r4, r4, r5
 8002424:	10a4      	asrs	r4, r4, #2
 8002426:	42a6      	cmp	r6, r4
 8002428:	d105      	bne.n	8002436 <__libc_init_array+0x2e>
 800242a:	bd70      	pop	{r4, r5, r6, pc}
 800242c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002430:	4798      	blx	r3
 8002432:	3601      	adds	r6, #1
 8002434:	e7ee      	b.n	8002414 <__libc_init_array+0xc>
 8002436:	f855 3b04 	ldr.w	r3, [r5], #4
 800243a:	4798      	blx	r3
 800243c:	3601      	adds	r6, #1
 800243e:	e7f2      	b.n	8002426 <__libc_init_array+0x1e>
 8002440:	080024a0 	.word	0x080024a0
 8002444:	080024a0 	.word	0x080024a0
 8002448:	080024a0 	.word	0x080024a0
 800244c:	080024a4 	.word	0x080024a4

08002450 <_init>:
 8002450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002452:	bf00      	nop
 8002454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002456:	bc08      	pop	{r3}
 8002458:	469e      	mov	lr, r3
 800245a:	4770      	bx	lr

0800245c <_fini>:
 800245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245e:	bf00      	nop
 8002460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002462:	bc08      	pop	{r3}
 8002464:	469e      	mov	lr, r3
 8002466:	4770      	bx	lr
