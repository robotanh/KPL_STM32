
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003408  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003514  08003514  00004514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035a8  080035a8  0000508c  2**0
                  CONTENTS
  4 .ARM          00000008  080035a8  080035a8  000045a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035b0  080035b0  0000508c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b0  080035b0  000045b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035b4  080035b4  000045b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  080035b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  2000008c  08003644  0000508c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08003644  00005364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a867  00000000  00000000  000050b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8e  00000000  00000000  0000f91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  000118b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000931  00000000  00000000  000124b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001805b  00000000  00000000  00012de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d706  00000000  00000000  0002ae3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089e8b  00000000  00000000  00038542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c23cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035fc  00000000  00000000  000c2410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000c5a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	080034fc 	.word	0x080034fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	080034fc 	.word	0x080034fc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <KeyPad_Scan>:
    /* Set all rows to high */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
}

/* Scan the 4x5 keypad and return the pressed key value */
uint8_t KeyPad_Scan(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
    uint32_t currentMillis = HAL_GetTick();
 8000162:	f000 fff1 	bl	8001148 <HAL_GetTick>
 8000166:	6038      	str	r0, [r7, #0]

    if (currentMillis - lastDebounceTime < DEBOUNCE_DELAY) {
 8000168:	4b24      	ldr	r3, [pc, #144]	@ (80001fc <KeyPad_Scan+0xa0>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	683a      	ldr	r2, [r7, #0]
 800016e:	1ad3      	subs	r3, r2, r3
 8000170:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000174:	d201      	bcs.n	800017a <KeyPad_Scan+0x1e>
        return 0xFF;
 8000176:	23ff      	movs	r3, #255	@ 0xff
 8000178:	e03b      	b.n	80001f2 <KeyPad_Scan+0x96>
    }

    for (uint8_t row = 0; row < 4; row++) {
 800017a:	2300      	movs	r3, #0
 800017c:	71fb      	strb	r3, [r7, #7]
 800017e:	e034      	b.n	80001ea <KeyPad_Scan+0x8e>
        /* Set all rows low */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000186:	481e      	ldr	r0, [pc, #120]	@ (8000200 <KeyPad_Scan+0xa4>)
 8000188:	f001 fa91 	bl	80016ae <HAL_GPIO_WritePin>

        /* Set the current row high */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 << row, GPIO_PIN_SET);
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	2240      	movs	r2, #64	@ 0x40
 8000190:	fa02 f303 	lsl.w	r3, r2, r3
 8000194:	b29b      	uxth	r3, r3
 8000196:	2201      	movs	r2, #1
 8000198:	4619      	mov	r1, r3
 800019a:	4819      	ldr	r0, [pc, #100]	@ (8000200 <KeyPad_Scan+0xa4>)
 800019c:	f001 fa87 	bl	80016ae <HAL_GPIO_WritePin>

        /* Read each column */
        for (uint8_t col = 0; col < 5; col++) {
 80001a0:	2300      	movs	r3, #0
 80001a2:	71bb      	strb	r3, [r7, #6]
 80001a4:	e01b      	b.n	80001de <KeyPad_Scan+0x82>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 << col) == GPIO_PIN_SET) {
 80001a6:	79bb      	ldrb	r3, [r7, #6]
 80001a8:	2201      	movs	r2, #1
 80001aa:	fa02 f303 	lsl.w	r3, r2, r3
 80001ae:	b29b      	uxth	r3, r3
 80001b0:	4619      	mov	r1, r3
 80001b2:	4813      	ldr	r0, [pc, #76]	@ (8000200 <KeyPad_Scan+0xa4>)
 80001b4:	f001 fa64 	bl	8001680 <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b01      	cmp	r3, #1
 80001bc:	d10c      	bne.n	80001d8 <KeyPad_Scan+0x7c>
                lastDebounceTime = currentMillis;
 80001be:	4a0f      	ldr	r2, [pc, #60]	@ (80001fc <KeyPad_Scan+0xa0>)
 80001c0:	683b      	ldr	r3, [r7, #0]
 80001c2:	6013      	str	r3, [r2, #0]
                return keyMap[row][col];
 80001c4:	79fa      	ldrb	r2, [r7, #7]
 80001c6:	79b9      	ldrb	r1, [r7, #6]
 80001c8:	480e      	ldr	r0, [pc, #56]	@ (8000204 <KeyPad_Scan+0xa8>)
 80001ca:	4613      	mov	r3, r2
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	4413      	add	r3, r2
 80001d0:	4403      	add	r3, r0
 80001d2:	440b      	add	r3, r1
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	e00c      	b.n	80001f2 <KeyPad_Scan+0x96>
        for (uint8_t col = 0; col < 5; col++) {
 80001d8:	79bb      	ldrb	r3, [r7, #6]
 80001da:	3301      	adds	r3, #1
 80001dc:	71bb      	strb	r3, [r7, #6]
 80001de:	79bb      	ldrb	r3, [r7, #6]
 80001e0:	2b04      	cmp	r3, #4
 80001e2:	d9e0      	bls.n	80001a6 <KeyPad_Scan+0x4a>
    for (uint8_t row = 0; row < 4; row++) {
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	3301      	adds	r3, #1
 80001e8:	71fb      	strb	r3, [r7, #7]
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2b03      	cmp	r3, #3
 80001ee:	d9c7      	bls.n	8000180 <KeyPad_Scan+0x24>
            }
        }
    }

    return 0xFF;
 80001f0:	23ff      	movs	r3, #255	@ 0xff
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	200000a8 	.word	0x200000a8
 8000200:	40010c00 	.word	0x40010c00
 8000204:	0800353c 	.word	0x0800353c

08000208 <formatTotalLiters>:

void formatTotalLiters(uint32_t total, uint32_t* buffer1, uint32_t* buffer2)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	60b9      	str	r1, [r7, #8]
 8000212:	607a      	str	r2, [r7, #4]
	if (total < 100000000) {
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	4a15      	ldr	r2, [pc, #84]	@ (800026c <formatTotalLiters+0x64>)
 8000218:	4293      	cmp	r3, r2
 800021a:	d815      	bhi.n	8000248 <formatTotalLiters+0x40>
		* buffer1 = total / 1000000;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	4a14      	ldr	r2, [pc, #80]	@ (8000270 <formatTotalLiters+0x68>)
 8000220:	fba2 2303 	umull	r2, r3, r2, r3
 8000224:	0c9a      	lsrs	r2, r3, #18
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	4b10      	ldr	r3, [pc, #64]	@ (8000270 <formatTotalLiters+0x68>)
 800022e:	fba3 1302 	umull	r1, r3, r3, r2
 8000232:	0c9b      	lsrs	r3, r3, #18
 8000234:	490f      	ldr	r1, [pc, #60]	@ (8000274 <formatTotalLiters+0x6c>)
 8000236:	fb01 f303 	mul.w	r3, r1, r3
 800023a:	1ad3      	subs	r3, r2, r3
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 8000240:	4b0d      	ldr	r3, [pc, #52]	@ (8000278 <formatTotalLiters+0x70>)
 8000242:	2203      	movs	r2, #3
 8000244:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 = total / 100000000;
		* buffer2 = 0;
		LEDPointFlag = 2;
	}
}
 8000246:	e00c      	b.n	8000262 <formatTotalLiters+0x5a>
		* buffer1 = total / 100000000;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	4a0c      	ldr	r2, [pc, #48]	@ (800027c <formatTotalLiters+0x74>)
 800024c:	fba2 2303 	umull	r2, r3, r2, r3
 8000250:	0e5a      	lsrs	r2, r3, #25
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	601a      	str	r2, [r3, #0]
		* buffer2 = 0;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
		LEDPointFlag = 2;
 800025c:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <formatTotalLiters+0x70>)
 800025e:	2202      	movs	r2, #2
 8000260:	601a      	str	r2, [r3, #0]
}
 8000262:	bf00      	nop
 8000264:	3714      	adds	r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	05f5e0ff 	.word	0x05f5e0ff
 8000270:	431bde83 	.word	0x431bde83
 8000274:	000f4240 	.word	0x000f4240
 8000278:	2000002c 	.word	0x2000002c
 800027c:	55e63b89 	.word	0x55e63b89

08000280 <KeyLogic>:

void KeyLogic() {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	keyPressed = KeyPad_Scan();
 8000284:	f7ff ff6a 	bl	800015c <KeyPad_Scan>
 8000288:	4603      	mov	r3, r0
 800028a:	461a      	mov	r2, r3
 800028c:	4ba4      	ldr	r3, [pc, #656]	@ (8000520 <KeyLogic+0x2a0>)
 800028e:	701a      	strb	r2, [r3, #0]
	if (keyPressed != 0xFF) {
 8000290:	4ba3      	ldr	r3, [pc, #652]	@ (8000520 <KeyLogic+0x2a0>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2bff      	cmp	r3, #255	@ 0xff
 8000296:	f000 8140 	beq.w	800051a <KeyLogic+0x29a>
        if (seqState == SEQ_NUMBER) {
 800029a:	4ba2      	ldr	r3, [pc, #648]	@ (8000524 <KeyLogic+0x2a4>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b06      	cmp	r3, #6
 80002a0:	d12a      	bne.n	80002f8 <KeyLogic+0x78>
            if (keyPressed >= '0' && keyPressed <= '9') {
 80002a2:	4b9f      	ldr	r3, [pc, #636]	@ (8000520 <KeyLogic+0x2a0>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80002a8:	d91c      	bls.n	80002e4 <KeyLogic+0x64>
 80002aa:	4b9d      	ldr	r3, [pc, #628]	@ (8000520 <KeyLogic+0x2a0>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	2b39      	cmp	r3, #57	@ 0x39
 80002b0:	d818      	bhi.n	80002e4 <KeyLogic+0x64>
                if (numberOfDigits < 6) {
 80002b2:	4b9d      	ldr	r3, [pc, #628]	@ (8000528 <KeyLogic+0x2a8>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b05      	cmp	r3, #5
 80002b8:	f200 812c 	bhi.w	8000514 <KeyLogic+0x294>
                    accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 80002bc:	4b9b      	ldr	r3, [pc, #620]	@ (800052c <KeyLogic+0x2ac>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4613      	mov	r3, r2
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	4413      	add	r3, r2
 80002c6:	005b      	lsls	r3, r3, #1
 80002c8:	461a      	mov	r2, r3
 80002ca:	4b95      	ldr	r3, [pc, #596]	@ (8000520 <KeyLogic+0x2a0>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	4413      	add	r3, r2
 80002d0:	3b30      	subs	r3, #48	@ 0x30
 80002d2:	4a96      	ldr	r2, [pc, #600]	@ (800052c <KeyLogic+0x2ac>)
 80002d4:	6013      	str	r3, [r2, #0]
                    numberOfDigits++;
 80002d6:	4b94      	ldr	r3, [pc, #592]	@ (8000528 <KeyLogic+0x2a8>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	3301      	adds	r3, #1
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4b92      	ldr	r3, [pc, #584]	@ (8000528 <KeyLogic+0x2a8>)
 80002e0:	701a      	strb	r2, [r3, #0]
                if (numberOfDigits < 6) {
 80002e2:	e117      	b.n	8000514 <KeyLogic+0x294>
                }
            } else {
                seqState = SEQ_IDLE;
 80002e4:	4b8f      	ldr	r3, [pc, #572]	@ (8000524 <KeyLogic+0x2a4>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	701a      	strb	r2, [r3, #0]
                numberOfDigits = 0;
 80002ea:	4b8f      	ldr	r3, [pc, #572]	@ (8000528 <KeyLogic+0x2a8>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
                accumulatedNumber = 0;
 80002f0:	4b8e      	ldr	r3, [pc, #568]	@ (800052c <KeyLogic+0x2ac>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	e10d      	b.n	8000514 <KeyLogic+0x294>
            }
        } else {
            switch (keyPressed) {
 80002f8:	4b89      	ldr	r3, [pc, #548]	@ (8000520 <KeyLogic+0x2a0>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	3b24      	subs	r3, #36	@ 0x24
 80002fe:	2b30      	cmp	r3, #48	@ 0x30
 8000300:	f200 80ef 	bhi.w	80004e2 <KeyLogic+0x262>
 8000304:	a201      	add	r2, pc, #4	@ (adr r2, 800030c <KeyLogic+0x8c>)
 8000306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030a:	bf00      	nop
 800030c:	08000483 	.word	0x08000483
 8000310:	080004e3 	.word	0x080004e3
 8000314:	080004e3 	.word	0x080004e3
 8000318:	080004e3 	.word	0x080004e3
 800031c:	080004e3 	.word	0x080004e3
 8000320:	080004e3 	.word	0x080004e3
 8000324:	080004e3 	.word	0x080004e3
 8000328:	080004e3 	.word	0x080004e3
 800032c:	080004e3 	.word	0x080004e3
 8000330:	080004e3 	.word	0x080004e3
 8000334:	080004e3 	.word	0x080004e3
 8000338:	080004e3 	.word	0x080004e3
 800033c:	080004e3 	.word	0x080004e3
 8000340:	080004e3 	.word	0x080004e3
 8000344:	080004e3 	.word	0x080004e3
 8000348:	080004e3 	.word	0x080004e3
 800034c:	080004e3 	.word	0x080004e3
 8000350:	080004e3 	.word	0x080004e3
 8000354:	080004e3 	.word	0x080004e3
 8000358:	080004e3 	.word	0x080004e3
 800035c:	080004e3 	.word	0x080004e3
 8000360:	080004e3 	.word	0x080004e3
 8000364:	080004e3 	.word	0x080004e3
 8000368:	080004e3 	.word	0x080004e3
 800036c:	080004e3 	.word	0x080004e3
 8000370:	080004e3 	.word	0x080004e3
 8000374:	080004e3 	.word	0x080004e3
 8000378:	080004e3 	.word	0x080004e3
 800037c:	080004e3 	.word	0x080004e3
 8000380:	080003d1 	.word	0x080003d1
 8000384:	080003f9 	.word	0x080003f9
 8000388:	0800041f 	.word	0x0800041f
 800038c:	080004b3 	.word	0x080004b3
 8000390:	08000445 	.word	0x08000445
 8000394:	080004cb 	.word	0x080004cb
 8000398:	080004e3 	.word	0x080004e3
 800039c:	080004e3 	.word	0x080004e3
 80003a0:	080004e3 	.word	0x080004e3
 80003a4:	080004e3 	.word	0x080004e3
 80003a8:	080004e3 	.word	0x080004e3
 80003ac:	0800049b 	.word	0x0800049b
 80003b0:	080004e3 	.word	0x080004e3
 80003b4:	080004e3 	.word	0x080004e3
 80003b8:	080004e3 	.word	0x080004e3
 80003bc:	080004e3 	.word	0x080004e3
 80003c0:	080004e3 	.word	0x080004e3
 80003c4:	080004e3 	.word	0x080004e3
 80003c8:	080004e3 	.word	0x080004e3
 80003cc:	0800046b 	.word	0x0800046b
                case 'A':
                    snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 80003d0:	2300      	movs	r3, #0
 80003d2:	4a57      	ldr	r2, [pc, #348]	@ (8000530 <KeyLogic+0x2b0>)
 80003d4:	2107      	movs	r1, #7
 80003d6:	4857      	ldr	r0, [pc, #348]	@ (8000534 <KeyLogic+0x2b4>)
 80003d8:	f002 fbcc 	bl	8002b74 <sniprintf>
                    snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 10000);
 80003dc:	f242 7310 	movw	r3, #10000	@ 0x2710
 80003e0:	4a53      	ldr	r2, [pc, #332]	@ (8000530 <KeyLogic+0x2b0>)
 80003e2:	2107      	movs	r1, #7
 80003e4:	4854      	ldr	r0, [pc, #336]	@ (8000538 <KeyLogic+0x2b8>)
 80003e6:	f002 fbc5 	bl	8002b74 <sniprintf>
                    snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80003ea:	2300      	movs	r3, #0
 80003ec:	4a50      	ldr	r2, [pc, #320]	@ (8000530 <KeyLogic+0x2b0>)
 80003ee:	2107      	movs	r1, #7
 80003f0:	4852      	ldr	r0, [pc, #328]	@ (800053c <KeyLogic+0x2bc>)
 80003f2:	f002 fbbf 	bl	8002b74 <sniprintf>
                    break;
 80003f6:	e08d      	b.n	8000514 <KeyLogic+0x294>
                case 'B':
                    snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 80003f8:	2300      	movs	r3, #0
 80003fa:	4a4d      	ldr	r2, [pc, #308]	@ (8000530 <KeyLogic+0x2b0>)
 80003fc:	2107      	movs	r1, #7
 80003fe:	484d      	ldr	r0, [pc, #308]	@ (8000534 <KeyLogic+0x2b4>)
 8000400:	f002 fbb8 	bl	8002b74 <sniprintf>
                    snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 100000);
 8000404:	4b4e      	ldr	r3, [pc, #312]	@ (8000540 <KeyLogic+0x2c0>)
 8000406:	4a4a      	ldr	r2, [pc, #296]	@ (8000530 <KeyLogic+0x2b0>)
 8000408:	2107      	movs	r1, #7
 800040a:	484b      	ldr	r0, [pc, #300]	@ (8000538 <KeyLogic+0x2b8>)
 800040c:	f002 fbb2 	bl	8002b74 <sniprintf>
                    snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000410:	2300      	movs	r3, #0
 8000412:	4a47      	ldr	r2, [pc, #284]	@ (8000530 <KeyLogic+0x2b0>)
 8000414:	2107      	movs	r1, #7
 8000416:	4849      	ldr	r0, [pc, #292]	@ (800053c <KeyLogic+0x2bc>)
 8000418:	f002 fbac 	bl	8002b74 <sniprintf>
                    break;
 800041c:	e07a      	b.n	8000514 <KeyLogic+0x294>
                case 'C':
                    snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 800041e:	2300      	movs	r3, #0
 8000420:	4a43      	ldr	r2, [pc, #268]	@ (8000530 <KeyLogic+0x2b0>)
 8000422:	2107      	movs	r1, #7
 8000424:	4843      	ldr	r0, [pc, #268]	@ (8000534 <KeyLogic+0x2b4>)
 8000426:	f002 fba5 	bl	8002b74 <sniprintf>
                    snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800042a:	2300      	movs	r3, #0
 800042c:	4a40      	ldr	r2, [pc, #256]	@ (8000530 <KeyLogic+0x2b0>)
 800042e:	2107      	movs	r1, #7
 8000430:	4841      	ldr	r0, [pc, #260]	@ (8000538 <KeyLogic+0x2b8>)
 8000432:	f002 fb9f 	bl	8002b74 <sniprintf>
                    snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 1);
 8000436:	2301      	movs	r3, #1
 8000438:	4a3d      	ldr	r2, [pc, #244]	@ (8000530 <KeyLogic+0x2b0>)
 800043a:	2107      	movs	r1, #7
 800043c:	483f      	ldr	r0, [pc, #252]	@ (800053c <KeyLogic+0x2bc>)
 800043e:	f002 fb99 	bl	8002b74 <sniprintf>
                    break;
 8000442:	e067      	b.n	8000514 <KeyLogic+0x294>
                case 'E':
                    snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000444:	2300      	movs	r3, #0
 8000446:	4a3a      	ldr	r2, [pc, #232]	@ (8000530 <KeyLogic+0x2b0>)
 8000448:	2107      	movs	r1, #7
 800044a:	483a      	ldr	r0, [pc, #232]	@ (8000534 <KeyLogic+0x2b4>)
 800044c:	f002 fb92 	bl	8002b74 <sniprintf>
                    snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000450:	2300      	movs	r3, #0
 8000452:	4a37      	ldr	r2, [pc, #220]	@ (8000530 <KeyLogic+0x2b0>)
 8000454:	2107      	movs	r1, #7
 8000456:	4838      	ldr	r0, [pc, #224]	@ (8000538 <KeyLogic+0x2b8>)
 8000458:	f002 fb8c 	bl	8002b74 <sniprintf>
                    snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 100);
 800045c:	2364      	movs	r3, #100	@ 0x64
 800045e:	4a34      	ldr	r2, [pc, #208]	@ (8000530 <KeyLogic+0x2b0>)
 8000460:	2107      	movs	r1, #7
 8000462:	4836      	ldr	r0, [pc, #216]	@ (800053c <KeyLogic+0x2bc>)
 8000464:	f002 fb86 	bl	8002b74 <sniprintf>
                    break;
 8000468:	e054      	b.n	8000514 <KeyLogic+0x294>
                case 'T':
                    if (seqState == SEQ_IDLE) {
 800046a:	4b2e      	ldr	r3, [pc, #184]	@ (8000524 <KeyLogic+0x2a4>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d103      	bne.n	800047a <KeyLogic+0x1fa>
                        seqState = SEQ_PRESSED_T;
 8000472:	4b2c      	ldr	r3, [pc, #176]	@ (8000524 <KeyLogic+0x2a4>)
 8000474:	2201      	movs	r2, #1
 8000476:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 8000478:	e04c      	b.n	8000514 <KeyLogic+0x294>
                        seqState = SEQ_IDLE;
 800047a:	4b2a      	ldr	r3, [pc, #168]	@ (8000524 <KeyLogic+0x2a4>)
 800047c:	2200      	movs	r2, #0
 800047e:	701a      	strb	r2, [r3, #0]
                    break;
 8000480:	e048      	b.n	8000514 <KeyLogic+0x294>
                case '$':
                    if (seqState == SEQ_PRESSED_T) {
 8000482:	4b28      	ldr	r3, [pc, #160]	@ (8000524 <KeyLogic+0x2a4>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b01      	cmp	r3, #1
 8000488:	d103      	bne.n	8000492 <KeyLogic+0x212>
                        seqState = SEQ_PRESSED_T_$;
 800048a:	4b26      	ldr	r3, [pc, #152]	@ (8000524 <KeyLogic+0x2a4>)
 800048c:	2203      	movs	r2, #3
 800048e:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 8000490:	e040      	b.n	8000514 <KeyLogic+0x294>
                        seqState = SEQ_IDLE;
 8000492:	4b24      	ldr	r3, [pc, #144]	@ (8000524 <KeyLogic+0x2a4>)
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
                    break;
 8000498:	e03c      	b.n	8000514 <KeyLogic+0x294>
                case 'L':
                    if (seqState == SEQ_PRESSED_T) {
 800049a:	4b22      	ldr	r3, [pc, #136]	@ (8000524 <KeyLogic+0x2a4>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d103      	bne.n	80004aa <KeyLogic+0x22a>
                        seqState = SEQ_PRESSED_T_L;
 80004a2:	4b20      	ldr	r3, [pc, #128]	@ (8000524 <KeyLogic+0x2a4>)
 80004a4:	2202      	movs	r2, #2
 80004a6:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 80004a8:	e034      	b.n	8000514 <KeyLogic+0x294>
                        seqState = SEQ_IDLE;
 80004aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000524 <KeyLogic+0x2a4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
                    break;
 80004b0:	e030      	b.n	8000514 <KeyLogic+0x294>
                case 'D':
                    if (seqState == SEQ_PRESSED_T) {
 80004b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000524 <KeyLogic+0x2a4>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d103      	bne.n	80004c2 <KeyLogic+0x242>
                        seqState = SEQ_PRESSED_T_F3;
 80004ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000524 <KeyLogic+0x2a4>)
 80004bc:	2204      	movs	r2, #4
 80004be:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 80004c0:	e028      	b.n	8000514 <KeyLogic+0x294>
                        seqState = SEQ_IDLE;
 80004c2:	4b18      	ldr	r3, [pc, #96]	@ (8000524 <KeyLogic+0x2a4>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]
                    break;
 80004c8:	e024      	b.n	8000514 <KeyLogic+0x294>
                case 'F':
                    if (seqState == SEQ_PRESSED_T) {
 80004ca:	4b16      	ldr	r3, [pc, #88]	@ (8000524 <KeyLogic+0x2a4>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d103      	bne.n	80004da <KeyLogic+0x25a>
                        seqState = SEQ_PRESSED_T_F4;
 80004d2:	4b14      	ldr	r3, [pc, #80]	@ (8000524 <KeyLogic+0x2a4>)
 80004d4:	2205      	movs	r2, #5
 80004d6:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 80004d8:	e01c      	b.n	8000514 <KeyLogic+0x294>
                        seqState = SEQ_IDLE;
 80004da:	4b12      	ldr	r3, [pc, #72]	@ (8000524 <KeyLogic+0x2a4>)
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
                    break;
 80004e0:	e018      	b.n	8000514 <KeyLogic+0x294>
                default:
                    if (keyPressed >= '0' && keyPressed <= '9') {
 80004e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <KeyLogic+0x2a0>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80004e8:	d910      	bls.n	800050c <KeyLogic+0x28c>
 80004ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000520 <KeyLogic+0x2a0>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b39      	cmp	r3, #57	@ 0x39
 80004f0:	d80c      	bhi.n	800050c <KeyLogic+0x28c>
                        seqState = SEQ_NUMBER;
 80004f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <KeyLogic+0x2a4>)
 80004f4:	2206      	movs	r2, #6
 80004f6:	701a      	strb	r2, [r3, #0]
                        accumulatedNumber = keyPressed - '0';
 80004f8:	4b09      	ldr	r3, [pc, #36]	@ (8000520 <KeyLogic+0x2a0>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	3b30      	subs	r3, #48	@ 0x30
 80004fe:	461a      	mov	r2, r3
 8000500:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <KeyLogic+0x2ac>)
 8000502:	601a      	str	r2, [r3, #0]
                        numberOfDigits = 1;
 8000504:	4b08      	ldr	r3, [pc, #32]	@ (8000528 <KeyLogic+0x2a8>)
 8000506:	2201      	movs	r2, #1
 8000508:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 800050a:	e002      	b.n	8000512 <KeyLogic+0x292>
                        seqState = SEQ_IDLE;
 800050c:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <KeyLogic+0x2a4>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
                    break;
 8000512:	bf00      	nop
            }
        }
        keyPressed = 0xFF;
 8000514:	4b02      	ldr	r3, [pc, #8]	@ (8000520 <KeyLogic+0x2a0>)
 8000516:	22ff      	movs	r2, #255	@ 0xff
 8000518:	701a      	strb	r2, [r3, #0]
	}
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000025 	.word	0x20000025
 8000524:	200000bc 	.word	0x200000bc
 8000528:	200000b0 	.word	0x200000b0
 800052c:	200000ac 	.word	0x200000ac
 8000530:	08003514 	.word	0x08003514
 8000534:	20000010 	.word	0x20000010
 8000538:	20000017 	.word	0x20000017
 800053c:	2000001e 	.word	0x2000001e
 8000540:	000186a0 	.word	0x000186a0

08000544 <KeyLogic_Action>:

void KeyLogic_Action() {
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
    char buffer[7];
    switch (seqState) {
 800054a:	4b7d      	ldr	r3, [pc, #500]	@ (8000740 <KeyLogic_Action+0x1fc>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b06      	cmp	r3, #6
 8000550:	f200 80df 	bhi.w	8000712 <KeyLogic_Action+0x1ce>
 8000554:	a201      	add	r2, pc, #4	@ (adr r2, 800055c <KeyLogic_Action+0x18>)
 8000556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055a:	bf00      	nop
 800055c:	08000579 	.word	0x08000579
 8000560:	0800059f 	.word	0x0800059f
 8000564:	080005eb 	.word	0x080005eb
 8000568:	080005c5 	.word	0x080005c5
 800056c:	08000687 	.word	0x08000687
 8000570:	080006ad 	.word	0x080006ad
 8000574:	080006d3 	.word	0x080006d3
        case SEQ_IDLE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000578:	2300      	movs	r3, #0
 800057a:	4a72      	ldr	r2, [pc, #456]	@ (8000744 <KeyLogic_Action+0x200>)
 800057c:	2107      	movs	r1, #7
 800057e:	4872      	ldr	r0, [pc, #456]	@ (8000748 <KeyLogic_Action+0x204>)
 8000580:	f002 faf8 	bl	8002b74 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000584:	2300      	movs	r3, #0
 8000586:	4a6f      	ldr	r2, [pc, #444]	@ (8000744 <KeyLogic_Action+0x200>)
 8000588:	2107      	movs	r1, #7
 800058a:	4870      	ldr	r0, [pc, #448]	@ (800074c <KeyLogic_Action+0x208>)
 800058c:	f002 faf2 	bl	8002b74 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000590:	2300      	movs	r3, #0
 8000592:	4a6c      	ldr	r2, [pc, #432]	@ (8000744 <KeyLogic_Action+0x200>)
 8000594:	2107      	movs	r1, #7
 8000596:	486e      	ldr	r0, [pc, #440]	@ (8000750 <KeyLogic_Action+0x20c>)
 8000598:	f002 faec 	bl	8002b74 <sniprintf>
            break;
 800059c:	e0cc      	b.n	8000738 <KeyLogic_Action+0x1f4>
        case SEQ_PRESSED_T:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 800059e:	2300      	movs	r3, #0
 80005a0:	4a68      	ldr	r2, [pc, #416]	@ (8000744 <KeyLogic_Action+0x200>)
 80005a2:	2107      	movs	r1, #7
 80005a4:	4868      	ldr	r0, [pc, #416]	@ (8000748 <KeyLogic_Action+0x204>)
 80005a6:	f002 fae5 	bl	8002b74 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80005aa:	2300      	movs	r3, #0
 80005ac:	4a65      	ldr	r2, [pc, #404]	@ (8000744 <KeyLogic_Action+0x200>)
 80005ae:	2107      	movs	r1, #7
 80005b0:	4866      	ldr	r0, [pc, #408]	@ (800074c <KeyLogic_Action+0x208>)
 80005b2:	f002 fadf 	bl	8002b74 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 999999);
 80005b6:	4b67      	ldr	r3, [pc, #412]	@ (8000754 <KeyLogic_Action+0x210>)
 80005b8:	4a62      	ldr	r2, [pc, #392]	@ (8000744 <KeyLogic_Action+0x200>)
 80005ba:	2107      	movs	r1, #7
 80005bc:	4864      	ldr	r0, [pc, #400]	@ (8000750 <KeyLogic_Action+0x20c>)
 80005be:	f002 fad9 	bl	8002b74 <sniprintf>
            break;
 80005c2:	e0b9      	b.n	8000738 <KeyLogic_Action+0x1f4>
        case SEQ_PRESSED_T_$:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 80005c4:	2300      	movs	r3, #0
 80005c6:	4a5f      	ldr	r2, [pc, #380]	@ (8000744 <KeyLogic_Action+0x200>)
 80005c8:	2107      	movs	r1, #7
 80005ca:	485f      	ldr	r0, [pc, #380]	@ (8000748 <KeyLogic_Action+0x204>)
 80005cc:	f002 fad2 	bl	8002b74 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80005d0:	2300      	movs	r3, #0
 80005d2:	4a5c      	ldr	r2, [pc, #368]	@ (8000744 <KeyLogic_Action+0x200>)
 80005d4:	2107      	movs	r1, #7
 80005d6:	485d      	ldr	r0, [pc, #372]	@ (800074c <KeyLogic_Action+0x208>)
 80005d8:	f002 facc 	bl	8002b74 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 111111);
 80005dc:	4b5e      	ldr	r3, [pc, #376]	@ (8000758 <KeyLogic_Action+0x214>)
 80005de:	4a59      	ldr	r2, [pc, #356]	@ (8000744 <KeyLogic_Action+0x200>)
 80005e0:	2107      	movs	r1, #7
 80005e2:	485b      	ldr	r0, [pc, #364]	@ (8000750 <KeyLogic_Action+0x20c>)
 80005e4:	f002 fac6 	bl	8002b74 <sniprintf>
            break;
 80005e8:	e0a6      	b.n	8000738 <KeyLogic_Action+0x1f4>
        case SEQ_PRESSED_T_L:
            // Format the total liters into two parts
            formatTotalLiters(totalLiters, &row1, &row2);
 80005ea:	4b5c      	ldr	r3, [pc, #368]	@ (800075c <KeyLogic_Action+0x218>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a5c      	ldr	r2, [pc, #368]	@ (8000760 <KeyLogic_Action+0x21c>)
 80005f0:	495c      	ldr	r1, [pc, #368]	@ (8000764 <KeyLogic_Action+0x220>)
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff fe08 	bl	8000208 <formatTotalLiters>

            // Ensure the combined string fits into the buffer
            char row1Str[7]; // Buffer to hold formatted row1 string
            snprintf(row1Str, sizeof(row1Str), "%06ld", row1);
 80005f8:	4b5a      	ldr	r3, [pc, #360]	@ (8000764 <KeyLogic_Action+0x220>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f107 000c 	add.w	r0, r7, #12
 8000600:	4a59      	ldr	r2, [pc, #356]	@ (8000768 <KeyLogic_Action+0x224>)
 8000602:	2107      	movs	r1, #7
 8000604:	f002 fab6 	bl	8002b74 <sniprintf>

            // Combine "L.. " with the last two digits of row1
            char combinedStr[8]; // Buffer to hold combined string "L.. " and last two digits of row1
            snprintf(combinedStr, sizeof(combinedStr), "L.. %02ld", row1 % 100); // Extract last two digits of row1
 8000608:	4b56      	ldr	r3, [pc, #344]	@ (8000764 <KeyLogic_Action+0x220>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b57      	ldr	r3, [pc, #348]	@ (800076c <KeyLogic_Action+0x228>)
 800060e:	fba3 1302 	umull	r1, r3, r3, r2
 8000612:	095b      	lsrs	r3, r3, #5
 8000614:	2164      	movs	r1, #100	@ 0x64
 8000616:	fb01 f303 	mul.w	r3, r1, r3
 800061a:	1ad3      	subs	r3, r2, r3
 800061c:	1d38      	adds	r0, r7, #4
 800061e:	4a54      	ldr	r2, [pc, #336]	@ (8000770 <KeyLogic_Action+0x22c>)
 8000620:	2108      	movs	r1, #8
 8000622:	f002 faa7 	bl	8002b74 <sniprintf>

            // Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
            for (int i = 0; i < 6; ++i) {
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
 800062a:	e019      	b.n	8000660 <KeyLogic_Action+0x11c>
                if (i < strlen(combinedStr)) {
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff fd8c 	bl	800014c <strlen>
 8000634:	4602      	mov	r2, r0
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	429a      	cmp	r2, r3
 800063a:	d909      	bls.n	8000650 <KeyLogic_Action+0x10c>
                    SevenSegBuffer[0][i] = combinedStr[i];
 800063c:	1d3a      	adds	r2, r7, #4
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	4413      	add	r3, r2
 8000642:	7819      	ldrb	r1, [r3, #0]
 8000644:	4a40      	ldr	r2, [pc, #256]	@ (8000748 <KeyLogic_Action+0x204>)
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	4413      	add	r3, r2
 800064a:	460a      	mov	r2, r1
 800064c:	701a      	strb	r2, [r3, #0]
 800064e:	e004      	b.n	800065a <KeyLogic_Action+0x116>
                } else {
                    SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8000650:	4a3d      	ldr	r2, [pc, #244]	@ (8000748 <KeyLogic_Action+0x204>)
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	4413      	add	r3, r2
 8000656:	2220      	movs	r2, #32
 8000658:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; ++i) {
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	3301      	adds	r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	2b05      	cmp	r3, #5
 8000664:	dde2      	ble.n	800062c <KeyLogic_Action+0xe8>
                }
            }


            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8000666:	4b3e      	ldr	r3, [pc, #248]	@ (8000760 <KeyLogic_Action+0x21c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a3f      	ldr	r2, [pc, #252]	@ (8000768 <KeyLogic_Action+0x224>)
 800066c:	2107      	movs	r1, #7
 800066e:	4837      	ldr	r0, [pc, #220]	@ (800074c <KeyLogic_Action+0x208>)
 8000670:	f002 fa80 	bl	8002b74 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "Total");
 8000674:	4a3f      	ldr	r2, [pc, #252]	@ (8000774 <KeyLogic_Action+0x230>)
 8000676:	2107      	movs	r1, #7
 8000678:	4835      	ldr	r0, [pc, #212]	@ (8000750 <KeyLogic_Action+0x20c>)
 800067a:	f002 fa7b 	bl	8002b74 <sniprintf>


            LEDPointFlag = 3;
 800067e:	4b3e      	ldr	r3, [pc, #248]	@ (8000778 <KeyLogic_Action+0x234>)
 8000680:	2203      	movs	r2, #3
 8000682:	601a      	str	r2, [r3, #0]
            break;
 8000684:	e058      	b.n	8000738 <KeyLogic_Action+0x1f4>
        case SEQ_PRESSED_T_F3:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 333333);
 8000686:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <KeyLogic_Action+0x238>)
 8000688:	4a2e      	ldr	r2, [pc, #184]	@ (8000744 <KeyLogic_Action+0x200>)
 800068a:	2107      	movs	r1, #7
 800068c:	482e      	ldr	r0, [pc, #184]	@ (8000748 <KeyLogic_Action+0x204>)
 800068e:	f002 fa71 	bl	8002b74 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000692:	2300      	movs	r3, #0
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <KeyLogic_Action+0x200>)
 8000696:	2107      	movs	r1, #7
 8000698:	482c      	ldr	r0, [pc, #176]	@ (800074c <KeyLogic_Action+0x208>)
 800069a:	f002 fa6b 	bl	8002b74 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 800069e:	2300      	movs	r3, #0
 80006a0:	4a28      	ldr	r2, [pc, #160]	@ (8000744 <KeyLogic_Action+0x200>)
 80006a2:	2107      	movs	r1, #7
 80006a4:	482a      	ldr	r0, [pc, #168]	@ (8000750 <KeyLogic_Action+0x20c>)
 80006a6:	f002 fa65 	bl	8002b74 <sniprintf>
            break;
 80006aa:	e045      	b.n	8000738 <KeyLogic_Action+0x1f4>
        case SEQ_PRESSED_T_F4:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 444444);
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <KeyLogic_Action+0x23c>)
 80006ae:	4a25      	ldr	r2, [pc, #148]	@ (8000744 <KeyLogic_Action+0x200>)
 80006b0:	2107      	movs	r1, #7
 80006b2:	4825      	ldr	r0, [pc, #148]	@ (8000748 <KeyLogic_Action+0x204>)
 80006b4:	f002 fa5e 	bl	8002b74 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80006b8:	2300      	movs	r3, #0
 80006ba:	4a22      	ldr	r2, [pc, #136]	@ (8000744 <KeyLogic_Action+0x200>)
 80006bc:	2107      	movs	r1, #7
 80006be:	4823      	ldr	r0, [pc, #140]	@ (800074c <KeyLogic_Action+0x208>)
 80006c0:	f002 fa58 	bl	8002b74 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80006c4:	2300      	movs	r3, #0
 80006c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000744 <KeyLogic_Action+0x200>)
 80006c8:	2107      	movs	r1, #7
 80006ca:	4821      	ldr	r0, [pc, #132]	@ (8000750 <KeyLogic_Action+0x20c>)
 80006cc:	f002 fa52 	bl	8002b74 <sniprintf>
            break;
 80006d0:	e032      	b.n	8000738 <KeyLogic_Action+0x1f4>
        case SEQ_NUMBER:
            snprintf(buffer, sizeof(buffer), "%06d", accumulatedNumber);
 80006d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000784 <KeyLogic_Action+0x240>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f107 0014 	add.w	r0, r7, #20
 80006da:	4a1a      	ldr	r2, [pc, #104]	@ (8000744 <KeyLogic_Action+0x200>)
 80006dc:	2107      	movs	r1, #7
 80006de:	f002 fa49 	bl	8002b74 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4a28      	ldr	r2, [pc, #160]	@ (8000788 <KeyLogic_Action+0x244>)
 80006e8:	2107      	movs	r1, #7
 80006ea:	4817      	ldr	r0, [pc, #92]	@ (8000748 <KeyLogic_Action+0x204>)
 80006ec:	f002 fa42 	bl	8002b74 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80006f0:	2300      	movs	r3, #0
 80006f2:	4a14      	ldr	r2, [pc, #80]	@ (8000744 <KeyLogic_Action+0x200>)
 80006f4:	2107      	movs	r1, #7
 80006f6:	4815      	ldr	r0, [pc, #84]	@ (800074c <KeyLogic_Action+0x208>)
 80006f8:	f002 fa3c 	bl	8002b74 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80006fc:	2300      	movs	r3, #0
 80006fe:	4a11      	ldr	r2, [pc, #68]	@ (8000744 <KeyLogic_Action+0x200>)
 8000700:	2107      	movs	r1, #7
 8000702:	4813      	ldr	r0, [pc, #76]	@ (8000750 <KeyLogic_Action+0x20c>)
 8000704:	f002 fa36 	bl	8002b74 <sniprintf>
            LEDPointFlag = -1;
 8000708:	4b1b      	ldr	r3, [pc, #108]	@ (8000778 <KeyLogic_Action+0x234>)
 800070a:	f04f 32ff 	mov.w	r2, #4294967295
 800070e:	601a      	str	r2, [r3, #0]
            break;
 8000710:	e012      	b.n	8000738 <KeyLogic_Action+0x1f4>
        default:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000712:	2300      	movs	r3, #0
 8000714:	4a0b      	ldr	r2, [pc, #44]	@ (8000744 <KeyLogic_Action+0x200>)
 8000716:	2107      	movs	r1, #7
 8000718:	480b      	ldr	r0, [pc, #44]	@ (8000748 <KeyLogic_Action+0x204>)
 800071a:	f002 fa2b 	bl	8002b74 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800071e:	2300      	movs	r3, #0
 8000720:	4a08      	ldr	r2, [pc, #32]	@ (8000744 <KeyLogic_Action+0x200>)
 8000722:	2107      	movs	r1, #7
 8000724:	4809      	ldr	r0, [pc, #36]	@ (800074c <KeyLogic_Action+0x208>)
 8000726:	f002 fa25 	bl	8002b74 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 800072a:	2300      	movs	r3, #0
 800072c:	4a05      	ldr	r2, [pc, #20]	@ (8000744 <KeyLogic_Action+0x200>)
 800072e:	2107      	movs	r1, #7
 8000730:	4807      	ldr	r0, [pc, #28]	@ (8000750 <KeyLogic_Action+0x20c>)
 8000732:	f002 fa1f 	bl	8002b74 <sniprintf>
            break;
 8000736:	bf00      	nop
    }
}
 8000738:	bf00      	nop
 800073a:	3720      	adds	r7, #32
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000bc 	.word	0x200000bc
 8000744:	08003514 	.word	0x08003514
 8000748:	20000010 	.word	0x20000010
 800074c:	20000017 	.word	0x20000017
 8000750:	2000001e 	.word	0x2000001e
 8000754:	000f423f 	.word	0x000f423f
 8000758:	0001b207 	.word	0x0001b207
 800075c:	20000028 	.word	0x20000028
 8000760:	200000b8 	.word	0x200000b8
 8000764:	200000b4 	.word	0x200000b4
 8000768:	0800351c 	.word	0x0800351c
 800076c:	51eb851f 	.word	0x51eb851f
 8000770:	08003524 	.word	0x08003524
 8000774:	08003530 	.word	0x08003530
 8000778:	2000002c 	.word	0x2000002c
 800077c:	00051615 	.word	0x00051615
 8000780:	0006c81c 	.word	0x0006c81c
 8000784:	200000ac 	.word	0x200000ac
 8000788:	08003538 	.word	0x08003538

0800078c <CharToSegment>:
//uint32_t SevenSegBuffer[3]={123456, 654321, 987654};
char SevenSegBuffer[3][7] = {"123456", "654321", "987654"};
uint8_t displayBuffer[5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;

uint8_t CharToSegment(char c) {
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b2f      	cmp	r3, #47	@ 0x2f
 800079a:	d907      	bls.n	80007ac <CharToSegment+0x20>
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	2b39      	cmp	r3, #57	@ 0x39
 80007a0:	d804      	bhi.n	80007ac <CharToSegment+0x20>
        return digitMapWithOutDP[c - '0'];
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	3b30      	subs	r3, #48	@ 0x30
 80007a6:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <CharToSegment+0x44>)
 80007a8:	5cd3      	ldrb	r3, [r2, r3]
 80007aa:	e00c      	b.n	80007c6 <CharToSegment+0x3a>
    } else if (c == 'L') {
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b4c      	cmp	r3, #76	@ 0x4c
 80007b0:	d102      	bne.n	80007b8 <CharToSegment+0x2c>
        return specialCharMap[0];
 80007b2:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <CharToSegment+0x48>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	e006      	b.n	80007c6 <CharToSegment+0x3a>
    } else if (c == '.') {
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80007bc:	d102      	bne.n	80007c4 <CharToSegment+0x38>
        return specialCharMap[1];
 80007be:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <CharToSegment+0x48>)
 80007c0:	785b      	ldrb	r3, [r3, #1]
 80007c2:	e000      	b.n	80007c6 <CharToSegment+0x3a>
    } else {
        return 0b11111111; // Blank
 80007c4:	23ff      	movs	r3, #255	@ 0xff
    }
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	20000000 	.word	0x20000000
 80007d4:	2000000c 	.word	0x2000000c

080007d8 <SevenSegLEDsHandler>:

uint8_t* SevenSegLEDsHandler(char buffer[3][7], uint8_t scan_state) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    for (int i = 0; i < 3; i++) {
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	e035      	b.n	8000856 <SevenSegLEDsHandler+0x7e>
        int len = strlen(buffer[i]);
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	4613      	mov	r3, r2
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	1a9b      	subs	r3, r3, r2
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fca8 	bl	800014c <strlen>
 80007fc:	4603      	mov	r3, r0
 80007fe:	60bb      	str	r3, [r7, #8]
        if (scan_state < 6) {
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	2b05      	cmp	r3, #5
 8000804:	d81f      	bhi.n	8000846 <SevenSegLEDsHandler+0x6e>
            if (scan_state < len) {
 8000806:	78fb      	ldrb	r3, [r7, #3]
 8000808:	68ba      	ldr	r2, [r7, #8]
 800080a:	429a      	cmp	r2, r3
 800080c:	dd15      	ble.n	800083a <SevenSegLEDsHandler+0x62>
                output[i] = CharToSegment(buffer[i][len - 1 - scan_state]);
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	4613      	mov	r3, r2
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	1a9b      	subs	r3, r3, r2
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	441a      	add	r2, r3
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	1e59      	subs	r1, r3, #1
 800081e:	78fb      	ldrb	r3, [r7, #3]
 8000820:	1acb      	subs	r3, r1, r3
 8000822:	5cd3      	ldrb	r3, [r2, r3]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ffb1 	bl	800078c <CharToSegment>
 800082a:	4603      	mov	r3, r0
 800082c:	4619      	mov	r1, r3
 800082e:	4a0e      	ldr	r2, [pc, #56]	@ (8000868 <SevenSegLEDsHandler+0x90>)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	4413      	add	r3, r2
 8000834:	460a      	mov	r2, r1
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	e00a      	b.n	8000850 <SevenSegLEDsHandler+0x78>
            } else {
                output[i] = 0b11111111; // Blank
 800083a:	4a0b      	ldr	r2, [pc, #44]	@ (8000868 <SevenSegLEDsHandler+0x90>)
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	4413      	add	r3, r2
 8000840:	22ff      	movs	r2, #255	@ 0xff
 8000842:	701a      	strb	r2, [r3, #0]
 8000844:	e004      	b.n	8000850 <SevenSegLEDsHandler+0x78>
            }
        } else {
            output[i] = 0b11111111; // Blank
 8000846:	4a08      	ldr	r2, [pc, #32]	@ (8000868 <SevenSegLEDsHandler+0x90>)
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	4413      	add	r3, r2
 800084c:	22ff      	movs	r2, #255	@ 0xff
 800084e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3301      	adds	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2b02      	cmp	r3, #2
 800085a:	ddc6      	ble.n	80007ea <SevenSegLEDsHandler+0x12>
        }
    }
    return output;
 800085c:	4b02      	ldr	r3, [pc, #8]	@ (8000868 <SevenSegLEDsHandler+0x90>)
}
 800085e:	4618      	mov	r0, r3
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000c8 	.word	0x200000c8

0800086c <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(char buffer[3][7], uint8_t scan_state) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	70fb      	strb	r3, [r7, #3]
	uint8_t* curr_digit=SevenSegLEDsHandler(buffer,scan_state);
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	4619      	mov	r1, r3
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ffab 	bl	80007d8 <SevenSegLEDsHandler>
 8000882:	60b8      	str	r0, [r7, #8]
	uint8_t curr_scan;
	switch (scan_state) {
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	2b05      	cmp	r3, #5
 8000888:	d820      	bhi.n	80008cc <UpdateDisplayBuffer+0x60>
 800088a:	a201      	add	r2, pc, #4	@ (adr r2, 8000890 <UpdateDisplayBuffer+0x24>)
 800088c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000890:	080008a9 	.word	0x080008a9
 8000894:	080008af 	.word	0x080008af
 8000898:	080008b5 	.word	0x080008b5
 800089c:	080008bb 	.word	0x080008bb
 80008a0:	080008c1 	.word	0x080008c1
 80008a4:	080008c7 	.word	0x080008c7
		case 0:
			curr_scan=0b00100000;
 80008a8:	2320      	movs	r3, #32
 80008aa:	73fb      	strb	r3, [r7, #15]
			break;
 80008ac:	e011      	b.n	80008d2 <UpdateDisplayBuffer+0x66>
		case 1:
			curr_scan=0b00010000;
 80008ae:	2310      	movs	r3, #16
 80008b0:	73fb      	strb	r3, [r7, #15]
			break;
 80008b2:	e00e      	b.n	80008d2 <UpdateDisplayBuffer+0x66>
		case 2:
			curr_scan=0b00001000;
 80008b4:	2308      	movs	r3, #8
 80008b6:	73fb      	strb	r3, [r7, #15]
			break;
 80008b8:	e00b      	b.n	80008d2 <UpdateDisplayBuffer+0x66>
		case 3:
			curr_scan=0b00000100;
 80008ba:	2304      	movs	r3, #4
 80008bc:	73fb      	strb	r3, [r7, #15]
			break;
 80008be:	e008      	b.n	80008d2 <UpdateDisplayBuffer+0x66>
		case 4:
			curr_scan=0b00000010;
 80008c0:	2302      	movs	r3, #2
 80008c2:	73fb      	strb	r3, [r7, #15]
			break;
 80008c4:	e005      	b.n	80008d2 <UpdateDisplayBuffer+0x66>
		case 5:
			curr_scan=0b00000001;
 80008c6:	2301      	movs	r3, #1
 80008c8:	73fb      	strb	r3, [r7, #15]
			break;
 80008ca:	e002      	b.n	80008d2 <UpdateDisplayBuffer+0x66>
		default:
			curr_scan=0b00000001;
 80008cc:	2301      	movs	r3, #1
 80008ce:	73fb      	strb	r3, [r7, #15]
			break;
 80008d0:	bf00      	nop
	}
	if(LEDPointFlag >=0 && LEDPointFlag <=5){
 80008d2:	4b22      	ldr	r3, [pc, #136]	@ (800095c <UpdateDisplayBuffer+0xf0>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	db2c      	blt.n	8000934 <UpdateDisplayBuffer+0xc8>
 80008da:	4b20      	ldr	r3, [pc, #128]	@ (800095c <UpdateDisplayBuffer+0xf0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b05      	cmp	r3, #5
 80008e0:	dc28      	bgt.n	8000934 <UpdateDisplayBuffer+0xc8>
	    	if (scan_state == LEDPointFlag){
 80008e2:	78fa      	ldrb	r2, [r7, #3]
 80008e4:	4b1d      	ldr	r3, [pc, #116]	@ (800095c <UpdateDisplayBuffer+0xf0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d113      	bne.n	8000914 <UpdateDisplayBuffer+0xa8>
				displayBuffer[0] = curr_scan;
 80008ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000960 <UpdateDisplayBuffer+0xf4>)
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	7013      	strb	r3, [r2, #0]
				displayBuffer[1] = curr_digit[2];
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	789a      	ldrb	r2, [r3, #2]
 80008f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <UpdateDisplayBuffer+0xf4>)
 80008f8:	705a      	strb	r2, [r3, #1]
				displayBuffer[2] = curr_digit[1] & 0b01111111; //Add point to second row
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	3301      	adds	r3, #1
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <UpdateDisplayBuffer+0xf4>)
 8000908:	709a      	strb	r2, [r3, #2]
				displayBuffer[3] = curr_digit[0];
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <UpdateDisplayBuffer+0xf4>)
 8000910:	70da      	strb	r2, [r3, #3]
	    	if (scan_state == LEDPointFlag){
 8000912:	e01f      	b.n	8000954 <UpdateDisplayBuffer+0xe8>
	    	}
	    	else
	    	{
	    		displayBuffer[0] = curr_scan;
 8000914:	4a12      	ldr	r2, [pc, #72]	@ (8000960 <UpdateDisplayBuffer+0xf4>)
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	7013      	strb	r3, [r2, #0]
	    		displayBuffer[1] = curr_digit[2];
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	789a      	ldrb	r2, [r3, #2]
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <UpdateDisplayBuffer+0xf4>)
 8000920:	705a      	strb	r2, [r3, #1]
	    		displayBuffer[2] = curr_digit[1];
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	785a      	ldrb	r2, [r3, #1]
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <UpdateDisplayBuffer+0xf4>)
 8000928:	709a      	strb	r2, [r3, #2]
	    		displayBuffer[3] = curr_digit[0];
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <UpdateDisplayBuffer+0xf4>)
 8000930:	70da      	strb	r2, [r3, #3]
	    	if (scan_state == LEDPointFlag){
 8000932:	e00f      	b.n	8000954 <UpdateDisplayBuffer+0xe8>
	    	}
	    }
	    else
	    {
			displayBuffer[0] = curr_scan;
 8000934:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <UpdateDisplayBuffer+0xf4>)
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	7013      	strb	r3, [r2, #0]
			displayBuffer[1] = curr_digit[2];
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	789a      	ldrb	r2, [r3, #2]
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <UpdateDisplayBuffer+0xf4>)
 8000940:	705a      	strb	r2, [r3, #1]
			displayBuffer[2] = curr_digit[1];
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	785a      	ldrb	r2, [r3, #1]
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <UpdateDisplayBuffer+0xf4>)
 8000948:	709a      	strb	r2, [r3, #2]
			displayBuffer[3] = curr_digit[0];
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	781a      	ldrb	r2, [r3, #0]
 800094e:	4b04      	ldr	r3, [pc, #16]	@ (8000960 <UpdateDisplayBuffer+0xf4>)
 8000950:	70da      	strb	r2, [r3, #3]
	    }
}
 8000952:	bf00      	nop
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2000002c 	.word	0x2000002c
 8000960:	200000c0 	.word	0x200000c0

08000964 <SevenSegLEDsScan>:

//
void SevenSegLEDsScan(){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
//	uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
	UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState);
 8000968:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <SevenSegLEDsScan+0x40>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	4619      	mov	r1, r3
 8000970:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <SevenSegLEDsScan+0x44>)
 8000972:	f7ff ff7b 	bl	800086c <UpdateDisplayBuffer>
	ShiftOut_SPI(displayBuffer, 4);
 8000976:	2104      	movs	r1, #4
 8000978:	480c      	ldr	r0, [pc, #48]	@ (80009ac <SevenSegLEDsScan+0x48>)
 800097a:	f000 f81b 	bl	80009b4 <ShiftOut_SPI>
//    currentBufferIndex = bufferIndex;  // Swap buffers
    SevenSegScanState = (SevenSegScanState + 1) % 6;
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <SevenSegLEDsScan+0x40>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <SevenSegLEDsScan+0x4c>)
 8000988:	fb83 3102 	smull	r3, r1, r3, r2
 800098c:	17d3      	asrs	r3, r2, #31
 800098e:	1ac9      	subs	r1, r1, r3
 8000990:	460b      	mov	r3, r1
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	440b      	add	r3, r1
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	1ad1      	subs	r1, r2, r3
 800099a:	b2ca      	uxtb	r2, r1
 800099c:	4b01      	ldr	r3, [pc, #4]	@ (80009a4 <SevenSegLEDsScan+0x40>)
 800099e:	701a      	strb	r2, [r3, #0]
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200000bd 	.word	0x200000bd
 80009a8:	20000010 	.word	0x20000010
 80009ac:	200000c0 	.word	0x200000c0
 80009b0:	2aaaaaab 	.word	0x2aaaaaab

080009b4 <ShiftOut_SPI>:
 *      Author: clong
 */
#include "SPI_shift.h"

void ShiftOut_SPI(uint8_t *data, size_t size)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Pull STCP (Latch) low
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009c4:	480a      	ldr	r0, [pc, #40]	@ (80009f0 <ShiftOut_SPI+0x3c>)
 80009c6:	f000 fe72 	bl	80016ae <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, 300); // Transmit data
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	4807      	ldr	r0, [pc, #28]	@ (80009f4 <ShiftOut_SPI+0x40>)
 80009d6:	f001 fae5 	bl	8001fa4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Pull STCP (Latch) high
 80009da:	2201      	movs	r2, #1
 80009dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009e0:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <ShiftOut_SPI+0x3c>)
 80009e2:	f000 fe64 	bl	80016ae <HAL_GPIO_WritePin>

}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40010c00 	.word	0x40010c00
 80009f4:	20000124 	.word	0x20000124

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fc:	f000 fb4c 	bl	8001098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a00:	f000 f832 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a04:	f000 f924 	bl	8000c50 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000a08:	f000 f8a0 	bl	8000b4c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000a0c:	f000 f8d4 	bl	8000bb8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000a10:	f000 f866 	bl	8000ae0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a14:	4812      	ldr	r0, [pc, #72]	@ (8000a60 <main+0x68>)
 8000a16:	f001 fcff 	bl	8002418 <HAL_TIM_Base_Start_IT>
  setTimer(0,100);
 8000a1a:	2164      	movs	r1, #100	@ 0x64
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f000 facd 	bl	8000fbc <setTimer>
  setTimer(1,100);
 8000a22:	2164      	movs	r1, #100	@ 0x64
 8000a24:	2001      	movs	r0, #1
 8000a26:	f000 fac9 	bl	8000fbc <setTimer>
  setTimer(2,100);
 8000a2a:	2164      	movs	r1, #100	@ 0x64
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f000 fac5 	bl	8000fbc <setTimer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {
	  // TIMER 0 /////////////////////////////////////
	  if(timer_flag[0]==1){
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <main+0x6c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d105      	bne.n	8000a46 <main+0x4e>

		  SevenSegLEDsScan();
 8000a3a:	f7ff ff93 	bl	8000964 <SevenSegLEDsScan>
		  setTimer(0,5);
 8000a3e:	2105      	movs	r1, #5
 8000a40:	2000      	movs	r0, #0
 8000a42:	f000 fabb 	bl	8000fbc <setTimer>
	  }

	  // TIMER 1 /////////////////////////////////////
	  if(timer_flag[1]==1){
 8000a46:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <main+0x6c>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d1f1      	bne.n	8000a32 <main+0x3a>
		  KeyLogic();
 8000a4e:	f7ff fc17 	bl	8000280 <KeyLogic>
		  KeyLogic_Action();
 8000a52:	f7ff fd77 	bl	8000544 <KeyLogic_Action>
		  setTimer(1,10);
 8000a56:	210a      	movs	r1, #10
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 faaf 	bl	8000fbc <setTimer>
	  if(timer_flag[0]==1){
 8000a5e:	e7e8      	b.n	8000a32 <main+0x3a>
 8000a60:	2000017c 	.word	0x2000017c
 8000a64:	200001f0 	.word	0x200001f0

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b090      	sub	sp, #64	@ 0x40
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0318 	add.w	r3, r7, #24
 8000a72:	2228      	movs	r2, #40	@ 0x28
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 f8b0 	bl	8002bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a92:	2310      	movs	r3, #16
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9a:	f107 0318 	add.w	r3, r7, #24
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 fe1e 	bl	80016e0 <HAL_RCC_OscConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000aaa:	f000 f94b 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	230f      	movs	r3, #15
 8000ab0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 f88c 	bl	8001be4 <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ad2:	f000 f937 	bl	8000d44 <Error_Handler>
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3740      	adds	r7, #64	@ 0x40
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ae4:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000ae6:	4a18      	ldr	r2, [pc, #96]	@ (8000b48 <MX_SPI1_Init+0x68>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aea:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000aec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000af0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000af2:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b24:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b2c:	220a      	movs	r2, #10
 8000b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b32:	f001 f9b3 	bl	8001e9c <HAL_SPI_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b3c:	f000 f902 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200000cc 	.word	0x200000cc
 8000b48:	40013000 	.word	0x40013000

08000b4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b50:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <MX_SPI2_Init+0x64>)
 8000b52:	4a18      	ldr	r2, [pc, #96]	@ (8000bb4 <MX_SPI2_Init+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b56:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <MX_SPI2_Init+0x64>)
 8000b58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	@ (8000bb0 <MX_SPI2_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <MX_SPI2_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <MX_SPI2_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <MX_SPI2_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <MX_SPI2_Init+0x64>)
 8000b78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <MX_SPI2_Init+0x64>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b84:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <MX_SPI2_Init+0x64>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <MX_SPI2_Init+0x64>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b90:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <MX_SPI2_Init+0x64>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <MX_SPI2_Init+0x64>)
 8000b98:	220a      	movs	r2, #10
 8000b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	@ (8000bb0 <MX_SPI2_Init+0x64>)
 8000b9e:	f001 f97d 	bl	8001e9c <HAL_SPI_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ba8:	f000 f8cc 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000124 	.word	0x20000124
 8000bb4:	40003800 	.word	0x40003800

08000bb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bcc:	463b      	mov	r3, r7
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c4c <MX_TIM2_Init+0x94>)
 8000bd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c4c <MX_TIM2_Init+0x94>)
 8000bde:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000be2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be4:	4b19      	ldr	r3, [pc, #100]	@ (8000c4c <MX_TIM2_Init+0x94>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000bea:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <MX_TIM2_Init+0x94>)
 8000bec:	2209      	movs	r2, #9
 8000bee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf0:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <MX_TIM2_Init+0x94>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf6:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <MX_TIM2_Init+0x94>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bfc:	4813      	ldr	r0, [pc, #76]	@ (8000c4c <MX_TIM2_Init+0x94>)
 8000bfe:	f001 fbbb 	bl	8002378 <HAL_TIM_Base_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c08:	f000 f89c 	bl	8000d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	4619      	mov	r1, r3
 8000c18:	480c      	ldr	r0, [pc, #48]	@ (8000c4c <MX_TIM2_Init+0x94>)
 8000c1a:	f001 fd57 	bl	80026cc <HAL_TIM_ConfigClockSource>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c24:	f000 f88e 	bl	8000d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c30:	463b      	mov	r3, r7
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <MX_TIM2_Init+0x94>)
 8000c36:	f001 ff2d 	bl	8002a94 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c40:	f000 f880 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	2000017c 	.word	0x2000017c

08000c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	4b2f      	ldr	r3, [pc, #188]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a2e      	ldr	r2, [pc, #184]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000c6a:	f043 0304 	orr.w	r3, r3, #4
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b2c      	ldr	r3, [pc, #176]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7c:	4b29      	ldr	r3, [pc, #164]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a28      	ldr	r2, [pc, #160]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000c82:	f043 0308 	orr.w	r3, r3, #8
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b26      	ldr	r3, [pc, #152]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0308 	and.w	r3, r3, #8
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2140      	movs	r1, #64	@ 0x40
 8000c98:	4823      	ldr	r0, [pc, #140]	@ (8000d28 <MX_GPIO_Init+0xd8>)
 8000c9a:	f000 fd08 	bl	80016ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8000ca4:	4821      	ldr	r0, [pc, #132]	@ (8000d2c <MX_GPIO_Init+0xdc>)
 8000ca6:	f000 fd02 	bl	80016ae <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Latch_SPI1_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin;
 8000caa:	2340      	movs	r3, #64	@ 0x40
 8000cac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI1_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4819      	ldr	r0, [pc, #100]	@ (8000d28 <MX_GPIO_Init+0xd8>)
 8000cc2:	f000 fb59 	bl	8001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8000cc6:	231f      	movs	r3, #31
 8000cc8:	60bb      	str	r3, [r7, #8]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4814      	ldr	r0, [pc, #80]	@ (8000d2c <MX_GPIO_Init+0xdc>)
 8000cda:	f000 fb4d 	bl	8001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : Latch_SPI_Pin */
  GPIO_InitStruct.Pin = Latch_SPI_Pin;
 8000cde:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ce2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480d      	ldr	r0, [pc, #52]	@ (8000d2c <MX_GPIO_Init+0xdc>)
 8000cf8:	f000 fb3e 	bl	8001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin OUT2_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin;
 8000cfc:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000d00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <MX_GPIO_Init+0xdc>)
 8000d16:	f000 fb2f 	bl	8001378 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40010800 	.word	0x40010800
 8000d2c:	40010c00 	.word	0x40010c00

08000d30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	timerRun();
 8000d38:	f000 f958 	bl	8000fec <timerRun>

}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <Error_Handler+0x8>

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <HAL_MspInit+0x5c>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	4a14      	ldr	r2, [pc, #80]	@ (8000dac <HAL_MspInit+0x5c>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6193      	str	r3, [r2, #24]
 8000d62:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_MspInit+0x5c>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <HAL_MspInit+0x5c>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	4a0e      	ldr	r2, [pc, #56]	@ (8000dac <HAL_MspInit+0x5c>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d78:	61d3      	str	r3, [r2, #28]
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <HAL_MspInit+0x5c>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d86:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <HAL_MspInit+0x60>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	4a04      	ldr	r2, [pc, #16]	@ (8000db0 <HAL_MspInit+0x60>)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010000 	.word	0x40010000

08000db4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	@ 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0318 	add.w	r3, r7, #24
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a2b      	ldr	r2, [pc, #172]	@ (8000e7c <HAL_SPI_MspInit+0xc8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d124      	bne.n	8000e1e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e80 <HAL_SPI_MspInit+0xcc>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a29      	ldr	r2, [pc, #164]	@ (8000e80 <HAL_SPI_MspInit+0xcc>)
 8000dda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b27      	ldr	r3, [pc, #156]	@ (8000e80 <HAL_SPI_MspInit+0xcc>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b24      	ldr	r3, [pc, #144]	@ (8000e80 <HAL_SPI_MspInit+0xcc>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a23      	ldr	r2, [pc, #140]	@ (8000e80 <HAL_SPI_MspInit+0xcc>)
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	6193      	str	r3, [r2, #24]
 8000df8:	4b21      	ldr	r3, [pc, #132]	@ (8000e80 <HAL_SPI_MspInit+0xcc>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e04:	23a0      	movs	r3, #160	@ 0xa0
 8000e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0318 	add.w	r3, r7, #24
 8000e14:	4619      	mov	r1, r3
 8000e16:	481b      	ldr	r0, [pc, #108]	@ (8000e84 <HAL_SPI_MspInit+0xd0>)
 8000e18:	f000 faae 	bl	8001378 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e1c:	e029      	b.n	8000e72 <HAL_SPI_MspInit+0xbe>
  else if(hspi->Instance==SPI2)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a19      	ldr	r2, [pc, #100]	@ (8000e88 <HAL_SPI_MspInit+0xd4>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d124      	bne.n	8000e72 <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e28:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <HAL_SPI_MspInit+0xcc>)
 8000e2a:	69db      	ldr	r3, [r3, #28]
 8000e2c:	4a14      	ldr	r2, [pc, #80]	@ (8000e80 <HAL_SPI_MspInit+0xcc>)
 8000e2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e32:	61d3      	str	r3, [r2, #28]
 8000e34:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <HAL_SPI_MspInit+0xcc>)
 8000e36:	69db      	ldr	r3, [r3, #28]
 8000e38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e40:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <HAL_SPI_MspInit+0xcc>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a0e      	ldr	r2, [pc, #56]	@ (8000e80 <HAL_SPI_MspInit+0xcc>)
 8000e46:	f043 0308 	orr.w	r3, r3, #8
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <HAL_SPI_MspInit+0xcc>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0308 	and.w	r3, r3, #8
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000e58:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e66:	f107 0318 	add.w	r3, r7, #24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4807      	ldr	r0, [pc, #28]	@ (8000e8c <HAL_SPI_MspInit+0xd8>)
 8000e6e:	f000 fa83 	bl	8001378 <HAL_GPIO_Init>
}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	@ 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40013000 	.word	0x40013000
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010800 	.word	0x40010800
 8000e88:	40003800 	.word	0x40003800
 8000e8c:	40010c00 	.word	0x40010c00

08000e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ea0:	d113      	bne.n	8000eca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x44>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x44>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	61d3      	str	r3, [r2, #28]
 8000eae:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x44>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	201c      	movs	r0, #28
 8000ec0:	f000 fa23 	bl	800130a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ec4:	201c      	movs	r0, #28
 8000ec6:	f000 fa3c 	bl	8001342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <NMI_Handler+0x4>

08000ee0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <MemManage_Handler+0x4>

08000ef0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <UsageFault_Handler+0x4>

08000f00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 f8fc 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <TIM2_IRQHandler+0x10>)
 8000f36:	f001 fac1 	bl	80024bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000017c 	.word	0x2000017c

08000f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f4c:	4a14      	ldr	r2, [pc, #80]	@ (8000fa0 <_sbrk+0x5c>)
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <_sbrk+0x60>)
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f58:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <_sbrk+0x64>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	@ (8000fac <_sbrk+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f74:	f001 fe3a 	bl	8002bec <__errno>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a05      	ldr	r2, [pc, #20]	@ (8000fa8 <_sbrk+0x64>)
 8000f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20005000 	.word	0x20005000
 8000fa4:	00000400 	.word	0x00000400
 8000fa8:	200001c4 	.word	0x200001c4
 8000fac:	20000368 	.word	0x20000368

08000fb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <setTimer>:

#define TIMERNUM 10
int timer_counter[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};
int timer_flag[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};

void setTimer(int INDEX,int duration){
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	timer_counter[INDEX]=duration;
 8000fc6:	4907      	ldr	r1, [pc, #28]	@ (8000fe4 <setTimer+0x28>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[INDEX]=0;
 8000fd0:	4a05      	ldr	r2, [pc, #20]	@ (8000fe8 <setTimer+0x2c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	200001c8 	.word	0x200001c8
 8000fe8:	200001f0 	.word	0x200001f0

08000fec <timerRun>:

void timerRun(){
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
	for(int i=0;i<TIMERNUM;i++){
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	e01c      	b.n	8001032 <timerRun+0x46>
		if(timer_counter[i] > 0){
 8000ff8:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <timerRun+0x58>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001000:	2b00      	cmp	r3, #0
 8001002:	dd13      	ble.n	800102c <timerRun+0x40>
			timer_counter[i]--;
 8001004:	4a0f      	ldr	r2, [pc, #60]	@ (8001044 <timerRun+0x58>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100c:	1e5a      	subs	r2, r3, #1
 800100e:	490d      	ldr	r1, [pc, #52]	@ (8001044 <timerRun+0x58>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <=0){
 8001016:	4a0b      	ldr	r2, [pc, #44]	@ (8001044 <timerRun+0x58>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	2b00      	cmp	r3, #0
 8001020:	dc04      	bgt.n	800102c <timerRun+0x40>
				timer_flag[i]=1;
 8001022:	4a09      	ldr	r2, [pc, #36]	@ (8001048 <timerRun+0x5c>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2101      	movs	r1, #1
 8001028:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<TIMERNUM;i++){
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3301      	adds	r3, #1
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b09      	cmp	r3, #9
 8001036:	dddf      	ble.n	8000ff8 <timerRun+0xc>
			}
		}
	}
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	200001c8 	.word	0x200001c8
 8001048:	200001f0 	.word	0x200001f0

0800104c <Reset_Handler>:
 800104c:	f7ff ffb0 	bl	8000fb0 <SystemInit>
 8001050:	480b      	ldr	r0, [pc, #44]	@ (8001080 <LoopFillZerobss+0xe>)
 8001052:	490c      	ldr	r1, [pc, #48]	@ (8001084 <LoopFillZerobss+0x12>)
 8001054:	4a0c      	ldr	r2, [pc, #48]	@ (8001088 <LoopFillZerobss+0x16>)
 8001056:	2300      	movs	r3, #0
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:
 800105a:	58d4      	ldr	r4, [r2, r3]
 800105c:	50c4      	str	r4, [r0, r3]
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:
 8001060:	18c4      	adds	r4, r0, r3
 8001062:	428c      	cmp	r4, r1
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
 8001066:	4a09      	ldr	r2, [pc, #36]	@ (800108c <LoopFillZerobss+0x1a>)
 8001068:	4c09      	ldr	r4, [pc, #36]	@ (8001090 <LoopFillZerobss+0x1e>)
 800106a:	2300      	movs	r3, #0
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:
 8001072:	42a2      	cmp	r2, r4
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>
 8001076:	f001 fdbf 	bl	8002bf8 <__libc_init_array>
 800107a:	f7ff fcbd 	bl	80009f8 <main>
 800107e:	4770      	bx	lr
 8001080:	20000000 	.word	0x20000000
 8001084:	2000008c 	.word	0x2000008c
 8001088:	080035b8 	.word	0x080035b8
 800108c:	2000008c 	.word	0x2000008c
 8001090:	20000364 	.word	0x20000364

08001094 <ADC1_2_IRQHandler>:
 8001094:	e7fe      	b.n	8001094 <ADC1_2_IRQHandler>
	...

08001098 <HAL_Init>:
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <HAL_Init+0x28>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a07      	ldr	r2, [pc, #28]	@ (80010c0 <HAL_Init+0x28>)
 80010a2:	f043 0310 	orr.w	r3, r3, #16
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	2003      	movs	r0, #3
 80010aa:	f000 f923 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>
 80010ae:	200f      	movs	r0, #15
 80010b0:	f000 f808 	bl	80010c4 <HAL_InitTick>
 80010b4:	f7ff fe4c 	bl	8000d50 <HAL_MspInit>
 80010b8:	2300      	movs	r3, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40022000 	.word	0x40022000

080010c4 <HAL_InitTick>:
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <HAL_InitTick+0x54>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_InitTick+0x58>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010da:	fbb3 f3f1 	udiv	r3, r3, r1
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f93b 	bl	800135e <HAL_SYSTICK_Config>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_InitTick+0x2e>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00e      	b.n	8001110 <HAL_InitTick+0x4c>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	d80a      	bhi.n	800110e <HAL_InitTick+0x4a>
 80010f8:	2200      	movs	r2, #0
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f000 f903 	bl	800130a <HAL_NVIC_SetPriority>
 8001104:	4a06      	ldr	r2, [pc, #24]	@ (8001120 <HAL_InitTick+0x5c>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <HAL_InitTick+0x4c>
 800110e:	2301      	movs	r3, #1
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000030 	.word	0x20000030
 800111c:	20000038 	.word	0x20000038
 8001120:	20000034 	.word	0x20000034

08001124 <HAL_IncTick>:
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <HAL_IncTick+0x1c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <HAL_IncTick+0x20>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a03      	ldr	r2, [pc, #12]	@ (8001144 <HAL_IncTick+0x20>)
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	20000038 	.word	0x20000038
 8001144:	20000218 	.word	0x20000218

08001148 <HAL_GetTick>:
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
 800114c:	4b02      	ldr	r3, [pc, #8]	@ (8001158 <HAL_GetTick+0x10>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	20000218 	.word	0x20000218

0800115c <__NVIC_SetPriorityGrouping>:
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001178:	4013      	ands	r3, r2
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	021a      	lsls	r2, r3, #8
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4313      	orrs	r3, r2
 8001184:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	4a04      	ldr	r2, [pc, #16]	@ (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	60d3      	str	r3, [r2, #12]
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_GetPriorityGrouping>:
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_EnableIRQ>:
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	db0b      	blt.n	80011ea <__NVIC_EnableIRQ+0x2a>
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 021f 	and.w	r2, r3, #31
 80011d8:	4906      	ldr	r1, [pc, #24]	@ (80011f4 <__NVIC_EnableIRQ+0x34>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	2001      	movs	r0, #1
 80011e2:	fa00 f202 	lsl.w	r2, r0, r2
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <__NVIC_SetPriority>:
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	@ (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	@ (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	@ 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
 80012a4:	4313      	orrs	r3, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	@ 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Config>:
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
 80012c6:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
 80012ce:	210f      	movs	r1, #15
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f7ff ff90 	bl	80011f8 <__NVIC_SetPriority>
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	2300      	movs	r3, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff2d 	bl	800115c <__NVIC_SetPriorityGrouping>
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	f7ff ff42 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 8001320:	6178      	str	r0, [r7, #20]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6978      	ldr	r0, [r7, #20]
 8001328:	f7ff ff90 	bl	800124c <NVIC_EncodePriority>
 800132c:	4602      	mov	r2, r0
 800132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff5f 	bl	80011f8 <__NVIC_SetPriority>
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_EnableIRQ>:
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff35 	bl	80011c0 <__NVIC_EnableIRQ>
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_SYSTICK_Config>:
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ffa2 	bl	80012b0 <SysTick_Config>
 800136c:	4603      	mov	r3, r0
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_GPIO_Init>:
 8001378:	b480      	push	{r7}
 800137a:	b08b      	sub	sp, #44	@ 0x2c
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
 800138a:	e169      	b.n	8001660 <HAL_GPIO_Init+0x2e8>
 800138c:	2201      	movs	r2, #1
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	69fa      	ldr	r2, [r7, #28]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	f040 8158 	bne.w	800165a <HAL_GPIO_Init+0x2e2>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	4a9a      	ldr	r2, [pc, #616]	@ (8001618 <HAL_GPIO_Init+0x2a0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d05e      	beq.n	8001472 <HAL_GPIO_Init+0xfa>
 80013b4:	4a98      	ldr	r2, [pc, #608]	@ (8001618 <HAL_GPIO_Init+0x2a0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d875      	bhi.n	80014a6 <HAL_GPIO_Init+0x12e>
 80013ba:	4a98      	ldr	r2, [pc, #608]	@ (800161c <HAL_GPIO_Init+0x2a4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d058      	beq.n	8001472 <HAL_GPIO_Init+0xfa>
 80013c0:	4a96      	ldr	r2, [pc, #600]	@ (800161c <HAL_GPIO_Init+0x2a4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d86f      	bhi.n	80014a6 <HAL_GPIO_Init+0x12e>
 80013c6:	4a96      	ldr	r2, [pc, #600]	@ (8001620 <HAL_GPIO_Init+0x2a8>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d052      	beq.n	8001472 <HAL_GPIO_Init+0xfa>
 80013cc:	4a94      	ldr	r2, [pc, #592]	@ (8001620 <HAL_GPIO_Init+0x2a8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d869      	bhi.n	80014a6 <HAL_GPIO_Init+0x12e>
 80013d2:	4a94      	ldr	r2, [pc, #592]	@ (8001624 <HAL_GPIO_Init+0x2ac>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d04c      	beq.n	8001472 <HAL_GPIO_Init+0xfa>
 80013d8:	4a92      	ldr	r2, [pc, #584]	@ (8001624 <HAL_GPIO_Init+0x2ac>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d863      	bhi.n	80014a6 <HAL_GPIO_Init+0x12e>
 80013de:	4a92      	ldr	r2, [pc, #584]	@ (8001628 <HAL_GPIO_Init+0x2b0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d046      	beq.n	8001472 <HAL_GPIO_Init+0xfa>
 80013e4:	4a90      	ldr	r2, [pc, #576]	@ (8001628 <HAL_GPIO_Init+0x2b0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d85d      	bhi.n	80014a6 <HAL_GPIO_Init+0x12e>
 80013ea:	2b12      	cmp	r3, #18
 80013ec:	d82a      	bhi.n	8001444 <HAL_GPIO_Init+0xcc>
 80013ee:	2b12      	cmp	r3, #18
 80013f0:	d859      	bhi.n	80014a6 <HAL_GPIO_Init+0x12e>
 80013f2:	a201      	add	r2, pc, #4	@ (adr r2, 80013f8 <HAL_GPIO_Init+0x80>)
 80013f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f8:	08001473 	.word	0x08001473
 80013fc:	0800144d 	.word	0x0800144d
 8001400:	0800145f 	.word	0x0800145f
 8001404:	080014a1 	.word	0x080014a1
 8001408:	080014a7 	.word	0x080014a7
 800140c:	080014a7 	.word	0x080014a7
 8001410:	080014a7 	.word	0x080014a7
 8001414:	080014a7 	.word	0x080014a7
 8001418:	080014a7 	.word	0x080014a7
 800141c:	080014a7 	.word	0x080014a7
 8001420:	080014a7 	.word	0x080014a7
 8001424:	080014a7 	.word	0x080014a7
 8001428:	080014a7 	.word	0x080014a7
 800142c:	080014a7 	.word	0x080014a7
 8001430:	080014a7 	.word	0x080014a7
 8001434:	080014a7 	.word	0x080014a7
 8001438:	080014a7 	.word	0x080014a7
 800143c:	08001455 	.word	0x08001455
 8001440:	08001469 	.word	0x08001469
 8001444:	4a79      	ldr	r2, [pc, #484]	@ (800162c <HAL_GPIO_Init+0x2b4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d013      	beq.n	8001472 <HAL_GPIO_Init+0xfa>
 800144a:	e02c      	b.n	80014a6 <HAL_GPIO_Init+0x12e>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	623b      	str	r3, [r7, #32]
 8001452:	e029      	b.n	80014a8 <HAL_GPIO_Init+0x130>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	3304      	adds	r3, #4
 800145a:	623b      	str	r3, [r7, #32]
 800145c:	e024      	b.n	80014a8 <HAL_GPIO_Init+0x130>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	3308      	adds	r3, #8
 8001464:	623b      	str	r3, [r7, #32]
 8001466:	e01f      	b.n	80014a8 <HAL_GPIO_Init+0x130>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	330c      	adds	r3, #12
 800146e:	623b      	str	r3, [r7, #32]
 8001470:	e01a      	b.n	80014a8 <HAL_GPIO_Init+0x130>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <HAL_GPIO_Init+0x108>
 800147a:	2304      	movs	r3, #4
 800147c:	623b      	str	r3, [r7, #32]
 800147e:	e013      	b.n	80014a8 <HAL_GPIO_Init+0x130>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d105      	bne.n	8001494 <HAL_GPIO_Init+0x11c>
 8001488:	2308      	movs	r3, #8
 800148a:	623b      	str	r3, [r7, #32]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	611a      	str	r2, [r3, #16]
 8001492:	e009      	b.n	80014a8 <HAL_GPIO_Init+0x130>
 8001494:	2308      	movs	r3, #8
 8001496:	623b      	str	r3, [r7, #32]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69fa      	ldr	r2, [r7, #28]
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	e003      	b.n	80014a8 <HAL_GPIO_Init+0x130>
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
 80014a4:	e000      	b.n	80014a8 <HAL_GPIO_Init+0x130>
 80014a6:	bf00      	nop
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	2bff      	cmp	r3, #255	@ 0xff
 80014ac:	d801      	bhi.n	80014b2 <HAL_GPIO_Init+0x13a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	e001      	b.n	80014b6 <HAL_GPIO_Init+0x13e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3304      	adds	r3, #4
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2bff      	cmp	r3, #255	@ 0xff
 80014bc:	d802      	bhi.n	80014c4 <HAL_GPIO_Init+0x14c>
 80014be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	e002      	b.n	80014ca <HAL_GPIO_Init+0x152>
 80014c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c6:	3b08      	subs	r3, #8
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	210f      	movs	r1, #15
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	fa01 f303 	lsl.w	r3, r1, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	401a      	ands	r2, r3
 80014dc:	6a39      	ldr	r1, [r7, #32]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	fa01 f303 	lsl.w	r3, r1, r3
 80014e4:	431a      	orrs	r2, r3
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 80b1 	beq.w	800165a <HAL_GPIO_Init+0x2e2>
 80014f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001630 <HAL_GPIO_Init+0x2b8>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001630 <HAL_GPIO_Init+0x2b8>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b4a      	ldr	r3, [pc, #296]	@ (8001630 <HAL_GPIO_Init+0x2b8>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	4a48      	ldr	r2, [pc, #288]	@ (8001634 <HAL_GPIO_Init+0x2bc>)
 8001512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001514:	089b      	lsrs	r3, r3, #2
 8001516:	3302      	adds	r3, #2
 8001518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	220f      	movs	r2, #15
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	4013      	ands	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a40      	ldr	r2, [pc, #256]	@ (8001638 <HAL_GPIO_Init+0x2c0>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d013      	beq.n	8001564 <HAL_GPIO_Init+0x1ec>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a3f      	ldr	r2, [pc, #252]	@ (800163c <HAL_GPIO_Init+0x2c4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d00d      	beq.n	8001560 <HAL_GPIO_Init+0x1e8>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a3e      	ldr	r2, [pc, #248]	@ (8001640 <HAL_GPIO_Init+0x2c8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d007      	beq.n	800155c <HAL_GPIO_Init+0x1e4>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a3d      	ldr	r2, [pc, #244]	@ (8001644 <HAL_GPIO_Init+0x2cc>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d101      	bne.n	8001558 <HAL_GPIO_Init+0x1e0>
 8001554:	2303      	movs	r3, #3
 8001556:	e006      	b.n	8001566 <HAL_GPIO_Init+0x1ee>
 8001558:	2304      	movs	r3, #4
 800155a:	e004      	b.n	8001566 <HAL_GPIO_Init+0x1ee>
 800155c:	2302      	movs	r3, #2
 800155e:	e002      	b.n	8001566 <HAL_GPIO_Init+0x1ee>
 8001560:	2301      	movs	r3, #1
 8001562:	e000      	b.n	8001566 <HAL_GPIO_Init+0x1ee>
 8001564:	2300      	movs	r3, #0
 8001566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001568:	f002 0203 	and.w	r2, r2, #3
 800156c:	0092      	lsls	r2, r2, #2
 800156e:	4093      	lsls	r3, r2
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	492f      	ldr	r1, [pc, #188]	@ (8001634 <HAL_GPIO_Init+0x2bc>)
 8001578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3302      	adds	r3, #2
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_GPIO_Init+0x226>
 8001590:	4b2d      	ldr	r3, [pc, #180]	@ (8001648 <HAL_GPIO_Init+0x2d0>)
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	492c      	ldr	r1, [pc, #176]	@ (8001648 <HAL_GPIO_Init+0x2d0>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	608b      	str	r3, [r1, #8]
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x234>
 800159e:	4b2a      	ldr	r3, [pc, #168]	@ (8001648 <HAL_GPIO_Init+0x2d0>)
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	4928      	ldr	r1, [pc, #160]	@ (8001648 <HAL_GPIO_Init+0x2d0>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	608b      	str	r3, [r1, #8]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <HAL_GPIO_Init+0x24e>
 80015b8:	4b23      	ldr	r3, [pc, #140]	@ (8001648 <HAL_GPIO_Init+0x2d0>)
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	4922      	ldr	r1, [pc, #136]	@ (8001648 <HAL_GPIO_Init+0x2d0>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	60cb      	str	r3, [r1, #12]
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x25c>
 80015c6:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <HAL_GPIO_Init+0x2d0>)
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	491e      	ldr	r1, [pc, #120]	@ (8001648 <HAL_GPIO_Init+0x2d0>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	60cb      	str	r3, [r1, #12]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d006      	beq.n	80015ee <HAL_GPIO_Init+0x276>
 80015e0:	4b19      	ldr	r3, [pc, #100]	@ (8001648 <HAL_GPIO_Init+0x2d0>)
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4918      	ldr	r1, [pc, #96]	@ (8001648 <HAL_GPIO_Init+0x2d0>)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
 80015ec:	e006      	b.n	80015fc <HAL_GPIO_Init+0x284>
 80015ee:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <HAL_GPIO_Init+0x2d0>)
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	4914      	ldr	r1, [pc, #80]	@ (8001648 <HAL_GPIO_Init+0x2d0>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d021      	beq.n	800164c <HAL_GPIO_Init+0x2d4>
 8001608:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <HAL_GPIO_Init+0x2d0>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	490e      	ldr	r1, [pc, #56]	@ (8001648 <HAL_GPIO_Init+0x2d0>)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	600b      	str	r3, [r1, #0]
 8001614:	e021      	b.n	800165a <HAL_GPIO_Init+0x2e2>
 8001616:	bf00      	nop
 8001618:	10320000 	.word	0x10320000
 800161c:	10310000 	.word	0x10310000
 8001620:	10220000 	.word	0x10220000
 8001624:	10210000 	.word	0x10210000
 8001628:	10120000 	.word	0x10120000
 800162c:	10110000 	.word	0x10110000
 8001630:	40021000 	.word	0x40021000
 8001634:	40010000 	.word	0x40010000
 8001638:	40010800 	.word	0x40010800
 800163c:	40010c00 	.word	0x40010c00
 8001640:	40011000 	.word	0x40011000
 8001644:	40011400 	.word	0x40011400
 8001648:	40010400 	.word	0x40010400
 800164c:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <HAL_GPIO_Init+0x304>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	43db      	mvns	r3, r3
 8001654:	4909      	ldr	r1, [pc, #36]	@ (800167c <HAL_GPIO_Init+0x304>)
 8001656:	4013      	ands	r3, r2
 8001658:	600b      	str	r3, [r1, #0]
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	3301      	adds	r3, #1
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001666:	fa22 f303 	lsr.w	r3, r2, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	f47f ae8e 	bne.w	800138c <HAL_GPIO_Init+0x14>
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	372c      	adds	r7, #44	@ 0x2c
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	40010400 	.word	0x40010400

08001680 <HAL_GPIO_ReadPin>:
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	887b      	ldrh	r3, [r7, #2]
 8001692:	4013      	ands	r3, r2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <HAL_GPIO_ReadPin+0x1e>
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e001      	b.n	80016a2 <HAL_GPIO_ReadPin+0x22>
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <HAL_GPIO_WritePin>:
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	807b      	strh	r3, [r7, #2]
 80016ba:	4613      	mov	r3, r2
 80016bc:	707b      	strb	r3, [r7, #1]
 80016be:	787b      	ldrb	r3, [r7, #1]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_WritePin+0x1e>
 80016c4:	887a      	ldrh	r2, [r7, #2]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	e003      	b.n	80016d4 <HAL_GPIO_WritePin+0x26>
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	041a      	lsls	r2, r3, #16
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
	...

080016e0 <HAL_RCC_OscConfig>:
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_OscConfig+0x12>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e272      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8087 	beq.w	800180e <HAL_RCC_OscConfig+0x12e>
 8001700:	4b92      	ldr	r3, [pc, #584]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b04      	cmp	r3, #4
 800170a:	d00c      	beq.n	8001726 <HAL_RCC_OscConfig+0x46>
 800170c:	4b8f      	ldr	r3, [pc, #572]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b08      	cmp	r3, #8
 8001716:	d112      	bne.n	800173e <HAL_RCC_OscConfig+0x5e>
 8001718:	4b8c      	ldr	r3, [pc, #560]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001724:	d10b      	bne.n	800173e <HAL_RCC_OscConfig+0x5e>
 8001726:	4b89      	ldr	r3, [pc, #548]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d06c      	beq.n	800180c <HAL_RCC_OscConfig+0x12c>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d168      	bne.n	800180c <HAL_RCC_OscConfig+0x12c>
 800173a:	2301      	movs	r3, #1
 800173c:	e24c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x76>
 8001748:	4b80      	ldr	r3, [pc, #512]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a7f      	ldr	r2, [pc, #508]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 800174e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e02e      	b.n	80017b4 <HAL_RCC_OscConfig+0xd4>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x98>
 800175e:	4b7b      	ldr	r3, [pc, #492]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a7a      	ldr	r2, [pc, #488]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b78      	ldr	r3, [pc, #480]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a77      	ldr	r2, [pc, #476]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001770:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e01d      	b.n	80017b4 <HAL_RCC_OscConfig+0xd4>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0xbc>
 8001782:	4b72      	ldr	r3, [pc, #456]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a71      	ldr	r2, [pc, #452]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b6f      	ldr	r3, [pc, #444]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a6e      	ldr	r2, [pc, #440]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0xd4>
 800179c:	4b6b      	ldr	r3, [pc, #428]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a6a      	ldr	r2, [pc, #424]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b68      	ldr	r3, [pc, #416]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a67      	ldr	r2, [pc, #412]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 80017ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_OscConfig+0x104>
 80017bc:	f7ff fcc4 	bl	8001148 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0xf6>
 80017c4:	f7ff fcc0 	bl	8001148 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	@ 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xf6>
 80017d2:	2303      	movs	r3, #3
 80017d4:	e200      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 80017d6:	4b5d      	ldr	r3, [pc, #372]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0xe4>
 80017e2:	e014      	b.n	800180e <HAL_RCC_OscConfig+0x12e>
 80017e4:	f7ff fcb0 	bl	8001148 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x11e>
 80017ec:	f7ff fcac 	bl	8001148 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	@ 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x11e>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e1ec      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 80017fe:	4b53      	ldr	r3, [pc, #332]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x10c>
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x12e>
 800180c:	bf00      	nop
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d063      	beq.n	80018e2 <HAL_RCC_OscConfig+0x202>
 800181a:	4b4c      	ldr	r3, [pc, #304]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_RCC_OscConfig+0x15e>
 8001826:	4b49      	ldr	r3, [pc, #292]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b08      	cmp	r3, #8
 8001830:	d11c      	bne.n	800186c <HAL_RCC_OscConfig+0x18c>
 8001832:	4b46      	ldr	r3, [pc, #280]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d116      	bne.n	800186c <HAL_RCC_OscConfig+0x18c>
 800183e:	4b43      	ldr	r3, [pc, #268]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_RCC_OscConfig+0x176>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x176>
 8001852:	2301      	movs	r3, #1
 8001854:	e1c0      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 8001856:	4b3d      	ldr	r3, [pc, #244]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4939      	ldr	r1, [pc, #228]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
 800186a:	e03a      	b.n	80018e2 <HAL_RCC_OscConfig+0x202>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1d6>
 8001874:	4b36      	ldr	r3, [pc, #216]	@ (8001950 <HAL_RCC_OscConfig+0x270>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	f7ff fc65 	bl	8001148 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x1b4>
 8001882:	f7ff fc61 	bl	8001148 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x1b4>
 8001890:	2303      	movs	r3, #3
 8001892:	e1a1      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 8001894:	4b2d      	ldr	r3, [pc, #180]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x1a2>
 80018a0:	4b2a      	ldr	r3, [pc, #168]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4927      	ldr	r1, [pc, #156]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]
 80018b4:	e015      	b.n	80018e2 <HAL_RCC_OscConfig+0x202>
 80018b6:	4b26      	ldr	r3, [pc, #152]	@ (8001950 <HAL_RCC_OscConfig+0x270>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	f7ff fc44 	bl	8001148 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x1f6>
 80018c4:	f7ff fc40 	bl	8001148 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x1f6>
 80018d2:	2303      	movs	r3, #3
 80018d4:	e180      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 80018d6:	4b1d      	ldr	r3, [pc, #116]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1e4>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d03a      	beq.n	8001964 <HAL_RCC_OscConfig+0x284>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d019      	beq.n	800192a <HAL_RCC_OscConfig+0x24a>
 80018f6:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <HAL_RCC_OscConfig+0x274>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	f7ff fc24 	bl	8001148 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x236>
 8001904:	f7ff fc20 	bl	8001148 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x236>
 8001912:	2303      	movs	r3, #3
 8001914:	e160      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 8001916:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <HAL_RCC_OscConfig+0x26c>)
 8001918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x224>
 8001922:	2001      	movs	r0, #1
 8001924:	f000 fa9c 	bl	8001e60 <RCC_Delay>
 8001928:	e01c      	b.n	8001964 <HAL_RCC_OscConfig+0x284>
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_RCC_OscConfig+0x274>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	f7ff fc0a 	bl	8001148 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]
 8001936:	e00f      	b.n	8001958 <HAL_RCC_OscConfig+0x278>
 8001938:	f7ff fc06 	bl	8001148 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d908      	bls.n	8001958 <HAL_RCC_OscConfig+0x278>
 8001946:	2303      	movs	r3, #3
 8001948:	e146      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	42420000 	.word	0x42420000
 8001954:	42420480 	.word	0x42420480
 8001958:	4b92      	ldr	r3, [pc, #584]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1e9      	bne.n	8001938 <HAL_RCC_OscConfig+0x258>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80a6 	beq.w	8001abe <HAL_RCC_OscConfig+0x3de>
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]
 8001976:	4b8b      	ldr	r3, [pc, #556]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10d      	bne.n	800199e <HAL_RCC_OscConfig+0x2be>
 8001982:	4b88      	ldr	r3, [pc, #544]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a87      	ldr	r2, [pc, #540]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b85      	ldr	r3, [pc, #532]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2301      	movs	r3, #1
 800199c:	75fb      	strb	r3, [r7, #23]
 800199e:	4b82      	ldr	r3, [pc, #520]	@ (8001ba8 <HAL_RCC_OscConfig+0x4c8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d118      	bne.n	80019dc <HAL_RCC_OscConfig+0x2fc>
 80019aa:	4b7f      	ldr	r3, [pc, #508]	@ (8001ba8 <HAL_RCC_OscConfig+0x4c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a7e      	ldr	r2, [pc, #504]	@ (8001ba8 <HAL_RCC_OscConfig+0x4c8>)
 80019b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	f7ff fbc7 	bl	8001148 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x2f0>
 80019be:	f7ff fbc3 	bl	8001148 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b64      	cmp	r3, #100	@ 0x64
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x2f0>
 80019cc:	2303      	movs	r3, #3
 80019ce:	e103      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 80019d0:	4b75      	ldr	r3, [pc, #468]	@ (8001ba8 <HAL_RCC_OscConfig+0x4c8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x2de>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d106      	bne.n	80019f2 <HAL_RCC_OscConfig+0x312>
 80019e4:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4a6e      	ldr	r2, [pc, #440]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6213      	str	r3, [r2, #32]
 80019f0:	e02d      	b.n	8001a4e <HAL_RCC_OscConfig+0x36e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x334>
 80019fa:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	4a69      	ldr	r2, [pc, #420]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	f023 0301 	bic.w	r3, r3, #1
 8001a04:	6213      	str	r3, [r2, #32]
 8001a06:	4b67      	ldr	r3, [pc, #412]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4a66      	ldr	r2, [pc, #408]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	f023 0304 	bic.w	r3, r3, #4
 8001a10:	6213      	str	r3, [r2, #32]
 8001a12:	e01c      	b.n	8001a4e <HAL_RCC_OscConfig+0x36e>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b05      	cmp	r3, #5
 8001a1a:	d10c      	bne.n	8001a36 <HAL_RCC_OscConfig+0x356>
 8001a1c:	4b61      	ldr	r3, [pc, #388]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	4a60      	ldr	r2, [pc, #384]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	6213      	str	r3, [r2, #32]
 8001a28:	4b5e      	ldr	r3, [pc, #376]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6213      	str	r3, [r2, #32]
 8001a34:	e00b      	b.n	8001a4e <HAL_RCC_OscConfig+0x36e>
 8001a36:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	6213      	str	r3, [r2, #32]
 8001a42:	4b58      	ldr	r3, [pc, #352]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a57      	ldr	r2, [pc, #348]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	f023 0304 	bic.w	r3, r3, #4
 8001a4c:	6213      	str	r3, [r2, #32]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d015      	beq.n	8001a82 <HAL_RCC_OscConfig+0x3a2>
 8001a56:	f7ff fb77 	bl	8001148 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]
 8001a5c:	e00a      	b.n	8001a74 <HAL_RCC_OscConfig+0x394>
 8001a5e:	f7ff fb73 	bl	8001148 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x394>
 8001a70:	2303      	movs	r3, #3
 8001a72:	e0b1      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 8001a74:	4b4b      	ldr	r3, [pc, #300]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0ee      	beq.n	8001a5e <HAL_RCC_OscConfig+0x37e>
 8001a80:	e014      	b.n	8001aac <HAL_RCC_OscConfig+0x3cc>
 8001a82:	f7ff fb61 	bl	8001148 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]
 8001a88:	e00a      	b.n	8001aa0 <HAL_RCC_OscConfig+0x3c0>
 8001a8a:	f7ff fb5d 	bl	8001148 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x3c0>
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e09b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 8001aa0:	4b40      	ldr	r3, [pc, #256]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1ee      	bne.n	8001a8a <HAL_RCC_OscConfig+0x3aa>
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d105      	bne.n	8001abe <HAL_RCC_OscConfig+0x3de>
 8001ab2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001abc:	61d3      	str	r3, [r2, #28]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 8087 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x4f6>
 8001ac8:	4b36      	ldr	r3, [pc, #216]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d061      	beq.n	8001b98 <HAL_RCC_OscConfig+0x4b8>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d146      	bne.n	8001b6a <HAL_RCC_OscConfig+0x48a>
 8001adc:	4b33      	ldr	r3, [pc, #204]	@ (8001bac <HAL_RCC_OscConfig+0x4cc>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	f7ff fb31 	bl	8001148 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x41c>
 8001aea:	f7ff fb2d 	bl	8001148 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x41c>
 8001af8:	2303      	movs	r3, #3
 8001afa:	e06d      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 8001afc:	4b29      	ldr	r3, [pc, #164]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x40a>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b10:	d108      	bne.n	8001b24 <HAL_RCC_OscConfig+0x444>
 8001b12:	4b24      	ldr	r3, [pc, #144]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	4921      	ldr	r1, [pc, #132]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
 8001b24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a19      	ldr	r1, [r3, #32]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b34:	430b      	orrs	r3, r1
 8001b36:	491b      	ldr	r1, [pc, #108]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <HAL_RCC_OscConfig+0x4cc>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	f7ff fb01 	bl	8001148 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x47c>
 8001b4a:	f7ff fafd 	bl	8001148 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x47c>
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e03d      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x46a>
 8001b68:	e035      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4f6>
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <HAL_RCC_OscConfig+0x4cc>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	f7ff faea 	bl	8001148 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x4aa>
 8001b78:	f7ff fae6 	bl	8001148 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x4aa>
 8001b86:	2303      	movs	r3, #3
 8001b88:	e026      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 8001b8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x498>
 8001b96:	e01e      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4f6>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d107      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x4d0>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e019      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	42420060 	.word	0x42420060
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <HAL_RCC_OscConfig+0x500>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x4f2>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x4f6>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000

08001be4 <HAL_RCC_ClockConfig>:
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x14>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0d0      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
 8001bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d910      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x44>
 8001c06:	4b67      	ldr	r3, [pc, #412]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 0207 	bic.w	r2, r3, #7
 8001c0e:	4965      	ldr	r1, [pc, #404]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]
 8001c16:	4b63      	ldr	r3, [pc, #396]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x44>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0b8      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d020      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x92>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x68>
 8001c40:	4b59      	ldr	r3, [pc, #356]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a58      	ldr	r2, [pc, #352]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c4a:	6053      	str	r3, [r2, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x80>
 8001c58:	4b53      	ldr	r3, [pc, #332]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c62:	6053      	str	r3, [r2, #4]
 8001c64:	4b50      	ldr	r3, [pc, #320]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	494d      	ldr	r1, [pc, #308]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	604b      	str	r3, [r1, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d040      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x120>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xb6>
 8001c8a:	4b47      	ldr	r3, [pc, #284]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d115      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e07f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xce>
 8001ca2:	4b41      	ldr	r3, [pc, #260]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e073      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e06b      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
 8001cc2:	4b39      	ldr	r3, [pc, #228]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f023 0203 	bic.w	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4936      	ldr	r1, [pc, #216]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
 8001cd4:	f7ff fa38 	bl	8001148 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x10e>
 8001cdc:	f7ff fa34 	bl	8001148 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x10e>
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e053      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 020c 	and.w	r2, r3, #12
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d1eb      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xf8>
 8001d04:	4b27      	ldr	r3, [pc, #156]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d210      	bcs.n	8001d34 <HAL_RCC_ClockConfig+0x150>
 8001d12:	4b24      	ldr	r3, [pc, #144]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 0207 	bic.w	r2, r3, #7
 8001d1a:	4922      	ldr	r1, [pc, #136]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
 8001d22:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x150>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e032      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x16e>
 8001d40:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4916      	ldr	r1, [pc, #88]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x18e>
 8001d5e:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	490e      	ldr	r1, [pc, #56]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	604b      	str	r3, [r1, #4]
 8001d72:	f000 f821 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	490a      	ldr	r1, [pc, #40]	@ (8001dac <HAL_RCC_ClockConfig+0x1c8>)
 8001d84:	5ccb      	ldrb	r3, [r1, r3]
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	4a09      	ldr	r2, [pc, #36]	@ (8001db0 <HAL_RCC_ClockConfig+0x1cc>)
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <HAL_RCC_ClockConfig+0x1d0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f996 	bl	80010c4 <HAL_InitTick>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40022000 	.word	0x40022000
 8001da8:	40021000 	.word	0x40021000
 8001dac:	08003550 	.word	0x08003550
 8001db0:	20000030 	.word	0x20000030
 8001db4:	20000034 	.word	0x20000034

08001db8 <HAL_RCC_GetSysClockFreq>:
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d002      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0x30>
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d003      	beq.n	8001dee <HAL_RCC_GetSysClockFreq+0x36>
 8001de6:	e027      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x80>
 8001de8:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	e027      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x86>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	0c9b      	lsrs	r3, r3, #18
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	4a17      	ldr	r2, [pc, #92]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001df8:	5cd3      	ldrb	r3, [r2, r3]
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d010      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x70>
 8001e06:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	0c5b      	lsrs	r3, r3, #17
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	4a11      	ldr	r2, [pc, #68]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a0d      	ldr	r2, [pc, #52]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e1a:	fb03 f202 	mul.w	r2, r3, r2
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	e004      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x7a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	e002      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x86>
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	bf00      	nop
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4618      	mov	r0, r3
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	007a1200 	.word	0x007a1200
 8001e54:	08003560 	.word	0x08003560
 8001e58:	08003570 	.word	0x08003570
 8001e5c:	003d0900 	.word	0x003d0900

08001e60 <RCC_Delay>:
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <RCC_Delay+0x34>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <RCC_Delay+0x38>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	0a5b      	lsrs	r3, r3, #9
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	bf00      	nop
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1e5a      	subs	r2, r3, #1
 8001e82:	60fa      	str	r2, [r7, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f9      	bne.n	8001e7c <RCC_Delay+0x1c>
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	20000030 	.word	0x20000030
 8001e98:	10624dd3 	.word	0x10624dd3

08001e9c <HAL_SPI_Init>:
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_SPI_Init+0x12>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e076      	b.n	8001f9c <HAL_SPI_Init+0x100>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d108      	bne.n	8001ec8 <HAL_SPI_Init+0x2c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ebe:	d009      	beq.n	8001ed4 <HAL_SPI_Init+0x38>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
 8001ec6:	e005      	b.n	8001ed4 <HAL_SPI_Init+0x38>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	615a      	str	r2, [r3, #20]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_SPI_Init+0x58>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe ff60 	bl	8000db4 <HAL_SPI_MspInit>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f58:	ea42 0103 	orr.w	r1, r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f60:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	0c1a      	lsrs	r2, r3, #16
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f002 0204 	and.w	r2, r2, #4
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	69da      	ldr	r2, [r3, #28]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f8a:	61da      	str	r2, [r3, #28]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_SPI_Transmit>:
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	80fb      	strh	r3, [r7, #6]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	77fb      	strb	r3, [r7, #31]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_SPI_Transmit+0x22>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e12d      	b.n	8002222 <HAL_SPI_Transmit+0x27e>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001fce:	f7ff f8bb 	bl	8001148 <HAL_GetTick>
 8001fd2:	61b8      	str	r0, [r7, #24]
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	82fb      	strh	r3, [r7, #22]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d002      	beq.n	8001fea <HAL_SPI_Transmit+0x46>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	77fb      	strb	r3, [r7, #31]
 8001fe8:	e116      	b.n	8002218 <HAL_SPI_Transmit+0x274>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d002      	beq.n	8001ff6 <HAL_SPI_Transmit+0x52>
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <HAL_SPI_Transmit+0x58>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	77fb      	strb	r3, [r7, #31]
 8001ffa:	e10d      	b.n	8002218 <HAL_SPI_Transmit+0x274>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2203      	movs	r2, #3
 8002000:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	655a      	str	r2, [r3, #84]	@ 0x54
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	88fa      	ldrh	r2, [r7, #6]
 8002014:	869a      	strh	r2, [r3, #52]	@ 0x34
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	88fa      	ldrh	r2, [r7, #6]
 800201a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	639a      	str	r2, [r3, #56]	@ 0x38
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	645a      	str	r2, [r3, #68]	@ 0x44
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	641a      	str	r2, [r3, #64]	@ 0x40
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002042:	d10f      	bne.n	8002064 <HAL_SPI_Transmit+0xc0>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800206e:	2b40      	cmp	r3, #64	@ 0x40
 8002070:	d007      	beq.n	8002082 <HAL_SPI_Transmit+0xde>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800208a:	d14f      	bne.n	800212c <HAL_SPI_Transmit+0x188>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <HAL_SPI_Transmit+0xf6>
 8002094:	8afb      	ldrh	r3, [r7, #22]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d142      	bne.n	8002120 <HAL_SPI_Transmit+0x17c>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	881a      	ldrh	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	1c9a      	adds	r2, r3, #2
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020be:	e02f      	b.n	8002120 <HAL_SPI_Transmit+0x17c>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d112      	bne.n	80020f4 <HAL_SPI_Transmit+0x150>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	881a      	ldrh	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	1c9a      	adds	r2, r3, #2
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020f2:	e015      	b.n	8002120 <HAL_SPI_Transmit+0x17c>
 80020f4:	f7ff f828 	bl	8001148 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d803      	bhi.n	800210c <HAL_SPI_Transmit+0x168>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210a:	d102      	bne.n	8002112 <HAL_SPI_Transmit+0x16e>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <HAL_SPI_Transmit+0x17c>
 8002112:	2303      	movs	r3, #3
 8002114:	77fb      	strb	r3, [r7, #31]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800211e:	e07b      	b.n	8002218 <HAL_SPI_Transmit+0x274>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ca      	bne.n	80020c0 <HAL_SPI_Transmit+0x11c>
 800212a:	e050      	b.n	80021ce <HAL_SPI_Transmit+0x22a>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_SPI_Transmit+0x196>
 8002134:	8afb      	ldrh	r3, [r7, #22]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d144      	bne.n	80021c4 <HAL_SPI_Transmit+0x220>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	330c      	adds	r3, #12
 8002144:	7812      	ldrb	r2, [r2, #0]
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	631a      	str	r2, [r3, #48]	@ 0x30
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002160:	e030      	b.n	80021c4 <HAL_SPI_Transmit+0x220>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b02      	cmp	r3, #2
 800216e:	d113      	bne.n	8002198 <HAL_SPI_Transmit+0x1f4>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	330c      	adds	r3, #12
 800217a:	7812      	ldrb	r2, [r2, #0]
 800217c:	701a      	strb	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	631a      	str	r2, [r3, #48]	@ 0x30
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800218c:	b29b      	uxth	r3, r3
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002196:	e015      	b.n	80021c4 <HAL_SPI_Transmit+0x220>
 8002198:	f7fe ffd6 	bl	8001148 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d803      	bhi.n	80021b0 <HAL_SPI_Transmit+0x20c>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ae:	d102      	bne.n	80021b6 <HAL_SPI_Transmit+0x212>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_SPI_Transmit+0x220>
 80021b6:	2303      	movs	r3, #3
 80021b8:	77fb      	strb	r3, [r7, #31]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80021c2:	e029      	b.n	8002218 <HAL_SPI_Transmit+0x274>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1c9      	bne.n	8002162 <HAL_SPI_Transmit+0x1be>
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	6839      	ldr	r1, [r7, #0]
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f8b2 	bl	800233c <SPI_EndRxTxTransaction>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <HAL_SPI_Transmit+0x240>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2220      	movs	r2, #32
 80021e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <HAL_SPI_Transmit+0x25e>
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_SPI_Transmit+0x26c>
 800220a:	2301      	movs	r3, #1
 800220c:	77fb      	strb	r3, [r7, #31]
 800220e:	e003      	b.n	8002218 <HAL_SPI_Transmit+0x274>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002220:	7ffb      	ldrb	r3, [r7, #31]
 8002222:	4618      	mov	r0, r3
 8002224:	3720      	adds	r7, #32
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <SPI_WaitFlagStateUntilTimeout>:
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	4613      	mov	r3, r2
 800223a:	71fb      	strb	r3, [r7, #7]
 800223c:	f7fe ff84 	bl	8001148 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	4413      	add	r3, r2
 800224a:	61fb      	str	r3, [r7, #28]
 800224c:	f7fe ff7c 	bl	8001148 <HAL_GetTick>
 8002250:	61b8      	str	r0, [r7, #24]
 8002252:	4b39      	ldr	r3, [pc, #228]	@ (8002338 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	015b      	lsls	r3, r3, #5
 8002258:	0d1b      	lsrs	r3, r3, #20
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	fb02 f303 	mul.w	r3, r2, r3
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	e054      	b.n	800230e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226a:	d050      	beq.n	800230e <SPI_WaitFlagStateUntilTimeout+0xe2>
 800226c:	f7fe ff6c 	bl	8001148 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	429a      	cmp	r2, r3
 800227a:	d902      	bls.n	8002282 <SPI_WaitFlagStateUntilTimeout+0x56>
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d13d      	bne.n	80022fe <SPI_WaitFlagStateUntilTimeout+0xd2>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800229a:	d111      	bne.n	80022c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022a4:	d004      	beq.n	80022b0 <SPI_WaitFlagStateUntilTimeout+0x84>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ae:	d107      	bne.n	80022c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022c8:	d10f      	bne.n	80022ea <SPI_WaitFlagStateUntilTimeout+0xbe>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80022fa:	2303      	movs	r3, #3
 80022fc:	e017      	b.n	800232e <SPI_WaitFlagStateUntilTimeout+0x102>
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	3b01      	subs	r3, #1
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	4013      	ands	r3, r2
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	429a      	cmp	r2, r3
 800231c:	bf0c      	ite	eq
 800231e:	2301      	moveq	r3, #1
 8002320:	2300      	movne	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	429a      	cmp	r2, r3
 800232a:	d19b      	bne.n	8002264 <SPI_WaitFlagStateUntilTimeout+0x38>
 800232c:	2300      	movs	r3, #0
 800232e:	4618      	mov	r0, r3
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000030 	.word	0x20000030

0800233c <SPI_EndRxTxTransaction>:
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af02      	add	r7, sp, #8
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2200      	movs	r2, #0
 8002350:	2180      	movs	r1, #128	@ 0x80
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f7ff ff6a 	bl	800222c <SPI_WaitFlagStateUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <SPI_EndRxTxTransaction+0x32>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002362:	f043 0220 	orr.w	r2, r3, #32
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	655a      	str	r2, [r3, #84]	@ 0x54
 800236a:	2303      	movs	r3, #3
 800236c:	e000      	b.n	8002370 <SPI_EndRxTxTransaction+0x34>
 800236e:	2300      	movs	r3, #0
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_TIM_Base_Init>:
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_TIM_Base_Init+0x12>
 8002386:	2301      	movs	r3, #1
 8002388:	e041      	b.n	800240e <HAL_TIM_Base_Init+0x96>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_TIM_Base_Init+0x2c>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fd76 	bl	8000e90 <HAL_TIM_Base_MspInit>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3304      	adds	r3, #4
 80023b4:	4619      	mov	r1, r3
 80023b6:	4610      	mov	r0, r2
 80023b8:	f000 fa74 	bl	80028a4 <TIM_Base_SetConfig>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800240c:	2300      	movs	r3, #0
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_TIM_Base_Start_IT>:
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	d001      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x18>
 800242c:	2301      	movs	r3, #1
 800242e:	e03a      	b.n	80024a6 <HAL_TIM_Base_Start_IT+0x8e>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	60da      	str	r2, [r3, #12]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a18      	ldr	r2, [pc, #96]	@ (80024b0 <HAL_TIM_Base_Start_IT+0x98>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00e      	beq.n	8002470 <HAL_TIM_Base_Start_IT+0x58>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800245a:	d009      	beq.n	8002470 <HAL_TIM_Base_Start_IT+0x58>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a14      	ldr	r2, [pc, #80]	@ (80024b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d004      	beq.n	8002470 <HAL_TIM_Base_Start_IT+0x58>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a13      	ldr	r2, [pc, #76]	@ (80024b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d111      	bne.n	8002494 <HAL_TIM_Base_Start_IT+0x7c>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b06      	cmp	r3, #6
 8002480:	d010      	beq.n	80024a4 <HAL_TIM_Base_Start_IT+0x8c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e007      	b.n	80024a4 <HAL_TIM_Base_Start_IT+0x8c>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	2300      	movs	r3, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	40012c00 	.word	0x40012c00
 80024b4:	40000400 	.word	0x40000400
 80024b8:	40000800 	.word	0x40000800

080024bc <HAL_TIM_IRQHandler>:
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d122      	bne.n	8002518 <HAL_TIM_IRQHandler+0x5c>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d11b      	bne.n	8002518 <HAL_TIM_IRQHandler+0x5c>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0202 	mvn.w	r2, #2
 80024e8:	611a      	str	r2, [r3, #16]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	771a      	strb	r2, [r3, #28]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0x4a>
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f9b4 	bl	800286c <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0x56>
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f9a7 	bl	800285a <HAL_TIM_OC_DelayElapsedCallback>
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f9b6 	bl	800287e <HAL_TIM_PWM_PulseFinishedCallback>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b04      	cmp	r3, #4
 8002524:	d122      	bne.n	800256c <HAL_TIM_IRQHandler+0xb0>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b04      	cmp	r3, #4
 8002532:	d11b      	bne.n	800256c <HAL_TIM_IRQHandler+0xb0>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0204 	mvn.w	r2, #4
 800253c:	611a      	str	r2, [r3, #16]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	771a      	strb	r2, [r3, #28]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x9e>
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f98a 	bl	800286c <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0xaa>
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f97d 	bl	800285a <HAL_TIM_OC_DelayElapsedCallback>
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f98c 	bl	800287e <HAL_TIM_PWM_PulseFinishedCallback>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b08      	cmp	r3, #8
 8002578:	d122      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x104>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b08      	cmp	r3, #8
 8002586:	d11b      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x104>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0208 	mvn.w	r2, #8
 8002590:	611a      	str	r2, [r3, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2204      	movs	r2, #4
 8002596:	771a      	strb	r2, [r3, #28]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0xf2>
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f960 	bl	800286c <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0xfe>
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f953 	bl	800285a <HAL_TIM_OC_DelayElapsedCallback>
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f962 	bl	800287e <HAL_TIM_PWM_PulseFinishedCallback>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d122      	bne.n	8002614 <HAL_TIM_IRQHandler+0x158>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d11b      	bne.n	8002614 <HAL_TIM_IRQHandler+0x158>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0210 	mvn.w	r2, #16
 80025e4:	611a      	str	r2, [r3, #16]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2208      	movs	r2, #8
 80025ea:	771a      	strb	r2, [r3, #28]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x146>
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f936 	bl	800286c <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0x152>
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f929 	bl	800285a <HAL_TIM_OC_DelayElapsedCallback>
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f938 	bl	800287e <HAL_TIM_PWM_PulseFinishedCallback>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b01      	cmp	r3, #1
 8002620:	d10e      	bne.n	8002640 <HAL_TIM_IRQHandler+0x184>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b01      	cmp	r3, #1
 800262e:	d107      	bne.n	8002640 <HAL_TIM_IRQHandler+0x184>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0201 	mvn.w	r2, #1
 8002638:	611a      	str	r2, [r3, #16]
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe fb78 	bl	8000d30 <HAL_TIM_PeriodElapsedCallback>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264a:	2b80      	cmp	r3, #128	@ 0x80
 800264c:	d10e      	bne.n	800266c <HAL_TIM_IRQHandler+0x1b0>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002658:	2b80      	cmp	r3, #128	@ 0x80
 800265a:	d107      	bne.n	800266c <HAL_TIM_IRQHandler+0x1b0>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002664:	611a      	str	r2, [r3, #16]
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fa7b 	bl	8002b62 <HAL_TIMEx_BreakCallback>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002676:	2b40      	cmp	r3, #64	@ 0x40
 8002678:	d10e      	bne.n	8002698 <HAL_TIM_IRQHandler+0x1dc>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002684:	2b40      	cmp	r3, #64	@ 0x40
 8002686:	d107      	bne.n	8002698 <HAL_TIM_IRQHandler+0x1dc>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002690:	611a      	str	r2, [r3, #16]
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8fc 	bl	8002890 <HAL_TIM_TriggerCallback>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	d10e      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x208>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d107      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x208>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0220 	mvn.w	r2, #32
 80026bc:	611a      	str	r2, [r3, #16]
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fa46 	bl	8002b50 <HAL_TIMEx_CommutCallback>
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_TIM_ConfigClockSource>:
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
 80026d6:	2300      	movs	r3, #0
 80026d8:	73fb      	strb	r3, [r7, #15]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_TIM_ConfigClockSource+0x1c>
 80026e4:	2302      	movs	r3, #2
 80026e6:	e0b4      	b.n	8002852 <HAL_TIM_ConfigClockSource+0x186>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002720:	d03e      	beq.n	80027a0 <HAL_TIM_ConfigClockSource+0xd4>
 8002722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002726:	f200 8087 	bhi.w	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 800272a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800272e:	f000 8086 	beq.w	800283e <HAL_TIM_ConfigClockSource+0x172>
 8002732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002736:	d87f      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 8002738:	2b70      	cmp	r3, #112	@ 0x70
 800273a:	d01a      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0xa6>
 800273c:	2b70      	cmp	r3, #112	@ 0x70
 800273e:	d87b      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b60      	cmp	r3, #96	@ 0x60
 8002742:	d050      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0x11a>
 8002744:	2b60      	cmp	r3, #96	@ 0x60
 8002746:	d877      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b50      	cmp	r3, #80	@ 0x50
 800274a:	d03c      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0xfa>
 800274c:	2b50      	cmp	r3, #80	@ 0x50
 800274e:	d873      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 8002750:	2b40      	cmp	r3, #64	@ 0x40
 8002752:	d058      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x13a>
 8002754:	2b40      	cmp	r3, #64	@ 0x40
 8002756:	d86f      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 8002758:	2b30      	cmp	r3, #48	@ 0x30
 800275a:	d064      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x15a>
 800275c:	2b30      	cmp	r3, #48	@ 0x30
 800275e:	d86b      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 8002760:	2b20      	cmp	r3, #32
 8002762:	d060      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x15a>
 8002764:	2b20      	cmp	r3, #32
 8002766:	d867      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 8002768:	2b00      	cmp	r3, #0
 800276a:	d05c      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x15a>
 800276c:	2b10      	cmp	r3, #16
 800276e:	d05a      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x15a>
 8002770:	e062      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6899      	ldr	r1, [r3, #8]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f000 f968 	bl	8002a56 <TIM_ETR_SetConfig>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	e04f      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x174>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	6899      	ldr	r1, [r3, #8]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f000 f951 	bl	8002a56 <TIM_ETR_SetConfig>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	e03c      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x174>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6859      	ldr	r1, [r3, #4]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	461a      	mov	r2, r3
 80027d4:	f000 f8c8 	bl	8002968 <TIM_TI1_ConfigInputStage>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2150      	movs	r1, #80	@ 0x50
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f91f 	bl	8002a22 <TIM_ITRx_SetConfig>
 80027e4:	e02c      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x174>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6859      	ldr	r1, [r3, #4]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f000 f8e6 	bl	80029c4 <TIM_TI2_ConfigInputStage>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2160      	movs	r1, #96	@ 0x60
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f90f 	bl	8002a22 <TIM_ITRx_SetConfig>
 8002804:	e01c      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x174>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6859      	ldr	r1, [r3, #4]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	461a      	mov	r2, r3
 8002814:	f000 f8a8 	bl	8002968 <TIM_TI1_ConfigInputStage>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2140      	movs	r1, #64	@ 0x40
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f8ff 	bl	8002a22 <TIM_ITRx_SetConfig>
 8002824:	e00c      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x174>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4619      	mov	r1, r3
 8002830:	4610      	mov	r0, r2
 8002832:	f000 f8f6 	bl	8002a22 <TIM_ITRx_SetConfig>
 8002836:	e003      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x174>
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
 800283c:	e000      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x174>
 800283e:	bf00      	nop
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_TIM_OC_DelayElapsedCallback>:
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <HAL_TIM_IC_CaptureCallback>:
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <HAL_TIM_PWM_PulseFinishedCallback>:
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <HAL_TIM_TriggerCallback>:
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
	...

080028a4 <TIM_Base_SetConfig>:
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a29      	ldr	r2, [pc, #164]	@ (800295c <TIM_Base_SetConfig+0xb8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00b      	beq.n	80028d4 <TIM_Base_SetConfig+0x30>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028c2:	d007      	beq.n	80028d4 <TIM_Base_SetConfig+0x30>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a26      	ldr	r2, [pc, #152]	@ (8002960 <TIM_Base_SetConfig+0xbc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d003      	beq.n	80028d4 <TIM_Base_SetConfig+0x30>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a25      	ldr	r2, [pc, #148]	@ (8002964 <TIM_Base_SetConfig+0xc0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d108      	bne.n	80028e6 <TIM_Base_SetConfig+0x42>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a1c      	ldr	r2, [pc, #112]	@ (800295c <TIM_Base_SetConfig+0xb8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00b      	beq.n	8002906 <TIM_Base_SetConfig+0x62>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f4:	d007      	beq.n	8002906 <TIM_Base_SetConfig+0x62>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a19      	ldr	r2, [pc, #100]	@ (8002960 <TIM_Base_SetConfig+0xbc>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d003      	beq.n	8002906 <TIM_Base_SetConfig+0x62>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a18      	ldr	r2, [pc, #96]	@ (8002964 <TIM_Base_SetConfig+0xc0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d108      	bne.n	8002918 <TIM_Base_SetConfig+0x74>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	629a      	str	r2, [r3, #40]	@ 0x28
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a07      	ldr	r2, [pc, #28]	@ (800295c <TIM_Base_SetConfig+0xb8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d103      	bne.n	800294c <TIM_Base_SetConfig+0xa8>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	615a      	str	r2, [r3, #20]
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40000400 	.word	0x40000400
 8002964:	40000800 	.word	0x40000800

08002968 <TIM_TI1_ConfigInputStage>:
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	f023 0201 	bic.w	r2, r3, #1
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	621a      	str	r2, [r3, #32]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f023 030a 	bic.w	r3, r3, #10
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	619a      	str	r2, [r3, #24]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	621a      	str	r2, [r3, #32]
 80029ba:	bf00      	nop
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <TIM_TI2_ConfigInputStage>:
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	f023 0210 	bic.w	r2, r3, #16
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	621a      	str	r2, [r3, #32]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	031b      	lsls	r3, r3, #12
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	619a      	str	r2, [r3, #24]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	621a      	str	r2, [r3, #32]
 8002a18:	bf00      	nop
 8002a1a:	371c      	adds	r7, #28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <TIM_ITRx_SetConfig>:
 8002a22:	b480      	push	{r7}
 8002a24:	b085      	sub	sp, #20
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f043 0307 	orr.w	r3, r3, #7
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <TIM_ETR_SetConfig>:
 8002a56:	b480      	push	{r7}
 8002a58:	b087      	sub	sp, #28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	021a      	lsls	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	bf00      	nop
 8002a8c:	371c      	adds	r7, #28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <HAL_TIMEx_MasterConfigSynchronization>:
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e046      	b.n	8002b3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a16      	ldr	r2, [pc, #88]	@ (8002b44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00e      	beq.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af8:	d009      	beq.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a12      	ldr	r2, [pc, #72]	@ (8002b48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d004      	beq.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a10      	ldr	r2, [pc, #64]	@ (8002b4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d10c      	bne.n	8002b28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002b38:	2300      	movs	r3, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	40012c00 	.word	0x40012c00
 8002b48:	40000400 	.word	0x40000400
 8002b4c:	40000800 	.word	0x40000800

08002b50 <HAL_TIMEx_CommutCallback>:
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <HAL_TIMEx_BreakCallback>:
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <sniprintf>:
 8002b74:	b40c      	push	{r2, r3}
 8002b76:	b530      	push	{r4, r5, lr}
 8002b78:	4b17      	ldr	r3, [pc, #92]	@ (8002bd8 <sniprintf+0x64>)
 8002b7a:	1e0c      	subs	r4, r1, #0
 8002b7c:	681d      	ldr	r5, [r3, #0]
 8002b7e:	b09d      	sub	sp, #116	@ 0x74
 8002b80:	da08      	bge.n	8002b94 <sniprintf+0x20>
 8002b82:	238b      	movs	r3, #139	@ 0x8b
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295
 8002b88:	602b      	str	r3, [r5, #0]
 8002b8a:	b01d      	add	sp, #116	@ 0x74
 8002b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b90:	b002      	add	sp, #8
 8002b92:	4770      	bx	lr
 8002b94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002b98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002b9c:	bf0c      	ite	eq
 8002b9e:	4623      	moveq	r3, r4
 8002ba0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002ba4:	9304      	str	r3, [sp, #16]
 8002ba6:	9307      	str	r3, [sp, #28]
 8002ba8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bac:	9002      	str	r0, [sp, #8]
 8002bae:	9006      	str	r0, [sp, #24]
 8002bb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	ab21      	add	r3, sp, #132	@ 0x84
 8002bb8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002bba:	a902      	add	r1, sp, #8
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	f000 f993 	bl	8002ee8 <_svfiprintf_r>
 8002bc2:	1c43      	adds	r3, r0, #1
 8002bc4:	bfbc      	itt	lt
 8002bc6:	238b      	movlt	r3, #139	@ 0x8b
 8002bc8:	602b      	strlt	r3, [r5, #0]
 8002bca:	2c00      	cmp	r4, #0
 8002bcc:	d0dd      	beq.n	8002b8a <sniprintf+0x16>
 8002bce:	2200      	movs	r2, #0
 8002bd0:	9b02      	ldr	r3, [sp, #8]
 8002bd2:	701a      	strb	r2, [r3, #0]
 8002bd4:	e7d9      	b.n	8002b8a <sniprintf+0x16>
 8002bd6:	bf00      	nop
 8002bd8:	2000003c 	.word	0x2000003c

08002bdc <memset>:
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4402      	add	r2, r0
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d100      	bne.n	8002be6 <memset+0xa>
 8002be4:	4770      	bx	lr
 8002be6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bea:	e7f9      	b.n	8002be0 <memset+0x4>

08002bec <__errno>:
 8002bec:	4b01      	ldr	r3, [pc, #4]	@ (8002bf4 <__errno+0x8>)
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	2000003c 	.word	0x2000003c

08002bf8 <__libc_init_array>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	2600      	movs	r6, #0
 8002bfc:	4d0c      	ldr	r5, [pc, #48]	@ (8002c30 <__libc_init_array+0x38>)
 8002bfe:	4c0d      	ldr	r4, [pc, #52]	@ (8002c34 <__libc_init_array+0x3c>)
 8002c00:	1b64      	subs	r4, r4, r5
 8002c02:	10a4      	asrs	r4, r4, #2
 8002c04:	42a6      	cmp	r6, r4
 8002c06:	d109      	bne.n	8002c1c <__libc_init_array+0x24>
 8002c08:	f000 fc78 	bl	80034fc <_init>
 8002c0c:	2600      	movs	r6, #0
 8002c0e:	4d0a      	ldr	r5, [pc, #40]	@ (8002c38 <__libc_init_array+0x40>)
 8002c10:	4c0a      	ldr	r4, [pc, #40]	@ (8002c3c <__libc_init_array+0x44>)
 8002c12:	1b64      	subs	r4, r4, r5
 8002c14:	10a4      	asrs	r4, r4, #2
 8002c16:	42a6      	cmp	r6, r4
 8002c18:	d105      	bne.n	8002c26 <__libc_init_array+0x2e>
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
 8002c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c20:	4798      	blx	r3
 8002c22:	3601      	adds	r6, #1
 8002c24:	e7ee      	b.n	8002c04 <__libc_init_array+0xc>
 8002c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c2a:	4798      	blx	r3
 8002c2c:	3601      	adds	r6, #1
 8002c2e:	e7f2      	b.n	8002c16 <__libc_init_array+0x1e>
 8002c30:	080035b0 	.word	0x080035b0
 8002c34:	080035b0 	.word	0x080035b0
 8002c38:	080035b0 	.word	0x080035b0
 8002c3c:	080035b4 	.word	0x080035b4

08002c40 <__retarget_lock_acquire_recursive>:
 8002c40:	4770      	bx	lr

08002c42 <__retarget_lock_release_recursive>:
 8002c42:	4770      	bx	lr

08002c44 <_free_r>:
 8002c44:	b538      	push	{r3, r4, r5, lr}
 8002c46:	4605      	mov	r5, r0
 8002c48:	2900      	cmp	r1, #0
 8002c4a:	d040      	beq.n	8002cce <_free_r+0x8a>
 8002c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c50:	1f0c      	subs	r4, r1, #4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	bfb8      	it	lt
 8002c56:	18e4      	addlt	r4, r4, r3
 8002c58:	f000 f8de 	bl	8002e18 <__malloc_lock>
 8002c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd0 <_free_r+0x8c>)
 8002c5e:	6813      	ldr	r3, [r2, #0]
 8002c60:	b933      	cbnz	r3, 8002c70 <_free_r+0x2c>
 8002c62:	6063      	str	r3, [r4, #4]
 8002c64:	6014      	str	r4, [r2, #0]
 8002c66:	4628      	mov	r0, r5
 8002c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c6c:	f000 b8da 	b.w	8002e24 <__malloc_unlock>
 8002c70:	42a3      	cmp	r3, r4
 8002c72:	d908      	bls.n	8002c86 <_free_r+0x42>
 8002c74:	6820      	ldr	r0, [r4, #0]
 8002c76:	1821      	adds	r1, r4, r0
 8002c78:	428b      	cmp	r3, r1
 8002c7a:	bf01      	itttt	eq
 8002c7c:	6819      	ldreq	r1, [r3, #0]
 8002c7e:	685b      	ldreq	r3, [r3, #4]
 8002c80:	1809      	addeq	r1, r1, r0
 8002c82:	6021      	streq	r1, [r4, #0]
 8002c84:	e7ed      	b.n	8002c62 <_free_r+0x1e>
 8002c86:	461a      	mov	r2, r3
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	b10b      	cbz	r3, 8002c90 <_free_r+0x4c>
 8002c8c:	42a3      	cmp	r3, r4
 8002c8e:	d9fa      	bls.n	8002c86 <_free_r+0x42>
 8002c90:	6811      	ldr	r1, [r2, #0]
 8002c92:	1850      	adds	r0, r2, r1
 8002c94:	42a0      	cmp	r0, r4
 8002c96:	d10b      	bne.n	8002cb0 <_free_r+0x6c>
 8002c98:	6820      	ldr	r0, [r4, #0]
 8002c9a:	4401      	add	r1, r0
 8002c9c:	1850      	adds	r0, r2, r1
 8002c9e:	4283      	cmp	r3, r0
 8002ca0:	6011      	str	r1, [r2, #0]
 8002ca2:	d1e0      	bne.n	8002c66 <_free_r+0x22>
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4408      	add	r0, r1
 8002caa:	6010      	str	r0, [r2, #0]
 8002cac:	6053      	str	r3, [r2, #4]
 8002cae:	e7da      	b.n	8002c66 <_free_r+0x22>
 8002cb0:	d902      	bls.n	8002cb8 <_free_r+0x74>
 8002cb2:	230c      	movs	r3, #12
 8002cb4:	602b      	str	r3, [r5, #0]
 8002cb6:	e7d6      	b.n	8002c66 <_free_r+0x22>
 8002cb8:	6820      	ldr	r0, [r4, #0]
 8002cba:	1821      	adds	r1, r4, r0
 8002cbc:	428b      	cmp	r3, r1
 8002cbe:	bf01      	itttt	eq
 8002cc0:	6819      	ldreq	r1, [r3, #0]
 8002cc2:	685b      	ldreq	r3, [r3, #4]
 8002cc4:	1809      	addeq	r1, r1, r0
 8002cc6:	6021      	streq	r1, [r4, #0]
 8002cc8:	6063      	str	r3, [r4, #4]
 8002cca:	6054      	str	r4, [r2, #4]
 8002ccc:	e7cb      	b.n	8002c66 <_free_r+0x22>
 8002cce:	bd38      	pop	{r3, r4, r5, pc}
 8002cd0:	20000360 	.word	0x20000360

08002cd4 <sbrk_aligned>:
 8002cd4:	b570      	push	{r4, r5, r6, lr}
 8002cd6:	4e0f      	ldr	r6, [pc, #60]	@ (8002d14 <sbrk_aligned+0x40>)
 8002cd8:	460c      	mov	r4, r1
 8002cda:	6831      	ldr	r1, [r6, #0]
 8002cdc:	4605      	mov	r5, r0
 8002cde:	b911      	cbnz	r1, 8002ce6 <sbrk_aligned+0x12>
 8002ce0:	f000 fbaa 	bl	8003438 <_sbrk_r>
 8002ce4:	6030      	str	r0, [r6, #0]
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	4628      	mov	r0, r5
 8002cea:	f000 fba5 	bl	8003438 <_sbrk_r>
 8002cee:	1c43      	adds	r3, r0, #1
 8002cf0:	d103      	bne.n	8002cfa <sbrk_aligned+0x26>
 8002cf2:	f04f 34ff 	mov.w	r4, #4294967295
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	bd70      	pop	{r4, r5, r6, pc}
 8002cfa:	1cc4      	adds	r4, r0, #3
 8002cfc:	f024 0403 	bic.w	r4, r4, #3
 8002d00:	42a0      	cmp	r0, r4
 8002d02:	d0f8      	beq.n	8002cf6 <sbrk_aligned+0x22>
 8002d04:	1a21      	subs	r1, r4, r0
 8002d06:	4628      	mov	r0, r5
 8002d08:	f000 fb96 	bl	8003438 <_sbrk_r>
 8002d0c:	3001      	adds	r0, #1
 8002d0e:	d1f2      	bne.n	8002cf6 <sbrk_aligned+0x22>
 8002d10:	e7ef      	b.n	8002cf2 <sbrk_aligned+0x1e>
 8002d12:	bf00      	nop
 8002d14:	2000035c 	.word	0x2000035c

08002d18 <_malloc_r>:
 8002d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d1c:	1ccd      	adds	r5, r1, #3
 8002d1e:	f025 0503 	bic.w	r5, r5, #3
 8002d22:	3508      	adds	r5, #8
 8002d24:	2d0c      	cmp	r5, #12
 8002d26:	bf38      	it	cc
 8002d28:	250c      	movcc	r5, #12
 8002d2a:	2d00      	cmp	r5, #0
 8002d2c:	4606      	mov	r6, r0
 8002d2e:	db01      	blt.n	8002d34 <_malloc_r+0x1c>
 8002d30:	42a9      	cmp	r1, r5
 8002d32:	d904      	bls.n	8002d3e <_malloc_r+0x26>
 8002d34:	230c      	movs	r3, #12
 8002d36:	6033      	str	r3, [r6, #0]
 8002d38:	2000      	movs	r0, #0
 8002d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002e14 <_malloc_r+0xfc>
 8002d42:	f000 f869 	bl	8002e18 <__malloc_lock>
 8002d46:	f8d8 3000 	ldr.w	r3, [r8]
 8002d4a:	461c      	mov	r4, r3
 8002d4c:	bb44      	cbnz	r4, 8002da0 <_malloc_r+0x88>
 8002d4e:	4629      	mov	r1, r5
 8002d50:	4630      	mov	r0, r6
 8002d52:	f7ff ffbf 	bl	8002cd4 <sbrk_aligned>
 8002d56:	1c43      	adds	r3, r0, #1
 8002d58:	4604      	mov	r4, r0
 8002d5a:	d158      	bne.n	8002e0e <_malloc_r+0xf6>
 8002d5c:	f8d8 4000 	ldr.w	r4, [r8]
 8002d60:	4627      	mov	r7, r4
 8002d62:	2f00      	cmp	r7, #0
 8002d64:	d143      	bne.n	8002dee <_malloc_r+0xd6>
 8002d66:	2c00      	cmp	r4, #0
 8002d68:	d04b      	beq.n	8002e02 <_malloc_r+0xea>
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	4639      	mov	r1, r7
 8002d6e:	4630      	mov	r0, r6
 8002d70:	eb04 0903 	add.w	r9, r4, r3
 8002d74:	f000 fb60 	bl	8003438 <_sbrk_r>
 8002d78:	4581      	cmp	r9, r0
 8002d7a:	d142      	bne.n	8002e02 <_malloc_r+0xea>
 8002d7c:	6821      	ldr	r1, [r4, #0]
 8002d7e:	4630      	mov	r0, r6
 8002d80:	1a6d      	subs	r5, r5, r1
 8002d82:	4629      	mov	r1, r5
 8002d84:	f7ff ffa6 	bl	8002cd4 <sbrk_aligned>
 8002d88:	3001      	adds	r0, #1
 8002d8a:	d03a      	beq.n	8002e02 <_malloc_r+0xea>
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	442b      	add	r3, r5
 8002d90:	6023      	str	r3, [r4, #0]
 8002d92:	f8d8 3000 	ldr.w	r3, [r8]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	bb62      	cbnz	r2, 8002df4 <_malloc_r+0xdc>
 8002d9a:	f8c8 7000 	str.w	r7, [r8]
 8002d9e:	e00f      	b.n	8002dc0 <_malloc_r+0xa8>
 8002da0:	6822      	ldr	r2, [r4, #0]
 8002da2:	1b52      	subs	r2, r2, r5
 8002da4:	d420      	bmi.n	8002de8 <_malloc_r+0xd0>
 8002da6:	2a0b      	cmp	r2, #11
 8002da8:	d917      	bls.n	8002dda <_malloc_r+0xc2>
 8002daa:	1961      	adds	r1, r4, r5
 8002dac:	42a3      	cmp	r3, r4
 8002dae:	6025      	str	r5, [r4, #0]
 8002db0:	bf18      	it	ne
 8002db2:	6059      	strne	r1, [r3, #4]
 8002db4:	6863      	ldr	r3, [r4, #4]
 8002db6:	bf08      	it	eq
 8002db8:	f8c8 1000 	streq.w	r1, [r8]
 8002dbc:	5162      	str	r2, [r4, r5]
 8002dbe:	604b      	str	r3, [r1, #4]
 8002dc0:	4630      	mov	r0, r6
 8002dc2:	f000 f82f 	bl	8002e24 <__malloc_unlock>
 8002dc6:	f104 000b 	add.w	r0, r4, #11
 8002dca:	1d23      	adds	r3, r4, #4
 8002dcc:	f020 0007 	bic.w	r0, r0, #7
 8002dd0:	1ac2      	subs	r2, r0, r3
 8002dd2:	bf1c      	itt	ne
 8002dd4:	1a1b      	subne	r3, r3, r0
 8002dd6:	50a3      	strne	r3, [r4, r2]
 8002dd8:	e7af      	b.n	8002d3a <_malloc_r+0x22>
 8002dda:	6862      	ldr	r2, [r4, #4]
 8002ddc:	42a3      	cmp	r3, r4
 8002dde:	bf0c      	ite	eq
 8002de0:	f8c8 2000 	streq.w	r2, [r8]
 8002de4:	605a      	strne	r2, [r3, #4]
 8002de6:	e7eb      	b.n	8002dc0 <_malloc_r+0xa8>
 8002de8:	4623      	mov	r3, r4
 8002dea:	6864      	ldr	r4, [r4, #4]
 8002dec:	e7ae      	b.n	8002d4c <_malloc_r+0x34>
 8002dee:	463c      	mov	r4, r7
 8002df0:	687f      	ldr	r7, [r7, #4]
 8002df2:	e7b6      	b.n	8002d62 <_malloc_r+0x4a>
 8002df4:	461a      	mov	r2, r3
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	42a3      	cmp	r3, r4
 8002dfa:	d1fb      	bne.n	8002df4 <_malloc_r+0xdc>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	6053      	str	r3, [r2, #4]
 8002e00:	e7de      	b.n	8002dc0 <_malloc_r+0xa8>
 8002e02:	230c      	movs	r3, #12
 8002e04:	4630      	mov	r0, r6
 8002e06:	6033      	str	r3, [r6, #0]
 8002e08:	f000 f80c 	bl	8002e24 <__malloc_unlock>
 8002e0c:	e794      	b.n	8002d38 <_malloc_r+0x20>
 8002e0e:	6005      	str	r5, [r0, #0]
 8002e10:	e7d6      	b.n	8002dc0 <_malloc_r+0xa8>
 8002e12:	bf00      	nop
 8002e14:	20000360 	.word	0x20000360

08002e18 <__malloc_lock>:
 8002e18:	4801      	ldr	r0, [pc, #4]	@ (8002e20 <__malloc_lock+0x8>)
 8002e1a:	f7ff bf11 	b.w	8002c40 <__retarget_lock_acquire_recursive>
 8002e1e:	bf00      	nop
 8002e20:	20000358 	.word	0x20000358

08002e24 <__malloc_unlock>:
 8002e24:	4801      	ldr	r0, [pc, #4]	@ (8002e2c <__malloc_unlock+0x8>)
 8002e26:	f7ff bf0c 	b.w	8002c42 <__retarget_lock_release_recursive>
 8002e2a:	bf00      	nop
 8002e2c:	20000358 	.word	0x20000358

08002e30 <__ssputs_r>:
 8002e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e34:	461f      	mov	r7, r3
 8002e36:	688e      	ldr	r6, [r1, #8]
 8002e38:	4682      	mov	sl, r0
 8002e3a:	42be      	cmp	r6, r7
 8002e3c:	460c      	mov	r4, r1
 8002e3e:	4690      	mov	r8, r2
 8002e40:	680b      	ldr	r3, [r1, #0]
 8002e42:	d82d      	bhi.n	8002ea0 <__ssputs_r+0x70>
 8002e44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002e4c:	d026      	beq.n	8002e9c <__ssputs_r+0x6c>
 8002e4e:	6965      	ldr	r5, [r4, #20]
 8002e50:	6909      	ldr	r1, [r1, #16]
 8002e52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e56:	eba3 0901 	sub.w	r9, r3, r1
 8002e5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e5e:	1c7b      	adds	r3, r7, #1
 8002e60:	444b      	add	r3, r9
 8002e62:	106d      	asrs	r5, r5, #1
 8002e64:	429d      	cmp	r5, r3
 8002e66:	bf38      	it	cc
 8002e68:	461d      	movcc	r5, r3
 8002e6a:	0553      	lsls	r3, r2, #21
 8002e6c:	d527      	bpl.n	8002ebe <__ssputs_r+0x8e>
 8002e6e:	4629      	mov	r1, r5
 8002e70:	f7ff ff52 	bl	8002d18 <_malloc_r>
 8002e74:	4606      	mov	r6, r0
 8002e76:	b360      	cbz	r0, 8002ed2 <__ssputs_r+0xa2>
 8002e78:	464a      	mov	r2, r9
 8002e7a:	6921      	ldr	r1, [r4, #16]
 8002e7c:	f000 fafa 	bl	8003474 <memcpy>
 8002e80:	89a3      	ldrh	r3, [r4, #12]
 8002e82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e8a:	81a3      	strh	r3, [r4, #12]
 8002e8c:	6126      	str	r6, [r4, #16]
 8002e8e:	444e      	add	r6, r9
 8002e90:	6026      	str	r6, [r4, #0]
 8002e92:	463e      	mov	r6, r7
 8002e94:	6165      	str	r5, [r4, #20]
 8002e96:	eba5 0509 	sub.w	r5, r5, r9
 8002e9a:	60a5      	str	r5, [r4, #8]
 8002e9c:	42be      	cmp	r6, r7
 8002e9e:	d900      	bls.n	8002ea2 <__ssputs_r+0x72>
 8002ea0:	463e      	mov	r6, r7
 8002ea2:	4632      	mov	r2, r6
 8002ea4:	4641      	mov	r1, r8
 8002ea6:	6820      	ldr	r0, [r4, #0]
 8002ea8:	f000 faac 	bl	8003404 <memmove>
 8002eac:	2000      	movs	r0, #0
 8002eae:	68a3      	ldr	r3, [r4, #8]
 8002eb0:	1b9b      	subs	r3, r3, r6
 8002eb2:	60a3      	str	r3, [r4, #8]
 8002eb4:	6823      	ldr	r3, [r4, #0]
 8002eb6:	4433      	add	r3, r6
 8002eb8:	6023      	str	r3, [r4, #0]
 8002eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ebe:	462a      	mov	r2, r5
 8002ec0:	f000 fae6 	bl	8003490 <_realloc_r>
 8002ec4:	4606      	mov	r6, r0
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	d1e0      	bne.n	8002e8c <__ssputs_r+0x5c>
 8002eca:	4650      	mov	r0, sl
 8002ecc:	6921      	ldr	r1, [r4, #16]
 8002ece:	f7ff feb9 	bl	8002c44 <_free_r>
 8002ed2:	230c      	movs	r3, #12
 8002ed4:	f8ca 3000 	str.w	r3, [sl]
 8002ed8:	89a3      	ldrh	r3, [r4, #12]
 8002eda:	f04f 30ff 	mov.w	r0, #4294967295
 8002ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ee2:	81a3      	strh	r3, [r4, #12]
 8002ee4:	e7e9      	b.n	8002eba <__ssputs_r+0x8a>
	...

08002ee8 <_svfiprintf_r>:
 8002ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eec:	4698      	mov	r8, r3
 8002eee:	898b      	ldrh	r3, [r1, #12]
 8002ef0:	4607      	mov	r7, r0
 8002ef2:	061b      	lsls	r3, r3, #24
 8002ef4:	460d      	mov	r5, r1
 8002ef6:	4614      	mov	r4, r2
 8002ef8:	b09d      	sub	sp, #116	@ 0x74
 8002efa:	d510      	bpl.n	8002f1e <_svfiprintf_r+0x36>
 8002efc:	690b      	ldr	r3, [r1, #16]
 8002efe:	b973      	cbnz	r3, 8002f1e <_svfiprintf_r+0x36>
 8002f00:	2140      	movs	r1, #64	@ 0x40
 8002f02:	f7ff ff09 	bl	8002d18 <_malloc_r>
 8002f06:	6028      	str	r0, [r5, #0]
 8002f08:	6128      	str	r0, [r5, #16]
 8002f0a:	b930      	cbnz	r0, 8002f1a <_svfiprintf_r+0x32>
 8002f0c:	230c      	movs	r3, #12
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	f04f 30ff 	mov.w	r0, #4294967295
 8002f14:	b01d      	add	sp, #116	@ 0x74
 8002f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f1a:	2340      	movs	r3, #64	@ 0x40
 8002f1c:	616b      	str	r3, [r5, #20]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f22:	2320      	movs	r3, #32
 8002f24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002f28:	2330      	movs	r3, #48	@ 0x30
 8002f2a:	f04f 0901 	mov.w	r9, #1
 8002f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f32:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80030cc <_svfiprintf_r+0x1e4>
 8002f36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	469a      	mov	sl, r3
 8002f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f42:	b10a      	cbz	r2, 8002f48 <_svfiprintf_r+0x60>
 8002f44:	2a25      	cmp	r2, #37	@ 0x25
 8002f46:	d1f9      	bne.n	8002f3c <_svfiprintf_r+0x54>
 8002f48:	ebba 0b04 	subs.w	fp, sl, r4
 8002f4c:	d00b      	beq.n	8002f66 <_svfiprintf_r+0x7e>
 8002f4e:	465b      	mov	r3, fp
 8002f50:	4622      	mov	r2, r4
 8002f52:	4629      	mov	r1, r5
 8002f54:	4638      	mov	r0, r7
 8002f56:	f7ff ff6b 	bl	8002e30 <__ssputs_r>
 8002f5a:	3001      	adds	r0, #1
 8002f5c:	f000 80a7 	beq.w	80030ae <_svfiprintf_r+0x1c6>
 8002f60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f62:	445a      	add	r2, fp
 8002f64:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f66:	f89a 3000 	ldrb.w	r3, [sl]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 809f 	beq.w	80030ae <_svfiprintf_r+0x1c6>
 8002f70:	2300      	movs	r3, #0
 8002f72:	f04f 32ff 	mov.w	r2, #4294967295
 8002f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f7a:	f10a 0a01 	add.w	sl, sl, #1
 8002f7e:	9304      	str	r3, [sp, #16]
 8002f80:	9307      	str	r3, [sp, #28]
 8002f82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f86:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f88:	4654      	mov	r4, sl
 8002f8a:	2205      	movs	r2, #5
 8002f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f90:	484e      	ldr	r0, [pc, #312]	@ (80030cc <_svfiprintf_r+0x1e4>)
 8002f92:	f000 fa61 	bl	8003458 <memchr>
 8002f96:	9a04      	ldr	r2, [sp, #16]
 8002f98:	b9d8      	cbnz	r0, 8002fd2 <_svfiprintf_r+0xea>
 8002f9a:	06d0      	lsls	r0, r2, #27
 8002f9c:	bf44      	itt	mi
 8002f9e:	2320      	movmi	r3, #32
 8002fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002fa4:	0711      	lsls	r1, r2, #28
 8002fa6:	bf44      	itt	mi
 8002fa8:	232b      	movmi	r3, #43	@ 0x2b
 8002faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002fae:	f89a 3000 	ldrb.w	r3, [sl]
 8002fb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fb4:	d015      	beq.n	8002fe2 <_svfiprintf_r+0xfa>
 8002fb6:	4654      	mov	r4, sl
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f04f 0c0a 	mov.w	ip, #10
 8002fbe:	9a07      	ldr	r2, [sp, #28]
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fc6:	3b30      	subs	r3, #48	@ 0x30
 8002fc8:	2b09      	cmp	r3, #9
 8002fca:	d94b      	bls.n	8003064 <_svfiprintf_r+0x17c>
 8002fcc:	b1b0      	cbz	r0, 8002ffc <_svfiprintf_r+0x114>
 8002fce:	9207      	str	r2, [sp, #28]
 8002fd0:	e014      	b.n	8002ffc <_svfiprintf_r+0x114>
 8002fd2:	eba0 0308 	sub.w	r3, r0, r8
 8002fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	46a2      	mov	sl, r4
 8002fde:	9304      	str	r3, [sp, #16]
 8002fe0:	e7d2      	b.n	8002f88 <_svfiprintf_r+0xa0>
 8002fe2:	9b03      	ldr	r3, [sp, #12]
 8002fe4:	1d19      	adds	r1, r3, #4
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	9103      	str	r1, [sp, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bfbb      	ittet	lt
 8002fee:	425b      	neglt	r3, r3
 8002ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8002ff4:	9307      	strge	r3, [sp, #28]
 8002ff6:	9307      	strlt	r3, [sp, #28]
 8002ff8:	bfb8      	it	lt
 8002ffa:	9204      	strlt	r2, [sp, #16]
 8002ffc:	7823      	ldrb	r3, [r4, #0]
 8002ffe:	2b2e      	cmp	r3, #46	@ 0x2e
 8003000:	d10a      	bne.n	8003018 <_svfiprintf_r+0x130>
 8003002:	7863      	ldrb	r3, [r4, #1]
 8003004:	2b2a      	cmp	r3, #42	@ 0x2a
 8003006:	d132      	bne.n	800306e <_svfiprintf_r+0x186>
 8003008:	9b03      	ldr	r3, [sp, #12]
 800300a:	3402      	adds	r4, #2
 800300c:	1d1a      	adds	r2, r3, #4
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	9203      	str	r2, [sp, #12]
 8003012:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003016:	9305      	str	r3, [sp, #20]
 8003018:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80030d0 <_svfiprintf_r+0x1e8>
 800301c:	2203      	movs	r2, #3
 800301e:	4650      	mov	r0, sl
 8003020:	7821      	ldrb	r1, [r4, #0]
 8003022:	f000 fa19 	bl	8003458 <memchr>
 8003026:	b138      	cbz	r0, 8003038 <_svfiprintf_r+0x150>
 8003028:	2240      	movs	r2, #64	@ 0x40
 800302a:	9b04      	ldr	r3, [sp, #16]
 800302c:	eba0 000a 	sub.w	r0, r0, sl
 8003030:	4082      	lsls	r2, r0
 8003032:	4313      	orrs	r3, r2
 8003034:	3401      	adds	r4, #1
 8003036:	9304      	str	r3, [sp, #16]
 8003038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800303c:	2206      	movs	r2, #6
 800303e:	4825      	ldr	r0, [pc, #148]	@ (80030d4 <_svfiprintf_r+0x1ec>)
 8003040:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003044:	f000 fa08 	bl	8003458 <memchr>
 8003048:	2800      	cmp	r0, #0
 800304a:	d036      	beq.n	80030ba <_svfiprintf_r+0x1d2>
 800304c:	4b22      	ldr	r3, [pc, #136]	@ (80030d8 <_svfiprintf_r+0x1f0>)
 800304e:	bb1b      	cbnz	r3, 8003098 <_svfiprintf_r+0x1b0>
 8003050:	9b03      	ldr	r3, [sp, #12]
 8003052:	3307      	adds	r3, #7
 8003054:	f023 0307 	bic.w	r3, r3, #7
 8003058:	3308      	adds	r3, #8
 800305a:	9303      	str	r3, [sp, #12]
 800305c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800305e:	4433      	add	r3, r6
 8003060:	9309      	str	r3, [sp, #36]	@ 0x24
 8003062:	e76a      	b.n	8002f3a <_svfiprintf_r+0x52>
 8003064:	460c      	mov	r4, r1
 8003066:	2001      	movs	r0, #1
 8003068:	fb0c 3202 	mla	r2, ip, r2, r3
 800306c:	e7a8      	b.n	8002fc0 <_svfiprintf_r+0xd8>
 800306e:	2300      	movs	r3, #0
 8003070:	f04f 0c0a 	mov.w	ip, #10
 8003074:	4619      	mov	r1, r3
 8003076:	3401      	adds	r4, #1
 8003078:	9305      	str	r3, [sp, #20]
 800307a:	4620      	mov	r0, r4
 800307c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003080:	3a30      	subs	r2, #48	@ 0x30
 8003082:	2a09      	cmp	r2, #9
 8003084:	d903      	bls.n	800308e <_svfiprintf_r+0x1a6>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0c6      	beq.n	8003018 <_svfiprintf_r+0x130>
 800308a:	9105      	str	r1, [sp, #20]
 800308c:	e7c4      	b.n	8003018 <_svfiprintf_r+0x130>
 800308e:	4604      	mov	r4, r0
 8003090:	2301      	movs	r3, #1
 8003092:	fb0c 2101 	mla	r1, ip, r1, r2
 8003096:	e7f0      	b.n	800307a <_svfiprintf_r+0x192>
 8003098:	ab03      	add	r3, sp, #12
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	462a      	mov	r2, r5
 800309e:	4638      	mov	r0, r7
 80030a0:	4b0e      	ldr	r3, [pc, #56]	@ (80030dc <_svfiprintf_r+0x1f4>)
 80030a2:	a904      	add	r1, sp, #16
 80030a4:	f3af 8000 	nop.w
 80030a8:	1c42      	adds	r2, r0, #1
 80030aa:	4606      	mov	r6, r0
 80030ac:	d1d6      	bne.n	800305c <_svfiprintf_r+0x174>
 80030ae:	89ab      	ldrh	r3, [r5, #12]
 80030b0:	065b      	lsls	r3, r3, #25
 80030b2:	f53f af2d 	bmi.w	8002f10 <_svfiprintf_r+0x28>
 80030b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80030b8:	e72c      	b.n	8002f14 <_svfiprintf_r+0x2c>
 80030ba:	ab03      	add	r3, sp, #12
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	462a      	mov	r2, r5
 80030c0:	4638      	mov	r0, r7
 80030c2:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <_svfiprintf_r+0x1f4>)
 80030c4:	a904      	add	r1, sp, #16
 80030c6:	f000 f87d 	bl	80031c4 <_printf_i>
 80030ca:	e7ed      	b.n	80030a8 <_svfiprintf_r+0x1c0>
 80030cc:	08003572 	.word	0x08003572
 80030d0:	08003578 	.word	0x08003578
 80030d4:	0800357c 	.word	0x0800357c
 80030d8:	00000000 	.word	0x00000000
 80030dc:	08002e31 	.word	0x08002e31

080030e0 <_printf_common>:
 80030e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e4:	4616      	mov	r6, r2
 80030e6:	4698      	mov	r8, r3
 80030e8:	688a      	ldr	r2, [r1, #8]
 80030ea:	690b      	ldr	r3, [r1, #16]
 80030ec:	4607      	mov	r7, r0
 80030ee:	4293      	cmp	r3, r2
 80030f0:	bfb8      	it	lt
 80030f2:	4613      	movlt	r3, r2
 80030f4:	6033      	str	r3, [r6, #0]
 80030f6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80030fa:	460c      	mov	r4, r1
 80030fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003100:	b10a      	cbz	r2, 8003106 <_printf_common+0x26>
 8003102:	3301      	adds	r3, #1
 8003104:	6033      	str	r3, [r6, #0]
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	0699      	lsls	r1, r3, #26
 800310a:	bf42      	ittt	mi
 800310c:	6833      	ldrmi	r3, [r6, #0]
 800310e:	3302      	addmi	r3, #2
 8003110:	6033      	strmi	r3, [r6, #0]
 8003112:	6825      	ldr	r5, [r4, #0]
 8003114:	f015 0506 	ands.w	r5, r5, #6
 8003118:	d106      	bne.n	8003128 <_printf_common+0x48>
 800311a:	f104 0a19 	add.w	sl, r4, #25
 800311e:	68e3      	ldr	r3, [r4, #12]
 8003120:	6832      	ldr	r2, [r6, #0]
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	42ab      	cmp	r3, r5
 8003126:	dc2b      	bgt.n	8003180 <_printf_common+0xa0>
 8003128:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800312c:	6822      	ldr	r2, [r4, #0]
 800312e:	3b00      	subs	r3, #0
 8003130:	bf18      	it	ne
 8003132:	2301      	movne	r3, #1
 8003134:	0692      	lsls	r2, r2, #26
 8003136:	d430      	bmi.n	800319a <_printf_common+0xba>
 8003138:	4641      	mov	r1, r8
 800313a:	4638      	mov	r0, r7
 800313c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003140:	47c8      	blx	r9
 8003142:	3001      	adds	r0, #1
 8003144:	d023      	beq.n	800318e <_printf_common+0xae>
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	6922      	ldr	r2, [r4, #16]
 800314a:	f003 0306 	and.w	r3, r3, #6
 800314e:	2b04      	cmp	r3, #4
 8003150:	bf14      	ite	ne
 8003152:	2500      	movne	r5, #0
 8003154:	6833      	ldreq	r3, [r6, #0]
 8003156:	f04f 0600 	mov.w	r6, #0
 800315a:	bf08      	it	eq
 800315c:	68e5      	ldreq	r5, [r4, #12]
 800315e:	f104 041a 	add.w	r4, r4, #26
 8003162:	bf08      	it	eq
 8003164:	1aed      	subeq	r5, r5, r3
 8003166:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800316a:	bf08      	it	eq
 800316c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003170:	4293      	cmp	r3, r2
 8003172:	bfc4      	itt	gt
 8003174:	1a9b      	subgt	r3, r3, r2
 8003176:	18ed      	addgt	r5, r5, r3
 8003178:	42b5      	cmp	r5, r6
 800317a:	d11a      	bne.n	80031b2 <_printf_common+0xd2>
 800317c:	2000      	movs	r0, #0
 800317e:	e008      	b.n	8003192 <_printf_common+0xb2>
 8003180:	2301      	movs	r3, #1
 8003182:	4652      	mov	r2, sl
 8003184:	4641      	mov	r1, r8
 8003186:	4638      	mov	r0, r7
 8003188:	47c8      	blx	r9
 800318a:	3001      	adds	r0, #1
 800318c:	d103      	bne.n	8003196 <_printf_common+0xb6>
 800318e:	f04f 30ff 	mov.w	r0, #4294967295
 8003192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003196:	3501      	adds	r5, #1
 8003198:	e7c1      	b.n	800311e <_printf_common+0x3e>
 800319a:	2030      	movs	r0, #48	@ 0x30
 800319c:	18e1      	adds	r1, r4, r3
 800319e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80031a8:	4422      	add	r2, r4
 80031aa:	3302      	adds	r3, #2
 80031ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80031b0:	e7c2      	b.n	8003138 <_printf_common+0x58>
 80031b2:	2301      	movs	r3, #1
 80031b4:	4622      	mov	r2, r4
 80031b6:	4641      	mov	r1, r8
 80031b8:	4638      	mov	r0, r7
 80031ba:	47c8      	blx	r9
 80031bc:	3001      	adds	r0, #1
 80031be:	d0e6      	beq.n	800318e <_printf_common+0xae>
 80031c0:	3601      	adds	r6, #1
 80031c2:	e7d9      	b.n	8003178 <_printf_common+0x98>

080031c4 <_printf_i>:
 80031c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031c8:	7e0f      	ldrb	r7, [r1, #24]
 80031ca:	4691      	mov	r9, r2
 80031cc:	2f78      	cmp	r7, #120	@ 0x78
 80031ce:	4680      	mov	r8, r0
 80031d0:	460c      	mov	r4, r1
 80031d2:	469a      	mov	sl, r3
 80031d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80031d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80031da:	d807      	bhi.n	80031ec <_printf_i+0x28>
 80031dc:	2f62      	cmp	r7, #98	@ 0x62
 80031de:	d80a      	bhi.n	80031f6 <_printf_i+0x32>
 80031e0:	2f00      	cmp	r7, #0
 80031e2:	f000 80d3 	beq.w	800338c <_printf_i+0x1c8>
 80031e6:	2f58      	cmp	r7, #88	@ 0x58
 80031e8:	f000 80ba 	beq.w	8003360 <_printf_i+0x19c>
 80031ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80031f4:	e03a      	b.n	800326c <_printf_i+0xa8>
 80031f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80031fa:	2b15      	cmp	r3, #21
 80031fc:	d8f6      	bhi.n	80031ec <_printf_i+0x28>
 80031fe:	a101      	add	r1, pc, #4	@ (adr r1, 8003204 <_printf_i+0x40>)
 8003200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003204:	0800325d 	.word	0x0800325d
 8003208:	08003271 	.word	0x08003271
 800320c:	080031ed 	.word	0x080031ed
 8003210:	080031ed 	.word	0x080031ed
 8003214:	080031ed 	.word	0x080031ed
 8003218:	080031ed 	.word	0x080031ed
 800321c:	08003271 	.word	0x08003271
 8003220:	080031ed 	.word	0x080031ed
 8003224:	080031ed 	.word	0x080031ed
 8003228:	080031ed 	.word	0x080031ed
 800322c:	080031ed 	.word	0x080031ed
 8003230:	08003373 	.word	0x08003373
 8003234:	0800329b 	.word	0x0800329b
 8003238:	0800332d 	.word	0x0800332d
 800323c:	080031ed 	.word	0x080031ed
 8003240:	080031ed 	.word	0x080031ed
 8003244:	08003395 	.word	0x08003395
 8003248:	080031ed 	.word	0x080031ed
 800324c:	0800329b 	.word	0x0800329b
 8003250:	080031ed 	.word	0x080031ed
 8003254:	080031ed 	.word	0x080031ed
 8003258:	08003335 	.word	0x08003335
 800325c:	6833      	ldr	r3, [r6, #0]
 800325e:	1d1a      	adds	r2, r3, #4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6032      	str	r2, [r6, #0]
 8003264:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003268:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800326c:	2301      	movs	r3, #1
 800326e:	e09e      	b.n	80033ae <_printf_i+0x1ea>
 8003270:	6833      	ldr	r3, [r6, #0]
 8003272:	6820      	ldr	r0, [r4, #0]
 8003274:	1d19      	adds	r1, r3, #4
 8003276:	6031      	str	r1, [r6, #0]
 8003278:	0606      	lsls	r6, r0, #24
 800327a:	d501      	bpl.n	8003280 <_printf_i+0xbc>
 800327c:	681d      	ldr	r5, [r3, #0]
 800327e:	e003      	b.n	8003288 <_printf_i+0xc4>
 8003280:	0645      	lsls	r5, r0, #25
 8003282:	d5fb      	bpl.n	800327c <_printf_i+0xb8>
 8003284:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003288:	2d00      	cmp	r5, #0
 800328a:	da03      	bge.n	8003294 <_printf_i+0xd0>
 800328c:	232d      	movs	r3, #45	@ 0x2d
 800328e:	426d      	negs	r5, r5
 8003290:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003294:	230a      	movs	r3, #10
 8003296:	4859      	ldr	r0, [pc, #356]	@ (80033fc <_printf_i+0x238>)
 8003298:	e011      	b.n	80032be <_printf_i+0xfa>
 800329a:	6821      	ldr	r1, [r4, #0]
 800329c:	6833      	ldr	r3, [r6, #0]
 800329e:	0608      	lsls	r0, r1, #24
 80032a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80032a4:	d402      	bmi.n	80032ac <_printf_i+0xe8>
 80032a6:	0649      	lsls	r1, r1, #25
 80032a8:	bf48      	it	mi
 80032aa:	b2ad      	uxthmi	r5, r5
 80032ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80032ae:	6033      	str	r3, [r6, #0]
 80032b0:	bf14      	ite	ne
 80032b2:	230a      	movne	r3, #10
 80032b4:	2308      	moveq	r3, #8
 80032b6:	4851      	ldr	r0, [pc, #324]	@ (80033fc <_printf_i+0x238>)
 80032b8:	2100      	movs	r1, #0
 80032ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80032be:	6866      	ldr	r6, [r4, #4]
 80032c0:	2e00      	cmp	r6, #0
 80032c2:	bfa8      	it	ge
 80032c4:	6821      	ldrge	r1, [r4, #0]
 80032c6:	60a6      	str	r6, [r4, #8]
 80032c8:	bfa4      	itt	ge
 80032ca:	f021 0104 	bicge.w	r1, r1, #4
 80032ce:	6021      	strge	r1, [r4, #0]
 80032d0:	b90d      	cbnz	r5, 80032d6 <_printf_i+0x112>
 80032d2:	2e00      	cmp	r6, #0
 80032d4:	d04b      	beq.n	800336e <_printf_i+0x1aa>
 80032d6:	4616      	mov	r6, r2
 80032d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80032dc:	fb03 5711 	mls	r7, r3, r1, r5
 80032e0:	5dc7      	ldrb	r7, [r0, r7]
 80032e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032e6:	462f      	mov	r7, r5
 80032e8:	42bb      	cmp	r3, r7
 80032ea:	460d      	mov	r5, r1
 80032ec:	d9f4      	bls.n	80032d8 <_printf_i+0x114>
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d10b      	bne.n	800330a <_printf_i+0x146>
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	07df      	lsls	r7, r3, #31
 80032f6:	d508      	bpl.n	800330a <_printf_i+0x146>
 80032f8:	6923      	ldr	r3, [r4, #16]
 80032fa:	6861      	ldr	r1, [r4, #4]
 80032fc:	4299      	cmp	r1, r3
 80032fe:	bfde      	ittt	le
 8003300:	2330      	movle	r3, #48	@ 0x30
 8003302:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003306:	f106 36ff 	addle.w	r6, r6, #4294967295
 800330a:	1b92      	subs	r2, r2, r6
 800330c:	6122      	str	r2, [r4, #16]
 800330e:	464b      	mov	r3, r9
 8003310:	4621      	mov	r1, r4
 8003312:	4640      	mov	r0, r8
 8003314:	f8cd a000 	str.w	sl, [sp]
 8003318:	aa03      	add	r2, sp, #12
 800331a:	f7ff fee1 	bl	80030e0 <_printf_common>
 800331e:	3001      	adds	r0, #1
 8003320:	d14a      	bne.n	80033b8 <_printf_i+0x1f4>
 8003322:	f04f 30ff 	mov.w	r0, #4294967295
 8003326:	b004      	add	sp, #16
 8003328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	f043 0320 	orr.w	r3, r3, #32
 8003332:	6023      	str	r3, [r4, #0]
 8003334:	2778      	movs	r7, #120	@ 0x78
 8003336:	4832      	ldr	r0, [pc, #200]	@ (8003400 <_printf_i+0x23c>)
 8003338:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	6831      	ldr	r1, [r6, #0]
 8003340:	061f      	lsls	r7, r3, #24
 8003342:	f851 5b04 	ldr.w	r5, [r1], #4
 8003346:	d402      	bmi.n	800334e <_printf_i+0x18a>
 8003348:	065f      	lsls	r7, r3, #25
 800334a:	bf48      	it	mi
 800334c:	b2ad      	uxthmi	r5, r5
 800334e:	6031      	str	r1, [r6, #0]
 8003350:	07d9      	lsls	r1, r3, #31
 8003352:	bf44      	itt	mi
 8003354:	f043 0320 	orrmi.w	r3, r3, #32
 8003358:	6023      	strmi	r3, [r4, #0]
 800335a:	b11d      	cbz	r5, 8003364 <_printf_i+0x1a0>
 800335c:	2310      	movs	r3, #16
 800335e:	e7ab      	b.n	80032b8 <_printf_i+0xf4>
 8003360:	4826      	ldr	r0, [pc, #152]	@ (80033fc <_printf_i+0x238>)
 8003362:	e7e9      	b.n	8003338 <_printf_i+0x174>
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	f023 0320 	bic.w	r3, r3, #32
 800336a:	6023      	str	r3, [r4, #0]
 800336c:	e7f6      	b.n	800335c <_printf_i+0x198>
 800336e:	4616      	mov	r6, r2
 8003370:	e7bd      	b.n	80032ee <_printf_i+0x12a>
 8003372:	6833      	ldr	r3, [r6, #0]
 8003374:	6825      	ldr	r5, [r4, #0]
 8003376:	1d18      	adds	r0, r3, #4
 8003378:	6961      	ldr	r1, [r4, #20]
 800337a:	6030      	str	r0, [r6, #0]
 800337c:	062e      	lsls	r6, r5, #24
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	d501      	bpl.n	8003386 <_printf_i+0x1c2>
 8003382:	6019      	str	r1, [r3, #0]
 8003384:	e002      	b.n	800338c <_printf_i+0x1c8>
 8003386:	0668      	lsls	r0, r5, #25
 8003388:	d5fb      	bpl.n	8003382 <_printf_i+0x1be>
 800338a:	8019      	strh	r1, [r3, #0]
 800338c:	2300      	movs	r3, #0
 800338e:	4616      	mov	r6, r2
 8003390:	6123      	str	r3, [r4, #16]
 8003392:	e7bc      	b.n	800330e <_printf_i+0x14a>
 8003394:	6833      	ldr	r3, [r6, #0]
 8003396:	2100      	movs	r1, #0
 8003398:	1d1a      	adds	r2, r3, #4
 800339a:	6032      	str	r2, [r6, #0]
 800339c:	681e      	ldr	r6, [r3, #0]
 800339e:	6862      	ldr	r2, [r4, #4]
 80033a0:	4630      	mov	r0, r6
 80033a2:	f000 f859 	bl	8003458 <memchr>
 80033a6:	b108      	cbz	r0, 80033ac <_printf_i+0x1e8>
 80033a8:	1b80      	subs	r0, r0, r6
 80033aa:	6060      	str	r0, [r4, #4]
 80033ac:	6863      	ldr	r3, [r4, #4]
 80033ae:	6123      	str	r3, [r4, #16]
 80033b0:	2300      	movs	r3, #0
 80033b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033b6:	e7aa      	b.n	800330e <_printf_i+0x14a>
 80033b8:	4632      	mov	r2, r6
 80033ba:	4649      	mov	r1, r9
 80033bc:	4640      	mov	r0, r8
 80033be:	6923      	ldr	r3, [r4, #16]
 80033c0:	47d0      	blx	sl
 80033c2:	3001      	adds	r0, #1
 80033c4:	d0ad      	beq.n	8003322 <_printf_i+0x15e>
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	079b      	lsls	r3, r3, #30
 80033ca:	d413      	bmi.n	80033f4 <_printf_i+0x230>
 80033cc:	68e0      	ldr	r0, [r4, #12]
 80033ce:	9b03      	ldr	r3, [sp, #12]
 80033d0:	4298      	cmp	r0, r3
 80033d2:	bfb8      	it	lt
 80033d4:	4618      	movlt	r0, r3
 80033d6:	e7a6      	b.n	8003326 <_printf_i+0x162>
 80033d8:	2301      	movs	r3, #1
 80033da:	4632      	mov	r2, r6
 80033dc:	4649      	mov	r1, r9
 80033de:	4640      	mov	r0, r8
 80033e0:	47d0      	blx	sl
 80033e2:	3001      	adds	r0, #1
 80033e4:	d09d      	beq.n	8003322 <_printf_i+0x15e>
 80033e6:	3501      	adds	r5, #1
 80033e8:	68e3      	ldr	r3, [r4, #12]
 80033ea:	9903      	ldr	r1, [sp, #12]
 80033ec:	1a5b      	subs	r3, r3, r1
 80033ee:	42ab      	cmp	r3, r5
 80033f0:	dcf2      	bgt.n	80033d8 <_printf_i+0x214>
 80033f2:	e7eb      	b.n	80033cc <_printf_i+0x208>
 80033f4:	2500      	movs	r5, #0
 80033f6:	f104 0619 	add.w	r6, r4, #25
 80033fa:	e7f5      	b.n	80033e8 <_printf_i+0x224>
 80033fc:	08003583 	.word	0x08003583
 8003400:	08003594 	.word	0x08003594

08003404 <memmove>:
 8003404:	4288      	cmp	r0, r1
 8003406:	b510      	push	{r4, lr}
 8003408:	eb01 0402 	add.w	r4, r1, r2
 800340c:	d902      	bls.n	8003414 <memmove+0x10>
 800340e:	4284      	cmp	r4, r0
 8003410:	4623      	mov	r3, r4
 8003412:	d807      	bhi.n	8003424 <memmove+0x20>
 8003414:	1e43      	subs	r3, r0, #1
 8003416:	42a1      	cmp	r1, r4
 8003418:	d008      	beq.n	800342c <memmove+0x28>
 800341a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800341e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003422:	e7f8      	b.n	8003416 <memmove+0x12>
 8003424:	4601      	mov	r1, r0
 8003426:	4402      	add	r2, r0
 8003428:	428a      	cmp	r2, r1
 800342a:	d100      	bne.n	800342e <memmove+0x2a>
 800342c:	bd10      	pop	{r4, pc}
 800342e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003432:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003436:	e7f7      	b.n	8003428 <memmove+0x24>

08003438 <_sbrk_r>:
 8003438:	b538      	push	{r3, r4, r5, lr}
 800343a:	2300      	movs	r3, #0
 800343c:	4d05      	ldr	r5, [pc, #20]	@ (8003454 <_sbrk_r+0x1c>)
 800343e:	4604      	mov	r4, r0
 8003440:	4608      	mov	r0, r1
 8003442:	602b      	str	r3, [r5, #0]
 8003444:	f7fd fd7e 	bl	8000f44 <_sbrk>
 8003448:	1c43      	adds	r3, r0, #1
 800344a:	d102      	bne.n	8003452 <_sbrk_r+0x1a>
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	b103      	cbz	r3, 8003452 <_sbrk_r+0x1a>
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	bd38      	pop	{r3, r4, r5, pc}
 8003454:	20000354 	.word	0x20000354

08003458 <memchr>:
 8003458:	4603      	mov	r3, r0
 800345a:	b510      	push	{r4, lr}
 800345c:	b2c9      	uxtb	r1, r1
 800345e:	4402      	add	r2, r0
 8003460:	4293      	cmp	r3, r2
 8003462:	4618      	mov	r0, r3
 8003464:	d101      	bne.n	800346a <memchr+0x12>
 8003466:	2000      	movs	r0, #0
 8003468:	e003      	b.n	8003472 <memchr+0x1a>
 800346a:	7804      	ldrb	r4, [r0, #0]
 800346c:	3301      	adds	r3, #1
 800346e:	428c      	cmp	r4, r1
 8003470:	d1f6      	bne.n	8003460 <memchr+0x8>
 8003472:	bd10      	pop	{r4, pc}

08003474 <memcpy>:
 8003474:	440a      	add	r2, r1
 8003476:	4291      	cmp	r1, r2
 8003478:	f100 33ff 	add.w	r3, r0, #4294967295
 800347c:	d100      	bne.n	8003480 <memcpy+0xc>
 800347e:	4770      	bx	lr
 8003480:	b510      	push	{r4, lr}
 8003482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003486:	4291      	cmp	r1, r2
 8003488:	f803 4f01 	strb.w	r4, [r3, #1]!
 800348c:	d1f9      	bne.n	8003482 <memcpy+0xe>
 800348e:	bd10      	pop	{r4, pc}

08003490 <_realloc_r>:
 8003490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003494:	4680      	mov	r8, r0
 8003496:	4615      	mov	r5, r2
 8003498:	460c      	mov	r4, r1
 800349a:	b921      	cbnz	r1, 80034a6 <_realloc_r+0x16>
 800349c:	4611      	mov	r1, r2
 800349e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034a2:	f7ff bc39 	b.w	8002d18 <_malloc_r>
 80034a6:	b92a      	cbnz	r2, 80034b4 <_realloc_r+0x24>
 80034a8:	f7ff fbcc 	bl	8002c44 <_free_r>
 80034ac:	2400      	movs	r4, #0
 80034ae:	4620      	mov	r0, r4
 80034b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034b4:	f000 f81a 	bl	80034ec <_malloc_usable_size_r>
 80034b8:	4285      	cmp	r5, r0
 80034ba:	4606      	mov	r6, r0
 80034bc:	d802      	bhi.n	80034c4 <_realloc_r+0x34>
 80034be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80034c2:	d8f4      	bhi.n	80034ae <_realloc_r+0x1e>
 80034c4:	4629      	mov	r1, r5
 80034c6:	4640      	mov	r0, r8
 80034c8:	f7ff fc26 	bl	8002d18 <_malloc_r>
 80034cc:	4607      	mov	r7, r0
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d0ec      	beq.n	80034ac <_realloc_r+0x1c>
 80034d2:	42b5      	cmp	r5, r6
 80034d4:	462a      	mov	r2, r5
 80034d6:	4621      	mov	r1, r4
 80034d8:	bf28      	it	cs
 80034da:	4632      	movcs	r2, r6
 80034dc:	f7ff ffca 	bl	8003474 <memcpy>
 80034e0:	4621      	mov	r1, r4
 80034e2:	4640      	mov	r0, r8
 80034e4:	f7ff fbae 	bl	8002c44 <_free_r>
 80034e8:	463c      	mov	r4, r7
 80034ea:	e7e0      	b.n	80034ae <_realloc_r+0x1e>

080034ec <_malloc_usable_size_r>:
 80034ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034f0:	1f18      	subs	r0, r3, #4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bfbc      	itt	lt
 80034f6:	580b      	ldrlt	r3, [r1, r0]
 80034f8:	18c0      	addlt	r0, r0, r3
 80034fa:	4770      	bx	lr

080034fc <_init>:
 80034fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fe:	bf00      	nop
 8003500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003502:	bc08      	pop	{r3}
 8003504:	469e      	mov	lr, r3
 8003506:	4770      	bx	lr

08003508 <_fini>:
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	bf00      	nop
 800350c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350e:	bc08      	pop	{r3}
 8003510:	469e      	mov	lr, r3
 8003512:	4770      	bx	lr
