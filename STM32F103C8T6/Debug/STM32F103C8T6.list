
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002468  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002574  08002574  00003574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025ac  080025ac  00004018  2**0
                  CONTENTS
  4 .ARM          00000000  080025ac  080025ac  00004018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025ac  080025ac  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025ac  080025ac  000035ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025b0  080025b0  000035b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080025b4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000018  080025cc  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  080025cc  00004190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ca4  00000000  00000000  00004041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b98  00000000  00000000  0000dce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  0000f880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f0  00000000  00000000  00010418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176bb  00000000  00000000  00010d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1dd  00000000  00000000  000283c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089684  00000000  00000000  000345a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bdc24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fdc  00000000  00000000  000bdc68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000c0c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	0800255c 	.word	0x0800255c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	0800255c 	.word	0x0800255c

0800014c <KeyPad_Scan>:
    /* Set all rows to high */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
}

/* Scan the 4x5 keypad and return the pressed key value */
uint8_t KeyPad_Scan(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    uint32_t currentMillis = HAL_GetTick();
 8000152:	f000 fcc1 	bl	8000ad8 <HAL_GetTick>
 8000156:	6038      	str	r0, [r7, #0]

    if (currentMillis - lastDebounceTime < DEBOUNCE_DELAY) {
 8000158:	4b23      	ldr	r3, [pc, #140]	@ (80001e8 <KeyPad_Scan+0x9c>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	683a      	ldr	r2, [r7, #0]
 800015e:	1ad3      	subs	r3, r2, r3
 8000160:	2b63      	cmp	r3, #99	@ 0x63
 8000162:	d801      	bhi.n	8000168 <KeyPad_Scan+0x1c>
        return 0xFF;
 8000164:	23ff      	movs	r3, #255	@ 0xff
 8000166:	e03b      	b.n	80001e0 <KeyPad_Scan+0x94>
    }

    for (uint8_t row = 0; row < 4; row++) {
 8000168:	2300      	movs	r3, #0
 800016a:	71fb      	strb	r3, [r7, #7]
 800016c:	e034      	b.n	80001d8 <KeyPad_Scan+0x8c>
        /* Set all rows low */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000174:	481d      	ldr	r0, [pc, #116]	@ (80001ec <KeyPad_Scan+0xa0>)
 8000176:	f000 ff62 	bl	800103e <HAL_GPIO_WritePin>

        /* Set the current row high */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 << row, GPIO_PIN_SET);
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	2240      	movs	r2, #64	@ 0x40
 800017e:	fa02 f303 	lsl.w	r3, r2, r3
 8000182:	b29b      	uxth	r3, r3
 8000184:	2201      	movs	r2, #1
 8000186:	4619      	mov	r1, r3
 8000188:	4818      	ldr	r0, [pc, #96]	@ (80001ec <KeyPad_Scan+0xa0>)
 800018a:	f000 ff58 	bl	800103e <HAL_GPIO_WritePin>

        /* Read each column */
        for (uint8_t col = 0; col < 5; col++) {
 800018e:	2300      	movs	r3, #0
 8000190:	71bb      	strb	r3, [r7, #6]
 8000192:	e01b      	b.n	80001cc <KeyPad_Scan+0x80>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 << col) == GPIO_PIN_SET) {
 8000194:	79bb      	ldrb	r3, [r7, #6]
 8000196:	2201      	movs	r2, #1
 8000198:	fa02 f303 	lsl.w	r3, r2, r3
 800019c:	b29b      	uxth	r3, r3
 800019e:	4619      	mov	r1, r3
 80001a0:	4812      	ldr	r0, [pc, #72]	@ (80001ec <KeyPad_Scan+0xa0>)
 80001a2:	f000 ff35 	bl	8001010 <HAL_GPIO_ReadPin>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b01      	cmp	r3, #1
 80001aa:	d10c      	bne.n	80001c6 <KeyPad_Scan+0x7a>
                lastDebounceTime = currentMillis;
 80001ac:	4a0e      	ldr	r2, [pc, #56]	@ (80001e8 <KeyPad_Scan+0x9c>)
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	6013      	str	r3, [r2, #0]
                return keyMap[row][col];
 80001b2:	79fa      	ldrb	r2, [r7, #7]
 80001b4:	79b9      	ldrb	r1, [r7, #6]
 80001b6:	480e      	ldr	r0, [pc, #56]	@ (80001f0 <KeyPad_Scan+0xa4>)
 80001b8:	4613      	mov	r3, r2
 80001ba:	009b      	lsls	r3, r3, #2
 80001bc:	4413      	add	r3, r2
 80001be:	4403      	add	r3, r0
 80001c0:	440b      	add	r3, r1
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	e00c      	b.n	80001e0 <KeyPad_Scan+0x94>
        for (uint8_t col = 0; col < 5; col++) {
 80001c6:	79bb      	ldrb	r3, [r7, #6]
 80001c8:	3301      	adds	r3, #1
 80001ca:	71bb      	strb	r3, [r7, #6]
 80001cc:	79bb      	ldrb	r3, [r7, #6]
 80001ce:	2b04      	cmp	r3, #4
 80001d0:	d9e0      	bls.n	8000194 <KeyPad_Scan+0x48>
    for (uint8_t row = 0; row < 4; row++) {
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	3301      	adds	r3, #1
 80001d6:	71fb      	strb	r3, [r7, #7]
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	2b03      	cmp	r3, #3
 80001dc:	d9c7      	bls.n	800016e <KeyPad_Scan+0x22>
            }
        }
    }

    return 0xFF;
 80001de:	23ff      	movs	r3, #255	@ 0xff
}
 80001e0:	4618      	mov	r0, r3
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	20000034 	.word	0x20000034
 80001ec:	40010c00 	.word	0x40010c00
 80001f0:	08002574 	.word	0x08002574

080001f4 <ShiftOut_SPI>:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
}
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	6039      	str	r1, [r7, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Pull STCP (Latch) low
 80001fe:	2200      	movs	r2, #0
 8000200:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000204:	480a      	ldr	r0, [pc, #40]	@ (8000230 <ShiftOut_SPI+0x3c>)
 8000206:	f000 ff1a 	bl	800103e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, 300); // Transmit data
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	b29a      	uxth	r2, r3
 800020e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000212:	6879      	ldr	r1, [r7, #4]
 8000214:	4807      	ldr	r0, [pc, #28]	@ (8000234 <ShiftOut_SPI+0x40>)
 8000216:	f001 fb8d 	bl	8001934 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Pull STCP (Latch) high
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <ShiftOut_SPI+0x3c>)
 8000222:	f000 ff0c 	bl	800103e <HAL_GPIO_WritePin>

}
 8000226:	bf00      	nop
 8000228:	3708      	adds	r7, #8
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010c00 	.word	0x40010c00
 8000234:	20000090 	.word	0x20000090

08000238 <ShiftOut_LCD>:

void ShiftOut_LCD(uint8_t *data, size_t size)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // Pull STCP (Latch) low
 8000242:	2200      	movs	r2, #0
 8000244:	2140      	movs	r1, #64	@ 0x40
 8000246:	480a      	ldr	r0, [pc, #40]	@ (8000270 <ShiftOut_LCD+0x38>)
 8000248:	f000 fef9 	bl	800103e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, size, 300); // Transmit data
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	b29a      	uxth	r2, r3
 8000250:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000254:	6879      	ldr	r1, [r7, #4]
 8000256:	4807      	ldr	r0, [pc, #28]	@ (8000274 <ShiftOut_LCD+0x3c>)
 8000258:	f001 fb6c 	bl	8001934 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // Pull STCP (Latch) high
 800025c:	2201      	movs	r2, #1
 800025e:	2140      	movs	r1, #64	@ 0x40
 8000260:	4803      	ldr	r0, [pc, #12]	@ (8000270 <ShiftOut_LCD+0x38>)
 8000262:	f000 feec 	bl	800103e <HAL_GPIO_WritePin>
}
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40010800 	.word	0x40010800
 8000274:	20000038 	.word	0x20000038

08000278 <Num_Buff_Conv>:

uint8_t* Num_Buff_Conv(uint32_t num) {
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
    // Ensure the number is within the valid range
    if (num > 99999999) {
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4a15      	ldr	r2, [pc, #84]	@ (80002d8 <Num_Buff_Conv+0x60>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d901      	bls.n	800028c <Num_Buff_Conv+0x14>
        return NULL; // Return NULL for invalid input
 8000288:	2300      	movs	r3, #0
 800028a:	e020      	b.n	80002ce <Num_Buff_Conv+0x56>
    }

    static uint8_t output[8]; // Static array to hold the result
    for (int i = 0; i < 8; i++) {
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e019      	b.n	80002c6 <Num_Buff_Conv+0x4e>
        output[i] = digitMapWithDP[num % 10]; // Get the least significant digit
 8000292:	6879      	ldr	r1, [r7, #4]
 8000294:	4b11      	ldr	r3, [pc, #68]	@ (80002dc <Num_Buff_Conv+0x64>)
 8000296:	fba3 2301 	umull	r2, r3, r3, r1
 800029a:	08da      	lsrs	r2, r3, #3
 800029c:	4613      	mov	r3, r2
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	4413      	add	r3, r2
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	1aca      	subs	r2, r1, r3
 80002a6:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <Num_Buff_Conv+0x68>)
 80002a8:	5c99      	ldrb	r1, [r3, r2]
 80002aa:	4a0e      	ldr	r2, [pc, #56]	@ (80002e4 <Num_Buff_Conv+0x6c>)
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	4413      	add	r3, r2
 80002b0:	460a      	mov	r2, r1
 80002b2:	701a      	strb	r2, [r3, #0]
        num /= 10;            // Remove the least significant digit from the number
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a09      	ldr	r2, [pc, #36]	@ (80002dc <Num_Buff_Conv+0x64>)
 80002b8:	fba2 2303 	umull	r2, r3, r2, r3
 80002bc:	08db      	lsrs	r3, r3, #3
 80002be:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 8; i++) {
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	2b07      	cmp	r3, #7
 80002ca:	dde2      	ble.n	8000292 <Num_Buff_Conv+0x1a>
    }

    return output;
 80002cc:	4b05      	ldr	r3, [pc, #20]	@ (80002e4 <Num_Buff_Conv+0x6c>)
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3714      	adds	r7, #20
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	05f5e0ff 	.word	0x05f5e0ff
 80002dc:	cccccccd 	.word	0xcccccccd
 80002e0:	20000000 	.word	0x20000000
 80002e4:	20000134 	.word	0x20000134

080002e8 <Update_LCD>:

void Update_LCD(uint32_t num){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	uint8_t* buffer=Num_Buff_Conv(num);
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f7ff ffc1 	bl	8000278 <Num_Buff_Conv>
 80002f6:	60f8      	str	r0, [r7, #12]
	if(buffer==NULL){
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d004      	beq.n	8000308 <Update_LCD+0x20>
		return;
	}
	ShiftOut_LCD(buffer,8);
 80002fe:	2108      	movs	r1, #8
 8000300:	68f8      	ldr	r0, [r7, #12]
 8000302:	f7ff ff99 	bl	8000238 <ShiftOut_LCD>
 8000306:	e000      	b.n	800030a <Update_LCD+0x22>
		return;
 8000308:	bf00      	nop
}
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fb87 	bl	8000a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f8a3 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f000 f995 	bl	800064c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000322:	f000 f911 	bl	8000548 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000326:	f000 f945 	bl	80005b4 <MX_TIM2_Init>
  MX_SPI1_Init();
 800032a:	f000 f8d7 	bl	80004dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800032e:	4846      	ldr	r0, [pc, #280]	@ (8000448 <main+0x138>)
 8000330:	f001 fd3a 	bl	8001da8 <HAL_TIM_Base_Start_IT>
  int i=0;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  setTimer(0,100);
 8000338:	2164      	movs	r1, #100	@ 0x64
 800033a:	2000      	movs	r0, #0
 800033c:	f000 fb06 	bl	800094c <setTimer>
  setTimer(1,100);
 8000340:	2164      	movs	r1, #100	@ 0x64
 8000342:	2001      	movs	r0, #1
 8000344:	f000 fb02 	bl	800094c <setTimer>
  setTimer(2,100);
 8000348:	2164      	movs	r1, #100	@ 0x64
 800034a:	2002      	movs	r0, #2
 800034c:	f000 fafe 	bl	800094c <setTimer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {
	  if(timer_flag[0]==1){
 8000350:	4b3e      	ldr	r3, [pc, #248]	@ (800044c <main+0x13c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d13c      	bne.n	80003d2 <main+0xc2>
		  uint8_t led_buffer[] = {0b11111111,digitMapWithDP[i%10],digitMapWithDP[(i+1)%10],digitMapWithDP[(i+2)%10]}; // Data to display '1' with DP
 8000358:	23ff      	movs	r3, #255	@ 0xff
 800035a:	713b      	strb	r3, [r7, #4]
 800035c:	68f9      	ldr	r1, [r7, #12]
 800035e:	4b3c      	ldr	r3, [pc, #240]	@ (8000450 <main+0x140>)
 8000360:	fb83 2301 	smull	r2, r3, r3, r1
 8000364:	109a      	asrs	r2, r3, #2
 8000366:	17cb      	asrs	r3, r1, #31
 8000368:	1ad2      	subs	r2, r2, r3
 800036a:	4613      	mov	r3, r2
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	4413      	add	r3, r2
 8000370:	005b      	lsls	r3, r3, #1
 8000372:	1aca      	subs	r2, r1, r3
 8000374:	4b37      	ldr	r3, [pc, #220]	@ (8000454 <main+0x144>)
 8000376:	5c9b      	ldrb	r3, [r3, r2]
 8000378:	717b      	strb	r3, [r7, #5]
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	1c59      	adds	r1, r3, #1
 800037e:	4b34      	ldr	r3, [pc, #208]	@ (8000450 <main+0x140>)
 8000380:	fb83 2301 	smull	r2, r3, r3, r1
 8000384:	109a      	asrs	r2, r3, #2
 8000386:	17cb      	asrs	r3, r1, #31
 8000388:	1ad2      	subs	r2, r2, r3
 800038a:	4613      	mov	r3, r2
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	4413      	add	r3, r2
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	1aca      	subs	r2, r1, r3
 8000394:	4b2f      	ldr	r3, [pc, #188]	@ (8000454 <main+0x144>)
 8000396:	5c9b      	ldrb	r3, [r3, r2]
 8000398:	71bb      	strb	r3, [r7, #6]
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	1c99      	adds	r1, r3, #2
 800039e:	4b2c      	ldr	r3, [pc, #176]	@ (8000450 <main+0x140>)
 80003a0:	fb83 2301 	smull	r2, r3, r3, r1
 80003a4:	109a      	asrs	r2, r3, #2
 80003a6:	17cb      	asrs	r3, r1, #31
 80003a8:	1ad2      	subs	r2, r2, r3
 80003aa:	4613      	mov	r3, r2
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	4413      	add	r3, r2
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	1aca      	subs	r2, r1, r3
 80003b4:	4b27      	ldr	r3, [pc, #156]	@ (8000454 <main+0x144>)
 80003b6:	5c9b      	ldrb	r3, [r3, r2]
 80003b8:	71fb      	strb	r3, [r7, #7]
		  ShiftOut_SPI(led_buffer, 4);
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2104      	movs	r1, #4
 80003be:	4618      	mov	r0, r3
 80003c0:	f7ff ff18 	bl	80001f4 <ShiftOut_SPI>
		  i++;
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	3301      	adds	r3, #1
 80003c8:	60fb      	str	r3, [r7, #12]
		  setTimer(0,100);
 80003ca:	2164      	movs	r1, #100	@ 0x64
 80003cc:	2000      	movs	r0, #0
 80003ce:	f000 fabd 	bl	800094c <setTimer>
	  }
	  if(timer_flag[1]==1){
 80003d2:	4b1e      	ldr	r3, [pc, #120]	@ (800044c <main+0x13c>)
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d1ba      	bne.n	8000350 <main+0x40>
		  keyPressed = KeyPad_Scan();
 80003da:	f7ff feb7 	bl	800014c <KeyPad_Scan>
 80003de:	4603      	mov	r3, r0
 80003e0:	461a      	mov	r2, r3
 80003e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000458 <main+0x148>)
 80003e4:	701a      	strb	r2, [r3, #0]
//			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
//
//		  }


		  if(keyPressed<10){
 80003e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000458 <main+0x148>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b09      	cmp	r3, #9
 80003ec:	d817      	bhi.n	800041e <main+0x10e>
			  uint32_t temp=lcd_num*10+keyPressed;
 80003ee:	4b1b      	ldr	r3, [pc, #108]	@ (800045c <main+0x14c>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	4613      	mov	r3, r2
 80003f4:	009b      	lsls	r3, r3, #2
 80003f6:	4413      	add	r3, r2
 80003f8:	005b      	lsls	r3, r3, #1
 80003fa:	461a      	mov	r2, r3
 80003fc:	4b16      	ldr	r3, [pc, #88]	@ (8000458 <main+0x148>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	4413      	add	r3, r2
 8000402:	60bb      	str	r3, [r7, #8]
			  if(temp<=999999){
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	4a16      	ldr	r2, [pc, #88]	@ (8000460 <main+0x150>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d818      	bhi.n	800043e <main+0x12e>
				  lcd_num=temp;
 800040c:	4a13      	ldr	r2, [pc, #76]	@ (800045c <main+0x14c>)
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	6013      	str	r3, [r2, #0]
				  Update_LCD(lcd_num);
 8000412:	4b12      	ldr	r3, [pc, #72]	@ (800045c <main+0x14c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff ff66 	bl	80002e8 <Update_LCD>
 800041c:	e00f      	b.n	800043e <main+0x12e>
			  }
		  }
		  else if(keyPressed>=10 &&keyPressed<100){
 800041e:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <main+0x148>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b09      	cmp	r3, #9
 8000424:	d90b      	bls.n	800043e <main+0x12e>
 8000426:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <main+0x148>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b63      	cmp	r3, #99	@ 0x63
 800042c:	d807      	bhi.n	800043e <main+0x12e>
			  lcd_num=0;
 800042e:	4b0b      	ldr	r3, [pc, #44]	@ (800045c <main+0x14c>)
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
			  Update_LCD(lcd_num);
 8000434:	4b09      	ldr	r3, [pc, #36]	@ (800045c <main+0x14c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff55 	bl	80002e8 <Update_LCD>
		  }
		  setTimer(1,10);
 800043e:	210a      	movs	r1, #10
 8000440:	2001      	movs	r0, #1
 8000442:	f000 fa83 	bl	800094c <setTimer>
	  if(timer_flag[0]==1){
 8000446:	e783      	b.n	8000350 <main+0x40>
 8000448:	200000e8 	.word	0x200000e8
 800044c:	20000164 	.word	0x20000164
 8000450:	66666667 	.word	0x66666667
 8000454:	20000000 	.word	0x20000000
 8000458:	2000000a 	.word	0x2000000a
 800045c:	20000130 	.word	0x20000130
 8000460:	000f423f 	.word	0x000f423f

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b090      	sub	sp, #64	@ 0x40
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	f107 0318 	add.w	r3, r7, #24
 800046e:	2228      	movs	r2, #40	@ 0x28
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f002 f846 	bl	8002504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000486:	2302      	movs	r3, #2
 8000488:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048a:	2301      	movs	r3, #1
 800048c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048e:	2310      	movs	r3, #16
 8000490:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000492:	2300      	movs	r3, #0
 8000494:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	f107 0318 	add.w	r3, r7, #24
 800049a:	4618      	mov	r0, r3
 800049c:	f000 fde8 	bl	8001070 <HAL_RCC_OscConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004a6:	f000 f94b 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004aa:	230f      	movs	r3, #15
 80004ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f001 f856 	bl	8001574 <HAL_RCC_ClockConfig>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004ce:	f000 f937 	bl	8000740 <Error_Handler>
  }
}
 80004d2:	bf00      	nop
 80004d4:	3740      	adds	r7, #64	@ 0x40
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004e0:	4b17      	ldr	r3, [pc, #92]	@ (8000540 <MX_SPI1_Init+0x64>)
 80004e2:	4a18      	ldr	r2, [pc, #96]	@ (8000544 <MX_SPI1_Init+0x68>)
 80004e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004e6:	4b16      	ldr	r3, [pc, #88]	@ (8000540 <MX_SPI1_Init+0x64>)
 80004e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80004ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004ee:	4b14      	ldr	r3, [pc, #80]	@ (8000540 <MX_SPI1_Init+0x64>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004f4:	4b12      	ldr	r3, [pc, #72]	@ (8000540 <MX_SPI1_Init+0x64>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004fa:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <MX_SPI1_Init+0x64>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000500:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <MX_SPI1_Init+0x64>)
 8000502:	2200      	movs	r2, #0
 8000504:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000506:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <MX_SPI1_Init+0x64>)
 8000508:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800050c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800050e:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <MX_SPI1_Init+0x64>)
 8000510:	2200      	movs	r2, #0
 8000512:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000514:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <MX_SPI1_Init+0x64>)
 8000516:	2200      	movs	r2, #0
 8000518:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800051a:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <MX_SPI1_Init+0x64>)
 800051c:	2200      	movs	r2, #0
 800051e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000520:	4b07      	ldr	r3, [pc, #28]	@ (8000540 <MX_SPI1_Init+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000526:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <MX_SPI1_Init+0x64>)
 8000528:	220a      	movs	r2, #10
 800052a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800052c:	4804      	ldr	r0, [pc, #16]	@ (8000540 <MX_SPI1_Init+0x64>)
 800052e:	f001 f97d 	bl	800182c <HAL_SPI_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000538:	f000 f902 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000038 	.word	0x20000038
 8000544:	40013000 	.word	0x40013000

08000548 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800054c:	4b17      	ldr	r3, [pc, #92]	@ (80005ac <MX_SPI2_Init+0x64>)
 800054e:	4a18      	ldr	r2, [pc, #96]	@ (80005b0 <MX_SPI2_Init+0x68>)
 8000550:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000552:	4b16      	ldr	r3, [pc, #88]	@ (80005ac <MX_SPI2_Init+0x64>)
 8000554:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000558:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800055a:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <MX_SPI2_Init+0x64>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000560:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <MX_SPI2_Init+0x64>)
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000566:	4b11      	ldr	r3, [pc, #68]	@ (80005ac <MX_SPI2_Init+0x64>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800056c:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <MX_SPI2_Init+0x64>)
 800056e:	2200      	movs	r2, #0
 8000570:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000572:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <MX_SPI2_Init+0x64>)
 8000574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000578:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800057a:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <MX_SPI2_Init+0x64>)
 800057c:	2200      	movs	r2, #0
 800057e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000580:	4b0a      	ldr	r3, [pc, #40]	@ (80005ac <MX_SPI2_Init+0x64>)
 8000582:	2200      	movs	r2, #0
 8000584:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000586:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <MX_SPI2_Init+0x64>)
 8000588:	2200      	movs	r2, #0
 800058a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800058c:	4b07      	ldr	r3, [pc, #28]	@ (80005ac <MX_SPI2_Init+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000592:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <MX_SPI2_Init+0x64>)
 8000594:	220a      	movs	r2, #10
 8000596:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000598:	4804      	ldr	r0, [pc, #16]	@ (80005ac <MX_SPI2_Init+0x64>)
 800059a:	f001 f947 	bl	800182c <HAL_SPI_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80005a4:	f000 f8cc 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000090 	.word	0x20000090
 80005b0:	40003800 	.word	0x40003800

080005b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <MX_TIM2_Init+0x94>)
 80005d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000648 <MX_TIM2_Init+0x94>)
 80005da:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80005de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e0:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <MX_TIM2_Init+0x94>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80005e6:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <MX_TIM2_Init+0x94>)
 80005e8:	2209      	movs	r2, #9
 80005ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ec:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <MX_TIM2_Init+0x94>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <MX_TIM2_Init+0x94>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005f8:	4813      	ldr	r0, [pc, #76]	@ (8000648 <MX_TIM2_Init+0x94>)
 80005fa:	f001 fb85 	bl	8001d08 <HAL_TIM_Base_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000604:	f000 f89c 	bl	8000740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800060c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4619      	mov	r1, r3
 8000614:	480c      	ldr	r0, [pc, #48]	@ (8000648 <MX_TIM2_Init+0x94>)
 8000616:	f001 fd21 	bl	800205c <HAL_TIM_ConfigClockSource>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000620:	f000 f88e 	bl	8000740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	4619      	mov	r1, r3
 8000630:	4805      	ldr	r0, [pc, #20]	@ (8000648 <MX_TIM2_Init+0x94>)
 8000632:	f001 fef7 	bl	8002424 <HAL_TIMEx_MasterConfigSynchronization>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800063c:	f000 f880 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	3718      	adds	r7, #24
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000e8 	.word	0x200000e8

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b2f      	ldr	r3, [pc, #188]	@ (8000720 <MX_GPIO_Init+0xd4>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a2e      	ldr	r2, [pc, #184]	@ (8000720 <MX_GPIO_Init+0xd4>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b2c      	ldr	r3, [pc, #176]	@ (8000720 <MX_GPIO_Init+0xd4>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000678:	4b29      	ldr	r3, [pc, #164]	@ (8000720 <MX_GPIO_Init+0xd4>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a28      	ldr	r2, [pc, #160]	@ (8000720 <MX_GPIO_Init+0xd4>)
 800067e:	f043 0308 	orr.w	r3, r3, #8
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <MX_GPIO_Init+0xd4>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0308 	and.w	r3, r3, #8
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2140      	movs	r1, #64	@ 0x40
 8000694:	4823      	ldr	r0, [pc, #140]	@ (8000724 <MX_GPIO_Init+0xd8>)
 8000696:	f000 fcd2 	bl	800103e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 800069a:	2200      	movs	r2, #0
 800069c:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 80006a0:	4821      	ldr	r0, [pc, #132]	@ (8000728 <MX_GPIO_Init+0xdc>)
 80006a2:	f000 fccc 	bl	800103e <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Latch_SPI1_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin;
 80006a6:	2340      	movs	r3, #64	@ 0x40
 80006a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2302      	movs	r3, #2
 80006b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI1_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	4619      	mov	r1, r3
 80006bc:	4819      	ldr	r0, [pc, #100]	@ (8000724 <MX_GPIO_Init+0xd8>)
 80006be:	f000 fb23 	bl	8000d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80006c2:	231f      	movs	r3, #31
 80006c4:	60bb      	str	r3, [r7, #8]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006ca:	2302      	movs	r3, #2
 80006cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4619      	mov	r1, r3
 80006d4:	4814      	ldr	r0, [pc, #80]	@ (8000728 <MX_GPIO_Init+0xdc>)
 80006d6:	f000 fb17 	bl	8000d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : Latch_SPI_Pin */
  GPIO_InitStruct.Pin = Latch_SPI_Pin;
 80006da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e8:	2303      	movs	r3, #3
 80006ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	4619      	mov	r1, r3
 80006f2:	480d      	ldr	r0, [pc, #52]	@ (8000728 <MX_GPIO_Init+0xdc>)
 80006f4:	f000 fb08 	bl	8000d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin OUT2_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin;
 80006f8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80006fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2302      	movs	r3, #2
 8000708:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_GPIO_Init+0xdc>)
 8000712:	f000 faf9 	bl	8000d08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000716:	bf00      	nop
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000
 8000724:	40010800 	.word	0x40010800
 8000728:	40010c00 	.word	0x40010c00

0800072c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	timerRun();
 8000734:	f000 f922 	bl	800097c <timerRun>

}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <Error_Handler+0x8>

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000752:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <HAL_MspInit+0x5c>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	4a14      	ldr	r2, [pc, #80]	@ (80007a8 <HAL_MspInit+0x5c>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6193      	str	r3, [r2, #24]
 800075e:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <HAL_MspInit+0x5c>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <HAL_MspInit+0x5c>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a0e      	ldr	r2, [pc, #56]	@ (80007a8 <HAL_MspInit+0x5c>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <HAL_MspInit+0x5c>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000782:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <HAL_MspInit+0x60>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	4a04      	ldr	r2, [pc, #16]	@ (80007ac <HAL_MspInit+0x60>)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010000 	.word	0x40010000

080007b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	@ 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0318 	add.w	r3, r7, #24
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000878 <HAL_SPI_MspInit+0xc8>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d124      	bne.n	800081a <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007d0:	4b2a      	ldr	r3, [pc, #168]	@ (800087c <HAL_SPI_MspInit+0xcc>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a29      	ldr	r2, [pc, #164]	@ (800087c <HAL_SPI_MspInit+0xcc>)
 80007d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b27      	ldr	r3, [pc, #156]	@ (800087c <HAL_SPI_MspInit+0xcc>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	4b24      	ldr	r3, [pc, #144]	@ (800087c <HAL_SPI_MspInit+0xcc>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a23      	ldr	r2, [pc, #140]	@ (800087c <HAL_SPI_MspInit+0xcc>)
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	6193      	str	r3, [r2, #24]
 80007f4:	4b21      	ldr	r3, [pc, #132]	@ (800087c <HAL_SPI_MspInit+0xcc>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000800:	23a0      	movs	r3, #160	@ 0xa0
 8000802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 0318 	add.w	r3, r7, #24
 8000810:	4619      	mov	r1, r3
 8000812:	481b      	ldr	r0, [pc, #108]	@ (8000880 <HAL_SPI_MspInit+0xd0>)
 8000814:	f000 fa78 	bl	8000d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000818:	e029      	b.n	800086e <HAL_SPI_MspInit+0xbe>
  else if(hspi->Instance==SPI2)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a19      	ldr	r2, [pc, #100]	@ (8000884 <HAL_SPI_MspInit+0xd4>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d124      	bne.n	800086e <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000824:	4b15      	ldr	r3, [pc, #84]	@ (800087c <HAL_SPI_MspInit+0xcc>)
 8000826:	69db      	ldr	r3, [r3, #28]
 8000828:	4a14      	ldr	r2, [pc, #80]	@ (800087c <HAL_SPI_MspInit+0xcc>)
 800082a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800082e:	61d3      	str	r3, [r2, #28]
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <HAL_SPI_MspInit+0xcc>)
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083c:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <HAL_SPI_MspInit+0xcc>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a0e      	ldr	r2, [pc, #56]	@ (800087c <HAL_SPI_MspInit+0xcc>)
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <HAL_SPI_MspInit+0xcc>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0308 	and.w	r3, r3, #8
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000854:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 0318 	add.w	r3, r7, #24
 8000866:	4619      	mov	r1, r3
 8000868:	4807      	ldr	r0, [pc, #28]	@ (8000888 <HAL_SPI_MspInit+0xd8>)
 800086a:	f000 fa4d 	bl	8000d08 <HAL_GPIO_Init>
}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	@ 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40013000 	.word	0x40013000
 800087c:	40021000 	.word	0x40021000
 8000880:	40010800 	.word	0x40010800
 8000884:	40003800 	.word	0x40003800
 8000888:	40010c00 	.word	0x40010c00

0800088c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800089c:	d113      	bne.n	80008c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800089e:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <HAL_TIM_Base_MspInit+0x44>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a0b      	ldr	r2, [pc, #44]	@ (80008d0 <HAL_TIM_Base_MspInit+0x44>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <HAL_TIM_Base_MspInit+0x44>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2101      	movs	r1, #1
 80008ba:	201c      	movs	r0, #28
 80008bc:	f000 f9ed 	bl	8000c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008c0:	201c      	movs	r0, #28
 80008c2:	f000 fa06 	bl	8000cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <NMI_Handler+0x4>

080008dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <MemManage_Handler+0x4>

080008ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000924:	f000 f8c6 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000930:	4802      	ldr	r0, [pc, #8]	@ (800093c <TIM2_IRQHandler+0x10>)
 8000932:	f001 fa8b 	bl	8001e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000e8 	.word	0x200000e8

08000940 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <setTimer>:

#define TIMERNUM 10
int timer_counter[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};
int timer_flag[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};

void setTimer(int INDEX,int duration){
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
	timer_counter[INDEX]=duration;
 8000956:	4907      	ldr	r1, [pc, #28]	@ (8000974 <setTimer+0x28>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[INDEX]=0;
 8000960:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <setTimer+0x2c>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2100      	movs	r1, #0
 8000966:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	2000013c 	.word	0x2000013c
 8000978:	20000164 	.word	0x20000164

0800097c <timerRun>:

void timerRun(){
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
	for(int i=0;i<TIMERNUM;i++){
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	e01c      	b.n	80009c2 <timerRun+0x46>
		if(timer_counter[i] > 0){
 8000988:	4a12      	ldr	r2, [pc, #72]	@ (80009d4 <timerRun+0x58>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000990:	2b00      	cmp	r3, #0
 8000992:	dd13      	ble.n	80009bc <timerRun+0x40>
			timer_counter[i]--;
 8000994:	4a0f      	ldr	r2, [pc, #60]	@ (80009d4 <timerRun+0x58>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099c:	1e5a      	subs	r2, r3, #1
 800099e:	490d      	ldr	r1, [pc, #52]	@ (80009d4 <timerRun+0x58>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <=0){
 80009a6:	4a0b      	ldr	r2, [pc, #44]	@ (80009d4 <timerRun+0x58>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	dc04      	bgt.n	80009bc <timerRun+0x40>
				timer_flag[i]=1;
 80009b2:	4a09      	ldr	r2, [pc, #36]	@ (80009d8 <timerRun+0x5c>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2101      	movs	r1, #1
 80009b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<TIMERNUM;i++){
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3301      	adds	r3, #1
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b09      	cmp	r3, #9
 80009c6:	dddf      	ble.n	8000988 <timerRun+0xc>
			}
		}
	}
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	2000013c 	.word	0x2000013c
 80009d8:	20000164 	.word	0x20000164

080009dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009dc:	f7ff ffb0 	bl	8000940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e0:	480b      	ldr	r0, [pc, #44]	@ (8000a10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009e2:	490c      	ldr	r1, [pc, #48]	@ (8000a14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000a18 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e8:	e002      	b.n	80009f0 <LoopCopyDataInit>

080009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ee:	3304      	adds	r3, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f4:	d3f9      	bcc.n	80009ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f6:	4a09      	ldr	r2, [pc, #36]	@ (8000a1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009f8:	4c09      	ldr	r4, [pc, #36]	@ (8000a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009fc:	e001      	b.n	8000a02 <LoopFillZerobss>

080009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a00:	3204      	adds	r2, #4

08000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a04:	d3fb      	bcc.n	80009fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a06:	f001 fd85 	bl	8002514 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0a:	f7ff fc81 	bl	8000310 <main>
  bx lr
 8000a0e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a14:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000a18:	080025b4 	.word	0x080025b4
  ldr r2, =_sbss
 8000a1c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000a20:	20000190 	.word	0x20000190

08000a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC1_2_IRQHandler>
	...

08000a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <HAL_Init+0x28>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	@ (8000a50 <HAL_Init+0x28>)
 8000a32:	f043 0310 	orr.w	r3, r3, #16
 8000a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f923 	bl	8000c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	200f      	movs	r0, #15
 8000a40:	f000 f808 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff fe82 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40022000 	.word	0x40022000

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f93b 	bl	8000cee <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f903 	bl	8000c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	@ (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000000c 	.word	0x2000000c
 8000aac:	20000014 	.word	0x20000014
 8000ab0:	20000010 	.word	0x20000010

08000ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <HAL_IncTick+0x1c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <HAL_IncTick+0x20>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a03      	ldr	r2, [pc, #12]	@ (8000ad4 <HAL_IncTick+0x20>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	20000014 	.word	0x20000014
 8000ad4:	2000018c 	.word	0x2000018c

08000ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b02      	ldr	r3, [pc, #8]	@ (8000ae8 <HAL_GetTick+0x10>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	2000018c 	.word	0x2000018c

08000aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1e:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	60d3      	str	r3, [r2, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b38:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <__NVIC_GetPriorityGrouping+0x18>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	f003 0307 	and.w	r3, r3, #7
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	db0b      	blt.n	8000b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	f003 021f 	and.w	r2, r3, #31
 8000b68:	4906      	ldr	r1, [pc, #24]	@ (8000b84 <__NVIC_EnableIRQ+0x34>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	095b      	lsrs	r3, r3, #5
 8000b70:	2001      	movs	r0, #1
 8000b72:	fa00 f202 	lsl.w	r2, r0, r2
 8000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100

08000b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db0a      	blt.n	8000bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	490c      	ldr	r1, [pc, #48]	@ (8000bd4 <__NVIC_SetPriority+0x4c>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb0:	e00a      	b.n	8000bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4908      	ldr	r1, [pc, #32]	@ (8000bd8 <__NVIC_SetPriority+0x50>)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	3b04      	subs	r3, #4
 8000bc0:	0112      	lsls	r2, r2, #4
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	761a      	strb	r2, [r3, #24]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	@ 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f1c3 0307 	rsb	r3, r3, #7
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	bf28      	it	cs
 8000bfa:	2304      	movcs	r3, #4
 8000bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3304      	adds	r3, #4
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d902      	bls.n	8000c0c <NVIC_EncodePriority+0x30>
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b03      	subs	r3, #3
 8000c0a:	e000      	b.n	8000c0e <NVIC_EncodePriority+0x32>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43d9      	mvns	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	4313      	orrs	r3, r2
         );
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3724      	adds	r7, #36	@ 0x24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c50:	d301      	bcc.n	8000c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00f      	b.n	8000c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c56:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <SysTick_Config+0x40>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5e:	210f      	movs	r1, #15
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f7ff ff90 	bl	8000b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <SysTick_Config+0x40>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	4b04      	ldr	r3, [pc, #16]	@ (8000c80 <SysTick_Config+0x40>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	e000e010 	.word	0xe000e010

08000c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ff2d 	bl	8000aec <__NVIC_SetPriorityGrouping>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
 8000ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cac:	f7ff ff42 	bl	8000b34 <__NVIC_GetPriorityGrouping>
 8000cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f7ff ff90 	bl	8000bdc <NVIC_EncodePriority>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff5f 	bl	8000b88 <__NVIC_SetPriority>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff35 	bl	8000b50 <__NVIC_EnableIRQ>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ffa2 	bl	8000c40 <SysTick_Config>
 8000cfc:	4603      	mov	r3, r0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b08b      	sub	sp, #44	@ 0x2c
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1a:	e169      	b.n	8000ff0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	69fa      	ldr	r2, [r7, #28]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	f040 8158 	bne.w	8000fea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	4a9a      	ldr	r2, [pc, #616]	@ (8000fa8 <HAL_GPIO_Init+0x2a0>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d05e      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d44:	4a98      	ldr	r2, [pc, #608]	@ (8000fa8 <HAL_GPIO_Init+0x2a0>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d875      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d4a:	4a98      	ldr	r2, [pc, #608]	@ (8000fac <HAL_GPIO_Init+0x2a4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d058      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d50:	4a96      	ldr	r2, [pc, #600]	@ (8000fac <HAL_GPIO_Init+0x2a4>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d86f      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d56:	4a96      	ldr	r2, [pc, #600]	@ (8000fb0 <HAL_GPIO_Init+0x2a8>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d052      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d5c:	4a94      	ldr	r2, [pc, #592]	@ (8000fb0 <HAL_GPIO_Init+0x2a8>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d869      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d62:	4a94      	ldr	r2, [pc, #592]	@ (8000fb4 <HAL_GPIO_Init+0x2ac>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d04c      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d68:	4a92      	ldr	r2, [pc, #584]	@ (8000fb4 <HAL_GPIO_Init+0x2ac>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d863      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d6e:	4a92      	ldr	r2, [pc, #584]	@ (8000fb8 <HAL_GPIO_Init+0x2b0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d046      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d74:	4a90      	ldr	r2, [pc, #576]	@ (8000fb8 <HAL_GPIO_Init+0x2b0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d85d      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d7a:	2b12      	cmp	r3, #18
 8000d7c:	d82a      	bhi.n	8000dd4 <HAL_GPIO_Init+0xcc>
 8000d7e:	2b12      	cmp	r3, #18
 8000d80:	d859      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d82:	a201      	add	r2, pc, #4	@ (adr r2, 8000d88 <HAL_GPIO_Init+0x80>)
 8000d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d88:	08000e03 	.word	0x08000e03
 8000d8c:	08000ddd 	.word	0x08000ddd
 8000d90:	08000def 	.word	0x08000def
 8000d94:	08000e31 	.word	0x08000e31
 8000d98:	08000e37 	.word	0x08000e37
 8000d9c:	08000e37 	.word	0x08000e37
 8000da0:	08000e37 	.word	0x08000e37
 8000da4:	08000e37 	.word	0x08000e37
 8000da8:	08000e37 	.word	0x08000e37
 8000dac:	08000e37 	.word	0x08000e37
 8000db0:	08000e37 	.word	0x08000e37
 8000db4:	08000e37 	.word	0x08000e37
 8000db8:	08000e37 	.word	0x08000e37
 8000dbc:	08000e37 	.word	0x08000e37
 8000dc0:	08000e37 	.word	0x08000e37
 8000dc4:	08000e37 	.word	0x08000e37
 8000dc8:	08000e37 	.word	0x08000e37
 8000dcc:	08000de5 	.word	0x08000de5
 8000dd0:	08000df9 	.word	0x08000df9
 8000dd4:	4a79      	ldr	r2, [pc, #484]	@ (8000fbc <HAL_GPIO_Init+0x2b4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d013      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dda:	e02c      	b.n	8000e36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	623b      	str	r3, [r7, #32]
          break;
 8000de2:	e029      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	3304      	adds	r3, #4
 8000dea:	623b      	str	r3, [r7, #32]
          break;
 8000dec:	e024      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	3308      	adds	r3, #8
 8000df4:	623b      	str	r3, [r7, #32]
          break;
 8000df6:	e01f      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	330c      	adds	r3, #12
 8000dfe:	623b      	str	r3, [r7, #32]
          break;
 8000e00:	e01a      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d102      	bne.n	8000e10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	623b      	str	r3, [r7, #32]
          break;
 8000e0e:	e013      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d105      	bne.n	8000e24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69fa      	ldr	r2, [r7, #28]
 8000e20:	611a      	str	r2, [r3, #16]
          break;
 8000e22:	e009      	b.n	8000e38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e24:	2308      	movs	r3, #8
 8000e26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69fa      	ldr	r2, [r7, #28]
 8000e2c:	615a      	str	r2, [r3, #20]
          break;
 8000e2e:	e003      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
          break;
 8000e34:	e000      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          break;
 8000e36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	2bff      	cmp	r3, #255	@ 0xff
 8000e3c:	d801      	bhi.n	8000e42 <HAL_GPIO_Init+0x13a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	e001      	b.n	8000e46 <HAL_GPIO_Init+0x13e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3304      	adds	r3, #4
 8000e46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	2bff      	cmp	r3, #255	@ 0xff
 8000e4c:	d802      	bhi.n	8000e54 <HAL_GPIO_Init+0x14c>
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	e002      	b.n	8000e5a <HAL_GPIO_Init+0x152>
 8000e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e56:	3b08      	subs	r3, #8
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	210f      	movs	r1, #15
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	6a39      	ldr	r1, [r7, #32]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	431a      	orrs	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 80b1 	beq.w	8000fea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e88:	4b4d      	ldr	r3, [pc, #308]	@ (8000fc0 <HAL_GPIO_Init+0x2b8>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a4c      	ldr	r2, [pc, #304]	@ (8000fc0 <HAL_GPIO_Init+0x2b8>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc0 <HAL_GPIO_Init+0x2b8>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ea0:	4a48      	ldr	r2, [pc, #288]	@ (8000fc4 <HAL_GPIO_Init+0x2bc>)
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	220f      	movs	r2, #15
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a40      	ldr	r2, [pc, #256]	@ (8000fc8 <HAL_GPIO_Init+0x2c0>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d013      	beq.n	8000ef4 <HAL_GPIO_Init+0x1ec>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a3f      	ldr	r2, [pc, #252]	@ (8000fcc <HAL_GPIO_Init+0x2c4>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d00d      	beq.n	8000ef0 <HAL_GPIO_Init+0x1e8>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a3e      	ldr	r2, [pc, #248]	@ (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d007      	beq.n	8000eec <HAL_GPIO_Init+0x1e4>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a3d      	ldr	r2, [pc, #244]	@ (8000fd4 <HAL_GPIO_Init+0x2cc>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d101      	bne.n	8000ee8 <HAL_GPIO_Init+0x1e0>
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e006      	b.n	8000ef6 <HAL_GPIO_Init+0x1ee>
 8000ee8:	2304      	movs	r3, #4
 8000eea:	e004      	b.n	8000ef6 <HAL_GPIO_Init+0x1ee>
 8000eec:	2302      	movs	r3, #2
 8000eee:	e002      	b.n	8000ef6 <HAL_GPIO_Init+0x1ee>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e000      	b.n	8000ef6 <HAL_GPIO_Init+0x1ee>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ef8:	f002 0203 	and.w	r2, r2, #3
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	4093      	lsls	r3, r2
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f06:	492f      	ldr	r1, [pc, #188]	@ (8000fc4 <HAL_GPIO_Init+0x2bc>)
 8000f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d006      	beq.n	8000f2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f20:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	492c      	ldr	r1, [pc, #176]	@ (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	608b      	str	r3, [r1, #8]
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	4928      	ldr	r1, [pc, #160]	@ (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f38:	4013      	ands	r3, r2
 8000f3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f48:	4b23      	ldr	r3, [pc, #140]	@ (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	4922      	ldr	r1, [pc, #136]	@ (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	60cb      	str	r3, [r1, #12]
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f56:	4b20      	ldr	r3, [pc, #128]	@ (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f58:	68da      	ldr	r2, [r3, #12]
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	491e      	ldr	r1, [pc, #120]	@ (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f70:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	4918      	ldr	r1, [pc, #96]	@ (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	604b      	str	r3, [r1, #4]
 8000f7c:	e006      	b.n	8000f8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f7e:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	4914      	ldr	r1, [pc, #80]	@ (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d021      	beq.n	8000fdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f98:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	490e      	ldr	r1, [pc, #56]	@ (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	600b      	str	r3, [r1, #0]
 8000fa4:	e021      	b.n	8000fea <HAL_GPIO_Init+0x2e2>
 8000fa6:	bf00      	nop
 8000fa8:	10320000 	.word	0x10320000
 8000fac:	10310000 	.word	0x10310000
 8000fb0:	10220000 	.word	0x10220000
 8000fb4:	10210000 	.word	0x10210000
 8000fb8:	10120000 	.word	0x10120000
 8000fbc:	10110000 	.word	0x10110000
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010000 	.word	0x40010000
 8000fc8:	40010800 	.word	0x40010800
 8000fcc:	40010c00 	.word	0x40010c00
 8000fd0:	40011000 	.word	0x40011000
 8000fd4:	40011400 	.word	0x40011400
 8000fd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <HAL_GPIO_Init+0x304>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	4909      	ldr	r1, [pc, #36]	@ (800100c <HAL_GPIO_Init+0x304>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fec:	3301      	adds	r3, #1
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f47f ae8e 	bne.w	8000d1c <HAL_GPIO_Init+0x14>
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	372c      	adds	r7, #44	@ 0x2c
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	40010400 	.word	0x40010400

08001010 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	4013      	ands	r3, r2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001028:	2301      	movs	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	e001      	b.n	8001032 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	807b      	strh	r3, [r7, #2]
 800104a:	4613      	mov	r3, r2
 800104c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800104e:	787b      	ldrb	r3, [r7, #1]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001054:	887a      	ldrh	r2, [r7, #2]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800105a:	e003      	b.n	8001064 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	041a      	lsls	r2, r3, #16
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	611a      	str	r2, [r3, #16]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
	...

08001070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e272      	b.n	8001568 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 8087 	beq.w	800119e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001090:	4b92      	ldr	r3, [pc, #584]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 030c 	and.w	r3, r3, #12
 8001098:	2b04      	cmp	r3, #4
 800109a:	d00c      	beq.n	80010b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800109c:	4b8f      	ldr	r3, [pc, #572]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 030c 	and.w	r3, r3, #12
 80010a4:	2b08      	cmp	r3, #8
 80010a6:	d112      	bne.n	80010ce <HAL_RCC_OscConfig+0x5e>
 80010a8:	4b8c      	ldr	r3, [pc, #560]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010b4:	d10b      	bne.n	80010ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b6:	4b89      	ldr	r3, [pc, #548]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d06c      	beq.n	800119c <HAL_RCC_OscConfig+0x12c>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d168      	bne.n	800119c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e24c      	b.n	8001568 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010d6:	d106      	bne.n	80010e6 <HAL_RCC_OscConfig+0x76>
 80010d8:	4b80      	ldr	r3, [pc, #512]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a7f      	ldr	r2, [pc, #508]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 80010de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	e02e      	b.n	8001144 <HAL_RCC_OscConfig+0xd4>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10c      	bne.n	8001108 <HAL_RCC_OscConfig+0x98>
 80010ee:	4b7b      	ldr	r3, [pc, #492]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a7a      	ldr	r2, [pc, #488]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 80010f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b78      	ldr	r3, [pc, #480]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a77      	ldr	r2, [pc, #476]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001100:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e01d      	b.n	8001144 <HAL_RCC_OscConfig+0xd4>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001110:	d10c      	bne.n	800112c <HAL_RCC_OscConfig+0xbc>
 8001112:	4b72      	ldr	r3, [pc, #456]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a71      	ldr	r2, [pc, #452]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	4b6f      	ldr	r3, [pc, #444]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a6e      	ldr	r2, [pc, #440]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e00b      	b.n	8001144 <HAL_RCC_OscConfig+0xd4>
 800112c:	4b6b      	ldr	r3, [pc, #428]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a6a      	ldr	r2, [pc, #424]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b68      	ldr	r3, [pc, #416]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a67      	ldr	r2, [pc, #412]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 800113e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001142:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d013      	beq.n	8001174 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fcc4 	bl	8000ad8 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fcc0 	bl	8000ad8 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	@ 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e200      	b.n	8001568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	4b5d      	ldr	r3, [pc, #372]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0xe4>
 8001172:	e014      	b.n	800119e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fcb0 	bl	8000ad8 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff fcac 	bl	8000ad8 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	@ 0x64
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e1ec      	b.n	8001568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118e:	4b53      	ldr	r3, [pc, #332]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0x10c>
 800119a:	e000      	b.n	800119e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d063      	beq.n	8001272 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011aa:	4b4c      	ldr	r3, [pc, #304]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00b      	beq.n	80011ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011b6:	4b49      	ldr	r3, [pc, #292]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d11c      	bne.n	80011fc <HAL_RCC_OscConfig+0x18c>
 80011c2:	4b46      	ldr	r3, [pc, #280]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d116      	bne.n	80011fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ce:	4b43      	ldr	r3, [pc, #268]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d005      	beq.n	80011e6 <HAL_RCC_OscConfig+0x176>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d001      	beq.n	80011e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e1c0      	b.n	8001568 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e6:	4b3d      	ldr	r3, [pc, #244]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4939      	ldr	r1, [pc, #228]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fa:	e03a      	b.n	8001272 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d020      	beq.n	8001246 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001204:	4b36      	ldr	r3, [pc, #216]	@ (80012e0 <HAL_RCC_OscConfig+0x270>)
 8001206:	2201      	movs	r2, #1
 8001208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120a:	f7ff fc65 	bl	8000ad8 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001212:	f7ff fc61 	bl	8000ad8 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e1a1      	b.n	8001568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001224:	4b2d      	ldr	r3, [pc, #180]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001230:	4b2a      	ldr	r3, [pc, #168]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4927      	ldr	r1, [pc, #156]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001240:	4313      	orrs	r3, r2
 8001242:	600b      	str	r3, [r1, #0]
 8001244:	e015      	b.n	8001272 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001246:	4b26      	ldr	r3, [pc, #152]	@ (80012e0 <HAL_RCC_OscConfig+0x270>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fc44 	bl	8000ad8 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001254:	f7ff fc40 	bl	8000ad8 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e180      	b.n	8001568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001266:	4b1d      	ldr	r3, [pc, #116]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d03a      	beq.n	80012f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d019      	beq.n	80012ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <HAL_RCC_OscConfig+0x274>)
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128c:	f7ff fc24 	bl	8000ad8 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001294:	f7ff fc20 	bl	8000ad8 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e160      	b.n	8001568 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a6:	4b0d      	ldr	r3, [pc, #52]	@ (80012dc <HAL_RCC_OscConfig+0x26c>)
 80012a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f000 fa9c 	bl	80017f0 <RCC_Delay>
 80012b8:	e01c      	b.n	80012f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ba:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <HAL_RCC_OscConfig+0x274>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c0:	f7ff fc0a 	bl	8000ad8 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c6:	e00f      	b.n	80012e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c8:	f7ff fc06 	bl	8000ad8 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d908      	bls.n	80012e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e146      	b.n	8001568 <HAL_RCC_OscConfig+0x4f8>
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
 80012e0:	42420000 	.word	0x42420000
 80012e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e8:	4b92      	ldr	r3, [pc, #584]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 80012ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1e9      	bne.n	80012c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 80a6 	beq.w	800144e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001306:	4b8b      	ldr	r3, [pc, #556]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10d      	bne.n	800132e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	4b88      	ldr	r3, [pc, #544]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a87      	ldr	r2, [pc, #540]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b85      	ldr	r3, [pc, #532]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800132a:	2301      	movs	r3, #1
 800132c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132e:	4b82      	ldr	r3, [pc, #520]	@ (8001538 <HAL_RCC_OscConfig+0x4c8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001336:	2b00      	cmp	r3, #0
 8001338:	d118      	bne.n	800136c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800133a:	4b7f      	ldr	r3, [pc, #508]	@ (8001538 <HAL_RCC_OscConfig+0x4c8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a7e      	ldr	r2, [pc, #504]	@ (8001538 <HAL_RCC_OscConfig+0x4c8>)
 8001340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001346:	f7ff fbc7 	bl	8000ad8 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800134e:	f7ff fbc3 	bl	8000ad8 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b64      	cmp	r3, #100	@ 0x64
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e103      	b.n	8001568 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001360:	4b75      	ldr	r3, [pc, #468]	@ (8001538 <HAL_RCC_OscConfig+0x4c8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d106      	bne.n	8001382 <HAL_RCC_OscConfig+0x312>
 8001374:	4b6f      	ldr	r3, [pc, #444]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4a6e      	ldr	r2, [pc, #440]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6213      	str	r3, [r2, #32]
 8001380:	e02d      	b.n	80013de <HAL_RCC_OscConfig+0x36e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x334>
 800138a:	4b6a      	ldr	r3, [pc, #424]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	4a69      	ldr	r2, [pc, #420]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 8001390:	f023 0301 	bic.w	r3, r3, #1
 8001394:	6213      	str	r3, [r2, #32]
 8001396:	4b67      	ldr	r3, [pc, #412]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	4a66      	ldr	r2, [pc, #408]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 800139c:	f023 0304 	bic.w	r3, r3, #4
 80013a0:	6213      	str	r3, [r2, #32]
 80013a2:	e01c      	b.n	80013de <HAL_RCC_OscConfig+0x36e>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b05      	cmp	r3, #5
 80013aa:	d10c      	bne.n	80013c6 <HAL_RCC_OscConfig+0x356>
 80013ac:	4b61      	ldr	r3, [pc, #388]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4a60      	ldr	r2, [pc, #384]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	6213      	str	r3, [r2, #32]
 80013b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4a5d      	ldr	r2, [pc, #372]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6213      	str	r3, [r2, #32]
 80013c4:	e00b      	b.n	80013de <HAL_RCC_OscConfig+0x36e>
 80013c6:	4b5b      	ldr	r3, [pc, #364]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	4a5a      	ldr	r2, [pc, #360]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	f023 0301 	bic.w	r3, r3, #1
 80013d0:	6213      	str	r3, [r2, #32]
 80013d2:	4b58      	ldr	r3, [pc, #352]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	4a57      	ldr	r2, [pc, #348]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	f023 0304 	bic.w	r3, r3, #4
 80013dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d015      	beq.n	8001412 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e6:	f7ff fb77 	bl	8000ad8 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff fb73 	bl	8000ad8 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e0b1      	b.n	8001568 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001404:	4b4b      	ldr	r3, [pc, #300]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0ee      	beq.n	80013ee <HAL_RCC_OscConfig+0x37e>
 8001410:	e014      	b.n	800143c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001412:	f7ff fb61 	bl	8000ad8 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001418:	e00a      	b.n	8001430 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141a:	f7ff fb5d 	bl	8000ad8 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001428:	4293      	cmp	r3, r2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e09b      	b.n	8001568 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001430:	4b40      	ldr	r3, [pc, #256]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1ee      	bne.n	800141a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800143c:	7dfb      	ldrb	r3, [r7, #23]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d105      	bne.n	800144e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001442:	4b3c      	ldr	r3, [pc, #240]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	4a3b      	ldr	r2, [pc, #236]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800144c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 8087 	beq.w	8001566 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001458:	4b36      	ldr	r3, [pc, #216]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 030c 	and.w	r3, r3, #12
 8001460:	2b08      	cmp	r3, #8
 8001462:	d061      	beq.n	8001528 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d146      	bne.n	80014fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146c:	4b33      	ldr	r3, [pc, #204]	@ (800153c <HAL_RCC_OscConfig+0x4cc>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001472:	f7ff fb31 	bl	8000ad8 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147a:	f7ff fb2d 	bl	8000ad8 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e06d      	b.n	8001568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148c:	4b29      	ldr	r3, [pc, #164]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f0      	bne.n	800147a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a0:	d108      	bne.n	80014b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014a2:	4b24      	ldr	r3, [pc, #144]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	4921      	ldr	r1, [pc, #132]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a19      	ldr	r1, [r3, #32]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c4:	430b      	orrs	r3, r1
 80014c6:	491b      	ldr	r1, [pc, #108]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014cc:	4b1b      	ldr	r3, [pc, #108]	@ (800153c <HAL_RCC_OscConfig+0x4cc>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fb01 	bl	8000ad8 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014da:	f7ff fafd 	bl	8000ad8 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e03d      	b.n	8001568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x46a>
 80014f8:	e035      	b.n	8001566 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <HAL_RCC_OscConfig+0x4cc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff faea 	bl	8000ad8 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001508:	f7ff fae6 	bl	8000ad8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e026      	b.n	8001568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <HAL_RCC_OscConfig+0x4c4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x498>
 8001526:	e01e      	b.n	8001566 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d107      	bne.n	8001540 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e019      	b.n	8001568 <HAL_RCC_OscConfig+0x4f8>
 8001534:	40021000 	.word	0x40021000
 8001538:	40007000 	.word	0x40007000
 800153c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001540:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <HAL_RCC_OscConfig+0x500>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	429a      	cmp	r2, r3
 8001552:	d106      	bne.n	8001562 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800155e:	429a      	cmp	r2, r3
 8001560:	d001      	beq.n	8001566 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40021000 	.word	0x40021000

08001574 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0d0      	b.n	800172a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001588:	4b6a      	ldr	r3, [pc, #424]	@ (8001734 <HAL_RCC_ClockConfig+0x1c0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d910      	bls.n	80015b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	4b67      	ldr	r3, [pc, #412]	@ (8001734 <HAL_RCC_ClockConfig+0x1c0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 0207 	bic.w	r2, r3, #7
 800159e:	4965      	ldr	r1, [pc, #404]	@ (8001734 <HAL_RCC_ClockConfig+0x1c0>)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a6:	4b63      	ldr	r3, [pc, #396]	@ (8001734 <HAL_RCC_ClockConfig+0x1c0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0b8      	b.n	800172a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d020      	beq.n	8001606 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015d0:	4b59      	ldr	r3, [pc, #356]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	4a58      	ldr	r2, [pc, #352]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e8:	4b53      	ldr	r3, [pc, #332]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4a52      	ldr	r2, [pc, #328]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80015f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f4:	4b50      	ldr	r3, [pc, #320]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	494d      	ldr	r1, [pc, #308]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	4313      	orrs	r3, r2
 8001604:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d040      	beq.n	8001694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	4b47      	ldr	r3, [pc, #284]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d115      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e07f      	b.n	800172a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001632:	4b41      	ldr	r3, [pc, #260]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d109      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e073      	b.n	800172a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001642:	4b3d      	ldr	r3, [pc, #244]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e06b      	b.n	800172a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001652:	4b39      	ldr	r3, [pc, #228]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f023 0203 	bic.w	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4936      	ldr	r1, [pc, #216]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001664:	f7ff fa38 	bl	8000ad8 <HAL_GetTick>
 8001668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	e00a      	b.n	8001682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800166c:	f7ff fa34 	bl	8000ad8 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e053      	b.n	800172a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001682:	4b2d      	ldr	r3, [pc, #180]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 020c 	and.w	r2, r3, #12
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	429a      	cmp	r2, r3
 8001692:	d1eb      	bne.n	800166c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001694:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <HAL_RCC_ClockConfig+0x1c0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d210      	bcs.n	80016c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b24      	ldr	r3, [pc, #144]	@ (8001734 <HAL_RCC_ClockConfig+0x1c0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 0207 	bic.w	r2, r3, #7
 80016aa:	4922      	ldr	r1, [pc, #136]	@ (8001734 <HAL_RCC_ClockConfig+0x1c0>)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b2:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e032      	b.n	800172a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d008      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d0:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	4916      	ldr	r1, [pc, #88]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016ee:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	490e      	ldr	r1, [pc, #56]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001702:	f000 f821 	bl	8001748 <HAL_RCC_GetSysClockFreq>
 8001706:	4602      	mov	r2, r0
 8001708:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	490a      	ldr	r1, [pc, #40]	@ (800173c <HAL_RCC_ClockConfig+0x1c8>)
 8001714:	5ccb      	ldrb	r3, [r1, r3]
 8001716:	fa22 f303 	lsr.w	r3, r2, r3
 800171a:	4a09      	ldr	r2, [pc, #36]	@ (8001740 <HAL_RCC_ClockConfig+0x1cc>)
 800171c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <HAL_RCC_ClockConfig+0x1d0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff f996 	bl	8000a54 <HAL_InitTick>

  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40022000 	.word	0x40022000
 8001738:	40021000 	.word	0x40021000
 800173c:	08002588 	.word	0x08002588
 8001740:	2000000c 	.word	0x2000000c
 8001744:	20000010 	.word	0x20000010

08001748 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001762:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b04      	cmp	r3, #4
 8001770:	d002      	beq.n	8001778 <HAL_RCC_GetSysClockFreq+0x30>
 8001772:	2b08      	cmp	r3, #8
 8001774:	d003      	beq.n	800177e <HAL_RCC_GetSysClockFreq+0x36>
 8001776:	e027      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001778:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800177a:	613b      	str	r3, [r7, #16]
      break;
 800177c:	e027      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	0c9b      	lsrs	r3, r3, #18
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	4a17      	ldr	r2, [pc, #92]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001788:	5cd3      	ldrb	r3, [r2, r3]
 800178a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d010      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001796:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	0c5b      	lsrs	r3, r3, #17
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	4a11      	ldr	r2, [pc, #68]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017a2:	5cd3      	ldrb	r3, [r2, r3]
 80017a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	@ (80017e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80017aa:	fb03 f202 	mul.w	r2, r3, r2
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	e004      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a0c      	ldr	r2, [pc, #48]	@ (80017ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80017bc:	fb02 f303 	mul.w	r3, r2, r3
 80017c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	613b      	str	r3, [r7, #16]
      break;
 80017c6:	e002      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017c8:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ca:	613b      	str	r3, [r7, #16]
      break;
 80017cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ce:	693b      	ldr	r3, [r7, #16]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	371c      	adds	r7, #28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	007a1200 	.word	0x007a1200
 80017e4:	08002598 	.word	0x08002598
 80017e8:	080025a8 	.word	0x080025a8
 80017ec:	003d0900 	.word	0x003d0900

080017f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <RCC_Delay+0x34>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <RCC_Delay+0x38>)
 80017fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001802:	0a5b      	lsrs	r3, r3, #9
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	fb02 f303 	mul.w	r3, r2, r3
 800180a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800180c:	bf00      	nop
  }
  while (Delay --);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1e5a      	subs	r2, r3, #1
 8001812:	60fa      	str	r2, [r7, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f9      	bne.n	800180c <RCC_Delay+0x1c>
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	2000000c 	.word	0x2000000c
 8001828:	10624dd3 	.word	0x10624dd3

0800182c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e076      	b.n	800192c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	2b00      	cmp	r3, #0
 8001844:	d108      	bne.n	8001858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800184e:	d009      	beq.n	8001864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
 8001856:	e005      	b.n	8001864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7fe ff96 	bl	80007b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2202      	movs	r2, #2
 8001888:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800189a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018e8:	ea42 0103 	orr.w	r1, r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	0c1a      	lsrs	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f002 0204 	and.w	r2, r2, #4
 800190a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	69da      	ldr	r2, [r3, #28]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800191a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	4613      	mov	r3, r2
 8001942:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <HAL_SPI_Transmit+0x22>
 8001952:	2302      	movs	r3, #2
 8001954:	e12d      	b.n	8001bb2 <HAL_SPI_Transmit+0x27e>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800195e:	f7ff f8bb 	bl	8000ad8 <HAL_GetTick>
 8001962:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d002      	beq.n	800197a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001974:	2302      	movs	r3, #2
 8001976:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001978:	e116      	b.n	8001ba8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <HAL_SPI_Transmit+0x52>
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	77fb      	strb	r3, [r7, #31]
    goto error;
 800198a:	e10d      	b.n	8001ba8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2203      	movs	r2, #3
 8001990:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	88fa      	ldrh	r2, [r7, #6]
 80019a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	88fa      	ldrh	r2, [r7, #6]
 80019aa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019d2:	d10f      	bne.n	80019f4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019fe:	2b40      	cmp	r3, #64	@ 0x40
 8001a00:	d007      	beq.n	8001a12 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a1a:	d14f      	bne.n	8001abc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <HAL_SPI_Transmit+0xf6>
 8001a24:	8afb      	ldrh	r3, [r7, #22]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d142      	bne.n	8001ab0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	881a      	ldrh	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	1c9a      	adds	r2, r3, #2
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a4e:	e02f      	b.n	8001ab0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d112      	bne.n	8001a84 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	881a      	ldrh	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	1c9a      	adds	r2, r3, #2
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001a82:	e015      	b.n	8001ab0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a84:	f7ff f828 	bl	8000ad8 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d803      	bhi.n	8001a9c <HAL_SPI_Transmit+0x168>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9a:	d102      	bne.n	8001aa2 <HAL_SPI_Transmit+0x16e>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001aae:	e07b      	b.n	8001ba8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1ca      	bne.n	8001a50 <HAL_SPI_Transmit+0x11c>
 8001aba:	e050      	b.n	8001b5e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <HAL_SPI_Transmit+0x196>
 8001ac4:	8afb      	ldrh	r3, [r7, #22]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d144      	bne.n	8001b54 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	330c      	adds	r3, #12
 8001ad4:	7812      	ldrb	r2, [r2, #0]
 8001ad6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001af0:	e030      	b.n	8001b54 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d113      	bne.n	8001b28 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	330c      	adds	r3, #12
 8001b0a:	7812      	ldrb	r2, [r2, #0]
 8001b0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001b26:	e015      	b.n	8001b54 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b28:	f7fe ffd6 	bl	8000ad8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d803      	bhi.n	8001b40 <HAL_SPI_Transmit+0x20c>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3e:	d102      	bne.n	8001b46 <HAL_SPI_Transmit+0x212>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001b52:	e029      	b.n	8001ba8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1c9      	bne.n	8001af2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	6839      	ldr	r1, [r7, #0]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 f8b2 	bl	8001ccc <SPI_EndRxTxTransaction>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2220      	movs	r2, #32
 8001b72:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10a      	bne.n	8001b92 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	77fb      	strb	r3, [r7, #31]
 8001b9e:	e003      	b.n	8001ba8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001bb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001bcc:	f7fe ff84 	bl	8000ad8 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd4:	1a9b      	subs	r3, r3, r2
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001bdc:	f7fe ff7c 	bl	8000ad8 <HAL_GetTick>
 8001be0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001be2:	4b39      	ldr	r3, [pc, #228]	@ (8001cc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	015b      	lsls	r3, r3, #5
 8001be8:	0d1b      	lsrs	r3, r3, #20
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001bf2:	e054      	b.n	8001c9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfa:	d050      	beq.n	8001c9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001bfc:	f7fe ff6c 	bl	8000ad8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d902      	bls.n	8001c12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d13d      	bne.n	8001c8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001c20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c2a:	d111      	bne.n	8001c50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c34:	d004      	beq.n	8001c40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c3e:	d107      	bne.n	8001c50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c58:	d10f      	bne.n	8001c7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e017      	b.n	8001cbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	bf0c      	ite	eq
 8001cae:	2301      	moveq	r3, #1
 8001cb0:	2300      	movne	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d19b      	bne.n	8001bf4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3720      	adds	r7, #32
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000000c 	.word	0x2000000c

08001ccc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2180      	movs	r1, #128	@ 0x80
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f7ff ff6a 	bl	8001bbc <SPI_WaitFlagStateUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf2:	f043 0220 	orr.w	r2, r3, #32
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e000      	b.n	8001d00 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e041      	b.n	8001d9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7fe fdac 	bl	800088c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3304      	adds	r3, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4610      	mov	r0, r2
 8001d48:	f000 fa74 	bl	8002234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d001      	beq.n	8001dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e03a      	b.n	8001e36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a18      	ldr	r2, [pc, #96]	@ (8001e40 <HAL_TIM_Base_Start_IT+0x98>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00e      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x58>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dea:	d009      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x58>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a14      	ldr	r2, [pc, #80]	@ (8001e44 <HAL_TIM_Base_Start_IT+0x9c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d004      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x58>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a13      	ldr	r2, [pc, #76]	@ (8001e48 <HAL_TIM_Base_Start_IT+0xa0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d111      	bne.n	8001e24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d010      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e22:	e007      	b.n	8001e34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	40012c00 	.word	0x40012c00
 8001e44:	40000400 	.word	0x40000400
 8001e48:	40000800 	.word	0x40000800

08001e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d122      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0202 	mvn.w	r2, #2
 8001e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f9b4 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 8001e94:	e005      	b.n	8001ea2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f9a7 	bl	80021ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f9b6 	bl	800220e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d122      	bne.n	8001efc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d11b      	bne.n	8001efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0204 	mvn.w	r2, #4
 8001ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f98a 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f97d 	bl	80021ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f98c 	bl	800220e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d122      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d11b      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0208 	mvn.w	r2, #8
 8001f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2204      	movs	r2, #4
 8001f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f960 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 8001f3c:	e005      	b.n	8001f4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f953 	bl	80021ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f962 	bl	800220e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	2b10      	cmp	r3, #16
 8001f5c:	d122      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b10      	cmp	r3, #16
 8001f6a:	d11b      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0210 	mvn.w	r2, #16
 8001f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2208      	movs	r2, #8
 8001f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f936 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 8001f90:	e005      	b.n	8001f9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f929 	bl	80021ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f938 	bl	800220e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10e      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d107      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0201 	mvn.w	r2, #1
 8001fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe fbae 	bl	800072c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fda:	2b80      	cmp	r3, #128	@ 0x80
 8001fdc:	d10e      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe8:	2b80      	cmp	r3, #128	@ 0x80
 8001fea:	d107      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fa7b 	bl	80024f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002006:	2b40      	cmp	r3, #64	@ 0x40
 8002008:	d10e      	bne.n	8002028 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002014:	2b40      	cmp	r3, #64	@ 0x40
 8002016:	d107      	bne.n	8002028 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f8fc 	bl	8002220 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	2b20      	cmp	r3, #32
 8002034:	d10e      	bne.n	8002054 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b20      	cmp	r3, #32
 8002042:	d107      	bne.n	8002054 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0220 	mvn.w	r2, #32
 800204c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fa46 	bl	80024e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_TIM_ConfigClockSource+0x1c>
 8002074:	2302      	movs	r3, #2
 8002076:	e0b4      	b.n	80021e2 <HAL_TIM_ConfigClockSource+0x186>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800209e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020b0:	d03e      	beq.n	8002130 <HAL_TIM_ConfigClockSource+0xd4>
 80020b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020b6:	f200 8087 	bhi.w	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
 80020ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020be:	f000 8086 	beq.w	80021ce <HAL_TIM_ConfigClockSource+0x172>
 80020c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020c6:	d87f      	bhi.n	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
 80020c8:	2b70      	cmp	r3, #112	@ 0x70
 80020ca:	d01a      	beq.n	8002102 <HAL_TIM_ConfigClockSource+0xa6>
 80020cc:	2b70      	cmp	r3, #112	@ 0x70
 80020ce:	d87b      	bhi.n	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
 80020d0:	2b60      	cmp	r3, #96	@ 0x60
 80020d2:	d050      	beq.n	8002176 <HAL_TIM_ConfigClockSource+0x11a>
 80020d4:	2b60      	cmp	r3, #96	@ 0x60
 80020d6:	d877      	bhi.n	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
 80020d8:	2b50      	cmp	r3, #80	@ 0x50
 80020da:	d03c      	beq.n	8002156 <HAL_TIM_ConfigClockSource+0xfa>
 80020dc:	2b50      	cmp	r3, #80	@ 0x50
 80020de:	d873      	bhi.n	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
 80020e0:	2b40      	cmp	r3, #64	@ 0x40
 80020e2:	d058      	beq.n	8002196 <HAL_TIM_ConfigClockSource+0x13a>
 80020e4:	2b40      	cmp	r3, #64	@ 0x40
 80020e6:	d86f      	bhi.n	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
 80020e8:	2b30      	cmp	r3, #48	@ 0x30
 80020ea:	d064      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0x15a>
 80020ec:	2b30      	cmp	r3, #48	@ 0x30
 80020ee:	d86b      	bhi.n	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
 80020f0:	2b20      	cmp	r3, #32
 80020f2:	d060      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0x15a>
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d867      	bhi.n	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d05c      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0x15a>
 80020fc:	2b10      	cmp	r3, #16
 80020fe:	d05a      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0x15a>
 8002100:	e062      	b.n	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002112:	f000 f968 	bl	80023e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002124:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	609a      	str	r2, [r3, #8]
      break;
 800212e:	e04f      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002140:	f000 f951 	bl	80023e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002152:	609a      	str	r2, [r3, #8]
      break;
 8002154:	e03c      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002162:	461a      	mov	r2, r3
 8002164:	f000 f8c8 	bl	80022f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2150      	movs	r1, #80	@ 0x50
 800216e:	4618      	mov	r0, r3
 8002170:	f000 f91f 	bl	80023b2 <TIM_ITRx_SetConfig>
      break;
 8002174:	e02c      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002182:	461a      	mov	r2, r3
 8002184:	f000 f8e6 	bl	8002354 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2160      	movs	r1, #96	@ 0x60
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f90f 	bl	80023b2 <TIM_ITRx_SetConfig>
      break;
 8002194:	e01c      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021a2:	461a      	mov	r2, r3
 80021a4:	f000 f8a8 	bl	80022f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2140      	movs	r1, #64	@ 0x40
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f8ff 	bl	80023b2 <TIM_ITRx_SetConfig>
      break;
 80021b4:	e00c      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4619      	mov	r1, r3
 80021c0:	4610      	mov	r0, r2
 80021c2:	f000 f8f6 	bl	80023b2 <TIM_ITRx_SetConfig>
      break;
 80021c6:	e003      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
      break;
 80021cc:	e000      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr
	...

08002234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a29      	ldr	r2, [pc, #164]	@ (80022ec <TIM_Base_SetConfig+0xb8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d00b      	beq.n	8002264 <TIM_Base_SetConfig+0x30>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002252:	d007      	beq.n	8002264 <TIM_Base_SetConfig+0x30>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a26      	ldr	r2, [pc, #152]	@ (80022f0 <TIM_Base_SetConfig+0xbc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d003      	beq.n	8002264 <TIM_Base_SetConfig+0x30>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a25      	ldr	r2, [pc, #148]	@ (80022f4 <TIM_Base_SetConfig+0xc0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d108      	bne.n	8002276 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800226a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a1c      	ldr	r2, [pc, #112]	@ (80022ec <TIM_Base_SetConfig+0xb8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00b      	beq.n	8002296 <TIM_Base_SetConfig+0x62>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002284:	d007      	beq.n	8002296 <TIM_Base_SetConfig+0x62>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a19      	ldr	r2, [pc, #100]	@ (80022f0 <TIM_Base_SetConfig+0xbc>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d003      	beq.n	8002296 <TIM_Base_SetConfig+0x62>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a18      	ldr	r2, [pc, #96]	@ (80022f4 <TIM_Base_SetConfig+0xc0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d108      	bne.n	80022a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800229c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a07      	ldr	r2, [pc, #28]	@ (80022ec <TIM_Base_SetConfig+0xb8>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d103      	bne.n	80022dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	615a      	str	r2, [r3, #20]
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	40012c00 	.word	0x40012c00
 80022f0:	40000400 	.word	0x40000400
 80022f4:	40000800 	.word	0x40000800

080022f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	f023 0201 	bic.w	r2, r3, #1
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f023 030a 	bic.w	r3, r3, #10
 8002334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4313      	orrs	r3, r2
 800233c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	621a      	str	r2, [r3, #32]
}
 800234a:	bf00      	nop
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	f023 0210 	bic.w	r2, r3, #16
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800237e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	031b      	lsls	r3, r3, #12
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002390:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	621a      	str	r2, [r3, #32]
}
 80023a8:	bf00      	nop
 80023aa:	371c      	adds	r7, #28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b085      	sub	sp, #20
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f043 0307 	orr.w	r3, r3, #7
 80023d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	609a      	str	r2, [r3, #8]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b087      	sub	sp, #28
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002400:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	021a      	lsls	r2, r3, #8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	431a      	orrs	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	4313      	orrs	r3, r2
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	609a      	str	r2, [r3, #8]
}
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002438:	2302      	movs	r3, #2
 800243a:	e046      	b.n	80024ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a16      	ldr	r2, [pc, #88]	@ (80024d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d00e      	beq.n	800249e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002488:	d009      	beq.n	800249e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a12      	ldr	r2, [pc, #72]	@ (80024d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d004      	beq.n	800249e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a10      	ldr	r2, [pc, #64]	@ (80024dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d10c      	bne.n	80024b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr
 80024d4:	40012c00 	.word	0x40012c00
 80024d8:	40000400 	.word	0x40000400
 80024dc:	40000800 	.word	0x40000800

080024e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <memset>:
 8002504:	4603      	mov	r3, r0
 8002506:	4402      	add	r2, r0
 8002508:	4293      	cmp	r3, r2
 800250a:	d100      	bne.n	800250e <memset+0xa>
 800250c:	4770      	bx	lr
 800250e:	f803 1b01 	strb.w	r1, [r3], #1
 8002512:	e7f9      	b.n	8002508 <memset+0x4>

08002514 <__libc_init_array>:
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	2600      	movs	r6, #0
 8002518:	4d0c      	ldr	r5, [pc, #48]	@ (800254c <__libc_init_array+0x38>)
 800251a:	4c0d      	ldr	r4, [pc, #52]	@ (8002550 <__libc_init_array+0x3c>)
 800251c:	1b64      	subs	r4, r4, r5
 800251e:	10a4      	asrs	r4, r4, #2
 8002520:	42a6      	cmp	r6, r4
 8002522:	d109      	bne.n	8002538 <__libc_init_array+0x24>
 8002524:	f000 f81a 	bl	800255c <_init>
 8002528:	2600      	movs	r6, #0
 800252a:	4d0a      	ldr	r5, [pc, #40]	@ (8002554 <__libc_init_array+0x40>)
 800252c:	4c0a      	ldr	r4, [pc, #40]	@ (8002558 <__libc_init_array+0x44>)
 800252e:	1b64      	subs	r4, r4, r5
 8002530:	10a4      	asrs	r4, r4, #2
 8002532:	42a6      	cmp	r6, r4
 8002534:	d105      	bne.n	8002542 <__libc_init_array+0x2e>
 8002536:	bd70      	pop	{r4, r5, r6, pc}
 8002538:	f855 3b04 	ldr.w	r3, [r5], #4
 800253c:	4798      	blx	r3
 800253e:	3601      	adds	r6, #1
 8002540:	e7ee      	b.n	8002520 <__libc_init_array+0xc>
 8002542:	f855 3b04 	ldr.w	r3, [r5], #4
 8002546:	4798      	blx	r3
 8002548:	3601      	adds	r6, #1
 800254a:	e7f2      	b.n	8002532 <__libc_init_array+0x1e>
 800254c:	080025ac 	.word	0x080025ac
 8002550:	080025ac 	.word	0x080025ac
 8002554:	080025ac 	.word	0x080025ac
 8002558:	080025b0 	.word	0x080025b0

0800255c <_init>:
 800255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255e:	bf00      	nop
 8002560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002562:	bc08      	pop	{r3}
 8002564:	469e      	mov	lr, r3
 8002566:	4770      	bx	lr

08002568 <_fini>:
 8002568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256a:	bf00      	nop
 800256c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800256e:	bc08      	pop	{r3}
 8002570:	469e      	mov	lr, r3
 8002572:	4770      	bx	lr
