
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b40  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003c4c  08003c4c  00004c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d38  08003d38  000050ac  2**0
                  CONTENTS
  4 .ARM          00000008  08003d38  08003d38  00004d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d40  08003d40  000050ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d40  08003d40  00004d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d44  08003d44  00004d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08003d48  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200000ac  08003df4  000050ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08003df4  00005384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000050ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9c4  00000000  00000000  000050d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa9  00000000  00000000  0000fa99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00011a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000939  00000000  00000000  00012650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180a1  00000000  00000000  00012f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd49  00000000  00000000  0002b02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089f7e  00000000  00000000  00038d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2cf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003628  00000000  00000000  000c2d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000c635c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ac 	.word	0x200000ac
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c34 	.word	0x08003c34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b0 	.word	0x200000b0
 8000148:	08003c34 	.word	0x08003c34

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <KeyPad_Scan>:
    /* Set all rows to high */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
}

/* Scan the 4x5 keypad and return the pressed key value */
uint8_t KeyPad_Scan(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
    uint32_t currentMillis = HAL_GetTick();
 8000162:	f001 fb8d 	bl	8001880 <HAL_GetTick>
 8000166:	6038      	str	r0, [r7, #0]

    if (currentMillis - lastDebounceTime < DEBOUNCE_DELAY) {
 8000168:	4b24      	ldr	r3, [pc, #144]	@ (80001fc <KeyPad_Scan+0xa0>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	683a      	ldr	r2, [r7, #0]
 800016e:	1ad3      	subs	r3, r2, r3
 8000170:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000174:	d201      	bcs.n	800017a <KeyPad_Scan+0x1e>
        return 0xFF;
 8000176:	23ff      	movs	r3, #255	@ 0xff
 8000178:	e03b      	b.n	80001f2 <KeyPad_Scan+0x96>
    }

    for (uint8_t row = 0; row < 4; row++) {
 800017a:	2300      	movs	r3, #0
 800017c:	71fb      	strb	r3, [r7, #7]
 800017e:	e034      	b.n	80001ea <KeyPad_Scan+0x8e>
        /* Set all rows low */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000186:	481e      	ldr	r0, [pc, #120]	@ (8000200 <KeyPad_Scan+0xa4>)
 8000188:	f001 fe2d 	bl	8001de6 <HAL_GPIO_WritePin>

        /* Set the current row high */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 << row, GPIO_PIN_SET);
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	2240      	movs	r2, #64	@ 0x40
 8000190:	fa02 f303 	lsl.w	r3, r2, r3
 8000194:	b29b      	uxth	r3, r3
 8000196:	2201      	movs	r2, #1
 8000198:	4619      	mov	r1, r3
 800019a:	4819      	ldr	r0, [pc, #100]	@ (8000200 <KeyPad_Scan+0xa4>)
 800019c:	f001 fe23 	bl	8001de6 <HAL_GPIO_WritePin>

        /* Read each column */
        for (uint8_t col = 0; col < 5; col++) {
 80001a0:	2300      	movs	r3, #0
 80001a2:	71bb      	strb	r3, [r7, #6]
 80001a4:	e01b      	b.n	80001de <KeyPad_Scan+0x82>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 << col) == GPIO_PIN_SET) {
 80001a6:	79bb      	ldrb	r3, [r7, #6]
 80001a8:	2201      	movs	r2, #1
 80001aa:	fa02 f303 	lsl.w	r3, r2, r3
 80001ae:	b29b      	uxth	r3, r3
 80001b0:	4619      	mov	r1, r3
 80001b2:	4813      	ldr	r0, [pc, #76]	@ (8000200 <KeyPad_Scan+0xa4>)
 80001b4:	f001 fe00 	bl	8001db8 <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b01      	cmp	r3, #1
 80001bc:	d10c      	bne.n	80001d8 <KeyPad_Scan+0x7c>
                lastDebounceTime = currentMillis;
 80001be:	4a0f      	ldr	r2, [pc, #60]	@ (80001fc <KeyPad_Scan+0xa0>)
 80001c0:	683b      	ldr	r3, [r7, #0]
 80001c2:	6013      	str	r3, [r2, #0]
                return keyMap[row][col];
 80001c4:	79fa      	ldrb	r2, [r7, #7]
 80001c6:	79b9      	ldrb	r1, [r7, #6]
 80001c8:	480e      	ldr	r0, [pc, #56]	@ (8000204 <KeyPad_Scan+0xa8>)
 80001ca:	4613      	mov	r3, r2
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	4413      	add	r3, r2
 80001d0:	4403      	add	r3, r0
 80001d2:	440b      	add	r3, r1
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	e00c      	b.n	80001f2 <KeyPad_Scan+0x96>
        for (uint8_t col = 0; col < 5; col++) {
 80001d8:	79bb      	ldrb	r3, [r7, #6]
 80001da:	3301      	adds	r3, #1
 80001dc:	71bb      	strb	r3, [r7, #6]
 80001de:	79bb      	ldrb	r3, [r7, #6]
 80001e0:	2b04      	cmp	r3, #4
 80001e2:	d9e0      	bls.n	80001a6 <KeyPad_Scan+0x4a>
    for (uint8_t row = 0; row < 4; row++) {
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	3301      	adds	r3, #1
 80001e8:	71fb      	strb	r3, [r7, #7]
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2b03      	cmp	r3, #3
 80001ee:	d9c7      	bls.n	8000180 <KeyPad_Scan+0x24>
            }
        }
    }

    return 0xFF;
 80001f0:	23ff      	movs	r3, #255	@ 0xff
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	200000c8 	.word	0x200000c8
 8000200:	40010c00 	.word	0x40010c00
 8000204:	08003ccc 	.word	0x08003ccc

08000208 <formatTotalLiters>:
// T + L pressed show total from beginning
void formatTotalLiters(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	60b9      	str	r1, [r7, #8]
 8000212:	607a      	str	r2, [r7, #4]
	if (total < 100000000) {
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	4a1b      	ldr	r2, [pc, #108]	@ (8000284 <formatTotalLiters+0x7c>)
 8000218:	4293      	cmp	r3, r2
 800021a:	d815      	bhi.n	8000248 <formatTotalLiters+0x40>
		* buffer1 = total / 1000000;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	4a1a      	ldr	r2, [pc, #104]	@ (8000288 <formatTotalLiters+0x80>)
 8000220:	fba2 2303 	umull	r2, r3, r2, r3
 8000224:	0c9a      	lsrs	r2, r3, #18
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	4b16      	ldr	r3, [pc, #88]	@ (8000288 <formatTotalLiters+0x80>)
 800022e:	fba3 1302 	umull	r1, r3, r3, r2
 8000232:	0c9b      	lsrs	r3, r3, #18
 8000234:	4915      	ldr	r1, [pc, #84]	@ (800028c <formatTotalLiters+0x84>)
 8000236:	fb01 f303 	mul.w	r3, r1, r3
 800023a:	1ad3      	subs	r3, r2, r3
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 8000240:	4b13      	ldr	r3, [pc, #76]	@ (8000290 <formatTotalLiters+0x88>)
 8000242:	2203      	movs	r2, #3
 8000244:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 = total / 100000000;
		* buffer2 = (total % 100000000 ) /100;
		LEDPointFlag = 1;
	}
}
 8000246:	e018      	b.n	800027a <formatTotalLiters+0x72>
		* buffer1 = total / 100000000;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	4a12      	ldr	r2, [pc, #72]	@ (8000294 <formatTotalLiters+0x8c>)
 800024c:	fba2 2303 	umull	r2, r3, r2, r3
 8000250:	0e5a      	lsrs	r2, r3, #25
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	601a      	str	r2, [r3, #0]
		* buffer2 = (total % 100000000 ) /100;
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4b0e      	ldr	r3, [pc, #56]	@ (8000294 <formatTotalLiters+0x8c>)
 800025a:	fba3 1302 	umull	r1, r3, r3, r2
 800025e:	0e5b      	lsrs	r3, r3, #25
 8000260:	490d      	ldr	r1, [pc, #52]	@ (8000298 <formatTotalLiters+0x90>)
 8000262:	fb01 f303 	mul.w	r3, r1, r3
 8000266:	1ad3      	subs	r3, r2, r3
 8000268:	4a0c      	ldr	r2, [pc, #48]	@ (800029c <formatTotalLiters+0x94>)
 800026a:	fba2 2303 	umull	r2, r3, r2, r3
 800026e:	095a      	lsrs	r2, r3, #5
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	601a      	str	r2, [r3, #0]
		LEDPointFlag = 1;
 8000274:	4b06      	ldr	r3, [pc, #24]	@ (8000290 <formatTotalLiters+0x88>)
 8000276:	2201      	movs	r2, #1
 8000278:	601a      	str	r2, [r3, #0]
}
 800027a:	bf00      	nop
 800027c:	3714      	adds	r7, #20
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	05f5e0ff 	.word	0x05f5e0ff
 8000288:	431bde83 	.word	0x431bde83
 800028c:	000f4240 	.word	0x000f4240
 8000290:	2000004c 	.word	0x2000004c
 8000294:	55e63b89 	.word	0x55e63b89
 8000298:	05f5e100 	.word	0x05f5e100
 800029c:	51eb851f 	.word	0x51eb851f

080002a0 <formatTotalLitersShift>:
// T + $ pressed show total per shift
void formatTotalLitersShift(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
	if (total < 1000000000) {
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	4a14      	ldr	r2, [pc, #80]	@ (8000300 <formatTotalLitersShift+0x60>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d815      	bhi.n	80002e0 <formatTotalLitersShift+0x40>

		* buffer1 = total / 1000000;
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4a13      	ldr	r2, [pc, #76]	@ (8000304 <formatTotalLitersShift+0x64>)
 80002b8:	fba2 2303 	umull	r2, r3, r2, r3
 80002bc:	0c9a      	lsrs	r2, r3, #18
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <formatTotalLitersShift+0x64>)
 80002c6:	fba3 1302 	umull	r1, r3, r3, r2
 80002ca:	0c9b      	lsrs	r3, r3, #18
 80002cc:	490e      	ldr	r1, [pc, #56]	@ (8000308 <formatTotalLitersShift+0x68>)
 80002ce:	fb01 f303 	mul.w	r3, r1, r3
 80002d2:	1ad3      	subs	r3, r2, r3
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	@ (800030c <formatTotalLitersShift+0x6c>)
 80002da:	2203      	movs	r2, #3
 80002dc:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 =0;
		* buffer2 = 0;
		LEDPointFlag = -1;
	}
}
 80002de:	e009      	b.n	80002f4 <formatTotalLitersShift+0x54>
		* buffer1 =0;
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
		* buffer2 = 0;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
		LEDPointFlag = -1;
 80002ec:	4b07      	ldr	r3, [pc, #28]	@ (800030c <formatTotalLitersShift+0x6c>)
 80002ee:	f04f 32ff 	mov.w	r2, #4294967295
 80002f2:	601a      	str	r2, [r3, #0]
}
 80002f4:	bf00      	nop
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	3b9ac9ff 	.word	0x3b9ac9ff
 8000304:	431bde83 	.word	0x431bde83
 8000308:	000f4240 	.word	0x000f4240
 800030c:	2000004c 	.word	0x2000004c

08000310 <KeyLogic>:

void KeyLogic() {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	keyPressed = KeyPad_Scan();
 8000314:	f7ff ff22 	bl	800015c <KeyPad_Scan>
 8000318:	4603      	mov	r3, r0
 800031a:	461a      	mov	r2, r3
 800031c:	4bae      	ldr	r3, [pc, #696]	@ (80005d8 <KeyLogic+0x2c8>)
 800031e:	701a      	strb	r2, [r3, #0]
    if (keyPressed != 0xFF) {
 8000320:	4bad      	ldr	r3, [pc, #692]	@ (80005d8 <KeyLogic+0x2c8>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2bff      	cmp	r3, #255	@ 0xff
 8000326:	f000 831f 	beq.w	8000968 <KeyLogic+0x658>
		switch (keyPressed) {
 800032a:	4bab      	ldr	r3, [pc, #684]	@ (80005d8 <KeyLogic+0x2c8>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	3b24      	subs	r3, #36	@ 0x24
 8000330:	2b30      	cmp	r3, #48	@ 0x30
 8000332:	f200 8286 	bhi.w	8000842 <KeyLogic+0x532>
 8000336:	a201      	add	r2, pc, #4	@ (adr r2, 800033c <KeyLogic+0x2c>)
 8000338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800033c:	080007a7 	.word	0x080007a7
 8000340:	08000843 	.word	0x08000843
 8000344:	08000843 	.word	0x08000843
 8000348:	08000843 	.word	0x08000843
 800034c:	08000843 	.word	0x08000843
 8000350:	08000843 	.word	0x08000843
 8000354:	08000843 	.word	0x08000843
 8000358:	08000843 	.word	0x08000843
 800035c:	08000843 	.word	0x08000843
 8000360:	08000843 	.word	0x08000843
 8000364:	08000843 	.word	0x08000843
 8000368:	08000843 	.word	0x08000843
 800036c:	08000843 	.word	0x08000843
 8000370:	08000843 	.word	0x08000843
 8000374:	08000843 	.word	0x08000843
 8000378:	08000843 	.word	0x08000843
 800037c:	08000843 	.word	0x08000843
 8000380:	08000843 	.word	0x08000843
 8000384:	08000843 	.word	0x08000843
 8000388:	08000843 	.word	0x08000843
 800038c:	08000843 	.word	0x08000843
 8000390:	08000843 	.word	0x08000843
 8000394:	08000843 	.word	0x08000843
 8000398:	08000843 	.word	0x08000843
 800039c:	08000843 	.word	0x08000843
 80003a0:	08000843 	.word	0x08000843
 80003a4:	08000843 	.word	0x08000843
 80003a8:	08000843 	.word	0x08000843
 80003ac:	08000843 	.word	0x08000843
 80003b0:	08000401 	.word	0x08000401
 80003b4:	08000429 	.word	0x08000429
 80003b8:	0800044d 	.word	0x0800044d
 80003bc:	080007ef 	.word	0x080007ef
 80003c0:	08000473 	.word	0x08000473
 80003c4:	0800081f 	.word	0x0800081f
 80003c8:	08000843 	.word	0x08000843
 80003cc:	08000843 	.word	0x08000843
 80003d0:	08000843 	.word	0x08000843
 80003d4:	08000843 	.word	0x08000843
 80003d8:	08000843 	.word	0x08000843
 80003dc:	080007cb 	.word	0x080007cb
 80003e0:	08000843 	.word	0x08000843
 80003e4:	08000843 	.word	0x08000843
 80003e8:	08000843 	.word	0x08000843
 80003ec:	0800075f 	.word	0x0800075f
 80003f0:	08000843 	.word	0x08000843
 80003f4:	08000843 	.word	0x08000843
 80003f8:	08000843 	.word	0x08000843
 80003fc:	08000783 	.word	0x08000783
/////////////////////////////////////////////////////KEY A/////////////////////////////////////////////////////////
			case 'A':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000400:	2300      	movs	r3, #0
 8000402:	4a76      	ldr	r2, [pc, #472]	@ (80005dc <KeyLogic+0x2cc>)
 8000404:	2107      	movs	r1, #7
 8000406:	4876      	ldr	r0, [pc, #472]	@ (80005e0 <KeyLogic+0x2d0>)
 8000408:	f002 ff50 	bl	80032ac <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 10000);
 800040c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000410:	4a72      	ldr	r2, [pc, #456]	@ (80005dc <KeyLogic+0x2cc>)
 8000412:	2107      	movs	r1, #7
 8000414:	4873      	ldr	r0, [pc, #460]	@ (80005e4 <KeyLogic+0x2d4>)
 8000416:	f002 ff49 	bl	80032ac <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 800041a:	2300      	movs	r3, #0
 800041c:	4a6f      	ldr	r2, [pc, #444]	@ (80005dc <KeyLogic+0x2cc>)
 800041e:	2107      	movs	r1, #7
 8000420:	4871      	ldr	r0, [pc, #452]	@ (80005e8 <KeyLogic+0x2d8>)
 8000422:	f002 ff43 	bl	80032ac <sniprintf>
				break;
 8000426:	e29f      	b.n	8000968 <KeyLogic+0x658>
/////////////////////////////////////////////////////KEY B/////////////////////////////////////////////////////////
			case 'B':
				if(seqState==SEQ_PRESSED_P){
 8000428:	4b70      	ldr	r3, [pc, #448]	@ (80005ec <KeyLogic+0x2dc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b05      	cmp	r3, #5
 800042e:	d103      	bne.n	8000438 <KeyLogic+0x128>
					seqState=SEQ_PRESSED_P_F2_PSWRD;
 8000430:	4b6e      	ldr	r3, [pc, #440]	@ (80005ec <KeyLogic+0x2dc>)
 8000432:	2206      	movs	r2, #6
 8000434:	701a      	strb	r2, [r3, #0]
				}else{
					seqState=SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000436:	e297      	b.n	8000968 <KeyLogic+0x658>
					seqState=SEQ_IDLE;
 8000438:	4b6c      	ldr	r3, [pc, #432]	@ (80005ec <KeyLogic+0x2dc>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800043e:	4b6c      	ldr	r3, [pc, #432]	@ (80005f0 <KeyLogic+0x2e0>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000444:	4b6b      	ldr	r3, [pc, #428]	@ (80005f4 <KeyLogic+0x2e4>)
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
				break;
 800044a:	e28d      	b.n	8000968 <KeyLogic+0x658>
/////////////////////////////////////////////////////KEY C/////////////////////////////////////////////////////////
			case 'C':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 800044c:	2300      	movs	r3, #0
 800044e:	4a63      	ldr	r2, [pc, #396]	@ (80005dc <KeyLogic+0x2cc>)
 8000450:	2107      	movs	r1, #7
 8000452:	4863      	ldr	r0, [pc, #396]	@ (80005e0 <KeyLogic+0x2d0>)
 8000454:	f002 ff2a 	bl	80032ac <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000458:	2300      	movs	r3, #0
 800045a:	4a60      	ldr	r2, [pc, #384]	@ (80005dc <KeyLogic+0x2cc>)
 800045c:	2107      	movs	r1, #7
 800045e:	4861      	ldr	r0, [pc, #388]	@ (80005e4 <KeyLogic+0x2d4>)
 8000460:	f002 ff24 	bl	80032ac <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 1);
 8000464:	2301      	movs	r3, #1
 8000466:	4a5d      	ldr	r2, [pc, #372]	@ (80005dc <KeyLogic+0x2cc>)
 8000468:	2107      	movs	r1, #7
 800046a:	485f      	ldr	r0, [pc, #380]	@ (80005e8 <KeyLogic+0x2d8>)
 800046c:	f002 ff1e 	bl	80032ac <sniprintf>
				break;
 8000470:	e27a      	b.n	8000968 <KeyLogic+0x658>
/////////////////////////////////////////////////////KEY E/////////////////////////////////////////////////////////
			case 'E':
				if(seqState == SEQ_IDLE){
 8000472:	4b5e      	ldr	r3, [pc, #376]	@ (80005ec <KeyLogic+0x2dc>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d103      	bne.n	8000482 <KeyLogic+0x172>
					seqState = SEQ_DISP_PRICE;
 800047a:	4b5c      	ldr	r3, [pc, #368]	@ (80005ec <KeyLogic+0x2dc>)
 800047c:	2201      	movs	r2, #1
 800047e:	701a      	strb	r2, [r3, #0]
				else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000480:	e272      	b.n	8000968 <KeyLogic+0x658>
				else if (seqState == SEQ_PRESSED_P_NUM&&
 8000482:	4b5a      	ldr	r3, [pc, #360]	@ (80005ec <KeyLogic+0x2dc>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b08      	cmp	r3, #8
 8000488:	d10f      	bne.n	80004aa <KeyLogic+0x19a>
					accumulatedNumber==password) {
 800048a:	4b5a      	ldr	r3, [pc, #360]	@ (80005f4 <KeyLogic+0x2e4>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	4b5a      	ldr	r3, [pc, #360]	@ (80005f8 <KeyLogic+0x2e8>)
 8000490:	681b      	ldr	r3, [r3, #0]
				else if (seqState == SEQ_PRESSED_P_NUM&&
 8000492:	429a      	cmp	r2, r3
 8000494:	d109      	bne.n	80004aa <KeyLogic+0x19a>
					seqState = SEQ_PRESSED_P_PSWRD_SETPRICE;
 8000496:	4b55      	ldr	r3, [pc, #340]	@ (80005ec <KeyLogic+0x2dc>)
 8000498:	2209      	movs	r2, #9
 800049a:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800049c:	4b54      	ldr	r3, [pc, #336]	@ (80005f0 <KeyLogic+0x2e0>)
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80004a2:	4b54      	ldr	r3, [pc, #336]	@ (80005f4 <KeyLogic+0x2e4>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	e158      	b.n	800075c <KeyLogic+0x44c>
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD&&
 80004aa:	4b50      	ldr	r3, [pc, #320]	@ (80005ec <KeyLogic+0x2dc>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b06      	cmp	r3, #6
 80004b0:	d10f      	bne.n	80004d2 <KeyLogic+0x1c2>
						accumulatedNumber==password){
 80004b2:	4b50      	ldr	r3, [pc, #320]	@ (80005f4 <KeyLogic+0x2e4>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	4b50      	ldr	r3, [pc, #320]	@ (80005f8 <KeyLogic+0x2e8>)
 80004b8:	681b      	ldr	r3, [r3, #0]
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD&&
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d109      	bne.n	80004d2 <KeyLogic+0x1c2>
					seqState = SEQ_PRESSED_P_F2_PSWRD_ROUND;
 80004be:	4b4b      	ldr	r3, [pc, #300]	@ (80005ec <KeyLogic+0x2dc>)
 80004c0:	2207      	movs	r2, #7
 80004c2:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80004c4:	4b4a      	ldr	r3, [pc, #296]	@ (80005f0 <KeyLogic+0x2e0>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80004ca:	4b4a      	ldr	r3, [pc, #296]	@ (80005f4 <KeyLogic+0x2e4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	e144      	b.n	800075c <KeyLogic+0x44c>
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD_ROUND){
 80004d2:	4b46      	ldr	r3, [pc, #280]	@ (80005ec <KeyLogic+0x2dc>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b07      	cmp	r3, #7
 80004d8:	f040 8098 	bne.w	800060c <KeyLogic+0x2fc>
					switch(accumulatedNumber){
 80004dc:	4b45      	ldr	r3, [pc, #276]	@ (80005f4 <KeyLogic+0x2e4>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b02      	cmp	r3, #2
 80004e2:	d066      	beq.n	80005b2 <KeyLogic+0x2a2>
 80004e4:	2b02      	cmp	r3, #2
 80004e6:	d86c      	bhi.n	80005c2 <KeyLogic+0x2b2>
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d002      	beq.n	80004f2 <KeyLogic+0x1e2>
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d030      	beq.n	8000552 <KeyLogic+0x242>
							break;
 80004f0:	e067      	b.n	80005c2 <KeyLogic+0x2b2>
							if(currPrice%50<25){
 80004f2:	4b42      	ldr	r3, [pc, #264]	@ (80005fc <KeyLogic+0x2ec>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	4b42      	ldr	r3, [pc, #264]	@ (8000600 <KeyLogic+0x2f0>)
 80004f8:	fba3 1302 	umull	r1, r3, r3, r2
 80004fc:	091b      	lsrs	r3, r3, #4
 80004fe:	2132      	movs	r1, #50	@ 0x32
 8000500:	fb01 f303 	mul.w	r3, r1, r3
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	2b18      	cmp	r3, #24
 8000508:	d80f      	bhi.n	800052a <KeyLogic+0x21a>
								roundedPrice=currPrice-(currPrice%50);
 800050a:	4b3c      	ldr	r3, [pc, #240]	@ (80005fc <KeyLogic+0x2ec>)
 800050c:	6819      	ldr	r1, [r3, #0]
 800050e:	4b3b      	ldr	r3, [pc, #236]	@ (80005fc <KeyLogic+0x2ec>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	4b3b      	ldr	r3, [pc, #236]	@ (8000600 <KeyLogic+0x2f0>)
 8000514:	fba3 0302 	umull	r0, r3, r3, r2
 8000518:	091b      	lsrs	r3, r3, #4
 800051a:	2032      	movs	r0, #50	@ 0x32
 800051c:	fb00 f303 	mul.w	r3, r0, r3
 8000520:	1ad3      	subs	r3, r2, r3
 8000522:	1acb      	subs	r3, r1, r3
 8000524:	4a37      	ldr	r2, [pc, #220]	@ (8000604 <KeyLogic+0x2f4>)
 8000526:	6013      	str	r3, [r2, #0]
 8000528:	e00f      	b.n	800054a <KeyLogic+0x23a>
								roundedPrice=currPrice-(currPrice%50)+50;
 800052a:	4b34      	ldr	r3, [pc, #208]	@ (80005fc <KeyLogic+0x2ec>)
 800052c:	6819      	ldr	r1, [r3, #0]
 800052e:	4b33      	ldr	r3, [pc, #204]	@ (80005fc <KeyLogic+0x2ec>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	4b33      	ldr	r3, [pc, #204]	@ (8000600 <KeyLogic+0x2f0>)
 8000534:	fba3 0302 	umull	r0, r3, r3, r2
 8000538:	091b      	lsrs	r3, r3, #4
 800053a:	2032      	movs	r0, #50	@ 0x32
 800053c:	fb00 f303 	mul.w	r3, r0, r3
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	1acb      	subs	r3, r1, r3
 8000544:	3332      	adds	r3, #50	@ 0x32
 8000546:	4a2f      	ldr	r2, [pc, #188]	@ (8000604 <KeyLogic+0x2f4>)
 8000548:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_ROUND_50;
 800054a:	4b2f      	ldr	r3, [pc, #188]	@ (8000608 <KeyLogic+0x2f8>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
							break;
 8000550:	e038      	b.n	80005c4 <KeyLogic+0x2b4>
							if(currPrice%100<50){
 8000552:	4b2a      	ldr	r3, [pc, #168]	@ (80005fc <KeyLogic+0x2ec>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	4b2a      	ldr	r3, [pc, #168]	@ (8000600 <KeyLogic+0x2f0>)
 8000558:	fba3 1302 	umull	r1, r3, r3, r2
 800055c:	095b      	lsrs	r3, r3, #5
 800055e:	2164      	movs	r1, #100	@ 0x64
 8000560:	fb01 f303 	mul.w	r3, r1, r3
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	2b31      	cmp	r3, #49	@ 0x31
 8000568:	d80f      	bhi.n	800058a <KeyLogic+0x27a>
								roundedPrice=currPrice-(currPrice%100);
 800056a:	4b24      	ldr	r3, [pc, #144]	@ (80005fc <KeyLogic+0x2ec>)
 800056c:	6819      	ldr	r1, [r3, #0]
 800056e:	4b23      	ldr	r3, [pc, #140]	@ (80005fc <KeyLogic+0x2ec>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	4b23      	ldr	r3, [pc, #140]	@ (8000600 <KeyLogic+0x2f0>)
 8000574:	fba3 0302 	umull	r0, r3, r3, r2
 8000578:	095b      	lsrs	r3, r3, #5
 800057a:	2064      	movs	r0, #100	@ 0x64
 800057c:	fb00 f303 	mul.w	r3, r0, r3
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	1acb      	subs	r3, r1, r3
 8000584:	4a1f      	ldr	r2, [pc, #124]	@ (8000604 <KeyLogic+0x2f4>)
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	e00f      	b.n	80005aa <KeyLogic+0x29a>
								roundedPrice=currPrice-(currPrice%100)+100;
 800058a:	4b1c      	ldr	r3, [pc, #112]	@ (80005fc <KeyLogic+0x2ec>)
 800058c:	6819      	ldr	r1, [r3, #0]
 800058e:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <KeyLogic+0x2ec>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4b1b      	ldr	r3, [pc, #108]	@ (8000600 <KeyLogic+0x2f0>)
 8000594:	fba3 0302 	umull	r0, r3, r3, r2
 8000598:	095b      	lsrs	r3, r3, #5
 800059a:	2064      	movs	r0, #100	@ 0x64
 800059c:	fb00 f303 	mul.w	r3, r0, r3
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	1acb      	subs	r3, r1, r3
 80005a4:	3364      	adds	r3, #100	@ 0x64
 80005a6:	4a17      	ldr	r2, [pc, #92]	@ (8000604 <KeyLogic+0x2f4>)
 80005a8:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_ROUND_100;
 80005aa:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <KeyLogic+0x2f8>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
							break;
 80005b0:	e008      	b.n	80005c4 <KeyLogic+0x2b4>
							roundedPrice=currPrice;
 80005b2:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <KeyLogic+0x2ec>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a13      	ldr	r2, [pc, #76]	@ (8000604 <KeyLogic+0x2f4>)
 80005b8:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_DEFAULT;
 80005ba:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <KeyLogic+0x2f8>)
 80005bc:	2202      	movs	r2, #2
 80005be:	701a      	strb	r2, [r3, #0]
							break;
 80005c0:	e000      	b.n	80005c4 <KeyLogic+0x2b4>
							break;
 80005c2:	bf00      	nop
					seqState = SEQ_IDLE;
 80005c4:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <KeyLogic+0x2dc>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <KeyLogic+0x2e0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80005d0:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <KeyLogic+0x2e4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
				break;
 80005d6:	e1c7      	b.n	8000968 <KeyLogic+0x658>
 80005d8:	20000035 	.word	0x20000035
 80005dc:	08003c4c 	.word	0x08003c4c
 80005e0:	20000020 	.word	0x20000020
 80005e4:	20000027 	.word	0x20000027
 80005e8:	2000002e 	.word	0x2000002e
 80005ec:	200000dd 	.word	0x200000dd
 80005f0:	200000d0 	.word	0x200000d0
 80005f4:	200000cc 	.word	0x200000cc
 80005f8:	20000038 	.word	0x20000038
 80005fc:	20000044 	.word	0x20000044
 8000600:	51eb851f 	.word	0x51eb851f
 8000604:	20000048 	.word	0x20000048
 8000608:	200000dc 	.word	0x200000dc
				else if(seqState == SEQ_PRESSED_P_PSWRD_SETPRICE){
 800060c:	4b9a      	ldr	r3, [pc, #616]	@ (8000878 <KeyLogic+0x568>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b09      	cmp	r3, #9
 8000612:	d173      	bne.n	80006fc <KeyLogic+0x3ec>
					currPrice = accumulatedNumber;
 8000614:	4b99      	ldr	r3, [pc, #612]	@ (800087c <KeyLogic+0x56c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a99      	ldr	r2, [pc, #612]	@ (8000880 <KeyLogic+0x570>)
 800061a:	6013      	str	r3, [r2, #0]
					switch (currentPriceState){
 800061c:	4b99      	ldr	r3, [pc, #612]	@ (8000884 <KeyLogic+0x574>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d002      	beq.n	800062a <KeyLogic+0x31a>
 8000624:	2b01      	cmp	r3, #1
 8000626:	d02d      	beq.n	8000684 <KeyLogic+0x374>
 8000628:	e059      	b.n	80006de <KeyLogic+0x3ce>
							if(currPrice%50<25){
 800062a:	4b95      	ldr	r3, [pc, #596]	@ (8000880 <KeyLogic+0x570>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	4b96      	ldr	r3, [pc, #600]	@ (8000888 <KeyLogic+0x578>)
 8000630:	fba3 1302 	umull	r1, r3, r3, r2
 8000634:	091b      	lsrs	r3, r3, #4
 8000636:	2132      	movs	r1, #50	@ 0x32
 8000638:	fb01 f303 	mul.w	r3, r1, r3
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	2b18      	cmp	r3, #24
 8000640:	d80f      	bhi.n	8000662 <KeyLogic+0x352>
								roundedPrice=currPrice-(currPrice%50);
 8000642:	4b8f      	ldr	r3, [pc, #572]	@ (8000880 <KeyLogic+0x570>)
 8000644:	6819      	ldr	r1, [r3, #0]
 8000646:	4b8e      	ldr	r3, [pc, #568]	@ (8000880 <KeyLogic+0x570>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	4b8f      	ldr	r3, [pc, #572]	@ (8000888 <KeyLogic+0x578>)
 800064c:	fba3 0302 	umull	r0, r3, r3, r2
 8000650:	091b      	lsrs	r3, r3, #4
 8000652:	2032      	movs	r0, #50	@ 0x32
 8000654:	fb00 f303 	mul.w	r3, r0, r3
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	1acb      	subs	r3, r1, r3
 800065c:	4a8b      	ldr	r2, [pc, #556]	@ (800088c <KeyLogic+0x57c>)
 800065e:	6013      	str	r3, [r2, #0]
							break;
 8000660:	e042      	b.n	80006e8 <KeyLogic+0x3d8>
								roundedPrice=currPrice-(currPrice%50)+50;
 8000662:	4b87      	ldr	r3, [pc, #540]	@ (8000880 <KeyLogic+0x570>)
 8000664:	6819      	ldr	r1, [r3, #0]
 8000666:	4b86      	ldr	r3, [pc, #536]	@ (8000880 <KeyLogic+0x570>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	4b87      	ldr	r3, [pc, #540]	@ (8000888 <KeyLogic+0x578>)
 800066c:	fba3 0302 	umull	r0, r3, r3, r2
 8000670:	091b      	lsrs	r3, r3, #4
 8000672:	2032      	movs	r0, #50	@ 0x32
 8000674:	fb00 f303 	mul.w	r3, r0, r3
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	1acb      	subs	r3, r1, r3
 800067c:	3332      	adds	r3, #50	@ 0x32
 800067e:	4a83      	ldr	r2, [pc, #524]	@ (800088c <KeyLogic+0x57c>)
 8000680:	6013      	str	r3, [r2, #0]
							break;
 8000682:	e031      	b.n	80006e8 <KeyLogic+0x3d8>
							if(currPrice%100<50){
 8000684:	4b7e      	ldr	r3, [pc, #504]	@ (8000880 <KeyLogic+0x570>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b7f      	ldr	r3, [pc, #508]	@ (8000888 <KeyLogic+0x578>)
 800068a:	fba3 1302 	umull	r1, r3, r3, r2
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	2164      	movs	r1, #100	@ 0x64
 8000692:	fb01 f303 	mul.w	r3, r1, r3
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	2b31      	cmp	r3, #49	@ 0x31
 800069a:	d80f      	bhi.n	80006bc <KeyLogic+0x3ac>
								roundedPrice=currPrice-(currPrice%100);
 800069c:	4b78      	ldr	r3, [pc, #480]	@ (8000880 <KeyLogic+0x570>)
 800069e:	6819      	ldr	r1, [r3, #0]
 80006a0:	4b77      	ldr	r3, [pc, #476]	@ (8000880 <KeyLogic+0x570>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b78      	ldr	r3, [pc, #480]	@ (8000888 <KeyLogic+0x578>)
 80006a6:	fba3 0302 	umull	r0, r3, r3, r2
 80006aa:	095b      	lsrs	r3, r3, #5
 80006ac:	2064      	movs	r0, #100	@ 0x64
 80006ae:	fb00 f303 	mul.w	r3, r0, r3
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	1acb      	subs	r3, r1, r3
 80006b6:	4a75      	ldr	r2, [pc, #468]	@ (800088c <KeyLogic+0x57c>)
 80006b8:	6013      	str	r3, [r2, #0]
							break;
 80006ba:	e015      	b.n	80006e8 <KeyLogic+0x3d8>
								roundedPrice=currPrice-(currPrice%100)+100;
 80006bc:	4b70      	ldr	r3, [pc, #448]	@ (8000880 <KeyLogic+0x570>)
 80006be:	6819      	ldr	r1, [r3, #0]
 80006c0:	4b6f      	ldr	r3, [pc, #444]	@ (8000880 <KeyLogic+0x570>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b70      	ldr	r3, [pc, #448]	@ (8000888 <KeyLogic+0x578>)
 80006c6:	fba3 0302 	umull	r0, r3, r3, r2
 80006ca:	095b      	lsrs	r3, r3, #5
 80006cc:	2064      	movs	r0, #100	@ 0x64
 80006ce:	fb00 f303 	mul.w	r3, r0, r3
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	1acb      	subs	r3, r1, r3
 80006d6:	3364      	adds	r3, #100	@ 0x64
 80006d8:	4a6c      	ldr	r2, [pc, #432]	@ (800088c <KeyLogic+0x57c>)
 80006da:	6013      	str	r3, [r2, #0]
							break;
 80006dc:	e004      	b.n	80006e8 <KeyLogic+0x3d8>
							roundedPrice=currPrice;
 80006de:	4b68      	ldr	r3, [pc, #416]	@ (8000880 <KeyLogic+0x570>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a6a      	ldr	r2, [pc, #424]	@ (800088c <KeyLogic+0x57c>)
 80006e4:	6013      	str	r3, [r2, #0]
							break;
 80006e6:	bf00      	nop
					seqState = SEQ_IDLE;
 80006e8:	4b63      	ldr	r3, [pc, #396]	@ (8000878 <KeyLogic+0x568>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80006ee:	4b68      	ldr	r3, [pc, #416]	@ (8000890 <KeyLogic+0x580>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80006f4:	4b61      	ldr	r3, [pc, #388]	@ (800087c <KeyLogic+0x56c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
				break;
 80006fa:	e135      	b.n	8000968 <KeyLogic+0x658>
				else if(seqState == SEQ_ENTER_OLD_PASSWORD&&
 80006fc:	4b5e      	ldr	r3, [pc, #376]	@ (8000878 <KeyLogic+0x568>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b02      	cmp	r3, #2
 8000702:	d10f      	bne.n	8000724 <KeyLogic+0x414>
						accumulatedNumber == password){
 8000704:	4b5d      	ldr	r3, [pc, #372]	@ (800087c <KeyLogic+0x56c>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b62      	ldr	r3, [pc, #392]	@ (8000894 <KeyLogic+0x584>)
 800070a:	681b      	ldr	r3, [r3, #0]
				else if(seqState == SEQ_ENTER_OLD_PASSWORD&&
 800070c:	429a      	cmp	r2, r3
 800070e:	d109      	bne.n	8000724 <KeyLogic+0x414>
					seqState = SEQ_ENTER_NEW_PASSWORD;
 8000710:	4b59      	ldr	r3, [pc, #356]	@ (8000878 <KeyLogic+0x568>)
 8000712:	2203      	movs	r2, #3
 8000714:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000716:	4b5e      	ldr	r3, [pc, #376]	@ (8000890 <KeyLogic+0x580>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800071c:	4b57      	ldr	r3, [pc, #348]	@ (800087c <KeyLogic+0x56c>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	e01b      	b.n	800075c <KeyLogic+0x44c>
				else if(seqState == SEQ_ENTER_NEW_PASSWORD){
 8000724:	4b54      	ldr	r3, [pc, #336]	@ (8000878 <KeyLogic+0x568>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b03      	cmp	r3, #3
 800072a:	d10d      	bne.n	8000748 <KeyLogic+0x438>
					password = accumulatedNumber;
 800072c:	4b53      	ldr	r3, [pc, #332]	@ (800087c <KeyLogic+0x56c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a58      	ldr	r2, [pc, #352]	@ (8000894 <KeyLogic+0x584>)
 8000732:	6013      	str	r3, [r2, #0]
					seqState = SEQ_IDLE;
 8000734:	4b50      	ldr	r3, [pc, #320]	@ (8000878 <KeyLogic+0x568>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800073a:	4b55      	ldr	r3, [pc, #340]	@ (8000890 <KeyLogic+0x580>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000740:	4b4e      	ldr	r3, [pc, #312]	@ (800087c <KeyLogic+0x56c>)
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
				break;
 8000746:	e10f      	b.n	8000968 <KeyLogic+0x658>
					seqState = SEQ_IDLE;
 8000748:	4b4b      	ldr	r3, [pc, #300]	@ (8000878 <KeyLogic+0x568>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800074e:	4b50      	ldr	r3, [pc, #320]	@ (8000890 <KeyLogic+0x580>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000754:	4b49      	ldr	r3, [pc, #292]	@ (800087c <KeyLogic+0x56c>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
				break;
 800075a:	e105      	b.n	8000968 <KeyLogic+0x658>
 800075c:	e104      	b.n	8000968 <KeyLogic+0x658>
/////////////////////////////////////////////////////KEY P/////////////////////////////////////////////////////////
			case 'P':
				if (seqState == SEQ_IDLE) {
 800075e:	4b46      	ldr	r3, [pc, #280]	@ (8000878 <KeyLogic+0x568>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d103      	bne.n	800076e <KeyLogic+0x45e>
					seqState = SEQ_PRESSED_P;
 8000766:	4b44      	ldr	r3, [pc, #272]	@ (8000878 <KeyLogic+0x568>)
 8000768:	2205      	movs	r2, #5
 800076a:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 800076c:	e0fc      	b.n	8000968 <KeyLogic+0x658>
					seqState = SEQ_IDLE;
 800076e:	4b42      	ldr	r3, [pc, #264]	@ (8000878 <KeyLogic+0x568>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000774:	4b46      	ldr	r3, [pc, #280]	@ (8000890 <KeyLogic+0x580>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800077a:	4b40      	ldr	r3, [pc, #256]	@ (800087c <KeyLogic+0x56c>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
				break;
 8000780:	e0f2      	b.n	8000968 <KeyLogic+0x658>
/////////////////////////////////////////////////////KEY T/////////////////////////////////////////////////////////
			case 'T':
				if (seqState == SEQ_IDLE) {
 8000782:	4b3d      	ldr	r3, [pc, #244]	@ (8000878 <KeyLogic+0x568>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d103      	bne.n	8000792 <KeyLogic+0x482>
					seqState = SEQ_PRESSED_T;
 800078a:	4b3b      	ldr	r3, [pc, #236]	@ (8000878 <KeyLogic+0x568>)
 800078c:	220a      	movs	r2, #10
 800078e:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000790:	e0ea      	b.n	8000968 <KeyLogic+0x658>
					seqState = SEQ_IDLE;
 8000792:	4b39      	ldr	r3, [pc, #228]	@ (8000878 <KeyLogic+0x568>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000798:	4b3d      	ldr	r3, [pc, #244]	@ (8000890 <KeyLogic+0x580>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800079e:	4b37      	ldr	r3, [pc, #220]	@ (800087c <KeyLogic+0x56c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
				break;
 80007a4:	e0e0      	b.n	8000968 <KeyLogic+0x658>
/////////////////////////////////////////////////////KEY $/////////////////////////////////////////////////////////
			case '$':
				if (seqState == SEQ_PRESSED_T) {
 80007a6:	4b34      	ldr	r3, [pc, #208]	@ (8000878 <KeyLogic+0x568>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b0a      	cmp	r3, #10
 80007ac:	d103      	bne.n	80007b6 <KeyLogic+0x4a6>
					seqState = SEQ_PRESSED_T_$;
 80007ae:	4b32      	ldr	r3, [pc, #200]	@ (8000878 <KeyLogic+0x568>)
 80007b0:	220c      	movs	r2, #12
 80007b2:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 80007b4:	e0d8      	b.n	8000968 <KeyLogic+0x658>
					seqState = SEQ_IDLE;
 80007b6:	4b30      	ldr	r3, [pc, #192]	@ (8000878 <KeyLogic+0x568>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80007bc:	4b34      	ldr	r3, [pc, #208]	@ (8000890 <KeyLogic+0x580>)
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80007c2:	4b2e      	ldr	r3, [pc, #184]	@ (800087c <KeyLogic+0x56c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
				break;
 80007c8:	e0ce      	b.n	8000968 <KeyLogic+0x658>
/////////////////////////////////////////////////////KEY L/////////////////////////////////////////////////////////
			case 'L':
				if (seqState == SEQ_PRESSED_T) {
 80007ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000878 <KeyLogic+0x568>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b0a      	cmp	r3, #10
 80007d0:	d103      	bne.n	80007da <KeyLogic+0x4ca>
					seqState = SEQ_PRESSED_T_L;
 80007d2:	4b29      	ldr	r3, [pc, #164]	@ (8000878 <KeyLogic+0x568>)
 80007d4:	220b      	movs	r2, #11
 80007d6:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 80007d8:	e0c6      	b.n	8000968 <KeyLogic+0x658>
					seqState = SEQ_IDLE;
 80007da:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <KeyLogic+0x568>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80007e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <KeyLogic+0x580>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80007e6:	4b25      	ldr	r3, [pc, #148]	@ (800087c <KeyLogic+0x56c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
				break;
 80007ec:	e0bc      	b.n	8000968 <KeyLogic+0x658>
/////////////////////////////////////////////////////KEY D/////////////////////////////////////////////////////////
			case 'D':
				if (seqState == SEQ_PRESSED_T) {
 80007ee:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <KeyLogic+0x568>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b0a      	cmp	r3, #10
 80007f4:	d109      	bne.n	800080a <KeyLogic+0x4fa>
					seqState = SEQ_ENTER_OLD_PASSWORD;
 80007f6:	4b20      	ldr	r3, [pc, #128]	@ (8000878 <KeyLogic+0x568>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80007fc:	4b24      	ldr	r3, [pc, #144]	@ (8000890 <KeyLogic+0x580>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000802:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <KeyLogic+0x56c>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000808:	e0ae      	b.n	8000968 <KeyLogic+0x658>
					seqState = SEQ_IDLE;
 800080a:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <KeyLogic+0x568>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000810:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <KeyLogic+0x580>)
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000816:	4b19      	ldr	r3, [pc, #100]	@ (800087c <KeyLogic+0x56c>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
				break;
 800081c:	e0a4      	b.n	8000968 <KeyLogic+0x658>
/////////////////////////////////////////////////////KEY F/////////////////////////////////////////////////////////
			case 'F':
				if (seqState == SEQ_PRESSED_T) {
 800081e:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <KeyLogic+0x568>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b0a      	cmp	r3, #10
 8000824:	d103      	bne.n	800082e <KeyLogic+0x51e>
					seqState = SEQ_PRESSED_T_F4;
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <KeyLogic+0x568>)
 8000828:	220e      	movs	r2, #14
 800082a:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 800082c:	e09c      	b.n	8000968 <KeyLogic+0x658>
					seqState = SEQ_IDLE;
 800082e:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <KeyLogic+0x568>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <KeyLogic+0x580>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <KeyLogic+0x56c>)
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
				break;
 8000840:	e092      	b.n	8000968 <KeyLogic+0x658>
			default:
/////////////////////////////////////////////////////KEY 0-9/////////////////////////////////////////////////////////
				if(keyPressed >= '0' && keyPressed <= '9') {
 8000842:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <KeyLogic+0x588>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b2f      	cmp	r3, #47	@ 0x2f
 8000848:	f240 8082 	bls.w	8000950 <KeyLogic+0x640>
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <KeyLogic+0x588>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b39      	cmp	r3, #57	@ 0x39
 8000852:	d87d      	bhi.n	8000950 <KeyLogic+0x640>
					if(seqState==SEQ_PRESSED_P){
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <KeyLogic+0x568>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b05      	cmp	r3, #5
 800085a:	d11f      	bne.n	800089c <KeyLogic+0x58c>
						seqState=SEQ_PRESSED_P_NUM;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <KeyLogic+0x568>)
 800085e:	2208      	movs	r2, #8
 8000860:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 8000862:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <KeyLogic+0x588>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	3b30      	subs	r3, #48	@ 0x30
 8000868:	461a      	mov	r2, r3
 800086a:	4b04      	ldr	r3, [pc, #16]	@ (800087c <KeyLogic+0x56c>)
 800086c:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <KeyLogic+0x580>)
 8000870:	2201      	movs	r2, #1
 8000872:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8000874:	e076      	b.n	8000964 <KeyLogic+0x654>
 8000876:	bf00      	nop
 8000878:	200000dd 	.word	0x200000dd
 800087c:	200000cc 	.word	0x200000cc
 8000880:	20000044 	.word	0x20000044
 8000884:	200000dc 	.word	0x200000dc
 8000888:	51eb851f 	.word	0x51eb851f
 800088c:	20000048 	.word	0x20000048
 8000890:	200000d0 	.word	0x200000d0
 8000894:	20000038 	.word	0x20000038
 8000898:	20000035 	.word	0x20000035
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 800089c:	4b35      	ldr	r3, [pc, #212]	@ (8000974 <KeyLogic+0x664>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b08      	cmp	r3, #8
 80008a2:	d013      	beq.n	80008cc <KeyLogic+0x5bc>
							seqState == SEQ_PRESSED_P_F2_PSWRD ||
 80008a4:	4b33      	ldr	r3, [pc, #204]	@ (8000974 <KeyLogic+0x664>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 80008a8:	2b06      	cmp	r3, #6
 80008aa:	d00f      	beq.n	80008cc <KeyLogic+0x5bc>
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 80008ac:	4b31      	ldr	r3, [pc, #196]	@ (8000974 <KeyLogic+0x664>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_F2_PSWRD ||
 80008b0:	2b09      	cmp	r3, #9
 80008b2:	d00b      	beq.n	80008cc <KeyLogic+0x5bc>
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 80008b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000974 <KeyLogic+0x664>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d007      	beq.n	80008cc <KeyLogic+0x5bc>
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 80008bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000974 <KeyLogic+0x664>)
 80008be:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	d003      	beq.n	80008cc <KeyLogic+0x5bc>
							seqState == SEQ_NUMBER
 80008c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000974 <KeyLogic+0x664>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d117      	bne.n	80008fc <KeyLogic+0x5ec>
							) {
						if (numberOfDigits < 6) {
 80008cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000978 <KeyLogic+0x668>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b05      	cmp	r3, #5
 80008d2:	d83c      	bhi.n	800094e <KeyLogic+0x63e>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 80008d4:	4b29      	ldr	r3, [pc, #164]	@ (800097c <KeyLogic+0x66c>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4613      	mov	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	4413      	add	r3, r2
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b27      	ldr	r3, [pc, #156]	@ (8000980 <KeyLogic+0x670>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	3b30      	subs	r3, #48	@ 0x30
 80008ea:	4a24      	ldr	r2, [pc, #144]	@ (800097c <KeyLogic+0x66c>)
 80008ec:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 80008ee:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <KeyLogic+0x668>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	3301      	adds	r3, #1
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b20      	ldr	r3, [pc, #128]	@ (8000978 <KeyLogic+0x668>)
 80008f8:	701a      	strb	r2, [r3, #0]
						if (numberOfDigits < 6) {
 80008fa:	e028      	b.n	800094e <KeyLogic+0x63e>
						}

					}else if(seqState == SEQ_PRESSED_P_F2_PSWRD_ROUND){
 80008fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <KeyLogic+0x664>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b07      	cmp	r3, #7
 8000902:	d117      	bne.n	8000934 <KeyLogic+0x624>
						if (numberOfDigits < 1) {
 8000904:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <KeyLogic+0x668>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d12b      	bne.n	8000964 <KeyLogic+0x654>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 800090c:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <KeyLogic+0x66c>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4613      	mov	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	4413      	add	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	461a      	mov	r2, r3
 800091a:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <KeyLogic+0x670>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	3b30      	subs	r3, #48	@ 0x30
 8000922:	4a16      	ldr	r2, [pc, #88]	@ (800097c <KeyLogic+0x66c>)
 8000924:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <KeyLogic+0x668>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <KeyLogic+0x668>)
 8000930:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8000932:	e017      	b.n	8000964 <KeyLogic+0x654>
						}
					}else{
						seqState = SEQ_NUMBER;
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <KeyLogic+0x664>)
 8000936:	2204      	movs	r2, #4
 8000938:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <KeyLogic+0x670>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	3b30      	subs	r3, #48	@ 0x30
 8000940:	461a      	mov	r2, r3
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <KeyLogic+0x66c>)
 8000944:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <KeyLogic+0x668>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 800094c:	e00a      	b.n	8000964 <KeyLogic+0x654>
 800094e:	e009      	b.n	8000964 <KeyLogic+0x654>
					}
				}else{
					seqState = SEQ_IDLE;
 8000950:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <KeyLogic+0x664>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <KeyLogic+0x668>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800095c:	4b07      	ldr	r3, [pc, #28]	@ (800097c <KeyLogic+0x66c>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
				}
				break;
 8000962:	e000      	b.n	8000966 <KeyLogic+0x656>
					if(seqState==SEQ_PRESSED_P){
 8000964:	bf00      	nop
				break;
 8000966:	bf00      	nop
		}
	}
	keyPressed = 0xFF;
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <KeyLogic+0x670>)
 800096a:	22ff      	movs	r2, #255	@ 0xff
 800096c:	701a      	strb	r2, [r3, #0]
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000dd 	.word	0x200000dd
 8000978:	200000d0 	.word	0x200000d0
 800097c:	200000cc 	.word	0x200000cc
 8000980:	20000035 	.word	0x20000035

08000984 <KeyLogic_Action>:


void KeyLogic_Action() {
 8000984:	b580      	push	{r7, lr}
 8000986:	b08c      	sub	sp, #48	@ 0x30
 8000988:	af00      	add	r7, sp, #0
    char buffer[7];
    switch (seqState) {
 800098a:	4bb5      	ldr	r3, [pc, #724]	@ (8000c60 <KeyLogic_Action+0x2dc>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b0e      	cmp	r3, #14
 8000990:	f200 820e 	bhi.w	8000db0 <KeyLogic_Action+0x42c>
 8000994:	a201      	add	r2, pc, #4	@ (adr r2, 800099c <KeyLogic_Action+0x18>)
 8000996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099a:	bf00      	nop
 800099c:	080009d9 	.word	0x080009d9
 80009a0:	080009ff 	.word	0x080009ff
 80009a4:	08000a25 	.word	0x08000a25
 80009a8:	08000a63 	.word	0x08000a63
 80009ac:	08000d71 	.word	0x08000d71
 80009b0:	08000aa1 	.word	0x08000aa1
 80009b4:	08000ac7 	.word	0x08000ac7
 80009b8:	08000aed 	.word	0x08000aed
 80009bc:	08000b0d 	.word	0x08000b0d
 80009c0:	08000b33 	.word	0x08000b33
 80009c4:	08000b59 	.word	0x08000b59
 80009c8:	08000c1d 	.word	0x08000c1d
 80009cc:	08000b7f 	.word	0x08000b7f
 80009d0:	08000d25 	.word	0x08000d25
 80009d4:	08000d4b 	.word	0x08000d4b
        case SEQ_IDLE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 80009d8:	2300      	movs	r3, #0
 80009da:	4aa2      	ldr	r2, [pc, #648]	@ (8000c64 <KeyLogic_Action+0x2e0>)
 80009dc:	2107      	movs	r1, #7
 80009de:	48a2      	ldr	r0, [pc, #648]	@ (8000c68 <KeyLogic_Action+0x2e4>)
 80009e0:	f002 fc64 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80009e4:	2300      	movs	r3, #0
 80009e6:	4a9f      	ldr	r2, [pc, #636]	@ (8000c64 <KeyLogic_Action+0x2e0>)
 80009e8:	2107      	movs	r1, #7
 80009ea:	48a0      	ldr	r0, [pc, #640]	@ (8000c6c <KeyLogic_Action+0x2e8>)
 80009ec:	f002 fc5e 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80009f0:	2300      	movs	r3, #0
 80009f2:	4a9c      	ldr	r2, [pc, #624]	@ (8000c64 <KeyLogic_Action+0x2e0>)
 80009f4:	2107      	movs	r1, #7
 80009f6:	489e      	ldr	r0, [pc, #632]	@ (8000c70 <KeyLogic_Action+0x2ec>)
 80009f8:	f002 fc58 	bl	80032ac <sniprintf>
            break;
 80009fc:	e1eb      	b.n	8000dd6 <KeyLogic_Action+0x452>
        case SEQ_DISP_PRICE:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "GIA   ");
 80009fe:	4a9d      	ldr	r2, [pc, #628]	@ (8000c74 <KeyLogic_Action+0x2f0>)
 8000a00:	2107      	movs	r1, #7
 8000a02:	4899      	ldr	r0, [pc, #612]	@ (8000c68 <KeyLogic_Action+0x2e4>)
 8000a04:	f002 fc52 	bl	80032ac <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", roundedPrice);
 8000a08:	4b9b      	ldr	r3, [pc, #620]	@ (8000c78 <KeyLogic_Action+0x2f4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a9b      	ldr	r2, [pc, #620]	@ (8000c7c <KeyLogic_Action+0x2f8>)
 8000a0e:	2107      	movs	r1, #7
 8000a10:	4896      	ldr	r0, [pc, #600]	@ (8000c6c <KeyLogic_Action+0x2e8>)
 8000a12:	f002 fc4b 	bl	80032ac <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000a16:	2300      	movs	r3, #0
 8000a18:	4a92      	ldr	r2, [pc, #584]	@ (8000c64 <KeyLogic_Action+0x2e0>)
 8000a1a:	2107      	movs	r1, #7
 8000a1c:	4894      	ldr	r0, [pc, #592]	@ (8000c70 <KeyLogic_Action+0x2ec>)
 8000a1e:	f002 fc45 	bl	80032ac <sniprintf>
			break;
 8000a22:	e1d8      	b.n	8000dd6 <KeyLogic_Action+0x452>
        case SEQ_ENTER_OLD_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8000a24:	4b96      	ldr	r3, [pc, #600]	@ (8000c80 <KeyLogic_Action+0x2fc>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f107 0020 	add.w	r0, r7, #32
 8000a2c:	4a93      	ldr	r2, [pc, #588]	@ (8000c7c <KeyLogic_Action+0x2f8>)
 8000a2e:	2107      	movs	r1, #7
 8000a30:	f002 fc3c 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8000a34:	f107 0320 	add.w	r3, r7, #32
 8000a38:	4a92      	ldr	r2, [pc, #584]	@ (8000c84 <KeyLogic_Action+0x300>)
 8000a3a:	2107      	movs	r1, #7
 8000a3c:	488a      	ldr	r0, [pc, #552]	@ (8000c68 <KeyLogic_Action+0x2e4>)
 8000a3e:	f002 fc35 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "0L0 ");
 8000a42:	4a91      	ldr	r2, [pc, #580]	@ (8000c88 <KeyLogic_Action+0x304>)
 8000a44:	2107      	movs	r1, #7
 8000a46:	4889      	ldr	r0, [pc, #548]	@ (8000c6c <KeyLogic_Action+0x2e8>)
 8000a48:	f002 fc30 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	4a85      	ldr	r2, [pc, #532]	@ (8000c64 <KeyLogic_Action+0x2e0>)
 8000a50:	2107      	movs	r1, #7
 8000a52:	4887      	ldr	r0, [pc, #540]	@ (8000c70 <KeyLogic_Action+0x2ec>)
 8000a54:	f002 fc2a 	bl	80032ac <sniprintf>
            LEDPointFlag = -1;
 8000a58:	4b8c      	ldr	r3, [pc, #560]	@ (8000c8c <KeyLogic_Action+0x308>)
 8000a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5e:	601a      	str	r2, [r3, #0]
            break;
 8000a60:	e1b9      	b.n	8000dd6 <KeyLogic_Action+0x452>
        case SEQ_ENTER_NEW_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8000a62:	4b87      	ldr	r3, [pc, #540]	@ (8000c80 <KeyLogic_Action+0x2fc>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f107 0020 	add.w	r0, r7, #32
 8000a6a:	4a84      	ldr	r2, [pc, #528]	@ (8000c7c <KeyLogic_Action+0x2f8>)
 8000a6c:	2107      	movs	r1, #7
 8000a6e:	f002 fc1d 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8000a72:	f107 0320 	add.w	r3, r7, #32
 8000a76:	4a83      	ldr	r2, [pc, #524]	@ (8000c84 <KeyLogic_Action+0x300>)
 8000a78:	2107      	movs	r1, #7
 8000a7a:	487b      	ldr	r0, [pc, #492]	@ (8000c68 <KeyLogic_Action+0x2e4>)
 8000a7c:	f002 fc16 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000a80:	2300      	movs	r3, #0
 8000a82:	4a78      	ldr	r2, [pc, #480]	@ (8000c64 <KeyLogic_Action+0x2e0>)
 8000a84:	2107      	movs	r1, #7
 8000a86:	4879      	ldr	r0, [pc, #484]	@ (8000c6c <KeyLogic_Action+0x2e8>)
 8000a88:	f002 fc10 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " NEUU ");
 8000a8c:	4a80      	ldr	r2, [pc, #512]	@ (8000c90 <KeyLogic_Action+0x30c>)
 8000a8e:	2107      	movs	r1, #7
 8000a90:	4877      	ldr	r0, [pc, #476]	@ (8000c70 <KeyLogic_Action+0x2ec>)
 8000a92:	f002 fc0b 	bl	80032ac <sniprintf>
            LEDPointFlag = -1;
 8000a96:	4b7d      	ldr	r3, [pc, #500]	@ (8000c8c <KeyLogic_Action+0x308>)
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9c:	601a      	str	r2, [r3, #0]
            break;
 8000a9e:	e19a      	b.n	8000dd6 <KeyLogic_Action+0x452>
        case SEQ_PRESSED_P:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8000aa0:	4b77      	ldr	r3, [pc, #476]	@ (8000c80 <KeyLogic_Action+0x2fc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a75      	ldr	r2, [pc, #468]	@ (8000c7c <KeyLogic_Action+0x2f8>)
 8000aa6:	2107      	movs	r1, #7
 8000aa8:	486f      	ldr	r0, [pc, #444]	@ (8000c68 <KeyLogic_Action+0x2e4>)
 8000aaa:	f002 fbff 	bl	80032ac <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000aae:	2300      	movs	r3, #0
 8000ab0:	4a6c      	ldr	r2, [pc, #432]	@ (8000c64 <KeyLogic_Action+0x2e0>)
 8000ab2:	2107      	movs	r1, #7
 8000ab4:	486d      	ldr	r0, [pc, #436]	@ (8000c6c <KeyLogic_Action+0x2e8>)
 8000ab6:	f002 fbf9 	bl	80032ac <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P     ");
 8000aba:	4a76      	ldr	r2, [pc, #472]	@ (8000c94 <KeyLogic_Action+0x310>)
 8000abc:	2107      	movs	r1, #7
 8000abe:	486c      	ldr	r0, [pc, #432]	@ (8000c70 <KeyLogic_Action+0x2ec>)
 8000ac0:	f002 fbf4 	bl	80032ac <sniprintf>
			break;
 8000ac4:	e187      	b.n	8000dd6 <KeyLogic_Action+0x452>
        case SEQ_PRESSED_P_F2_PSWRD:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8000ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8000c80 <KeyLogic_Action+0x2fc>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a6c      	ldr	r2, [pc, #432]	@ (8000c7c <KeyLogic_Action+0x2f8>)
 8000acc:	2107      	movs	r1, #7
 8000ace:	4866      	ldr	r0, [pc, #408]	@ (8000c68 <KeyLogic_Action+0x2e4>)
 8000ad0:	f002 fbec 	bl	80032ac <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	4a63      	ldr	r2, [pc, #396]	@ (8000c64 <KeyLogic_Action+0x2e0>)
 8000ad8:	2107      	movs	r1, #7
 8000ada:	4864      	ldr	r0, [pc, #400]	@ (8000c6c <KeyLogic_Action+0x2e8>)
 8000adc:	f002 fbe6 	bl	80032ac <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SL ARO");
 8000ae0:	4a6d      	ldr	r2, [pc, #436]	@ (8000c98 <KeyLogic_Action+0x314>)
 8000ae2:	2107      	movs	r1, #7
 8000ae4:	4862      	ldr	r0, [pc, #392]	@ (8000c70 <KeyLogic_Action+0x2ec>)
 8000ae6:	f002 fbe1 	bl	80032ac <sniprintf>
			break;
 8000aea:	e174      	b.n	8000dd6 <KeyLogic_Action+0x452>
        case SEQ_PRESSED_P_F2_PSWRD_ROUND:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "0.  50");
 8000aec:	4a6b      	ldr	r2, [pc, #428]	@ (8000c9c <KeyLogic_Action+0x318>)
 8000aee:	2107      	movs	r1, #7
 8000af0:	485d      	ldr	r0, [pc, #372]	@ (8000c68 <KeyLogic_Action+0x2e4>)
 8000af2:	f002 fbdb 	bl	80032ac <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "1. 100");
 8000af6:	4a6a      	ldr	r2, [pc, #424]	@ (8000ca0 <KeyLogic_Action+0x31c>)
 8000af8:	2107      	movs	r1, #7
 8000afa:	485c      	ldr	r0, [pc, #368]	@ (8000c6c <KeyLogic_Action+0x2e8>)
 8000afc:	f002 fbd6 	bl	80032ac <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "2. 1..");
 8000b00:	4a68      	ldr	r2, [pc, #416]	@ (8000ca4 <KeyLogic_Action+0x320>)
 8000b02:	2107      	movs	r1, #7
 8000b04:	485a      	ldr	r0, [pc, #360]	@ (8000c70 <KeyLogic_Action+0x2ec>)
 8000b06:	f002 fbd1 	bl	80032ac <sniprintf>
			break;
 8000b0a:	e164      	b.n	8000dd6 <KeyLogic_Action+0x452>
        case SEQ_PRESSED_P_NUM:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8000b0c:	4b5c      	ldr	r3, [pc, #368]	@ (8000c80 <KeyLogic_Action+0x2fc>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a5a      	ldr	r2, [pc, #360]	@ (8000c7c <KeyLogic_Action+0x2f8>)
 8000b12:	2107      	movs	r1, #7
 8000b14:	4854      	ldr	r0, [pc, #336]	@ (8000c68 <KeyLogic_Action+0x2e4>)
 8000b16:	f002 fbc9 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	4a51      	ldr	r2, [pc, #324]	@ (8000c64 <KeyLogic_Action+0x2e0>)
 8000b1e:	2107      	movs	r1, #7
 8000b20:	4852      	ldr	r0, [pc, #328]	@ (8000c6c <KeyLogic_Action+0x2e8>)
 8000b22:	f002 fbc3 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P88888");
 8000b26:	4a60      	ldr	r2, [pc, #384]	@ (8000ca8 <KeyLogic_Action+0x324>)
 8000b28:	2107      	movs	r1, #7
 8000b2a:	4851      	ldr	r0, [pc, #324]	@ (8000c70 <KeyLogic_Action+0x2ec>)
 8000b2c:	f002 fbbe 	bl	80032ac <sniprintf>
            break;
 8000b30:	e151      	b.n	8000dd6 <KeyLogic_Action+0x452>
        case SEQ_PRESSED_P_PSWRD_SETPRICE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8000b32:	4b53      	ldr	r3, [pc, #332]	@ (8000c80 <KeyLogic_Action+0x2fc>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a51      	ldr	r2, [pc, #324]	@ (8000c7c <KeyLogic_Action+0x2f8>)
 8000b38:	2107      	movs	r1, #7
 8000b3a:	484b      	ldr	r0, [pc, #300]	@ (8000c68 <KeyLogic_Action+0x2e4>)
 8000b3c:	f002 fbb6 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000b40:	2300      	movs	r3, #0
 8000b42:	4a48      	ldr	r2, [pc, #288]	@ (8000c64 <KeyLogic_Action+0x2e0>)
 8000b44:	2107      	movs	r1, #7
 8000b46:	4849      	ldr	r0, [pc, #292]	@ (8000c6c <KeyLogic_Action+0x2e8>)
 8000b48:	f002 fbb0 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "GIA   ");
 8000b4c:	4a49      	ldr	r2, [pc, #292]	@ (8000c74 <KeyLogic_Action+0x2f0>)
 8000b4e:	2107      	movs	r1, #7
 8000b50:	4847      	ldr	r0, [pc, #284]	@ (8000c70 <KeyLogic_Action+0x2ec>)
 8000b52:	f002 fbab 	bl	80032ac <sniprintf>
            break;
 8000b56:	e13e      	b.n	8000dd6 <KeyLogic_Action+0x452>
        case SEQ_PRESSED_T:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000b58:	2300      	movs	r3, #0
 8000b5a:	4a42      	ldr	r2, [pc, #264]	@ (8000c64 <KeyLogic_Action+0x2e0>)
 8000b5c:	2107      	movs	r1, #7
 8000b5e:	4842      	ldr	r0, [pc, #264]	@ (8000c68 <KeyLogic_Action+0x2e4>)
 8000b60:	f002 fba4 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000b64:	2300      	movs	r3, #0
 8000b66:	4a3f      	ldr	r2, [pc, #252]	@ (8000c64 <KeyLogic_Action+0x2e0>)
 8000b68:	2107      	movs	r1, #7
 8000b6a:	4840      	ldr	r0, [pc, #256]	@ (8000c6c <KeyLogic_Action+0x2e8>)
 8000b6c:	f002 fb9e 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 999999);
 8000b70:	4b4e      	ldr	r3, [pc, #312]	@ (8000cac <KeyLogic_Action+0x328>)
 8000b72:	4a3c      	ldr	r2, [pc, #240]	@ (8000c64 <KeyLogic_Action+0x2e0>)
 8000b74:	2107      	movs	r1, #7
 8000b76:	483e      	ldr	r0, [pc, #248]	@ (8000c70 <KeyLogic_Action+0x2ec>)
 8000b78:	f002 fb98 	bl	80032ac <sniprintf>
            break;
 8000b7c:	e12b      	b.n	8000dd6 <KeyLogic_Action+0x452>
        case SEQ_PRESSED_T_$:
        	 // Format the total liters into two parts
			formatTotalLitersShift(totalLitersShift, &row1, &row2);
 8000b7e:	4b4c      	ldr	r3, [pc, #304]	@ (8000cb0 <KeyLogic_Action+0x32c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a4c      	ldr	r2, [pc, #304]	@ (8000cb4 <KeyLogic_Action+0x330>)
 8000b84:	494c      	ldr	r1, [pc, #304]	@ (8000cb8 <KeyLogic_Action+0x334>)
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fb8a 	bl	80002a0 <formatTotalLitersShift>

			// Ensure the combined string fits into the buffer
			char row1StrShift[7]; // Buffer to hold formatted row1 string
			snprintf(row1StrShift, sizeof(row1StrShift), "%06ld", row1);
 8000b8c:	4b4a      	ldr	r3, [pc, #296]	@ (8000cb8 <KeyLogic_Action+0x334>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f107 0018 	add.w	r0, r7, #24
 8000b94:	4a39      	ldr	r2, [pc, #228]	@ (8000c7c <KeyLogic_Action+0x2f8>)
 8000b96:	2107      	movs	r1, #7
 8000b98:	f002 fb88 	bl	80032ac <sniprintf>

			// Combine "L.. " with the last two digits of row1
			char combinedStrShift[8]; // Buffer to hold combined string "L.. " and last two digits of row1
			snprintf(combinedStrShift, sizeof(combinedStrShift), "SH.%04ld", row1 % 10000); // Extract last two digits of row1
 8000b9c:	4b46      	ldr	r3, [pc, #280]	@ (8000cb8 <KeyLogic_Action+0x334>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b46      	ldr	r3, [pc, #280]	@ (8000cbc <KeyLogic_Action+0x338>)
 8000ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ba6:	0b5b      	lsrs	r3, r3, #13
 8000ba8:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000bac:	fb01 f303 	mul.w	r3, r1, r3
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	f107 0010 	add.w	r0, r7, #16
 8000bb6:	4a42      	ldr	r2, [pc, #264]	@ (8000cc0 <KeyLogic_Action+0x33c>)
 8000bb8:	2108      	movs	r1, #8
 8000bba:	f002 fb77 	bl	80032ac <sniprintf>

			// Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
			for (int i = 0; i < 6; ++i) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bc2:	e01b      	b.n	8000bfc <KeyLogic_Action+0x278>
				if (i < strlen(combinedStrShift)) {
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fabf 	bl	800014c <strlen>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d90a      	bls.n	8000bec <KeyLogic_Action+0x268>
					SevenSegBuffer[0][i] = combinedStrShift[i];
 8000bd6:	f107 0210 	add.w	r2, r7, #16
 8000bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bdc:	4413      	add	r3, r2
 8000bde:	7819      	ldrb	r1, [r3, #0]
 8000be0:	4a21      	ldr	r2, [pc, #132]	@ (8000c68 <KeyLogic_Action+0x2e4>)
 8000be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000be4:	4413      	add	r3, r2
 8000be6:	460a      	mov	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	e004      	b.n	8000bf6 <KeyLogic_Action+0x272>
				} else {
					SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8000bec:	4a1e      	ldr	r2, [pc, #120]	@ (8000c68 <KeyLogic_Action+0x2e4>)
 8000bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bf0:	4413      	add	r3, r2
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; ++i) {
 8000bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bfe:	2b05      	cmp	r3, #5
 8000c00:	dde0      	ble.n	8000bc4 <KeyLogic_Action+0x240>
				}
			}
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8000c02:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb4 <KeyLogic_Action+0x330>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a1d      	ldr	r2, [pc, #116]	@ (8000c7c <KeyLogic_Action+0x2f8>)
 8000c08:	2107      	movs	r1, #7
 8000c0a:	4818      	ldr	r0, [pc, #96]	@ (8000c6c <KeyLogic_Action+0x2e8>)
 8000c0c:	f002 fb4e 	bl	80032ac <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SHIFT ");
 8000c10:	4a2c      	ldr	r2, [pc, #176]	@ (8000cc4 <KeyLogic_Action+0x340>)
 8000c12:	2107      	movs	r1, #7
 8000c14:	4816      	ldr	r0, [pc, #88]	@ (8000c70 <KeyLogic_Action+0x2ec>)
 8000c16:	f002 fb49 	bl	80032ac <sniprintf>

            break;
 8000c1a:	e0dc      	b.n	8000dd6 <KeyLogic_Action+0x452>
        case SEQ_PRESSED_T_L:
            // Format the total liters into two parts
            formatTotalLiters(totalLiters, &row1, &row2);
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc8 <KeyLogic_Action+0x344>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a24      	ldr	r2, [pc, #144]	@ (8000cb4 <KeyLogic_Action+0x330>)
 8000c22:	4925      	ldr	r1, [pc, #148]	@ (8000cb8 <KeyLogic_Action+0x334>)
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff faef 	bl	8000208 <formatTotalLiters>

            // Ensure the combined string fits into the buffer
            char row1Str[7]; // Buffer to hold formatted row1 string
            snprintf(row1Str, sizeof(row1Str), "%06ld", row1);
 8000c2a:	4b23      	ldr	r3, [pc, #140]	@ (8000cb8 <KeyLogic_Action+0x334>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f107 0008 	add.w	r0, r7, #8
 8000c32:	4a12      	ldr	r2, [pc, #72]	@ (8000c7c <KeyLogic_Action+0x2f8>)
 8000c34:	2107      	movs	r1, #7
 8000c36:	f002 fb39 	bl	80032ac <sniprintf>

            // Combine "L.. " with the last two digits of row1
            char combinedStr[8]; // Buffer to hold combined string "L.. " and last two digits of row1
            snprintf(combinedStr, sizeof(combinedStr), "L.%04ld", row1 % 10000); // Extract last two digits of row1
 8000c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb8 <KeyLogic_Action+0x334>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <KeyLogic_Action+0x338>)
 8000c40:	fba3 1302 	umull	r1, r3, r3, r2
 8000c44:	0b5b      	lsrs	r3, r3, #13
 8000c46:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000c4a:	fb01 f303 	mul.w	r3, r1, r3
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	4638      	mov	r0, r7
 8000c52:	4a1e      	ldr	r2, [pc, #120]	@ (8000ccc <KeyLogic_Action+0x348>)
 8000c54:	2108      	movs	r1, #8
 8000c56:	f002 fb29 	bl	80032ac <sniprintf>

            // Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
            for (int i = 0; i < 6; ++i) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c5e:	e051      	b.n	8000d04 <KeyLogic_Action+0x380>
 8000c60:	200000dd 	.word	0x200000dd
 8000c64:	08003c4c 	.word	0x08003c4c
 8000c68:	20000020 	.word	0x20000020
 8000c6c:	20000027 	.word	0x20000027
 8000c70:	2000002e 	.word	0x2000002e
 8000c74:	08003c54 	.word	0x08003c54
 8000c78:	20000048 	.word	0x20000048
 8000c7c:	08003c5c 	.word	0x08003c5c
 8000c80:	200000cc 	.word	0x200000cc
 8000c84:	08003c64 	.word	0x08003c64
 8000c88:	08003c68 	.word	0x08003c68
 8000c8c:	2000004c 	.word	0x2000004c
 8000c90:	08003c70 	.word	0x08003c70
 8000c94:	08003c78 	.word	0x08003c78
 8000c98:	08003c80 	.word	0x08003c80
 8000c9c:	08003c88 	.word	0x08003c88
 8000ca0:	08003c90 	.word	0x08003c90
 8000ca4:	08003c98 	.word	0x08003c98
 8000ca8:	08003ca0 	.word	0x08003ca0
 8000cac:	000f423f 	.word	0x000f423f
 8000cb0:	20000040 	.word	0x20000040
 8000cb4:	200000d8 	.word	0x200000d8
 8000cb8:	200000d4 	.word	0x200000d4
 8000cbc:	d1b71759 	.word	0xd1b71759
 8000cc0:	08003ca8 	.word	0x08003ca8
 8000cc4:	08003cb4 	.word	0x08003cb4
 8000cc8:	2000003c 	.word	0x2000003c
 8000ccc:	08003cbc 	.word	0x08003cbc
                if (i < strlen(combinedStr)) {
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fa3a 	bl	800014c <strlen>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d909      	bls.n	8000cf4 <KeyLogic_Action+0x370>
                    SevenSegBuffer[0][i] = combinedStr[i];
 8000ce0:	463a      	mov	r2, r7
 8000ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ce4:	4413      	add	r3, r2
 8000ce6:	7819      	ldrb	r1, [r3, #0]
 8000ce8:	4a3d      	ldr	r2, [pc, #244]	@ (8000de0 <KeyLogic_Action+0x45c>)
 8000cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cec:	4413      	add	r3, r2
 8000cee:	460a      	mov	r2, r1
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	e004      	b.n	8000cfe <KeyLogic_Action+0x37a>
                } else {
                    SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8000cf4:	4a3a      	ldr	r2, [pc, #232]	@ (8000de0 <KeyLogic_Action+0x45c>)
 8000cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cf8:	4413      	add	r3, r2
 8000cfa:	2220      	movs	r2, #32
 8000cfc:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; ++i) {
 8000cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d00:	3301      	adds	r3, #1
 8000d02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d06:	2b05      	cmp	r3, #5
 8000d08:	dde2      	ble.n	8000cd0 <KeyLogic_Action+0x34c>
                }
            }


            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8000d0a:	4b36      	ldr	r3, [pc, #216]	@ (8000de4 <KeyLogic_Action+0x460>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a36      	ldr	r2, [pc, #216]	@ (8000de8 <KeyLogic_Action+0x464>)
 8000d10:	2107      	movs	r1, #7
 8000d12:	4836      	ldr	r0, [pc, #216]	@ (8000dec <KeyLogic_Action+0x468>)
 8000d14:	f002 faca 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "TOTAL ");
 8000d18:	4a35      	ldr	r2, [pc, #212]	@ (8000df0 <KeyLogic_Action+0x46c>)
 8000d1a:	2107      	movs	r1, #7
 8000d1c:	4835      	ldr	r0, [pc, #212]	@ (8000df4 <KeyLogic_Action+0x470>)
 8000d1e:	f002 fac5 	bl	80032ac <sniprintf>



            break;
 8000d22:	e058      	b.n	8000dd6 <KeyLogic_Action+0x452>

        case SEQ_PRESSED_T_F3:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 333333);
 8000d24:	4b34      	ldr	r3, [pc, #208]	@ (8000df8 <KeyLogic_Action+0x474>)
 8000d26:	4a35      	ldr	r2, [pc, #212]	@ (8000dfc <KeyLogic_Action+0x478>)
 8000d28:	2107      	movs	r1, #7
 8000d2a:	482d      	ldr	r0, [pc, #180]	@ (8000de0 <KeyLogic_Action+0x45c>)
 8000d2c:	f002 fabe 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000d30:	2300      	movs	r3, #0
 8000d32:	4a32      	ldr	r2, [pc, #200]	@ (8000dfc <KeyLogic_Action+0x478>)
 8000d34:	2107      	movs	r1, #7
 8000d36:	482d      	ldr	r0, [pc, #180]	@ (8000dec <KeyLogic_Action+0x468>)
 8000d38:	f002 fab8 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4a2f      	ldr	r2, [pc, #188]	@ (8000dfc <KeyLogic_Action+0x478>)
 8000d40:	2107      	movs	r1, #7
 8000d42:	482c      	ldr	r0, [pc, #176]	@ (8000df4 <KeyLogic_Action+0x470>)
 8000d44:	f002 fab2 	bl	80032ac <sniprintf>
            break;
 8000d48:	e045      	b.n	8000dd6 <KeyLogic_Action+0x452>
        case SEQ_PRESSED_T_F4:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 444444);
 8000d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e00 <KeyLogic_Action+0x47c>)
 8000d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8000dfc <KeyLogic_Action+0x478>)
 8000d4e:	2107      	movs	r1, #7
 8000d50:	4823      	ldr	r0, [pc, #140]	@ (8000de0 <KeyLogic_Action+0x45c>)
 8000d52:	f002 faab 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000d56:	2300      	movs	r3, #0
 8000d58:	4a28      	ldr	r2, [pc, #160]	@ (8000dfc <KeyLogic_Action+0x478>)
 8000d5a:	2107      	movs	r1, #7
 8000d5c:	4823      	ldr	r0, [pc, #140]	@ (8000dec <KeyLogic_Action+0x468>)
 8000d5e:	f002 faa5 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000d62:	2300      	movs	r3, #0
 8000d64:	4a25      	ldr	r2, [pc, #148]	@ (8000dfc <KeyLogic_Action+0x478>)
 8000d66:	2107      	movs	r1, #7
 8000d68:	4822      	ldr	r0, [pc, #136]	@ (8000df4 <KeyLogic_Action+0x470>)
 8000d6a:	f002 fa9f 	bl	80032ac <sniprintf>
            break;
 8000d6e:	e032      	b.n	8000dd6 <KeyLogic_Action+0x452>
        case SEQ_NUMBER:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8000d70:	4b24      	ldr	r3, [pc, #144]	@ (8000e04 <KeyLogic_Action+0x480>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f107 0020 	add.w	r0, r7, #32
 8000d78:	4a1b      	ldr	r2, [pc, #108]	@ (8000de8 <KeyLogic_Action+0x464>)
 8000d7a:	2107      	movs	r1, #7
 8000d7c:	f002 fa96 	bl	80032ac <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8000d80:	f107 0320 	add.w	r3, r7, #32
 8000d84:	4a20      	ldr	r2, [pc, #128]	@ (8000e08 <KeyLogic_Action+0x484>)
 8000d86:	2107      	movs	r1, #7
 8000d88:	4815      	ldr	r0, [pc, #84]	@ (8000de0 <KeyLogic_Action+0x45c>)
 8000d8a:	f002 fa8f 	bl	80032ac <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000d8e:	2300      	movs	r3, #0
 8000d90:	4a1a      	ldr	r2, [pc, #104]	@ (8000dfc <KeyLogic_Action+0x478>)
 8000d92:	2107      	movs	r1, #7
 8000d94:	4815      	ldr	r0, [pc, #84]	@ (8000dec <KeyLogic_Action+0x468>)
 8000d96:	f002 fa89 	bl	80032ac <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	4a17      	ldr	r2, [pc, #92]	@ (8000dfc <KeyLogic_Action+0x478>)
 8000d9e:	2107      	movs	r1, #7
 8000da0:	4814      	ldr	r0, [pc, #80]	@ (8000df4 <KeyLogic_Action+0x470>)
 8000da2:	f002 fa83 	bl	80032ac <sniprintf>
			LEDPointFlag = -1;
 8000da6:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <KeyLogic_Action+0x488>)
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	601a      	str	r2, [r3, #0]
			break;
 8000dae:	e012      	b.n	8000dd6 <KeyLogic_Action+0x452>
        default:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000db0:	2300      	movs	r3, #0
 8000db2:	4a12      	ldr	r2, [pc, #72]	@ (8000dfc <KeyLogic_Action+0x478>)
 8000db4:	2107      	movs	r1, #7
 8000db6:	480a      	ldr	r0, [pc, #40]	@ (8000de0 <KeyLogic_Action+0x45c>)
 8000db8:	f002 fa78 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000dfc <KeyLogic_Action+0x478>)
 8000dc0:	2107      	movs	r1, #7
 8000dc2:	480a      	ldr	r0, [pc, #40]	@ (8000dec <KeyLogic_Action+0x468>)
 8000dc4:	f002 fa72 	bl	80032ac <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000dc8:	2300      	movs	r3, #0
 8000dca:	4a0c      	ldr	r2, [pc, #48]	@ (8000dfc <KeyLogic_Action+0x478>)
 8000dcc:	2107      	movs	r1, #7
 8000dce:	4809      	ldr	r0, [pc, #36]	@ (8000df4 <KeyLogic_Action+0x470>)
 8000dd0:	f002 fa6c 	bl	80032ac <sniprintf>
            break;
 8000dd4:	bf00      	nop
    }
}
 8000dd6:	bf00      	nop
 8000dd8:	3730      	adds	r7, #48	@ 0x30
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000020 	.word	0x20000020
 8000de4:	200000d8 	.word	0x200000d8
 8000de8:	08003c5c 	.word	0x08003c5c
 8000dec:	20000027 	.word	0x20000027
 8000df0:	08003cc4 	.word	0x08003cc4
 8000df4:	2000002e 	.word	0x2000002e
 8000df8:	00051615 	.word	0x00051615
 8000dfc:	08003c4c 	.word	0x08003c4c
 8000e00:	0006c81c 	.word	0x0006c81c
 8000e04:	200000cc 	.word	0x200000cc
 8000e08:	08003c64 	.word	0x08003c64
 8000e0c:	2000004c 	.word	0x2000004c

08000e10 <CharToSegment>:
//uint32_t SevenSegBuffer[3]={123456, 654321, 987654};
char SevenSegBuffer[3][7] = {"123456", "654321", "987654"};
uint8_t displayBuffer[5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;

uint8_t CharToSegment(char c) {
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e1e:	d907      	bls.n	8000e30 <CharToSegment+0x20>
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	2b39      	cmp	r3, #57	@ 0x39
 8000e24:	d804      	bhi.n	8000e30 <CharToSegment+0x20>
        return digitMapWithOutDP[c - '0'];
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	3b30      	subs	r3, #48	@ 0x30
 8000e2a:	4a37      	ldr	r2, [pc, #220]	@ (8000f08 <CharToSegment+0xf8>)
 8000e2c:	5cd3      	ldrb	r3, [r2, r3]
 8000e2e:	e066      	b.n	8000efe <CharToSegment+0xee>
    } else if (c == 'L') {
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	2b4c      	cmp	r3, #76	@ 0x4c
 8000e34:	d102      	bne.n	8000e3c <CharToSegment+0x2c>
        return specialCharMap[0];
 8000e36:	4b35      	ldr	r3, [pc, #212]	@ (8000f0c <CharToSegment+0xfc>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	e060      	b.n	8000efe <CharToSegment+0xee>
    } else if (c == '.') {
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e40:	d102      	bne.n	8000e48 <CharToSegment+0x38>
        return specialCharMap[1];
 8000e42:	4b32      	ldr	r3, [pc, #200]	@ (8000f0c <CharToSegment+0xfc>)
 8000e44:	785b      	ldrb	r3, [r3, #1]
 8000e46:	e05a      	b.n	8000efe <CharToSegment+0xee>
    } else if (c == 'T') {
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2b54      	cmp	r3, #84	@ 0x54
 8000e4c:	d102      	bne.n	8000e54 <CharToSegment+0x44>
        return specialCharMap[2];
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f0c <CharToSegment+0xfc>)
 8000e50:	789b      	ldrb	r3, [r3, #2]
 8000e52:	e054      	b.n	8000efe <CharToSegment+0xee>
    } else if (c == 'O') {
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	2b4f      	cmp	r3, #79	@ 0x4f
 8000e58:	d102      	bne.n	8000e60 <CharToSegment+0x50>
        return specialCharMap[3];
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f0c <CharToSegment+0xfc>)
 8000e5c:	78db      	ldrb	r3, [r3, #3]
 8000e5e:	e04e      	b.n	8000efe <CharToSegment+0xee>
    } else if (c == 'A') {
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	2b41      	cmp	r3, #65	@ 0x41
 8000e64:	d102      	bne.n	8000e6c <CharToSegment+0x5c>
        return specialCharMap[4];
 8000e66:	4b29      	ldr	r3, [pc, #164]	@ (8000f0c <CharToSegment+0xfc>)
 8000e68:	791b      	ldrb	r3, [r3, #4]
 8000e6a:	e048      	b.n	8000efe <CharToSegment+0xee>
    } else if (c == 'S') {
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	2b53      	cmp	r3, #83	@ 0x53
 8000e70:	d102      	bne.n	8000e78 <CharToSegment+0x68>
        return specialCharMap[5];
 8000e72:	4b26      	ldr	r3, [pc, #152]	@ (8000f0c <CharToSegment+0xfc>)
 8000e74:	795b      	ldrb	r3, [r3, #5]
 8000e76:	e042      	b.n	8000efe <CharToSegment+0xee>
    } else if (c == 'H') {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2b48      	cmp	r3, #72	@ 0x48
 8000e7c:	d102      	bne.n	8000e84 <CharToSegment+0x74>
        return specialCharMap[6];
 8000e7e:	4b23      	ldr	r3, [pc, #140]	@ (8000f0c <CharToSegment+0xfc>)
 8000e80:	799b      	ldrb	r3, [r3, #6]
 8000e82:	e03c      	b.n	8000efe <CharToSegment+0xee>
    } else if (c == 'I') {
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b49      	cmp	r3, #73	@ 0x49
 8000e88:	d102      	bne.n	8000e90 <CharToSegment+0x80>
        return specialCharMap[7];
 8000e8a:	4b20      	ldr	r3, [pc, #128]	@ (8000f0c <CharToSegment+0xfc>)
 8000e8c:	79db      	ldrb	r3, [r3, #7]
 8000e8e:	e036      	b.n	8000efe <CharToSegment+0xee>
    } else if (c == 'F') {
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b46      	cmp	r3, #70	@ 0x46
 8000e94:	d102      	bne.n	8000e9c <CharToSegment+0x8c>
        return specialCharMap[8];
 8000e96:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <CharToSegment+0xfc>)
 8000e98:	7a1b      	ldrb	r3, [r3, #8]
 8000e9a:	e030      	b.n	8000efe <CharToSegment+0xee>
    } else if (c == 'G') {
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	2b47      	cmp	r3, #71	@ 0x47
 8000ea0:	d102      	bne.n	8000ea8 <CharToSegment+0x98>
        return specialCharMap[9];
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <CharToSegment+0xfc>)
 8000ea4:	7a5b      	ldrb	r3, [r3, #9]
 8000ea6:	e02a      	b.n	8000efe <CharToSegment+0xee>
    } else if (c == 'P') {
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	2b50      	cmp	r3, #80	@ 0x50
 8000eac:	d102      	bne.n	8000eb4 <CharToSegment+0xa4>
        return specialCharMap[10];
 8000eae:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <CharToSegment+0xfc>)
 8000eb0:	7a9b      	ldrb	r3, [r3, #10]
 8000eb2:	e024      	b.n	8000efe <CharToSegment+0xee>
    } else if (c == 'C') {
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2b43      	cmp	r3, #67	@ 0x43
 8000eb8:	d102      	bne.n	8000ec0 <CharToSegment+0xb0>
        return specialCharMap[11];
 8000eba:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <CharToSegment+0xfc>)
 8000ebc:	7adb      	ldrb	r3, [r3, #11]
 8000ebe:	e01e      	b.n	8000efe <CharToSegment+0xee>
    } else if (c == 'E') {
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2b45      	cmp	r3, #69	@ 0x45
 8000ec4:	d102      	bne.n	8000ecc <CharToSegment+0xbc>
        return specialCharMap[12];
 8000ec6:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <CharToSegment+0xfc>)
 8000ec8:	7b1b      	ldrb	r3, [r3, #12]
 8000eca:	e018      	b.n	8000efe <CharToSegment+0xee>
    } else if (c == 'U') {
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b55      	cmp	r3, #85	@ 0x55
 8000ed0:	d102      	bne.n	8000ed8 <CharToSegment+0xc8>
        return specialCharMap[13];
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <CharToSegment+0xfc>)
 8000ed4:	7b5b      	ldrb	r3, [r3, #13]
 8000ed6:	e012      	b.n	8000efe <CharToSegment+0xee>
    } else if (c == 'N') {
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2b4e      	cmp	r3, #78	@ 0x4e
 8000edc:	d102      	bne.n	8000ee4 <CharToSegment+0xd4>
        return specialCharMap[14];
 8000ede:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <CharToSegment+0xfc>)
 8000ee0:	7b9b      	ldrb	r3, [r3, #14]
 8000ee2:	e00c      	b.n	8000efe <CharToSegment+0xee>
    } else if (c == 'R') {
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b52      	cmp	r3, #82	@ 0x52
 8000ee8:	d102      	bne.n	8000ef0 <CharToSegment+0xe0>
        return specialCharMap[15];
 8000eea:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <CharToSegment+0xfc>)
 8000eec:	7bdb      	ldrb	r3, [r3, #15]
 8000eee:	e006      	b.n	8000efe <CharToSegment+0xee>
    } else if (c == 'D') {
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b44      	cmp	r3, #68	@ 0x44
 8000ef4:	d102      	bne.n	8000efc <CharToSegment+0xec>
        return specialCharMap[16];
 8000ef6:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <CharToSegment+0xfc>)
 8000ef8:	7c1b      	ldrb	r3, [r3, #16]
 8000efa:	e000      	b.n	8000efe <CharToSegment+0xee>
    } else {
        return 0b11111111; // Blank
 8000efc:	23ff      	movs	r3, #255	@ 0xff
    }
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	2000000c 	.word	0x2000000c

08000f10 <SevenSegLEDsHandler>:

uint8_t* SevenSegLEDsHandler(char buffer[3][7], uint8_t scan_state) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    for (int i = 0; i < 3; i++) {
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e035      	b.n	8000f8e <SevenSegLEDsHandler+0x7e>
        int len = strlen(buffer[i]);
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	4613      	mov	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	1a9b      	subs	r3, r3, r2
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff f90c 	bl	800014c <strlen>
 8000f34:	4603      	mov	r3, r0
 8000f36:	60bb      	str	r3, [r7, #8]
        if (scan_state < 6) {
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	2b05      	cmp	r3, #5
 8000f3c:	d81f      	bhi.n	8000f7e <SevenSegLEDsHandler+0x6e>
            if (scan_state < len) {
 8000f3e:	78fb      	ldrb	r3, [r7, #3]
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	dd15      	ble.n	8000f72 <SevenSegLEDsHandler+0x62>
                output[i] = CharToSegment(buffer[i][len - 1 - scan_state]);
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	1a9b      	subs	r3, r3, r2
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	441a      	add	r2, r3
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1e59      	subs	r1, r3, #1
 8000f56:	78fb      	ldrb	r3, [r7, #3]
 8000f58:	1acb      	subs	r3, r1, r3
 8000f5a:	5cd3      	ldrb	r3, [r2, r3]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff57 	bl	8000e10 <CharToSegment>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4619      	mov	r1, r3
 8000f66:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa0 <SevenSegLEDsHandler+0x90>)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	e00a      	b.n	8000f88 <SevenSegLEDsHandler+0x78>
            } else {
                output[i] = 0b11111111; // Blank
 8000f72:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <SevenSegLEDsHandler+0x90>)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	22ff      	movs	r2, #255	@ 0xff
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	e004      	b.n	8000f88 <SevenSegLEDsHandler+0x78>
            }
        } else {
            output[i] = 0b11111111; // Blank
 8000f7e:	4a08      	ldr	r2, [pc, #32]	@ (8000fa0 <SevenSegLEDsHandler+0x90>)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	22ff      	movs	r2, #255	@ 0xff
 8000f86:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	ddc6      	ble.n	8000f22 <SevenSegLEDsHandler+0x12>
        }
    }
    return output;
 8000f94:	4b02      	ldr	r3, [pc, #8]	@ (8000fa0 <SevenSegLEDsHandler+0x90>)
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000e8 	.word	0x200000e8

08000fa4 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(char buffer[3][7], uint8_t scan_state) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
	uint8_t* curr_digit=SevenSegLEDsHandler(buffer,scan_state);
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ffab 	bl	8000f10 <SevenSegLEDsHandler>
 8000fba:	60b8      	str	r0, [r7, #8]
	uint8_t curr_scan;
	switch (scan_state) {
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	d820      	bhi.n	8001004 <UpdateDisplayBuffer+0x60>
 8000fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc8 <UpdateDisplayBuffer+0x24>)
 8000fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc8:	08000fe1 	.word	0x08000fe1
 8000fcc:	08000fe7 	.word	0x08000fe7
 8000fd0:	08000fed 	.word	0x08000fed
 8000fd4:	08000ff3 	.word	0x08000ff3
 8000fd8:	08000ff9 	.word	0x08000ff9
 8000fdc:	08000fff 	.word	0x08000fff
		case 0:
			curr_scan=0b00100000;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	73fb      	strb	r3, [r7, #15]
			break;
 8000fe4:	e011      	b.n	800100a <UpdateDisplayBuffer+0x66>
		case 1:
			curr_scan=0b00010000;
 8000fe6:	2310      	movs	r3, #16
 8000fe8:	73fb      	strb	r3, [r7, #15]
			break;
 8000fea:	e00e      	b.n	800100a <UpdateDisplayBuffer+0x66>
		case 2:
			curr_scan=0b00001000;
 8000fec:	2308      	movs	r3, #8
 8000fee:	73fb      	strb	r3, [r7, #15]
			break;
 8000ff0:	e00b      	b.n	800100a <UpdateDisplayBuffer+0x66>
		case 3:
			curr_scan=0b00000100;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	73fb      	strb	r3, [r7, #15]
			break;
 8000ff6:	e008      	b.n	800100a <UpdateDisplayBuffer+0x66>
		case 4:
			curr_scan=0b00000010;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	73fb      	strb	r3, [r7, #15]
			break;
 8000ffc:	e005      	b.n	800100a <UpdateDisplayBuffer+0x66>
		case 5:
			curr_scan=0b00000001;
 8000ffe:	2301      	movs	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
			break;
 8001002:	e002      	b.n	800100a <UpdateDisplayBuffer+0x66>
		default:
			curr_scan=0b00000001;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
			break;
 8001008:	bf00      	nop
	}
	if(LEDPointFlag >=0 && LEDPointFlag <=5){
 800100a:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <UpdateDisplayBuffer+0xf0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	db2c      	blt.n	800106c <UpdateDisplayBuffer+0xc8>
 8001012:	4b20      	ldr	r3, [pc, #128]	@ (8001094 <UpdateDisplayBuffer+0xf0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b05      	cmp	r3, #5
 8001018:	dc28      	bgt.n	800106c <UpdateDisplayBuffer+0xc8>
	    	if (scan_state == LEDPointFlag){
 800101a:	78fa      	ldrb	r2, [r7, #3]
 800101c:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <UpdateDisplayBuffer+0xf0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	429a      	cmp	r2, r3
 8001022:	d113      	bne.n	800104c <UpdateDisplayBuffer+0xa8>
				displayBuffer[0] = curr_scan;
 8001024:	4a1c      	ldr	r2, [pc, #112]	@ (8001098 <UpdateDisplayBuffer+0xf4>)
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	7013      	strb	r3, [r2, #0]
				displayBuffer[1] = curr_digit[2];
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	789a      	ldrb	r2, [r3, #2]
 800102e:	4b1a      	ldr	r3, [pc, #104]	@ (8001098 <UpdateDisplayBuffer+0xf4>)
 8001030:	705a      	strb	r2, [r3, #1]
				displayBuffer[2] = curr_digit[1] & 0b01111111; //Add point to second row
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	3301      	adds	r3, #1
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <UpdateDisplayBuffer+0xf4>)
 8001040:	709a      	strb	r2, [r3, #2]
				displayBuffer[3] = curr_digit[0];
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	781a      	ldrb	r2, [r3, #0]
 8001046:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <UpdateDisplayBuffer+0xf4>)
 8001048:	70da      	strb	r2, [r3, #3]
	    	if (scan_state == LEDPointFlag){
 800104a:	e01f      	b.n	800108c <UpdateDisplayBuffer+0xe8>
	    	}
	    	else
	    	{
	    		displayBuffer[0] = curr_scan;
 800104c:	4a12      	ldr	r2, [pc, #72]	@ (8001098 <UpdateDisplayBuffer+0xf4>)
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	7013      	strb	r3, [r2, #0]
	    		displayBuffer[1] = curr_digit[2];
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	789a      	ldrb	r2, [r3, #2]
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <UpdateDisplayBuffer+0xf4>)
 8001058:	705a      	strb	r2, [r3, #1]
	    		displayBuffer[2] = curr_digit[1];
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	785a      	ldrb	r2, [r3, #1]
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <UpdateDisplayBuffer+0xf4>)
 8001060:	709a      	strb	r2, [r3, #2]
	    		displayBuffer[3] = curr_digit[0];
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	781a      	ldrb	r2, [r3, #0]
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <UpdateDisplayBuffer+0xf4>)
 8001068:	70da      	strb	r2, [r3, #3]
	    	if (scan_state == LEDPointFlag){
 800106a:	e00f      	b.n	800108c <UpdateDisplayBuffer+0xe8>
	    	}
	    }
	    else
	    {
			displayBuffer[0] = curr_scan;
 800106c:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <UpdateDisplayBuffer+0xf4>)
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	7013      	strb	r3, [r2, #0]
			displayBuffer[1] = curr_digit[2];
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	789a      	ldrb	r2, [r3, #2]
 8001076:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <UpdateDisplayBuffer+0xf4>)
 8001078:	705a      	strb	r2, [r3, #1]
			displayBuffer[2] = curr_digit[1];
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	785a      	ldrb	r2, [r3, #1]
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <UpdateDisplayBuffer+0xf4>)
 8001080:	709a      	strb	r2, [r3, #2]
			displayBuffer[3] = curr_digit[0];
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	781a      	ldrb	r2, [r3, #0]
 8001086:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <UpdateDisplayBuffer+0xf4>)
 8001088:	70da      	strb	r2, [r3, #3]
	    }
}
 800108a:	bf00      	nop
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2000004c 	.word	0x2000004c
 8001098:	200000e0 	.word	0x200000e0

0800109c <SevenSegLEDsScan>:

//
void SevenSegLEDsScan(){
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
//	uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
	UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState);
 80010a0:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <SevenSegLEDsScan+0x40>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4619      	mov	r1, r3
 80010a8:	480d      	ldr	r0, [pc, #52]	@ (80010e0 <SevenSegLEDsScan+0x44>)
 80010aa:	f7ff ff7b 	bl	8000fa4 <UpdateDisplayBuffer>
	ShiftOut_SPI(displayBuffer, 4);
 80010ae:	2104      	movs	r1, #4
 80010b0:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <SevenSegLEDsScan+0x48>)
 80010b2:	f000 f81b 	bl	80010ec <ShiftOut_SPI>
//    currentBufferIndex = bufferIndex;  // Swap buffers
    SevenSegScanState = (SevenSegScanState + 1) % 6;
 80010b6:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <SevenSegLEDsScan+0x40>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <SevenSegLEDsScan+0x4c>)
 80010c0:	fb83 3102 	smull	r3, r1, r3, r2
 80010c4:	17d3      	asrs	r3, r2, #31
 80010c6:	1ac9      	subs	r1, r1, r3
 80010c8:	460b      	mov	r3, r1
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	440b      	add	r3, r1
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	1ad1      	subs	r1, r2, r3
 80010d2:	b2ca      	uxtb	r2, r1
 80010d4:	4b01      	ldr	r3, [pc, #4]	@ (80010dc <SevenSegLEDsScan+0x40>)
 80010d6:	701a      	strb	r2, [r3, #0]
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200000de 	.word	0x200000de
 80010e0:	20000020 	.word	0x20000020
 80010e4:	200000e0 	.word	0x200000e0
 80010e8:	2aaaaaab 	.word	0x2aaaaaab

080010ec <ShiftOut_SPI>:
 *      Author: clong
 */
#include "SPI_shift.h"

void ShiftOut_SPI(uint8_t *data, size_t size)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Pull STCP (Latch) low
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010fc:	480a      	ldr	r0, [pc, #40]	@ (8001128 <ShiftOut_SPI+0x3c>)
 80010fe:	f000 fe72 	bl	8001de6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, 300); // Transmit data
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	b29a      	uxth	r2, r3
 8001106:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4807      	ldr	r0, [pc, #28]	@ (800112c <ShiftOut_SPI+0x40>)
 800110e:	f001 fae5 	bl	80026dc <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Pull STCP (Latch) high
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001118:	4803      	ldr	r0, [pc, #12]	@ (8001128 <ShiftOut_SPI+0x3c>)
 800111a:	f000 fe64 	bl	8001de6 <HAL_GPIO_WritePin>

}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40010c00 	.word	0x40010c00
 800112c:	20000144 	.word	0x20000144

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001134:	f000 fb4c 	bl	80017d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001138:	f000 f832 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113c:	f000 f924 	bl	8001388 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001140:	f000 f8a0 	bl	8001284 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001144:	f000 f8d4 	bl	80012f0 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001148:	f000 f866 	bl	8001218 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800114c:	4812      	ldr	r0, [pc, #72]	@ (8001198 <main+0x68>)
 800114e:	f001 fcff 	bl	8002b50 <HAL_TIM_Base_Start_IT>
  setTimer(0,100);
 8001152:	2164      	movs	r1, #100	@ 0x64
 8001154:	2000      	movs	r0, #0
 8001156:	f000 facd 	bl	80016f4 <setTimer>
  setTimer(1,100);
 800115a:	2164      	movs	r1, #100	@ 0x64
 800115c:	2001      	movs	r0, #1
 800115e:	f000 fac9 	bl	80016f4 <setTimer>
  setTimer(2,100);
 8001162:	2164      	movs	r1, #100	@ 0x64
 8001164:	2002      	movs	r0, #2
 8001166:	f000 fac5 	bl	80016f4 <setTimer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {
	  KeyLogic();
 800116a:	f7ff f8d1 	bl	8000310 <KeyLogic>
	  // TIMER 0 /////////////////////////////////////
	  if(timer_flag[0]==1){
 800116e:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <main+0x6c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d105      	bne.n	8001182 <main+0x52>

		  SevenSegLEDsScan();
 8001176:	f7ff ff91 	bl	800109c <SevenSegLEDsScan>
		  setTimer(0,5);
 800117a:	2105      	movs	r1, #5
 800117c:	2000      	movs	r0, #0
 800117e:	f000 fab9 	bl	80016f4 <setTimer>
	  }

	  // TIMER 1 /////////////////////////////////////
	  if(timer_flag[1]==1){
 8001182:	4b06      	ldr	r3, [pc, #24]	@ (800119c <main+0x6c>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d1ef      	bne.n	800116a <main+0x3a>
		  KeyLogic_Action();
 800118a:	f7ff fbfb 	bl	8000984 <KeyLogic_Action>
		  setTimer(1,10);
 800118e:	210a      	movs	r1, #10
 8001190:	2001      	movs	r0, #1
 8001192:	f000 faaf 	bl	80016f4 <setTimer>
	  KeyLogic();
 8001196:	e7e8      	b.n	800116a <main+0x3a>
 8001198:	2000019c 	.word	0x2000019c
 800119c:	20000210 	.word	0x20000210

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b090      	sub	sp, #64	@ 0x40
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	2228      	movs	r2, #40	@ 0x28
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 f8b0 	bl	8003314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c6:	2301      	movs	r3, #1
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ca:	2310      	movs	r3, #16
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d2:	f107 0318 	add.w	r3, r7, #24
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fe1e 	bl	8001e18 <HAL_RCC_OscConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011e2:	f000 f94b 	bl	800147c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e6:	230f      	movs	r3, #15
 80011e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 f88c 	bl	800231c <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800120a:	f000 f937 	bl	800147c <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3740      	adds	r7, #64	@ 0x40
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800121c:	4b17      	ldr	r3, [pc, #92]	@ (800127c <MX_SPI1_Init+0x64>)
 800121e:	4a18      	ldr	r2, [pc, #96]	@ (8001280 <MX_SPI1_Init+0x68>)
 8001220:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001222:	4b16      	ldr	r3, [pc, #88]	@ (800127c <MX_SPI1_Init+0x64>)
 8001224:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001228:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <MX_SPI1_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_SPI1_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_SPI1_Init+0x64>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_SPI1_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_SPI1_Init+0x64>)
 8001244:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001248:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800124a:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <MX_SPI1_Init+0x64>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <MX_SPI1_Init+0x64>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <MX_SPI1_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800125c:	4b07      	ldr	r3, [pc, #28]	@ (800127c <MX_SPI1_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MX_SPI1_Init+0x64>)
 8001264:	220a      	movs	r2, #10
 8001266:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <MX_SPI1_Init+0x64>)
 800126a:	f001 f9b3 	bl	80025d4 <HAL_SPI_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001274:	f000 f902 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200000ec 	.word	0x200000ec
 8001280:	40013000 	.word	0x40013000

08001284 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001288:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <MX_SPI2_Init+0x64>)
 800128a:	4a18      	ldr	r2, [pc, #96]	@ (80012ec <MX_SPI2_Init+0x68>)
 800128c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800128e:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <MX_SPI2_Init+0x64>)
 8001290:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001294:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001296:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <MX_SPI2_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <MX_SPI2_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_SPI2_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <MX_SPI2_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_SPI2_Init+0x64>)
 80012b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012b6:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MX_SPI2_Init+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <MX_SPI2_Init+0x64>)
 80012be:	2200      	movs	r2, #0
 80012c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c2:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MX_SPI2_Init+0x64>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c8:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <MX_SPI2_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <MX_SPI2_Init+0x64>)
 80012d0:	220a      	movs	r2, #10
 80012d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012d4:	4804      	ldr	r0, [pc, #16]	@ (80012e8 <MX_SPI2_Init+0x64>)
 80012d6:	f001 f97d 	bl	80025d4 <HAL_SPI_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012e0:	f000 f8cc 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000144 	.word	0x20000144
 80012ec:	40003800 	.word	0x40003800

080012f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	463b      	mov	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800130c:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <MX_TIM2_Init+0x94>)
 800130e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001312:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001314:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <MX_TIM2_Init+0x94>)
 8001316:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800131a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <MX_TIM2_Init+0x94>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001322:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <MX_TIM2_Init+0x94>)
 8001324:	2209      	movs	r2, #9
 8001326:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001328:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <MX_TIM2_Init+0x94>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <MX_TIM2_Init+0x94>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001334:	4813      	ldr	r0, [pc, #76]	@ (8001384 <MX_TIM2_Init+0x94>)
 8001336:	f001 fbbb 	bl	8002ab0 <HAL_TIM_Base_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001340:	f000 f89c 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001344:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001348:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4619      	mov	r1, r3
 8001350:	480c      	ldr	r0, [pc, #48]	@ (8001384 <MX_TIM2_Init+0x94>)
 8001352:	f001 fd57 	bl	8002e04 <HAL_TIM_ConfigClockSource>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800135c:	f000 f88e 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	@ (8001384 <MX_TIM2_Init+0x94>)
 800136e:	f001 ff2d 	bl	80031cc <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001378:	f000 f880 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000019c 	.word	0x2000019c

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b2f      	ldr	r3, [pc, #188]	@ (800145c <MX_GPIO_Init+0xd4>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a2e      	ldr	r2, [pc, #184]	@ (800145c <MX_GPIO_Init+0xd4>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b2c      	ldr	r3, [pc, #176]	@ (800145c <MX_GPIO_Init+0xd4>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	4b29      	ldr	r3, [pc, #164]	@ (800145c <MX_GPIO_Init+0xd4>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a28      	ldr	r2, [pc, #160]	@ (800145c <MX_GPIO_Init+0xd4>)
 80013ba:	f043 0308 	orr.w	r3, r3, #8
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b26      	ldr	r3, [pc, #152]	@ (800145c <MX_GPIO_Init+0xd4>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2140      	movs	r1, #64	@ 0x40
 80013d0:	4823      	ldr	r0, [pc, #140]	@ (8001460 <MX_GPIO_Init+0xd8>)
 80013d2:	f000 fd08 	bl	8001de6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 80013d6:	2200      	movs	r2, #0
 80013d8:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 80013dc:	4821      	ldr	r0, [pc, #132]	@ (8001464 <MX_GPIO_Init+0xdc>)
 80013de:	f000 fd02 	bl	8001de6 <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Latch_SPI1_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin;
 80013e2:	2340      	movs	r3, #64	@ 0x40
 80013e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2302      	movs	r3, #2
 80013f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI1_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4619      	mov	r1, r3
 80013f8:	4819      	ldr	r0, [pc, #100]	@ (8001460 <MX_GPIO_Init+0xd8>)
 80013fa:	f000 fb59 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80013fe:	231f      	movs	r3, #31
 8001400:	60bb      	str	r3, [r7, #8]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001406:	2302      	movs	r3, #2
 8001408:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	4619      	mov	r1, r3
 8001410:	4814      	ldr	r0, [pc, #80]	@ (8001464 <MX_GPIO_Init+0xdc>)
 8001412:	f000 fb4d 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Latch_SPI_Pin */
  GPIO_InitStruct.Pin = Latch_SPI_Pin;
 8001416:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800141a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Latch_SPI_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	4619      	mov	r1, r3
 800142e:	480d      	ldr	r0, [pc, #52]	@ (8001464 <MX_GPIO_Init+0xdc>)
 8001430:	f000 fb3e 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin OUT2_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin;
 8001434:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001438:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2302      	movs	r3, #2
 8001444:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_GPIO_Init+0xdc>)
 800144e:	f000 fb2f 	bl	8001ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	40010800 	.word	0x40010800
 8001464:	40010c00 	.word	0x40010c00

08001468 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001470:	f000 f958 	bl	8001724 <timerRun>

}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001480:	b672      	cpsid	i
}
 8001482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <Error_Handler+0x8>

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <HAL_MspInit+0x5c>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4a14      	ldr	r2, [pc, #80]	@ (80014e4 <HAL_MspInit+0x5c>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6193      	str	r3, [r2, #24]
 800149a:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <HAL_MspInit+0x5c>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <HAL_MspInit+0x5c>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a0e      	ldr	r2, [pc, #56]	@ (80014e4 <HAL_MspInit+0x5c>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <HAL_MspInit+0x5c>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <HAL_MspInit+0x60>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <HAL_MspInit+0x60>)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010000 	.word	0x40010000

080014ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0318 	add.w	r3, r7, #24
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a2b      	ldr	r2, [pc, #172]	@ (80015b4 <HAL_SPI_MspInit+0xc8>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d124      	bne.n	8001556 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800150c:	4b2a      	ldr	r3, [pc, #168]	@ (80015b8 <HAL_SPI_MspInit+0xcc>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a29      	ldr	r2, [pc, #164]	@ (80015b8 <HAL_SPI_MspInit+0xcc>)
 8001512:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <HAL_SPI_MspInit+0xcc>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <HAL_SPI_MspInit+0xcc>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a23      	ldr	r2, [pc, #140]	@ (80015b8 <HAL_SPI_MspInit+0xcc>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <HAL_SPI_MspInit+0xcc>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800153c:	23a0      	movs	r3, #160	@ 0xa0
 800153e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0318 	add.w	r3, r7, #24
 800154c:	4619      	mov	r1, r3
 800154e:	481b      	ldr	r0, [pc, #108]	@ (80015bc <HAL_SPI_MspInit+0xd0>)
 8001550:	f000 faae 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001554:	e029      	b.n	80015aa <HAL_SPI_MspInit+0xbe>
  else if(hspi->Instance==SPI2)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a19      	ldr	r2, [pc, #100]	@ (80015c0 <HAL_SPI_MspInit+0xd4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d124      	bne.n	80015aa <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001560:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <HAL_SPI_MspInit+0xcc>)
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	4a14      	ldr	r2, [pc, #80]	@ (80015b8 <HAL_SPI_MspInit+0xcc>)
 8001566:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800156a:	61d3      	str	r3, [r2, #28]
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_SPI_MspInit+0xcc>)
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <HAL_SPI_MspInit+0xcc>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a0e      	ldr	r2, [pc, #56]	@ (80015b8 <HAL_SPI_MspInit+0xcc>)
 800157e:	f043 0308 	orr.w	r3, r3, #8
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <HAL_SPI_MspInit+0xcc>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001590:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159e:	f107 0318 	add.w	r3, r7, #24
 80015a2:	4619      	mov	r1, r3
 80015a4:	4807      	ldr	r0, [pc, #28]	@ (80015c4 <HAL_SPI_MspInit+0xd8>)
 80015a6:	f000 fa83 	bl	8001ab0 <HAL_GPIO_Init>
}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	@ 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40013000 	.word	0x40013000
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40010800 	.word	0x40010800
 80015c0:	40003800 	.word	0x40003800
 80015c4:	40010c00 	.word	0x40010c00

080015c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015d8:	d113      	bne.n	8001602 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015da:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <HAL_TIM_Base_MspInit+0x44>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	4a0b      	ldr	r2, [pc, #44]	@ (800160c <HAL_TIM_Base_MspInit+0x44>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	61d3      	str	r3, [r2, #28]
 80015e6:	4b09      	ldr	r3, [pc, #36]	@ (800160c <HAL_TIM_Base_MspInit+0x44>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2101      	movs	r1, #1
 80015f6:	201c      	movs	r0, #28
 80015f8:	f000 fa23 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015fc:	201c      	movs	r0, #28
 80015fe:	f000 fa3c 	bl	8001a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <NMI_Handler+0x4>

08001618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <MemManage_Handler+0x4>

08001628 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <BusFault_Handler+0x4>

08001630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <UsageFault_Handler+0x4>

08001638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001660:	f000 f8fc 	bl	800185c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800166c:	4802      	ldr	r0, [pc, #8]	@ (8001678 <TIM2_IRQHandler+0x10>)
 800166e:	f001 fac1 	bl	8002bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	2000019c 	.word	0x2000019c

0800167c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001684:	4a14      	ldr	r2, [pc, #80]	@ (80016d8 <_sbrk+0x5c>)
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <_sbrk+0x60>)
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001690:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001698:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <_sbrk+0x64>)
 800169a:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <_sbrk+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169e:	4b10      	ldr	r3, [pc, #64]	@ (80016e0 <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d207      	bcs.n	80016bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ac:	f001 fe3a 	bl	8003324 <__errno>
 80016b0:	4603      	mov	r3, r0
 80016b2:	220c      	movs	r2, #12
 80016b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	e009      	b.n	80016d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016bc:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c2:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	4a05      	ldr	r2, [pc, #20]	@ (80016e0 <_sbrk+0x64>)
 80016cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20005000 	.word	0x20005000
 80016dc:	00000400 	.word	0x00000400
 80016e0:	200001e4 	.word	0x200001e4
 80016e4:	20000388 	.word	0x20000388

080016e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <setTimer>:

#define TIMERNUM 10
int timer_counter[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};
int timer_flag[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};

void setTimer(int INDEX,int duration){
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
	timer_counter[INDEX]=duration;
 80016fe:	4907      	ldr	r1, [pc, #28]	@ (800171c <setTimer+0x28>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[INDEX]=0;
 8001708:	4a05      	ldr	r2, [pc, #20]	@ (8001720 <setTimer+0x2c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2100      	movs	r1, #0
 800170e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	200001e8 	.word	0x200001e8
 8001720:	20000210 	.word	0x20000210

08001724 <timerRun>:

void timerRun(){
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
	for(int i=0;i<TIMERNUM;i++){
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	e01c      	b.n	800176a <timerRun+0x46>
		if(timer_counter[i] > 0){
 8001730:	4a12      	ldr	r2, [pc, #72]	@ (800177c <timerRun+0x58>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001738:	2b00      	cmp	r3, #0
 800173a:	dd13      	ble.n	8001764 <timerRun+0x40>
			timer_counter[i]--;
 800173c:	4a0f      	ldr	r2, [pc, #60]	@ (800177c <timerRun+0x58>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001744:	1e5a      	subs	r2, r3, #1
 8001746:	490d      	ldr	r1, [pc, #52]	@ (800177c <timerRun+0x58>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <=0){
 800174e:	4a0b      	ldr	r2, [pc, #44]	@ (800177c <timerRun+0x58>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	2b00      	cmp	r3, #0
 8001758:	dc04      	bgt.n	8001764 <timerRun+0x40>
				timer_flag[i]=1;
 800175a:	4a09      	ldr	r2, [pc, #36]	@ (8001780 <timerRun+0x5c>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2101      	movs	r1, #1
 8001760:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<TIMERNUM;i++){
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3301      	adds	r3, #1
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b09      	cmp	r3, #9
 800176e:	dddf      	ble.n	8001730 <timerRun+0xc>
			}
		}
	}
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	200001e8 	.word	0x200001e8
 8001780:	20000210 	.word	0x20000210

08001784 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001784:	f7ff ffb0 	bl	80016e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001788:	480b      	ldr	r0, [pc, #44]	@ (80017b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800178a:	490c      	ldr	r1, [pc, #48]	@ (80017bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800178c:	4a0c      	ldr	r2, [pc, #48]	@ (80017c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a09      	ldr	r2, [pc, #36]	@ (80017c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017a0:	4c09      	ldr	r4, [pc, #36]	@ (80017c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ae:	f001 fdbf 	bl	8003330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017b2:	f7ff fcbd 	bl	8001130 <main>
  bx lr
 80017b6:	4770      	bx	lr
  ldr r0, =_sdata
 80017b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017bc:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80017c0:	08003d48 	.word	0x08003d48
  ldr r2, =_sbss
 80017c4:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80017c8:	20000384 	.word	0x20000384

080017cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017cc:	e7fe      	b.n	80017cc <ADC1_2_IRQHandler>
	...

080017d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d4:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <HAL_Init+0x28>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a07      	ldr	r2, [pc, #28]	@ (80017f8 <HAL_Init+0x28>)
 80017da:	f043 0310 	orr.w	r3, r3, #16
 80017de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e0:	2003      	movs	r0, #3
 80017e2:	f000 f923 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e6:	200f      	movs	r0, #15
 80017e8:	f000 f808 	bl	80017fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ec:	f7ff fe4c 	bl	8001488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40022000 	.word	0x40022000

080017fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_InitTick+0x54>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <HAL_InitTick+0x58>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001812:	fbb3 f3f1 	udiv	r3, r3, r1
 8001816:	fbb2 f3f3 	udiv	r3, r2, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f93b 	bl	8001a96 <HAL_SYSTICK_Config>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e00e      	b.n	8001848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b0f      	cmp	r3, #15
 800182e:	d80a      	bhi.n	8001846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001830:	2200      	movs	r2, #0
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f000 f903 	bl	8001a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800183c:	4a06      	ldr	r2, [pc, #24]	@ (8001858 <HAL_InitTick+0x5c>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e000      	b.n	8001848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000050 	.word	0x20000050
 8001854:	20000058 	.word	0x20000058
 8001858:	20000054 	.word	0x20000054

0800185c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001860:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <HAL_IncTick+0x1c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4b05      	ldr	r3, [pc, #20]	@ (800187c <HAL_IncTick+0x20>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4413      	add	r3, r2
 800186c:	4a03      	ldr	r2, [pc, #12]	@ (800187c <HAL_IncTick+0x20>)
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	20000058 	.word	0x20000058
 800187c:	20000238 	.word	0x20000238

08001880 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b02      	ldr	r3, [pc, #8]	@ (8001890 <HAL_GetTick+0x10>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	20000238 	.word	0x20000238

08001894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a4:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b0:	4013      	ands	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c6:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	60d3      	str	r3, [r2, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e0:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <__NVIC_GetPriorityGrouping+0x18>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	f003 0307 	and.w	r3, r3, #7
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	2b00      	cmp	r3, #0
 8001908:	db0b      	blt.n	8001922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	f003 021f 	and.w	r2, r3, #31
 8001910:	4906      	ldr	r1, [pc, #24]	@ (800192c <__NVIC_EnableIRQ+0x34>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	2001      	movs	r0, #1
 800191a:	fa00 f202 	lsl.w	r2, r0, r2
 800191e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	e000e100 	.word	0xe000e100

08001930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	6039      	str	r1, [r7, #0]
 800193a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	2b00      	cmp	r3, #0
 8001942:	db0a      	blt.n	800195a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	490c      	ldr	r1, [pc, #48]	@ (800197c <__NVIC_SetPriority+0x4c>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	0112      	lsls	r2, r2, #4
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	440b      	add	r3, r1
 8001954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001958:	e00a      	b.n	8001970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4908      	ldr	r1, [pc, #32]	@ (8001980 <__NVIC_SetPriority+0x50>)
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	3b04      	subs	r3, #4
 8001968:	0112      	lsls	r2, r2, #4
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	440b      	add	r3, r1
 800196e:	761a      	strb	r2, [r3, #24]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	@ 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f1c3 0307 	rsb	r3, r3, #7
 800199e:	2b04      	cmp	r3, #4
 80019a0:	bf28      	it	cs
 80019a2:	2304      	movcs	r3, #4
 80019a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3304      	adds	r3, #4
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	d902      	bls.n	80019b4 <NVIC_EncodePriority+0x30>
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3b03      	subs	r3, #3
 80019b2:	e000      	b.n	80019b6 <NVIC_EncodePriority+0x32>
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 32ff 	mov.w	r2, #4294967295
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43da      	mvns	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	401a      	ands	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019cc:	f04f 31ff 	mov.w	r1, #4294967295
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	4313      	orrs	r3, r2
         );
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3724      	adds	r7, #36	@ 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019f8:	d301      	bcc.n	80019fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00f      	b.n	8001a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <SysTick_Config+0x40>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a06:	210f      	movs	r1, #15
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f7ff ff90 	bl	8001930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <SysTick_Config+0x40>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a16:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <SysTick_Config+0x40>)
 8001a18:	2207      	movs	r2, #7
 8001a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	e000e010 	.word	0xe000e010

08001a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff2d 	bl	8001894 <__NVIC_SetPriorityGrouping>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a54:	f7ff ff42 	bl	80018dc <__NVIC_GetPriorityGrouping>
 8001a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7ff ff90 	bl	8001984 <NVIC_EncodePriority>
 8001a64:	4602      	mov	r2, r0
 8001a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff5f 	bl	8001930 <__NVIC_SetPriority>
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff35 	bl	80018f8 <__NVIC_EnableIRQ>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffa2 	bl	80019e8 <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b08b      	sub	sp, #44	@ 0x2c
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac2:	e169      	b.n	8001d98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	f040 8158 	bne.w	8001d92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4a9a      	ldr	r2, [pc, #616]	@ (8001d50 <HAL_GPIO_Init+0x2a0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d05e      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
 8001aec:	4a98      	ldr	r2, [pc, #608]	@ (8001d50 <HAL_GPIO_Init+0x2a0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d875      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001af2:	4a98      	ldr	r2, [pc, #608]	@ (8001d54 <HAL_GPIO_Init+0x2a4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d058      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
 8001af8:	4a96      	ldr	r2, [pc, #600]	@ (8001d54 <HAL_GPIO_Init+0x2a4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d86f      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001afe:	4a96      	ldr	r2, [pc, #600]	@ (8001d58 <HAL_GPIO_Init+0x2a8>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d052      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
 8001b04:	4a94      	ldr	r2, [pc, #592]	@ (8001d58 <HAL_GPIO_Init+0x2a8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d869      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001b0a:	4a94      	ldr	r2, [pc, #592]	@ (8001d5c <HAL_GPIO_Init+0x2ac>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d04c      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
 8001b10:	4a92      	ldr	r2, [pc, #584]	@ (8001d5c <HAL_GPIO_Init+0x2ac>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d863      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001b16:	4a92      	ldr	r2, [pc, #584]	@ (8001d60 <HAL_GPIO_Init+0x2b0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d046      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
 8001b1c:	4a90      	ldr	r2, [pc, #576]	@ (8001d60 <HAL_GPIO_Init+0x2b0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d85d      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001b22:	2b12      	cmp	r3, #18
 8001b24:	d82a      	bhi.n	8001b7c <HAL_GPIO_Init+0xcc>
 8001b26:	2b12      	cmp	r3, #18
 8001b28:	d859      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b30 <HAL_GPIO_Init+0x80>)
 8001b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b30:	08001bab 	.word	0x08001bab
 8001b34:	08001b85 	.word	0x08001b85
 8001b38:	08001b97 	.word	0x08001b97
 8001b3c:	08001bd9 	.word	0x08001bd9
 8001b40:	08001bdf 	.word	0x08001bdf
 8001b44:	08001bdf 	.word	0x08001bdf
 8001b48:	08001bdf 	.word	0x08001bdf
 8001b4c:	08001bdf 	.word	0x08001bdf
 8001b50:	08001bdf 	.word	0x08001bdf
 8001b54:	08001bdf 	.word	0x08001bdf
 8001b58:	08001bdf 	.word	0x08001bdf
 8001b5c:	08001bdf 	.word	0x08001bdf
 8001b60:	08001bdf 	.word	0x08001bdf
 8001b64:	08001bdf 	.word	0x08001bdf
 8001b68:	08001bdf 	.word	0x08001bdf
 8001b6c:	08001bdf 	.word	0x08001bdf
 8001b70:	08001bdf 	.word	0x08001bdf
 8001b74:	08001b8d 	.word	0x08001b8d
 8001b78:	08001ba1 	.word	0x08001ba1
 8001b7c:	4a79      	ldr	r2, [pc, #484]	@ (8001d64 <HAL_GPIO_Init+0x2b4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b82:	e02c      	b.n	8001bde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	623b      	str	r3, [r7, #32]
          break;
 8001b8a:	e029      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	3304      	adds	r3, #4
 8001b92:	623b      	str	r3, [r7, #32]
          break;
 8001b94:	e024      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	3308      	adds	r3, #8
 8001b9c:	623b      	str	r3, [r7, #32]
          break;
 8001b9e:	e01f      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	330c      	adds	r3, #12
 8001ba6:	623b      	str	r3, [r7, #32]
          break;
 8001ba8:	e01a      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d102      	bne.n	8001bb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	623b      	str	r3, [r7, #32]
          break;
 8001bb6:	e013      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d105      	bne.n	8001bcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	611a      	str	r2, [r3, #16]
          break;
 8001bca:	e009      	b.n	8001be0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bcc:	2308      	movs	r3, #8
 8001bce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	615a      	str	r2, [r3, #20]
          break;
 8001bd6:	e003      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	623b      	str	r3, [r7, #32]
          break;
 8001bdc:	e000      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          break;
 8001bde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2bff      	cmp	r3, #255	@ 0xff
 8001be4:	d801      	bhi.n	8001bea <HAL_GPIO_Init+0x13a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	e001      	b.n	8001bee <HAL_GPIO_Init+0x13e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3304      	adds	r3, #4
 8001bee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2bff      	cmp	r3, #255	@ 0xff
 8001bf4:	d802      	bhi.n	8001bfc <HAL_GPIO_Init+0x14c>
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	e002      	b.n	8001c02 <HAL_GPIO_Init+0x152>
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfe:	3b08      	subs	r3, #8
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	210f      	movs	r1, #15
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	401a      	ands	r2, r3
 8001c14:	6a39      	ldr	r1, [r7, #32]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 80b1 	beq.w	8001d92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c30:	4b4d      	ldr	r3, [pc, #308]	@ (8001d68 <HAL_GPIO_Init+0x2b8>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	4a4c      	ldr	r2, [pc, #304]	@ (8001d68 <HAL_GPIO_Init+0x2b8>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6193      	str	r3, [r2, #24]
 8001c3c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d68 <HAL_GPIO_Init+0x2b8>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c48:	4a48      	ldr	r2, [pc, #288]	@ (8001d6c <HAL_GPIO_Init+0x2bc>)
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	220f      	movs	r2, #15
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a40      	ldr	r2, [pc, #256]	@ (8001d70 <HAL_GPIO_Init+0x2c0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d013      	beq.n	8001c9c <HAL_GPIO_Init+0x1ec>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a3f      	ldr	r2, [pc, #252]	@ (8001d74 <HAL_GPIO_Init+0x2c4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d00d      	beq.n	8001c98 <HAL_GPIO_Init+0x1e8>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d78 <HAL_GPIO_Init+0x2c8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d007      	beq.n	8001c94 <HAL_GPIO_Init+0x1e4>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a3d      	ldr	r2, [pc, #244]	@ (8001d7c <HAL_GPIO_Init+0x2cc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d101      	bne.n	8001c90 <HAL_GPIO_Init+0x1e0>
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e006      	b.n	8001c9e <HAL_GPIO_Init+0x1ee>
 8001c90:	2304      	movs	r3, #4
 8001c92:	e004      	b.n	8001c9e <HAL_GPIO_Init+0x1ee>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e002      	b.n	8001c9e <HAL_GPIO_Init+0x1ee>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <HAL_GPIO_Init+0x1ee>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca0:	f002 0203 	and.w	r2, r2, #3
 8001ca4:	0092      	lsls	r2, r2, #2
 8001ca6:	4093      	lsls	r3, r2
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cae:	492f      	ldr	r1, [pc, #188]	@ (8001d6c <HAL_GPIO_Init+0x2bc>)
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d006      	beq.n	8001cd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	492c      	ldr	r1, [pc, #176]	@ (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	4928      	ldr	r1, [pc, #160]	@ (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d006      	beq.n	8001cfe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cf0:	4b23      	ldr	r3, [pc, #140]	@ (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	4922      	ldr	r1, [pc, #136]	@ (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60cb      	str	r3, [r1, #12]
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cfe:	4b20      	ldr	r3, [pc, #128]	@ (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	491e      	ldr	r1, [pc, #120]	@ (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d18:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4918      	ldr	r1, [pc, #96]	@ (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d26:	4b16      	ldr	r3, [pc, #88]	@ (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	4914      	ldr	r1, [pc, #80]	@ (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d021      	beq.n	8001d84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d40:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	490e      	ldr	r1, [pc, #56]	@ (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	600b      	str	r3, [r1, #0]
 8001d4c:	e021      	b.n	8001d92 <HAL_GPIO_Init+0x2e2>
 8001d4e:	bf00      	nop
 8001d50:	10320000 	.word	0x10320000
 8001d54:	10310000 	.word	0x10310000
 8001d58:	10220000 	.word	0x10220000
 8001d5c:	10210000 	.word	0x10210000
 8001d60:	10120000 	.word	0x10120000
 8001d64:	10110000 	.word	0x10110000
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	40010800 	.word	0x40010800
 8001d74:	40010c00 	.word	0x40010c00
 8001d78:	40011000 	.word	0x40011000
 8001d7c:	40011400 	.word	0x40011400
 8001d80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_GPIO_Init+0x304>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	4909      	ldr	r1, [pc, #36]	@ (8001db4 <HAL_GPIO_Init+0x304>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	3301      	adds	r3, #1
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f47f ae8e 	bne.w	8001ac4 <HAL_GPIO_Init+0x14>
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	372c      	adds	r7, #44	@ 0x2c
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	40010400 	.word	0x40010400

08001db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e001      	b.n	8001dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr

08001de6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	460b      	mov	r3, r1
 8001df0:	807b      	strh	r3, [r7, #2]
 8001df2:	4613      	mov	r3, r2
 8001df4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001df6:	787b      	ldrb	r3, [r7, #1]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfc:	887a      	ldrh	r2, [r7, #2]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e02:	e003      	b.n	8001e0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e04:	887b      	ldrh	r3, [r7, #2]
 8001e06:	041a      	lsls	r2, r3, #16
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	611a      	str	r2, [r3, #16]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e272      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8087 	beq.w	8001f46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e38:	4b92      	ldr	r3, [pc, #584]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d00c      	beq.n	8001e5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e44:	4b8f      	ldr	r3, [pc, #572]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d112      	bne.n	8001e76 <HAL_RCC_OscConfig+0x5e>
 8001e50:	4b8c      	ldr	r3, [pc, #560]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e5c:	d10b      	bne.n	8001e76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5e:	4b89      	ldr	r3, [pc, #548]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d06c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x12c>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d168      	bne.n	8001f44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e24c      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e7e:	d106      	bne.n	8001e8e <HAL_RCC_OscConfig+0x76>
 8001e80:	4b80      	ldr	r3, [pc, #512]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a7f      	ldr	r2, [pc, #508]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	e02e      	b.n	8001eec <HAL_RCC_OscConfig+0xd4>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x98>
 8001e96:	4b7b      	ldr	r3, [pc, #492]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a7a      	ldr	r2, [pc, #488]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b78      	ldr	r3, [pc, #480]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a77      	ldr	r2, [pc, #476]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e01d      	b.n	8001eec <HAL_RCC_OscConfig+0xd4>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0xbc>
 8001eba:	4b72      	ldr	r3, [pc, #456]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a71      	ldr	r2, [pc, #452]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	4b6f      	ldr	r3, [pc, #444]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a6e      	ldr	r2, [pc, #440]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e00b      	b.n	8001eec <HAL_RCC_OscConfig+0xd4>
 8001ed4:	4b6b      	ldr	r3, [pc, #428]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a6a      	ldr	r2, [pc, #424]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b68      	ldr	r3, [pc, #416]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a67      	ldr	r2, [pc, #412]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d013      	beq.n	8001f1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fcc4 	bl	8001880 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001efc:	f7ff fcc0 	bl	8001880 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	@ 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e200      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	4b5d      	ldr	r3, [pc, #372]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0xe4>
 8001f1a:	e014      	b.n	8001f46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fcb0 	bl	8001880 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff fcac 	bl	8001880 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	@ 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e1ec      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	4b53      	ldr	r3, [pc, #332]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x10c>
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d063      	beq.n	800201a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f52:	4b4c      	ldr	r3, [pc, #304]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f5e:	4b49      	ldr	r3, [pc, #292]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d11c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x18c>
 8001f6a:	4b46      	ldr	r3, [pc, #280]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d116      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	4b43      	ldr	r3, [pc, #268]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <HAL_RCC_OscConfig+0x176>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e1c0      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4939      	ldr	r1, [pc, #228]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa2:	e03a      	b.n	800201a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d020      	beq.n	8001fee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fac:	4b36      	ldr	r3, [pc, #216]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7ff fc65 	bl	8001880 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fba:	f7ff fc61 	bl	8001880 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e1a1      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4927      	ldr	r1, [pc, #156]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]
 8001fec:	e015      	b.n	800201a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fee:	4b26      	ldr	r3, [pc, #152]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fc44 	bl	8001880 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffc:	f7ff fc40 	bl	8001880 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e180      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	4b1d      	ldr	r3, [pc, #116]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d03a      	beq.n	800209c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d019      	beq.n	8002062 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202e:	4b17      	ldr	r3, [pc, #92]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002034:	f7ff fc24 	bl	8001880 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203c:	f7ff fc20 	bl	8001880 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e160      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204e:	4b0d      	ldr	r3, [pc, #52]	@ (8002084 <HAL_RCC_OscConfig+0x26c>)
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800205a:	2001      	movs	r0, #1
 800205c:	f000 fa9c 	bl	8002598 <RCC_Delay>
 8002060:	e01c      	b.n	800209c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002062:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002068:	f7ff fc0a 	bl	8001880 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206e:	e00f      	b.n	8002090 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002070:	f7ff fc06 	bl	8001880 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d908      	bls.n	8002090 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e146      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	42420000 	.word	0x42420000
 800208c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002090:	4b92      	ldr	r3, [pc, #584]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1e9      	bne.n	8002070 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80a6 	beq.w	80021f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ae:	4b8b      	ldr	r3, [pc, #556]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10d      	bne.n	80020d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ba:	4b88      	ldr	r3, [pc, #544]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4a87      	ldr	r2, [pc, #540]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c4:	61d3      	str	r3, [r2, #28]
 80020c6:	4b85      	ldr	r3, [pc, #532]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d2:	2301      	movs	r3, #1
 80020d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	4b82      	ldr	r3, [pc, #520]	@ (80022e0 <HAL_RCC_OscConfig+0x4c8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d118      	bne.n	8002114 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e2:	4b7f      	ldr	r3, [pc, #508]	@ (80022e0 <HAL_RCC_OscConfig+0x4c8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a7e      	ldr	r2, [pc, #504]	@ (80022e0 <HAL_RCC_OscConfig+0x4c8>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ee:	f7ff fbc7 	bl	8001880 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f6:	f7ff fbc3 	bl	8001880 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b64      	cmp	r3, #100	@ 0x64
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e103      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	4b75      	ldr	r3, [pc, #468]	@ (80022e0 <HAL_RCC_OscConfig+0x4c8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x312>
 800211c:	4b6f      	ldr	r3, [pc, #444]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	4a6e      	ldr	r2, [pc, #440]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6213      	str	r3, [r2, #32]
 8002128:	e02d      	b.n	8002186 <HAL_RCC_OscConfig+0x36e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x334>
 8002132:	4b6a      	ldr	r3, [pc, #424]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4a69      	ldr	r2, [pc, #420]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	6213      	str	r3, [r2, #32]
 800213e:	4b67      	ldr	r3, [pc, #412]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4a66      	ldr	r2, [pc, #408]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002144:	f023 0304 	bic.w	r3, r3, #4
 8002148:	6213      	str	r3, [r2, #32]
 800214a:	e01c      	b.n	8002186 <HAL_RCC_OscConfig+0x36e>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b05      	cmp	r3, #5
 8002152:	d10c      	bne.n	800216e <HAL_RCC_OscConfig+0x356>
 8002154:	4b61      	ldr	r3, [pc, #388]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a60      	ldr	r2, [pc, #384]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 800215a:	f043 0304 	orr.w	r3, r3, #4
 800215e:	6213      	str	r3, [r2, #32]
 8002160:	4b5e      	ldr	r3, [pc, #376]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	4a5d      	ldr	r2, [pc, #372]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6213      	str	r3, [r2, #32]
 800216c:	e00b      	b.n	8002186 <HAL_RCC_OscConfig+0x36e>
 800216e:	4b5b      	ldr	r3, [pc, #364]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4a5a      	ldr	r2, [pc, #360]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	6213      	str	r3, [r2, #32]
 800217a:	4b58      	ldr	r3, [pc, #352]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4a57      	ldr	r2, [pc, #348]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002180:	f023 0304 	bic.w	r3, r3, #4
 8002184:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d015      	beq.n	80021ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218e:	f7ff fb77 	bl	8001880 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002194:	e00a      	b.n	80021ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002196:	f7ff fb73 	bl	8001880 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e0b1      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ac:	4b4b      	ldr	r3, [pc, #300]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0ee      	beq.n	8002196 <HAL_RCC_OscConfig+0x37e>
 80021b8:	e014      	b.n	80021e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ba:	f7ff fb61 	bl	8001880 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c2:	f7ff fb5d 	bl	8001880 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e09b      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d8:	4b40      	ldr	r3, [pc, #256]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1ee      	bne.n	80021c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d105      	bne.n	80021f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ea:	4b3c      	ldr	r3, [pc, #240]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4a3b      	ldr	r2, [pc, #236]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8087 	beq.w	800230e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002200:	4b36      	ldr	r3, [pc, #216]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b08      	cmp	r3, #8
 800220a:	d061      	beq.n	80022d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d146      	bne.n	80022a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002214:	4b33      	ldr	r3, [pc, #204]	@ (80022e4 <HAL_RCC_OscConfig+0x4cc>)
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7ff fb31 	bl	8001880 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7ff fb2d 	bl	8001880 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e06d      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002234:	4b29      	ldr	r3, [pc, #164]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f0      	bne.n	8002222 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002248:	d108      	bne.n	800225c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800224a:	4b24      	ldr	r3, [pc, #144]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	4921      	ldr	r1, [pc, #132]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800225c:	4b1f      	ldr	r3, [pc, #124]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a19      	ldr	r1, [r3, #32]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	430b      	orrs	r3, r1
 800226e:	491b      	ldr	r1, [pc, #108]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002274:	4b1b      	ldr	r3, [pc, #108]	@ (80022e4 <HAL_RCC_OscConfig+0x4cc>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7ff fb01 	bl	8001880 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002282:	f7ff fafd 	bl	8001880 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e03d      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002294:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x46a>
 80022a0:	e035      	b.n	800230e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a2:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <HAL_RCC_OscConfig+0x4cc>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff faea 	bl	8001880 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7ff fae6 	bl	8001880 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e026      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x498>
 80022ce:	e01e      	b.n	800230e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e019      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40007000 	.word	0x40007000
 80022e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002318 <HAL_RCC_OscConfig+0x500>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d106      	bne.n	800230a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d001      	beq.n	800230e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000

0800231c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0d0      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002330:	4b6a      	ldr	r3, [pc, #424]	@ (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d910      	bls.n	8002360 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b67      	ldr	r3, [pc, #412]	@ (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 0207 	bic.w	r2, r3, #7
 8002346:	4965      	ldr	r1, [pc, #404]	@ (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b63      	ldr	r3, [pc, #396]	@ (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0b8      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d020      	beq.n	80023ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002378:	4b59      	ldr	r3, [pc, #356]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	4a58      	ldr	r2, [pc, #352]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002382:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002390:	4b53      	ldr	r3, [pc, #332]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4a52      	ldr	r2, [pc, #328]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800239a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239c:	4b50      	ldr	r3, [pc, #320]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	494d      	ldr	r1, [pc, #308]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d040      	beq.n	800243c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	4b47      	ldr	r3, [pc, #284]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d115      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e07f      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023da:	4b41      	ldr	r3, [pc, #260]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e073      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ea:	4b3d      	ldr	r3, [pc, #244]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e06b      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023fa:	4b39      	ldr	r3, [pc, #228]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f023 0203 	bic.w	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4936      	ldr	r1, [pc, #216]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800240c:	f7ff fa38 	bl	8001880 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	e00a      	b.n	800242a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002414:	f7ff fa34 	bl	8001880 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e053      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	4b2d      	ldr	r3, [pc, #180]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 020c 	and.w	r2, r3, #12
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	429a      	cmp	r2, r3
 800243a:	d1eb      	bne.n	8002414 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800243c:	4b27      	ldr	r3, [pc, #156]	@ (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d210      	bcs.n	800246c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b24      	ldr	r3, [pc, #144]	@ (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 0207 	bic.w	r2, r3, #7
 8002452:	4922      	ldr	r1, [pc, #136]	@ (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	4b20      	ldr	r3, [pc, #128]	@ (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e032      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002478:	4b19      	ldr	r3, [pc, #100]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4916      	ldr	r1, [pc, #88]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002496:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	490e      	ldr	r1, [pc, #56]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024aa:	f000 f821 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 80024ae:	4602      	mov	r2, r0
 80024b0:	4b0b      	ldr	r3, [pc, #44]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	490a      	ldr	r1, [pc, #40]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 80024bc:	5ccb      	ldrb	r3, [r1, r3]
 80024be:	fa22 f303 	lsr.w	r3, r2, r3
 80024c2:	4a09      	ldr	r2, [pc, #36]	@ (80024e8 <HAL_RCC_ClockConfig+0x1cc>)
 80024c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024c6:	4b09      	ldr	r3, [pc, #36]	@ (80024ec <HAL_RCC_ClockConfig+0x1d0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff f996 	bl	80017fc <HAL_InitTick>

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40022000 	.word	0x40022000
 80024e0:	40021000 	.word	0x40021000
 80024e4:	08003ce0 	.word	0x08003ce0
 80024e8:	20000050 	.word	0x20000050
 80024ec:	20000054 	.word	0x20000054

080024f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800250a:	4b1e      	ldr	r3, [pc, #120]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x94>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b04      	cmp	r3, #4
 8002518:	d002      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x30>
 800251a:	2b08      	cmp	r3, #8
 800251c:	d003      	beq.n	8002526 <HAL_RCC_GetSysClockFreq+0x36>
 800251e:	e027      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002520:	4b19      	ldr	r3, [pc, #100]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x98>)
 8002522:	613b      	str	r3, [r7, #16]
      break;
 8002524:	e027      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	0c9b      	lsrs	r3, r3, #18
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	4a17      	ldr	r2, [pc, #92]	@ (800258c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002530:	5cd3      	ldrb	r3, [r2, r3]
 8002532:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d010      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800253e:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x94>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	0c5b      	lsrs	r3, r3, #17
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	4a11      	ldr	r2, [pc, #68]	@ (8002590 <HAL_RCC_GetSysClockFreq+0xa0>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a0d      	ldr	r2, [pc, #52]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x98>)
 8002552:	fb03 f202 	mul.w	r2, r3, r2
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	e004      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a0c      	ldr	r2, [pc, #48]	@ (8002594 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002564:	fb02 f303 	mul.w	r3, r2, r3
 8002568:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	613b      	str	r3, [r7, #16]
      break;
 800256e:	e002      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002570:	4b05      	ldr	r3, [pc, #20]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x98>)
 8002572:	613b      	str	r3, [r7, #16]
      break;
 8002574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002576:	693b      	ldr	r3, [r7, #16]
}
 8002578:	4618      	mov	r0, r3
 800257a:	371c      	adds	r7, #28
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000
 8002588:	007a1200 	.word	0x007a1200
 800258c:	08003cf0 	.word	0x08003cf0
 8002590:	08003d00 	.word	0x08003d00
 8002594:	003d0900 	.word	0x003d0900

08002598 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025a0:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <RCC_Delay+0x34>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0a      	ldr	r2, [pc, #40]	@ (80025d0 <RCC_Delay+0x38>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	0a5b      	lsrs	r3, r3, #9
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025b4:	bf00      	nop
  }
  while (Delay --);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1e5a      	subs	r2, r3, #1
 80025ba:	60fa      	str	r2, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f9      	bne.n	80025b4 <RCC_Delay+0x1c>
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	20000050 	.word	0x20000050
 80025d0:	10624dd3 	.word	0x10624dd3

080025d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e076      	b.n	80026d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d108      	bne.n	8002600 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025f6:	d009      	beq.n	800260c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	61da      	str	r2, [r3, #28]
 80025fe:	e005      	b.n	800260c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fe ff60 	bl	80014ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002642:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002690:	ea42 0103 	orr.w	r1, r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002698:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	0c1a      	lsrs	r2, r3, #16
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f002 0204 	and.w	r2, r2, #4
 80026b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	69da      	ldr	r2, [r3, #28]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_SPI_Transmit+0x22>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e12d      	b.n	800295a <HAL_SPI_Transmit+0x27e>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002706:	f7ff f8bb 	bl	8001880 <HAL_GetTick>
 800270a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d002      	beq.n	8002722 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800271c:	2302      	movs	r3, #2
 800271e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002720:	e116      	b.n	8002950 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <HAL_SPI_Transmit+0x52>
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002732:	e10d      	b.n	8002950 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2203      	movs	r2, #3
 8002738:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	88fa      	ldrh	r2, [r7, #6]
 800274c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	88fa      	ldrh	r2, [r7, #6]
 8002752:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800277a:	d10f      	bne.n	800279c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800278a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800279a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a6:	2b40      	cmp	r3, #64	@ 0x40
 80027a8:	d007      	beq.n	80027ba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027c2:	d14f      	bne.n	8002864 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_SPI_Transmit+0xf6>
 80027cc:	8afb      	ldrh	r3, [r7, #22]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d142      	bne.n	8002858 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	881a      	ldrh	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	1c9a      	adds	r2, r3, #2
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027f6:	e02f      	b.n	8002858 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b02      	cmp	r3, #2
 8002804:	d112      	bne.n	800282c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	881a      	ldrh	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	1c9a      	adds	r2, r3, #2
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	86da      	strh	r2, [r3, #54]	@ 0x36
 800282a:	e015      	b.n	8002858 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800282c:	f7ff f828 	bl	8001880 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d803      	bhi.n	8002844 <HAL_SPI_Transmit+0x168>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002842:	d102      	bne.n	800284a <HAL_SPI_Transmit+0x16e>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002856:	e07b      	b.n	8002950 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1ca      	bne.n	80027f8 <HAL_SPI_Transmit+0x11c>
 8002862:	e050      	b.n	8002906 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_SPI_Transmit+0x196>
 800286c:	8afb      	ldrh	r3, [r7, #22]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d144      	bne.n	80028fc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	330c      	adds	r3, #12
 800287c:	7812      	ldrb	r2, [r2, #0]
 800287e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002898:	e030      	b.n	80028fc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d113      	bne.n	80028d0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	330c      	adds	r3, #12
 80028b2:	7812      	ldrb	r2, [r2, #0]
 80028b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80028ce:	e015      	b.n	80028fc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028d0:	f7fe ffd6 	bl	8001880 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d803      	bhi.n	80028e8 <HAL_SPI_Transmit+0x20c>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e6:	d102      	bne.n	80028ee <HAL_SPI_Transmit+0x212>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80028fa:	e029      	b.n	8002950 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002900:	b29b      	uxth	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1c9      	bne.n	800289a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	6839      	ldr	r1, [r7, #0]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f8b2 	bl	8002a74 <SPI_EndRxTxTransaction>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002924:	2300      	movs	r3, #0
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	77fb      	strb	r3, [r7, #31]
 8002946:	e003      	b.n	8002950 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002958:	7ffb      	ldrb	r3, [r7, #31]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002974:	f7fe ff84 	bl	8001880 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	4413      	add	r3, r2
 8002982:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002984:	f7fe ff7c 	bl	8001880 <HAL_GetTick>
 8002988:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800298a:	4b39      	ldr	r3, [pc, #228]	@ (8002a70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	015b      	lsls	r3, r3, #5
 8002990:	0d1b      	lsrs	r3, r3, #20
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	fb02 f303 	mul.w	r3, r2, r3
 8002998:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800299a:	e054      	b.n	8002a46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a2:	d050      	beq.n	8002a46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029a4:	f7fe ff6c 	bl	8001880 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d902      	bls.n	80029ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d13d      	bne.n	8002a36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80029c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029d2:	d111      	bne.n	80029f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029dc:	d004      	beq.n	80029e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029e6:	d107      	bne.n	80029f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a00:	d10f      	bne.n	8002a22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e017      	b.n	8002a66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	bf0c      	ite	eq
 8002a56:	2301      	moveq	r3, #1
 8002a58:	2300      	movne	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d19b      	bne.n	800299c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000050 	.word	0x20000050

08002a74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2200      	movs	r2, #0
 8002a88:	2180      	movs	r1, #128	@ 0x80
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f7ff ff6a 	bl	8002964 <SPI_WaitFlagStateUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9a:	f043 0220 	orr.w	r2, r3, #32
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e000      	b.n	8002aa8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e041      	b.n	8002b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7fe fd76 	bl	80015c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3304      	adds	r3, #4
 8002aec:	4619      	mov	r1, r3
 8002aee:	4610      	mov	r0, r2
 8002af0:	f000 fa74 	bl	8002fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d001      	beq.n	8002b68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e03a      	b.n	8002bde <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a18      	ldr	r2, [pc, #96]	@ (8002be8 <HAL_TIM_Base_Start_IT+0x98>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00e      	beq.n	8002ba8 <HAL_TIM_Base_Start_IT+0x58>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b92:	d009      	beq.n	8002ba8 <HAL_TIM_Base_Start_IT+0x58>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a14      	ldr	r2, [pc, #80]	@ (8002bec <HAL_TIM_Base_Start_IT+0x9c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <HAL_TIM_Base_Start_IT+0x58>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a13      	ldr	r2, [pc, #76]	@ (8002bf0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d111      	bne.n	8002bcc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b06      	cmp	r3, #6
 8002bb8:	d010      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bca:	e007      	b.n	8002bdc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	40012c00 	.word	0x40012c00
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40000800 	.word	0x40000800

08002bf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d122      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d11b      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0202 	mvn.w	r2, #2
 8002c20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f9b4 	bl	8002fa4 <HAL_TIM_IC_CaptureCallback>
 8002c3c:	e005      	b.n	8002c4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f9a7 	bl	8002f92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f9b6 	bl	8002fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d122      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d11b      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0204 	mvn.w	r2, #4
 8002c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f98a 	bl	8002fa4 <HAL_TIM_IC_CaptureCallback>
 8002c90:	e005      	b.n	8002c9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f97d 	bl	8002f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f98c 	bl	8002fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d122      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d11b      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0208 	mvn.w	r2, #8
 8002cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2204      	movs	r2, #4
 8002cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f960 	bl	8002fa4 <HAL_TIM_IC_CaptureCallback>
 8002ce4:	e005      	b.n	8002cf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f953 	bl	8002f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f962 	bl	8002fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	2b10      	cmp	r3, #16
 8002d04:	d122      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d11b      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0210 	mvn.w	r2, #16
 8002d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2208      	movs	r2, #8
 8002d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f936 	bl	8002fa4 <HAL_TIM_IC_CaptureCallback>
 8002d38:	e005      	b.n	8002d46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f929 	bl	8002f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f938 	bl	8002fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d10e      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d107      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0201 	mvn.w	r2, #1
 8002d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fe fb78 	bl	8001468 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d82:	2b80      	cmp	r3, #128	@ 0x80
 8002d84:	d10e      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d90:	2b80      	cmp	r3, #128	@ 0x80
 8002d92:	d107      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fa7b 	bl	800329a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dae:	2b40      	cmp	r3, #64	@ 0x40
 8002db0:	d10e      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbc:	2b40      	cmp	r3, #64	@ 0x40
 8002dbe:	d107      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f8fc 	bl	8002fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	d10e      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	d107      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0220 	mvn.w	r2, #32
 8002df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fa46 	bl	8003288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_TIM_ConfigClockSource+0x1c>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e0b4      	b.n	8002f8a <HAL_TIM_ConfigClockSource+0x186>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e58:	d03e      	beq.n	8002ed8 <HAL_TIM_ConfigClockSource+0xd4>
 8002e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e5e:	f200 8087 	bhi.w	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e66:	f000 8086 	beq.w	8002f76 <HAL_TIM_ConfigClockSource+0x172>
 8002e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e6e:	d87f      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e70:	2b70      	cmp	r3, #112	@ 0x70
 8002e72:	d01a      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0xa6>
 8002e74:	2b70      	cmp	r3, #112	@ 0x70
 8002e76:	d87b      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e78:	2b60      	cmp	r3, #96	@ 0x60
 8002e7a:	d050      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0x11a>
 8002e7c:	2b60      	cmp	r3, #96	@ 0x60
 8002e7e:	d877      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e80:	2b50      	cmp	r3, #80	@ 0x50
 8002e82:	d03c      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0xfa>
 8002e84:	2b50      	cmp	r3, #80	@ 0x50
 8002e86:	d873      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e88:	2b40      	cmp	r3, #64	@ 0x40
 8002e8a:	d058      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0x13a>
 8002e8c:	2b40      	cmp	r3, #64	@ 0x40
 8002e8e:	d86f      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e90:	2b30      	cmp	r3, #48	@ 0x30
 8002e92:	d064      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0x15a>
 8002e94:	2b30      	cmp	r3, #48	@ 0x30
 8002e96:	d86b      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d060      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0x15a>
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d867      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d05c      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0x15a>
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d05a      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0x15a>
 8002ea8:	e062      	b.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002eba:	f000 f968 	bl	800318e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ecc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	609a      	str	r2, [r3, #8]
      break;
 8002ed6:	e04f      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ee8:	f000 f951 	bl	800318e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002efa:	609a      	str	r2, [r3, #8]
      break;
 8002efc:	e03c      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f000 f8c8 	bl	80030a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2150      	movs	r1, #80	@ 0x50
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f91f 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002f1c:	e02c      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f000 f8e6 	bl	80030fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2160      	movs	r1, #96	@ 0x60
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f90f 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002f3c:	e01c      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f000 f8a8 	bl	80030a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2140      	movs	r1, #64	@ 0x40
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f8ff 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002f5c:	e00c      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4619      	mov	r1, r3
 8002f68:	4610      	mov	r0, r2
 8002f6a:	f000 f8f6 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002f6e:	e003      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
      break;
 8002f74:	e000      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr
	...

08002fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a29      	ldr	r2, [pc, #164]	@ (8003094 <TIM_Base_SetConfig+0xb8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00b      	beq.n	800300c <TIM_Base_SetConfig+0x30>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ffa:	d007      	beq.n	800300c <TIM_Base_SetConfig+0x30>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a26      	ldr	r2, [pc, #152]	@ (8003098 <TIM_Base_SetConfig+0xbc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d003      	beq.n	800300c <TIM_Base_SetConfig+0x30>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a25      	ldr	r2, [pc, #148]	@ (800309c <TIM_Base_SetConfig+0xc0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d108      	bne.n	800301e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a1c      	ldr	r2, [pc, #112]	@ (8003094 <TIM_Base_SetConfig+0xb8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00b      	beq.n	800303e <TIM_Base_SetConfig+0x62>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800302c:	d007      	beq.n	800303e <TIM_Base_SetConfig+0x62>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a19      	ldr	r2, [pc, #100]	@ (8003098 <TIM_Base_SetConfig+0xbc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d003      	beq.n	800303e <TIM_Base_SetConfig+0x62>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a18      	ldr	r2, [pc, #96]	@ (800309c <TIM_Base_SetConfig+0xc0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d108      	bne.n	8003050 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a07      	ldr	r2, [pc, #28]	@ (8003094 <TIM_Base_SetConfig+0xb8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d103      	bne.n	8003084 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	615a      	str	r2, [r3, #20]
}
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	40012c00 	.word	0x40012c00
 8003098:	40000400 	.word	0x40000400
 800309c:	40000800 	.word	0x40000800

080030a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f023 0201 	bic.w	r2, r3, #1
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f023 030a 	bic.w	r3, r3, #10
 80030dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	621a      	str	r2, [r3, #32]
}
 80030f2:	bf00      	nop
 80030f4:	371c      	adds	r7, #28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f023 0210 	bic.w	r2, r3, #16
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	031b      	lsls	r3, r3, #12
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003138:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	621a      	str	r2, [r3, #32]
}
 8003150:	bf00      	nop
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800315a:	b480      	push	{r7}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003170:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	f043 0307 	orr.w	r3, r3, #7
 800317c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	609a      	str	r2, [r3, #8]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800318e:	b480      	push	{r7}
 8003190:	b087      	sub	sp, #28
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	021a      	lsls	r2, r3, #8
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	609a      	str	r2, [r3, #8]
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e046      	b.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800320a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a16      	ldr	r2, [pc, #88]	@ (800327c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00e      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003230:	d009      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a12      	ldr	r2, [pc, #72]	@ (8003280 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d004      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a10      	ldr	r2, [pc, #64]	@ (8003284 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d10c      	bne.n	8003260 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800324c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	4313      	orrs	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr
 800327c:	40012c00 	.word	0x40012c00
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800

08003288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr

0800329a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <sniprintf>:
 80032ac:	b40c      	push	{r2, r3}
 80032ae:	b530      	push	{r4, r5, lr}
 80032b0:	4b17      	ldr	r3, [pc, #92]	@ (8003310 <sniprintf+0x64>)
 80032b2:	1e0c      	subs	r4, r1, #0
 80032b4:	681d      	ldr	r5, [r3, #0]
 80032b6:	b09d      	sub	sp, #116	@ 0x74
 80032b8:	da08      	bge.n	80032cc <sniprintf+0x20>
 80032ba:	238b      	movs	r3, #139	@ 0x8b
 80032bc:	f04f 30ff 	mov.w	r0, #4294967295
 80032c0:	602b      	str	r3, [r5, #0]
 80032c2:	b01d      	add	sp, #116	@ 0x74
 80032c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032c8:	b002      	add	sp, #8
 80032ca:	4770      	bx	lr
 80032cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80032d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80032d4:	bf0c      	ite	eq
 80032d6:	4623      	moveq	r3, r4
 80032d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80032dc:	9304      	str	r3, [sp, #16]
 80032de:	9307      	str	r3, [sp, #28]
 80032e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032e4:	9002      	str	r0, [sp, #8]
 80032e6:	9006      	str	r0, [sp, #24]
 80032e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80032ec:	4628      	mov	r0, r5
 80032ee:	ab21      	add	r3, sp, #132	@ 0x84
 80032f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80032f2:	a902      	add	r1, sp, #8
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	f000 f993 	bl	8003620 <_svfiprintf_r>
 80032fa:	1c43      	adds	r3, r0, #1
 80032fc:	bfbc      	itt	lt
 80032fe:	238b      	movlt	r3, #139	@ 0x8b
 8003300:	602b      	strlt	r3, [r5, #0]
 8003302:	2c00      	cmp	r4, #0
 8003304:	d0dd      	beq.n	80032c2 <sniprintf+0x16>
 8003306:	2200      	movs	r2, #0
 8003308:	9b02      	ldr	r3, [sp, #8]
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	e7d9      	b.n	80032c2 <sniprintf+0x16>
 800330e:	bf00      	nop
 8003310:	2000005c 	.word	0x2000005c

08003314 <memset>:
 8003314:	4603      	mov	r3, r0
 8003316:	4402      	add	r2, r0
 8003318:	4293      	cmp	r3, r2
 800331a:	d100      	bne.n	800331e <memset+0xa>
 800331c:	4770      	bx	lr
 800331e:	f803 1b01 	strb.w	r1, [r3], #1
 8003322:	e7f9      	b.n	8003318 <memset+0x4>

08003324 <__errno>:
 8003324:	4b01      	ldr	r3, [pc, #4]	@ (800332c <__errno+0x8>)
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	2000005c 	.word	0x2000005c

08003330 <__libc_init_array>:
 8003330:	b570      	push	{r4, r5, r6, lr}
 8003332:	2600      	movs	r6, #0
 8003334:	4d0c      	ldr	r5, [pc, #48]	@ (8003368 <__libc_init_array+0x38>)
 8003336:	4c0d      	ldr	r4, [pc, #52]	@ (800336c <__libc_init_array+0x3c>)
 8003338:	1b64      	subs	r4, r4, r5
 800333a:	10a4      	asrs	r4, r4, #2
 800333c:	42a6      	cmp	r6, r4
 800333e:	d109      	bne.n	8003354 <__libc_init_array+0x24>
 8003340:	f000 fc78 	bl	8003c34 <_init>
 8003344:	2600      	movs	r6, #0
 8003346:	4d0a      	ldr	r5, [pc, #40]	@ (8003370 <__libc_init_array+0x40>)
 8003348:	4c0a      	ldr	r4, [pc, #40]	@ (8003374 <__libc_init_array+0x44>)
 800334a:	1b64      	subs	r4, r4, r5
 800334c:	10a4      	asrs	r4, r4, #2
 800334e:	42a6      	cmp	r6, r4
 8003350:	d105      	bne.n	800335e <__libc_init_array+0x2e>
 8003352:	bd70      	pop	{r4, r5, r6, pc}
 8003354:	f855 3b04 	ldr.w	r3, [r5], #4
 8003358:	4798      	blx	r3
 800335a:	3601      	adds	r6, #1
 800335c:	e7ee      	b.n	800333c <__libc_init_array+0xc>
 800335e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003362:	4798      	blx	r3
 8003364:	3601      	adds	r6, #1
 8003366:	e7f2      	b.n	800334e <__libc_init_array+0x1e>
 8003368:	08003d40 	.word	0x08003d40
 800336c:	08003d40 	.word	0x08003d40
 8003370:	08003d40 	.word	0x08003d40
 8003374:	08003d44 	.word	0x08003d44

08003378 <__retarget_lock_acquire_recursive>:
 8003378:	4770      	bx	lr

0800337a <__retarget_lock_release_recursive>:
 800337a:	4770      	bx	lr

0800337c <_free_r>:
 800337c:	b538      	push	{r3, r4, r5, lr}
 800337e:	4605      	mov	r5, r0
 8003380:	2900      	cmp	r1, #0
 8003382:	d040      	beq.n	8003406 <_free_r+0x8a>
 8003384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003388:	1f0c      	subs	r4, r1, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	bfb8      	it	lt
 800338e:	18e4      	addlt	r4, r4, r3
 8003390:	f000 f8de 	bl	8003550 <__malloc_lock>
 8003394:	4a1c      	ldr	r2, [pc, #112]	@ (8003408 <_free_r+0x8c>)
 8003396:	6813      	ldr	r3, [r2, #0]
 8003398:	b933      	cbnz	r3, 80033a8 <_free_r+0x2c>
 800339a:	6063      	str	r3, [r4, #4]
 800339c:	6014      	str	r4, [r2, #0]
 800339e:	4628      	mov	r0, r5
 80033a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033a4:	f000 b8da 	b.w	800355c <__malloc_unlock>
 80033a8:	42a3      	cmp	r3, r4
 80033aa:	d908      	bls.n	80033be <_free_r+0x42>
 80033ac:	6820      	ldr	r0, [r4, #0]
 80033ae:	1821      	adds	r1, r4, r0
 80033b0:	428b      	cmp	r3, r1
 80033b2:	bf01      	itttt	eq
 80033b4:	6819      	ldreq	r1, [r3, #0]
 80033b6:	685b      	ldreq	r3, [r3, #4]
 80033b8:	1809      	addeq	r1, r1, r0
 80033ba:	6021      	streq	r1, [r4, #0]
 80033bc:	e7ed      	b.n	800339a <_free_r+0x1e>
 80033be:	461a      	mov	r2, r3
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	b10b      	cbz	r3, 80033c8 <_free_r+0x4c>
 80033c4:	42a3      	cmp	r3, r4
 80033c6:	d9fa      	bls.n	80033be <_free_r+0x42>
 80033c8:	6811      	ldr	r1, [r2, #0]
 80033ca:	1850      	adds	r0, r2, r1
 80033cc:	42a0      	cmp	r0, r4
 80033ce:	d10b      	bne.n	80033e8 <_free_r+0x6c>
 80033d0:	6820      	ldr	r0, [r4, #0]
 80033d2:	4401      	add	r1, r0
 80033d4:	1850      	adds	r0, r2, r1
 80033d6:	4283      	cmp	r3, r0
 80033d8:	6011      	str	r1, [r2, #0]
 80033da:	d1e0      	bne.n	800339e <_free_r+0x22>
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4408      	add	r0, r1
 80033e2:	6010      	str	r0, [r2, #0]
 80033e4:	6053      	str	r3, [r2, #4]
 80033e6:	e7da      	b.n	800339e <_free_r+0x22>
 80033e8:	d902      	bls.n	80033f0 <_free_r+0x74>
 80033ea:	230c      	movs	r3, #12
 80033ec:	602b      	str	r3, [r5, #0]
 80033ee:	e7d6      	b.n	800339e <_free_r+0x22>
 80033f0:	6820      	ldr	r0, [r4, #0]
 80033f2:	1821      	adds	r1, r4, r0
 80033f4:	428b      	cmp	r3, r1
 80033f6:	bf01      	itttt	eq
 80033f8:	6819      	ldreq	r1, [r3, #0]
 80033fa:	685b      	ldreq	r3, [r3, #4]
 80033fc:	1809      	addeq	r1, r1, r0
 80033fe:	6021      	streq	r1, [r4, #0]
 8003400:	6063      	str	r3, [r4, #4]
 8003402:	6054      	str	r4, [r2, #4]
 8003404:	e7cb      	b.n	800339e <_free_r+0x22>
 8003406:	bd38      	pop	{r3, r4, r5, pc}
 8003408:	20000380 	.word	0x20000380

0800340c <sbrk_aligned>:
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	4e0f      	ldr	r6, [pc, #60]	@ (800344c <sbrk_aligned+0x40>)
 8003410:	460c      	mov	r4, r1
 8003412:	6831      	ldr	r1, [r6, #0]
 8003414:	4605      	mov	r5, r0
 8003416:	b911      	cbnz	r1, 800341e <sbrk_aligned+0x12>
 8003418:	f000 fbaa 	bl	8003b70 <_sbrk_r>
 800341c:	6030      	str	r0, [r6, #0]
 800341e:	4621      	mov	r1, r4
 8003420:	4628      	mov	r0, r5
 8003422:	f000 fba5 	bl	8003b70 <_sbrk_r>
 8003426:	1c43      	adds	r3, r0, #1
 8003428:	d103      	bne.n	8003432 <sbrk_aligned+0x26>
 800342a:	f04f 34ff 	mov.w	r4, #4294967295
 800342e:	4620      	mov	r0, r4
 8003430:	bd70      	pop	{r4, r5, r6, pc}
 8003432:	1cc4      	adds	r4, r0, #3
 8003434:	f024 0403 	bic.w	r4, r4, #3
 8003438:	42a0      	cmp	r0, r4
 800343a:	d0f8      	beq.n	800342e <sbrk_aligned+0x22>
 800343c:	1a21      	subs	r1, r4, r0
 800343e:	4628      	mov	r0, r5
 8003440:	f000 fb96 	bl	8003b70 <_sbrk_r>
 8003444:	3001      	adds	r0, #1
 8003446:	d1f2      	bne.n	800342e <sbrk_aligned+0x22>
 8003448:	e7ef      	b.n	800342a <sbrk_aligned+0x1e>
 800344a:	bf00      	nop
 800344c:	2000037c 	.word	0x2000037c

08003450 <_malloc_r>:
 8003450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003454:	1ccd      	adds	r5, r1, #3
 8003456:	f025 0503 	bic.w	r5, r5, #3
 800345a:	3508      	adds	r5, #8
 800345c:	2d0c      	cmp	r5, #12
 800345e:	bf38      	it	cc
 8003460:	250c      	movcc	r5, #12
 8003462:	2d00      	cmp	r5, #0
 8003464:	4606      	mov	r6, r0
 8003466:	db01      	blt.n	800346c <_malloc_r+0x1c>
 8003468:	42a9      	cmp	r1, r5
 800346a:	d904      	bls.n	8003476 <_malloc_r+0x26>
 800346c:	230c      	movs	r3, #12
 800346e:	6033      	str	r3, [r6, #0]
 8003470:	2000      	movs	r0, #0
 8003472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003476:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800354c <_malloc_r+0xfc>
 800347a:	f000 f869 	bl	8003550 <__malloc_lock>
 800347e:	f8d8 3000 	ldr.w	r3, [r8]
 8003482:	461c      	mov	r4, r3
 8003484:	bb44      	cbnz	r4, 80034d8 <_malloc_r+0x88>
 8003486:	4629      	mov	r1, r5
 8003488:	4630      	mov	r0, r6
 800348a:	f7ff ffbf 	bl	800340c <sbrk_aligned>
 800348e:	1c43      	adds	r3, r0, #1
 8003490:	4604      	mov	r4, r0
 8003492:	d158      	bne.n	8003546 <_malloc_r+0xf6>
 8003494:	f8d8 4000 	ldr.w	r4, [r8]
 8003498:	4627      	mov	r7, r4
 800349a:	2f00      	cmp	r7, #0
 800349c:	d143      	bne.n	8003526 <_malloc_r+0xd6>
 800349e:	2c00      	cmp	r4, #0
 80034a0:	d04b      	beq.n	800353a <_malloc_r+0xea>
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	4639      	mov	r1, r7
 80034a6:	4630      	mov	r0, r6
 80034a8:	eb04 0903 	add.w	r9, r4, r3
 80034ac:	f000 fb60 	bl	8003b70 <_sbrk_r>
 80034b0:	4581      	cmp	r9, r0
 80034b2:	d142      	bne.n	800353a <_malloc_r+0xea>
 80034b4:	6821      	ldr	r1, [r4, #0]
 80034b6:	4630      	mov	r0, r6
 80034b8:	1a6d      	subs	r5, r5, r1
 80034ba:	4629      	mov	r1, r5
 80034bc:	f7ff ffa6 	bl	800340c <sbrk_aligned>
 80034c0:	3001      	adds	r0, #1
 80034c2:	d03a      	beq.n	800353a <_malloc_r+0xea>
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	442b      	add	r3, r5
 80034c8:	6023      	str	r3, [r4, #0]
 80034ca:	f8d8 3000 	ldr.w	r3, [r8]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	bb62      	cbnz	r2, 800352c <_malloc_r+0xdc>
 80034d2:	f8c8 7000 	str.w	r7, [r8]
 80034d6:	e00f      	b.n	80034f8 <_malloc_r+0xa8>
 80034d8:	6822      	ldr	r2, [r4, #0]
 80034da:	1b52      	subs	r2, r2, r5
 80034dc:	d420      	bmi.n	8003520 <_malloc_r+0xd0>
 80034de:	2a0b      	cmp	r2, #11
 80034e0:	d917      	bls.n	8003512 <_malloc_r+0xc2>
 80034e2:	1961      	adds	r1, r4, r5
 80034e4:	42a3      	cmp	r3, r4
 80034e6:	6025      	str	r5, [r4, #0]
 80034e8:	bf18      	it	ne
 80034ea:	6059      	strne	r1, [r3, #4]
 80034ec:	6863      	ldr	r3, [r4, #4]
 80034ee:	bf08      	it	eq
 80034f0:	f8c8 1000 	streq.w	r1, [r8]
 80034f4:	5162      	str	r2, [r4, r5]
 80034f6:	604b      	str	r3, [r1, #4]
 80034f8:	4630      	mov	r0, r6
 80034fa:	f000 f82f 	bl	800355c <__malloc_unlock>
 80034fe:	f104 000b 	add.w	r0, r4, #11
 8003502:	1d23      	adds	r3, r4, #4
 8003504:	f020 0007 	bic.w	r0, r0, #7
 8003508:	1ac2      	subs	r2, r0, r3
 800350a:	bf1c      	itt	ne
 800350c:	1a1b      	subne	r3, r3, r0
 800350e:	50a3      	strne	r3, [r4, r2]
 8003510:	e7af      	b.n	8003472 <_malloc_r+0x22>
 8003512:	6862      	ldr	r2, [r4, #4]
 8003514:	42a3      	cmp	r3, r4
 8003516:	bf0c      	ite	eq
 8003518:	f8c8 2000 	streq.w	r2, [r8]
 800351c:	605a      	strne	r2, [r3, #4]
 800351e:	e7eb      	b.n	80034f8 <_malloc_r+0xa8>
 8003520:	4623      	mov	r3, r4
 8003522:	6864      	ldr	r4, [r4, #4]
 8003524:	e7ae      	b.n	8003484 <_malloc_r+0x34>
 8003526:	463c      	mov	r4, r7
 8003528:	687f      	ldr	r7, [r7, #4]
 800352a:	e7b6      	b.n	800349a <_malloc_r+0x4a>
 800352c:	461a      	mov	r2, r3
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	42a3      	cmp	r3, r4
 8003532:	d1fb      	bne.n	800352c <_malloc_r+0xdc>
 8003534:	2300      	movs	r3, #0
 8003536:	6053      	str	r3, [r2, #4]
 8003538:	e7de      	b.n	80034f8 <_malloc_r+0xa8>
 800353a:	230c      	movs	r3, #12
 800353c:	4630      	mov	r0, r6
 800353e:	6033      	str	r3, [r6, #0]
 8003540:	f000 f80c 	bl	800355c <__malloc_unlock>
 8003544:	e794      	b.n	8003470 <_malloc_r+0x20>
 8003546:	6005      	str	r5, [r0, #0]
 8003548:	e7d6      	b.n	80034f8 <_malloc_r+0xa8>
 800354a:	bf00      	nop
 800354c:	20000380 	.word	0x20000380

08003550 <__malloc_lock>:
 8003550:	4801      	ldr	r0, [pc, #4]	@ (8003558 <__malloc_lock+0x8>)
 8003552:	f7ff bf11 	b.w	8003378 <__retarget_lock_acquire_recursive>
 8003556:	bf00      	nop
 8003558:	20000378 	.word	0x20000378

0800355c <__malloc_unlock>:
 800355c:	4801      	ldr	r0, [pc, #4]	@ (8003564 <__malloc_unlock+0x8>)
 800355e:	f7ff bf0c 	b.w	800337a <__retarget_lock_release_recursive>
 8003562:	bf00      	nop
 8003564:	20000378 	.word	0x20000378

08003568 <__ssputs_r>:
 8003568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800356c:	461f      	mov	r7, r3
 800356e:	688e      	ldr	r6, [r1, #8]
 8003570:	4682      	mov	sl, r0
 8003572:	42be      	cmp	r6, r7
 8003574:	460c      	mov	r4, r1
 8003576:	4690      	mov	r8, r2
 8003578:	680b      	ldr	r3, [r1, #0]
 800357a:	d82d      	bhi.n	80035d8 <__ssputs_r+0x70>
 800357c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003580:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003584:	d026      	beq.n	80035d4 <__ssputs_r+0x6c>
 8003586:	6965      	ldr	r5, [r4, #20]
 8003588:	6909      	ldr	r1, [r1, #16]
 800358a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800358e:	eba3 0901 	sub.w	r9, r3, r1
 8003592:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003596:	1c7b      	adds	r3, r7, #1
 8003598:	444b      	add	r3, r9
 800359a:	106d      	asrs	r5, r5, #1
 800359c:	429d      	cmp	r5, r3
 800359e:	bf38      	it	cc
 80035a0:	461d      	movcc	r5, r3
 80035a2:	0553      	lsls	r3, r2, #21
 80035a4:	d527      	bpl.n	80035f6 <__ssputs_r+0x8e>
 80035a6:	4629      	mov	r1, r5
 80035a8:	f7ff ff52 	bl	8003450 <_malloc_r>
 80035ac:	4606      	mov	r6, r0
 80035ae:	b360      	cbz	r0, 800360a <__ssputs_r+0xa2>
 80035b0:	464a      	mov	r2, r9
 80035b2:	6921      	ldr	r1, [r4, #16]
 80035b4:	f000 fafa 	bl	8003bac <memcpy>
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80035be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035c2:	81a3      	strh	r3, [r4, #12]
 80035c4:	6126      	str	r6, [r4, #16]
 80035c6:	444e      	add	r6, r9
 80035c8:	6026      	str	r6, [r4, #0]
 80035ca:	463e      	mov	r6, r7
 80035cc:	6165      	str	r5, [r4, #20]
 80035ce:	eba5 0509 	sub.w	r5, r5, r9
 80035d2:	60a5      	str	r5, [r4, #8]
 80035d4:	42be      	cmp	r6, r7
 80035d6:	d900      	bls.n	80035da <__ssputs_r+0x72>
 80035d8:	463e      	mov	r6, r7
 80035da:	4632      	mov	r2, r6
 80035dc:	4641      	mov	r1, r8
 80035de:	6820      	ldr	r0, [r4, #0]
 80035e0:	f000 faac 	bl	8003b3c <memmove>
 80035e4:	2000      	movs	r0, #0
 80035e6:	68a3      	ldr	r3, [r4, #8]
 80035e8:	1b9b      	subs	r3, r3, r6
 80035ea:	60a3      	str	r3, [r4, #8]
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	4433      	add	r3, r6
 80035f0:	6023      	str	r3, [r4, #0]
 80035f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f6:	462a      	mov	r2, r5
 80035f8:	f000 fae6 	bl	8003bc8 <_realloc_r>
 80035fc:	4606      	mov	r6, r0
 80035fe:	2800      	cmp	r0, #0
 8003600:	d1e0      	bne.n	80035c4 <__ssputs_r+0x5c>
 8003602:	4650      	mov	r0, sl
 8003604:	6921      	ldr	r1, [r4, #16]
 8003606:	f7ff feb9 	bl	800337c <_free_r>
 800360a:	230c      	movs	r3, #12
 800360c:	f8ca 3000 	str.w	r3, [sl]
 8003610:	89a3      	ldrh	r3, [r4, #12]
 8003612:	f04f 30ff 	mov.w	r0, #4294967295
 8003616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800361a:	81a3      	strh	r3, [r4, #12]
 800361c:	e7e9      	b.n	80035f2 <__ssputs_r+0x8a>
	...

08003620 <_svfiprintf_r>:
 8003620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003624:	4698      	mov	r8, r3
 8003626:	898b      	ldrh	r3, [r1, #12]
 8003628:	4607      	mov	r7, r0
 800362a:	061b      	lsls	r3, r3, #24
 800362c:	460d      	mov	r5, r1
 800362e:	4614      	mov	r4, r2
 8003630:	b09d      	sub	sp, #116	@ 0x74
 8003632:	d510      	bpl.n	8003656 <_svfiprintf_r+0x36>
 8003634:	690b      	ldr	r3, [r1, #16]
 8003636:	b973      	cbnz	r3, 8003656 <_svfiprintf_r+0x36>
 8003638:	2140      	movs	r1, #64	@ 0x40
 800363a:	f7ff ff09 	bl	8003450 <_malloc_r>
 800363e:	6028      	str	r0, [r5, #0]
 8003640:	6128      	str	r0, [r5, #16]
 8003642:	b930      	cbnz	r0, 8003652 <_svfiprintf_r+0x32>
 8003644:	230c      	movs	r3, #12
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	f04f 30ff 	mov.w	r0, #4294967295
 800364c:	b01d      	add	sp, #116	@ 0x74
 800364e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003652:	2340      	movs	r3, #64	@ 0x40
 8003654:	616b      	str	r3, [r5, #20]
 8003656:	2300      	movs	r3, #0
 8003658:	9309      	str	r3, [sp, #36]	@ 0x24
 800365a:	2320      	movs	r3, #32
 800365c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003660:	2330      	movs	r3, #48	@ 0x30
 8003662:	f04f 0901 	mov.w	r9, #1
 8003666:	f8cd 800c 	str.w	r8, [sp, #12]
 800366a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003804 <_svfiprintf_r+0x1e4>
 800366e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003672:	4623      	mov	r3, r4
 8003674:	469a      	mov	sl, r3
 8003676:	f813 2b01 	ldrb.w	r2, [r3], #1
 800367a:	b10a      	cbz	r2, 8003680 <_svfiprintf_r+0x60>
 800367c:	2a25      	cmp	r2, #37	@ 0x25
 800367e:	d1f9      	bne.n	8003674 <_svfiprintf_r+0x54>
 8003680:	ebba 0b04 	subs.w	fp, sl, r4
 8003684:	d00b      	beq.n	800369e <_svfiprintf_r+0x7e>
 8003686:	465b      	mov	r3, fp
 8003688:	4622      	mov	r2, r4
 800368a:	4629      	mov	r1, r5
 800368c:	4638      	mov	r0, r7
 800368e:	f7ff ff6b 	bl	8003568 <__ssputs_r>
 8003692:	3001      	adds	r0, #1
 8003694:	f000 80a7 	beq.w	80037e6 <_svfiprintf_r+0x1c6>
 8003698:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800369a:	445a      	add	r2, fp
 800369c:	9209      	str	r2, [sp, #36]	@ 0x24
 800369e:	f89a 3000 	ldrb.w	r3, [sl]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 809f 	beq.w	80037e6 <_svfiprintf_r+0x1c6>
 80036a8:	2300      	movs	r3, #0
 80036aa:	f04f 32ff 	mov.w	r2, #4294967295
 80036ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036b2:	f10a 0a01 	add.w	sl, sl, #1
 80036b6:	9304      	str	r3, [sp, #16]
 80036b8:	9307      	str	r3, [sp, #28]
 80036ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036be:	931a      	str	r3, [sp, #104]	@ 0x68
 80036c0:	4654      	mov	r4, sl
 80036c2:	2205      	movs	r2, #5
 80036c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036c8:	484e      	ldr	r0, [pc, #312]	@ (8003804 <_svfiprintf_r+0x1e4>)
 80036ca:	f000 fa61 	bl	8003b90 <memchr>
 80036ce:	9a04      	ldr	r2, [sp, #16]
 80036d0:	b9d8      	cbnz	r0, 800370a <_svfiprintf_r+0xea>
 80036d2:	06d0      	lsls	r0, r2, #27
 80036d4:	bf44      	itt	mi
 80036d6:	2320      	movmi	r3, #32
 80036d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036dc:	0711      	lsls	r1, r2, #28
 80036de:	bf44      	itt	mi
 80036e0:	232b      	movmi	r3, #43	@ 0x2b
 80036e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036e6:	f89a 3000 	ldrb.w	r3, [sl]
 80036ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80036ec:	d015      	beq.n	800371a <_svfiprintf_r+0xfa>
 80036ee:	4654      	mov	r4, sl
 80036f0:	2000      	movs	r0, #0
 80036f2:	f04f 0c0a 	mov.w	ip, #10
 80036f6:	9a07      	ldr	r2, [sp, #28]
 80036f8:	4621      	mov	r1, r4
 80036fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036fe:	3b30      	subs	r3, #48	@ 0x30
 8003700:	2b09      	cmp	r3, #9
 8003702:	d94b      	bls.n	800379c <_svfiprintf_r+0x17c>
 8003704:	b1b0      	cbz	r0, 8003734 <_svfiprintf_r+0x114>
 8003706:	9207      	str	r2, [sp, #28]
 8003708:	e014      	b.n	8003734 <_svfiprintf_r+0x114>
 800370a:	eba0 0308 	sub.w	r3, r0, r8
 800370e:	fa09 f303 	lsl.w	r3, r9, r3
 8003712:	4313      	orrs	r3, r2
 8003714:	46a2      	mov	sl, r4
 8003716:	9304      	str	r3, [sp, #16]
 8003718:	e7d2      	b.n	80036c0 <_svfiprintf_r+0xa0>
 800371a:	9b03      	ldr	r3, [sp, #12]
 800371c:	1d19      	adds	r1, r3, #4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	9103      	str	r1, [sp, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	bfbb      	ittet	lt
 8003726:	425b      	neglt	r3, r3
 8003728:	f042 0202 	orrlt.w	r2, r2, #2
 800372c:	9307      	strge	r3, [sp, #28]
 800372e:	9307      	strlt	r3, [sp, #28]
 8003730:	bfb8      	it	lt
 8003732:	9204      	strlt	r2, [sp, #16]
 8003734:	7823      	ldrb	r3, [r4, #0]
 8003736:	2b2e      	cmp	r3, #46	@ 0x2e
 8003738:	d10a      	bne.n	8003750 <_svfiprintf_r+0x130>
 800373a:	7863      	ldrb	r3, [r4, #1]
 800373c:	2b2a      	cmp	r3, #42	@ 0x2a
 800373e:	d132      	bne.n	80037a6 <_svfiprintf_r+0x186>
 8003740:	9b03      	ldr	r3, [sp, #12]
 8003742:	3402      	adds	r4, #2
 8003744:	1d1a      	adds	r2, r3, #4
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	9203      	str	r2, [sp, #12]
 800374a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800374e:	9305      	str	r3, [sp, #20]
 8003750:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003808 <_svfiprintf_r+0x1e8>
 8003754:	2203      	movs	r2, #3
 8003756:	4650      	mov	r0, sl
 8003758:	7821      	ldrb	r1, [r4, #0]
 800375a:	f000 fa19 	bl	8003b90 <memchr>
 800375e:	b138      	cbz	r0, 8003770 <_svfiprintf_r+0x150>
 8003760:	2240      	movs	r2, #64	@ 0x40
 8003762:	9b04      	ldr	r3, [sp, #16]
 8003764:	eba0 000a 	sub.w	r0, r0, sl
 8003768:	4082      	lsls	r2, r0
 800376a:	4313      	orrs	r3, r2
 800376c:	3401      	adds	r4, #1
 800376e:	9304      	str	r3, [sp, #16]
 8003770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003774:	2206      	movs	r2, #6
 8003776:	4825      	ldr	r0, [pc, #148]	@ (800380c <_svfiprintf_r+0x1ec>)
 8003778:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800377c:	f000 fa08 	bl	8003b90 <memchr>
 8003780:	2800      	cmp	r0, #0
 8003782:	d036      	beq.n	80037f2 <_svfiprintf_r+0x1d2>
 8003784:	4b22      	ldr	r3, [pc, #136]	@ (8003810 <_svfiprintf_r+0x1f0>)
 8003786:	bb1b      	cbnz	r3, 80037d0 <_svfiprintf_r+0x1b0>
 8003788:	9b03      	ldr	r3, [sp, #12]
 800378a:	3307      	adds	r3, #7
 800378c:	f023 0307 	bic.w	r3, r3, #7
 8003790:	3308      	adds	r3, #8
 8003792:	9303      	str	r3, [sp, #12]
 8003794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003796:	4433      	add	r3, r6
 8003798:	9309      	str	r3, [sp, #36]	@ 0x24
 800379a:	e76a      	b.n	8003672 <_svfiprintf_r+0x52>
 800379c:	460c      	mov	r4, r1
 800379e:	2001      	movs	r0, #1
 80037a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80037a4:	e7a8      	b.n	80036f8 <_svfiprintf_r+0xd8>
 80037a6:	2300      	movs	r3, #0
 80037a8:	f04f 0c0a 	mov.w	ip, #10
 80037ac:	4619      	mov	r1, r3
 80037ae:	3401      	adds	r4, #1
 80037b0:	9305      	str	r3, [sp, #20]
 80037b2:	4620      	mov	r0, r4
 80037b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037b8:	3a30      	subs	r2, #48	@ 0x30
 80037ba:	2a09      	cmp	r2, #9
 80037bc:	d903      	bls.n	80037c6 <_svfiprintf_r+0x1a6>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0c6      	beq.n	8003750 <_svfiprintf_r+0x130>
 80037c2:	9105      	str	r1, [sp, #20]
 80037c4:	e7c4      	b.n	8003750 <_svfiprintf_r+0x130>
 80037c6:	4604      	mov	r4, r0
 80037c8:	2301      	movs	r3, #1
 80037ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80037ce:	e7f0      	b.n	80037b2 <_svfiprintf_r+0x192>
 80037d0:	ab03      	add	r3, sp, #12
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	462a      	mov	r2, r5
 80037d6:	4638      	mov	r0, r7
 80037d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003814 <_svfiprintf_r+0x1f4>)
 80037da:	a904      	add	r1, sp, #16
 80037dc:	f3af 8000 	nop.w
 80037e0:	1c42      	adds	r2, r0, #1
 80037e2:	4606      	mov	r6, r0
 80037e4:	d1d6      	bne.n	8003794 <_svfiprintf_r+0x174>
 80037e6:	89ab      	ldrh	r3, [r5, #12]
 80037e8:	065b      	lsls	r3, r3, #25
 80037ea:	f53f af2d 	bmi.w	8003648 <_svfiprintf_r+0x28>
 80037ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80037f0:	e72c      	b.n	800364c <_svfiprintf_r+0x2c>
 80037f2:	ab03      	add	r3, sp, #12
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	462a      	mov	r2, r5
 80037f8:	4638      	mov	r0, r7
 80037fa:	4b06      	ldr	r3, [pc, #24]	@ (8003814 <_svfiprintf_r+0x1f4>)
 80037fc:	a904      	add	r1, sp, #16
 80037fe:	f000 f87d 	bl	80038fc <_printf_i>
 8003802:	e7ed      	b.n	80037e0 <_svfiprintf_r+0x1c0>
 8003804:	08003d02 	.word	0x08003d02
 8003808:	08003d08 	.word	0x08003d08
 800380c:	08003d0c 	.word	0x08003d0c
 8003810:	00000000 	.word	0x00000000
 8003814:	08003569 	.word	0x08003569

08003818 <_printf_common>:
 8003818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800381c:	4616      	mov	r6, r2
 800381e:	4698      	mov	r8, r3
 8003820:	688a      	ldr	r2, [r1, #8]
 8003822:	690b      	ldr	r3, [r1, #16]
 8003824:	4607      	mov	r7, r0
 8003826:	4293      	cmp	r3, r2
 8003828:	bfb8      	it	lt
 800382a:	4613      	movlt	r3, r2
 800382c:	6033      	str	r3, [r6, #0]
 800382e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003832:	460c      	mov	r4, r1
 8003834:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003838:	b10a      	cbz	r2, 800383e <_printf_common+0x26>
 800383a:	3301      	adds	r3, #1
 800383c:	6033      	str	r3, [r6, #0]
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	0699      	lsls	r1, r3, #26
 8003842:	bf42      	ittt	mi
 8003844:	6833      	ldrmi	r3, [r6, #0]
 8003846:	3302      	addmi	r3, #2
 8003848:	6033      	strmi	r3, [r6, #0]
 800384a:	6825      	ldr	r5, [r4, #0]
 800384c:	f015 0506 	ands.w	r5, r5, #6
 8003850:	d106      	bne.n	8003860 <_printf_common+0x48>
 8003852:	f104 0a19 	add.w	sl, r4, #25
 8003856:	68e3      	ldr	r3, [r4, #12]
 8003858:	6832      	ldr	r2, [r6, #0]
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	42ab      	cmp	r3, r5
 800385e:	dc2b      	bgt.n	80038b8 <_printf_common+0xa0>
 8003860:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003864:	6822      	ldr	r2, [r4, #0]
 8003866:	3b00      	subs	r3, #0
 8003868:	bf18      	it	ne
 800386a:	2301      	movne	r3, #1
 800386c:	0692      	lsls	r2, r2, #26
 800386e:	d430      	bmi.n	80038d2 <_printf_common+0xba>
 8003870:	4641      	mov	r1, r8
 8003872:	4638      	mov	r0, r7
 8003874:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003878:	47c8      	blx	r9
 800387a:	3001      	adds	r0, #1
 800387c:	d023      	beq.n	80038c6 <_printf_common+0xae>
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	6922      	ldr	r2, [r4, #16]
 8003882:	f003 0306 	and.w	r3, r3, #6
 8003886:	2b04      	cmp	r3, #4
 8003888:	bf14      	ite	ne
 800388a:	2500      	movne	r5, #0
 800388c:	6833      	ldreq	r3, [r6, #0]
 800388e:	f04f 0600 	mov.w	r6, #0
 8003892:	bf08      	it	eq
 8003894:	68e5      	ldreq	r5, [r4, #12]
 8003896:	f104 041a 	add.w	r4, r4, #26
 800389a:	bf08      	it	eq
 800389c:	1aed      	subeq	r5, r5, r3
 800389e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80038a2:	bf08      	it	eq
 80038a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038a8:	4293      	cmp	r3, r2
 80038aa:	bfc4      	itt	gt
 80038ac:	1a9b      	subgt	r3, r3, r2
 80038ae:	18ed      	addgt	r5, r5, r3
 80038b0:	42b5      	cmp	r5, r6
 80038b2:	d11a      	bne.n	80038ea <_printf_common+0xd2>
 80038b4:	2000      	movs	r0, #0
 80038b6:	e008      	b.n	80038ca <_printf_common+0xb2>
 80038b8:	2301      	movs	r3, #1
 80038ba:	4652      	mov	r2, sl
 80038bc:	4641      	mov	r1, r8
 80038be:	4638      	mov	r0, r7
 80038c0:	47c8      	blx	r9
 80038c2:	3001      	adds	r0, #1
 80038c4:	d103      	bne.n	80038ce <_printf_common+0xb6>
 80038c6:	f04f 30ff 	mov.w	r0, #4294967295
 80038ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ce:	3501      	adds	r5, #1
 80038d0:	e7c1      	b.n	8003856 <_printf_common+0x3e>
 80038d2:	2030      	movs	r0, #48	@ 0x30
 80038d4:	18e1      	adds	r1, r4, r3
 80038d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038e0:	4422      	add	r2, r4
 80038e2:	3302      	adds	r3, #2
 80038e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038e8:	e7c2      	b.n	8003870 <_printf_common+0x58>
 80038ea:	2301      	movs	r3, #1
 80038ec:	4622      	mov	r2, r4
 80038ee:	4641      	mov	r1, r8
 80038f0:	4638      	mov	r0, r7
 80038f2:	47c8      	blx	r9
 80038f4:	3001      	adds	r0, #1
 80038f6:	d0e6      	beq.n	80038c6 <_printf_common+0xae>
 80038f8:	3601      	adds	r6, #1
 80038fa:	e7d9      	b.n	80038b0 <_printf_common+0x98>

080038fc <_printf_i>:
 80038fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003900:	7e0f      	ldrb	r7, [r1, #24]
 8003902:	4691      	mov	r9, r2
 8003904:	2f78      	cmp	r7, #120	@ 0x78
 8003906:	4680      	mov	r8, r0
 8003908:	460c      	mov	r4, r1
 800390a:	469a      	mov	sl, r3
 800390c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800390e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003912:	d807      	bhi.n	8003924 <_printf_i+0x28>
 8003914:	2f62      	cmp	r7, #98	@ 0x62
 8003916:	d80a      	bhi.n	800392e <_printf_i+0x32>
 8003918:	2f00      	cmp	r7, #0
 800391a:	f000 80d3 	beq.w	8003ac4 <_printf_i+0x1c8>
 800391e:	2f58      	cmp	r7, #88	@ 0x58
 8003920:	f000 80ba 	beq.w	8003a98 <_printf_i+0x19c>
 8003924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003928:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800392c:	e03a      	b.n	80039a4 <_printf_i+0xa8>
 800392e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003932:	2b15      	cmp	r3, #21
 8003934:	d8f6      	bhi.n	8003924 <_printf_i+0x28>
 8003936:	a101      	add	r1, pc, #4	@ (adr r1, 800393c <_printf_i+0x40>)
 8003938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800393c:	08003995 	.word	0x08003995
 8003940:	080039a9 	.word	0x080039a9
 8003944:	08003925 	.word	0x08003925
 8003948:	08003925 	.word	0x08003925
 800394c:	08003925 	.word	0x08003925
 8003950:	08003925 	.word	0x08003925
 8003954:	080039a9 	.word	0x080039a9
 8003958:	08003925 	.word	0x08003925
 800395c:	08003925 	.word	0x08003925
 8003960:	08003925 	.word	0x08003925
 8003964:	08003925 	.word	0x08003925
 8003968:	08003aab 	.word	0x08003aab
 800396c:	080039d3 	.word	0x080039d3
 8003970:	08003a65 	.word	0x08003a65
 8003974:	08003925 	.word	0x08003925
 8003978:	08003925 	.word	0x08003925
 800397c:	08003acd 	.word	0x08003acd
 8003980:	08003925 	.word	0x08003925
 8003984:	080039d3 	.word	0x080039d3
 8003988:	08003925 	.word	0x08003925
 800398c:	08003925 	.word	0x08003925
 8003990:	08003a6d 	.word	0x08003a6d
 8003994:	6833      	ldr	r3, [r6, #0]
 8003996:	1d1a      	adds	r2, r3, #4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6032      	str	r2, [r6, #0]
 800399c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039a4:	2301      	movs	r3, #1
 80039a6:	e09e      	b.n	8003ae6 <_printf_i+0x1ea>
 80039a8:	6833      	ldr	r3, [r6, #0]
 80039aa:	6820      	ldr	r0, [r4, #0]
 80039ac:	1d19      	adds	r1, r3, #4
 80039ae:	6031      	str	r1, [r6, #0]
 80039b0:	0606      	lsls	r6, r0, #24
 80039b2:	d501      	bpl.n	80039b8 <_printf_i+0xbc>
 80039b4:	681d      	ldr	r5, [r3, #0]
 80039b6:	e003      	b.n	80039c0 <_printf_i+0xc4>
 80039b8:	0645      	lsls	r5, r0, #25
 80039ba:	d5fb      	bpl.n	80039b4 <_printf_i+0xb8>
 80039bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039c0:	2d00      	cmp	r5, #0
 80039c2:	da03      	bge.n	80039cc <_printf_i+0xd0>
 80039c4:	232d      	movs	r3, #45	@ 0x2d
 80039c6:	426d      	negs	r5, r5
 80039c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039cc:	230a      	movs	r3, #10
 80039ce:	4859      	ldr	r0, [pc, #356]	@ (8003b34 <_printf_i+0x238>)
 80039d0:	e011      	b.n	80039f6 <_printf_i+0xfa>
 80039d2:	6821      	ldr	r1, [r4, #0]
 80039d4:	6833      	ldr	r3, [r6, #0]
 80039d6:	0608      	lsls	r0, r1, #24
 80039d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80039dc:	d402      	bmi.n	80039e4 <_printf_i+0xe8>
 80039de:	0649      	lsls	r1, r1, #25
 80039e0:	bf48      	it	mi
 80039e2:	b2ad      	uxthmi	r5, r5
 80039e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80039e6:	6033      	str	r3, [r6, #0]
 80039e8:	bf14      	ite	ne
 80039ea:	230a      	movne	r3, #10
 80039ec:	2308      	moveq	r3, #8
 80039ee:	4851      	ldr	r0, [pc, #324]	@ (8003b34 <_printf_i+0x238>)
 80039f0:	2100      	movs	r1, #0
 80039f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80039f6:	6866      	ldr	r6, [r4, #4]
 80039f8:	2e00      	cmp	r6, #0
 80039fa:	bfa8      	it	ge
 80039fc:	6821      	ldrge	r1, [r4, #0]
 80039fe:	60a6      	str	r6, [r4, #8]
 8003a00:	bfa4      	itt	ge
 8003a02:	f021 0104 	bicge.w	r1, r1, #4
 8003a06:	6021      	strge	r1, [r4, #0]
 8003a08:	b90d      	cbnz	r5, 8003a0e <_printf_i+0x112>
 8003a0a:	2e00      	cmp	r6, #0
 8003a0c:	d04b      	beq.n	8003aa6 <_printf_i+0x1aa>
 8003a0e:	4616      	mov	r6, r2
 8003a10:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a14:	fb03 5711 	mls	r7, r3, r1, r5
 8003a18:	5dc7      	ldrb	r7, [r0, r7]
 8003a1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a1e:	462f      	mov	r7, r5
 8003a20:	42bb      	cmp	r3, r7
 8003a22:	460d      	mov	r5, r1
 8003a24:	d9f4      	bls.n	8003a10 <_printf_i+0x114>
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d10b      	bne.n	8003a42 <_printf_i+0x146>
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	07df      	lsls	r7, r3, #31
 8003a2e:	d508      	bpl.n	8003a42 <_printf_i+0x146>
 8003a30:	6923      	ldr	r3, [r4, #16]
 8003a32:	6861      	ldr	r1, [r4, #4]
 8003a34:	4299      	cmp	r1, r3
 8003a36:	bfde      	ittt	le
 8003a38:	2330      	movle	r3, #48	@ 0x30
 8003a3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a42:	1b92      	subs	r2, r2, r6
 8003a44:	6122      	str	r2, [r4, #16]
 8003a46:	464b      	mov	r3, r9
 8003a48:	4621      	mov	r1, r4
 8003a4a:	4640      	mov	r0, r8
 8003a4c:	f8cd a000 	str.w	sl, [sp]
 8003a50:	aa03      	add	r2, sp, #12
 8003a52:	f7ff fee1 	bl	8003818 <_printf_common>
 8003a56:	3001      	adds	r0, #1
 8003a58:	d14a      	bne.n	8003af0 <_printf_i+0x1f4>
 8003a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5e:	b004      	add	sp, #16
 8003a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	f043 0320 	orr.w	r3, r3, #32
 8003a6a:	6023      	str	r3, [r4, #0]
 8003a6c:	2778      	movs	r7, #120	@ 0x78
 8003a6e:	4832      	ldr	r0, [pc, #200]	@ (8003b38 <_printf_i+0x23c>)
 8003a70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	6831      	ldr	r1, [r6, #0]
 8003a78:	061f      	lsls	r7, r3, #24
 8003a7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a7e:	d402      	bmi.n	8003a86 <_printf_i+0x18a>
 8003a80:	065f      	lsls	r7, r3, #25
 8003a82:	bf48      	it	mi
 8003a84:	b2ad      	uxthmi	r5, r5
 8003a86:	6031      	str	r1, [r6, #0]
 8003a88:	07d9      	lsls	r1, r3, #31
 8003a8a:	bf44      	itt	mi
 8003a8c:	f043 0320 	orrmi.w	r3, r3, #32
 8003a90:	6023      	strmi	r3, [r4, #0]
 8003a92:	b11d      	cbz	r5, 8003a9c <_printf_i+0x1a0>
 8003a94:	2310      	movs	r3, #16
 8003a96:	e7ab      	b.n	80039f0 <_printf_i+0xf4>
 8003a98:	4826      	ldr	r0, [pc, #152]	@ (8003b34 <_printf_i+0x238>)
 8003a9a:	e7e9      	b.n	8003a70 <_printf_i+0x174>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	f023 0320 	bic.w	r3, r3, #32
 8003aa2:	6023      	str	r3, [r4, #0]
 8003aa4:	e7f6      	b.n	8003a94 <_printf_i+0x198>
 8003aa6:	4616      	mov	r6, r2
 8003aa8:	e7bd      	b.n	8003a26 <_printf_i+0x12a>
 8003aaa:	6833      	ldr	r3, [r6, #0]
 8003aac:	6825      	ldr	r5, [r4, #0]
 8003aae:	1d18      	adds	r0, r3, #4
 8003ab0:	6961      	ldr	r1, [r4, #20]
 8003ab2:	6030      	str	r0, [r6, #0]
 8003ab4:	062e      	lsls	r6, r5, #24
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	d501      	bpl.n	8003abe <_printf_i+0x1c2>
 8003aba:	6019      	str	r1, [r3, #0]
 8003abc:	e002      	b.n	8003ac4 <_printf_i+0x1c8>
 8003abe:	0668      	lsls	r0, r5, #25
 8003ac0:	d5fb      	bpl.n	8003aba <_printf_i+0x1be>
 8003ac2:	8019      	strh	r1, [r3, #0]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	4616      	mov	r6, r2
 8003ac8:	6123      	str	r3, [r4, #16]
 8003aca:	e7bc      	b.n	8003a46 <_printf_i+0x14a>
 8003acc:	6833      	ldr	r3, [r6, #0]
 8003ace:	2100      	movs	r1, #0
 8003ad0:	1d1a      	adds	r2, r3, #4
 8003ad2:	6032      	str	r2, [r6, #0]
 8003ad4:	681e      	ldr	r6, [r3, #0]
 8003ad6:	6862      	ldr	r2, [r4, #4]
 8003ad8:	4630      	mov	r0, r6
 8003ada:	f000 f859 	bl	8003b90 <memchr>
 8003ade:	b108      	cbz	r0, 8003ae4 <_printf_i+0x1e8>
 8003ae0:	1b80      	subs	r0, r0, r6
 8003ae2:	6060      	str	r0, [r4, #4]
 8003ae4:	6863      	ldr	r3, [r4, #4]
 8003ae6:	6123      	str	r3, [r4, #16]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003aee:	e7aa      	b.n	8003a46 <_printf_i+0x14a>
 8003af0:	4632      	mov	r2, r6
 8003af2:	4649      	mov	r1, r9
 8003af4:	4640      	mov	r0, r8
 8003af6:	6923      	ldr	r3, [r4, #16]
 8003af8:	47d0      	blx	sl
 8003afa:	3001      	adds	r0, #1
 8003afc:	d0ad      	beq.n	8003a5a <_printf_i+0x15e>
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	079b      	lsls	r3, r3, #30
 8003b02:	d413      	bmi.n	8003b2c <_printf_i+0x230>
 8003b04:	68e0      	ldr	r0, [r4, #12]
 8003b06:	9b03      	ldr	r3, [sp, #12]
 8003b08:	4298      	cmp	r0, r3
 8003b0a:	bfb8      	it	lt
 8003b0c:	4618      	movlt	r0, r3
 8003b0e:	e7a6      	b.n	8003a5e <_printf_i+0x162>
 8003b10:	2301      	movs	r3, #1
 8003b12:	4632      	mov	r2, r6
 8003b14:	4649      	mov	r1, r9
 8003b16:	4640      	mov	r0, r8
 8003b18:	47d0      	blx	sl
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d09d      	beq.n	8003a5a <_printf_i+0x15e>
 8003b1e:	3501      	adds	r5, #1
 8003b20:	68e3      	ldr	r3, [r4, #12]
 8003b22:	9903      	ldr	r1, [sp, #12]
 8003b24:	1a5b      	subs	r3, r3, r1
 8003b26:	42ab      	cmp	r3, r5
 8003b28:	dcf2      	bgt.n	8003b10 <_printf_i+0x214>
 8003b2a:	e7eb      	b.n	8003b04 <_printf_i+0x208>
 8003b2c:	2500      	movs	r5, #0
 8003b2e:	f104 0619 	add.w	r6, r4, #25
 8003b32:	e7f5      	b.n	8003b20 <_printf_i+0x224>
 8003b34:	08003d13 	.word	0x08003d13
 8003b38:	08003d24 	.word	0x08003d24

08003b3c <memmove>:
 8003b3c:	4288      	cmp	r0, r1
 8003b3e:	b510      	push	{r4, lr}
 8003b40:	eb01 0402 	add.w	r4, r1, r2
 8003b44:	d902      	bls.n	8003b4c <memmove+0x10>
 8003b46:	4284      	cmp	r4, r0
 8003b48:	4623      	mov	r3, r4
 8003b4a:	d807      	bhi.n	8003b5c <memmove+0x20>
 8003b4c:	1e43      	subs	r3, r0, #1
 8003b4e:	42a1      	cmp	r1, r4
 8003b50:	d008      	beq.n	8003b64 <memmove+0x28>
 8003b52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b5a:	e7f8      	b.n	8003b4e <memmove+0x12>
 8003b5c:	4601      	mov	r1, r0
 8003b5e:	4402      	add	r2, r0
 8003b60:	428a      	cmp	r2, r1
 8003b62:	d100      	bne.n	8003b66 <memmove+0x2a>
 8003b64:	bd10      	pop	{r4, pc}
 8003b66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b6e:	e7f7      	b.n	8003b60 <memmove+0x24>

08003b70 <_sbrk_r>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	2300      	movs	r3, #0
 8003b74:	4d05      	ldr	r5, [pc, #20]	@ (8003b8c <_sbrk_r+0x1c>)
 8003b76:	4604      	mov	r4, r0
 8003b78:	4608      	mov	r0, r1
 8003b7a:	602b      	str	r3, [r5, #0]
 8003b7c:	f7fd fd7e 	bl	800167c <_sbrk>
 8003b80:	1c43      	adds	r3, r0, #1
 8003b82:	d102      	bne.n	8003b8a <_sbrk_r+0x1a>
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	b103      	cbz	r3, 8003b8a <_sbrk_r+0x1a>
 8003b88:	6023      	str	r3, [r4, #0]
 8003b8a:	bd38      	pop	{r3, r4, r5, pc}
 8003b8c:	20000374 	.word	0x20000374

08003b90 <memchr>:
 8003b90:	4603      	mov	r3, r0
 8003b92:	b510      	push	{r4, lr}
 8003b94:	b2c9      	uxtb	r1, r1
 8003b96:	4402      	add	r2, r0
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	d101      	bne.n	8003ba2 <memchr+0x12>
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	e003      	b.n	8003baa <memchr+0x1a>
 8003ba2:	7804      	ldrb	r4, [r0, #0]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	428c      	cmp	r4, r1
 8003ba8:	d1f6      	bne.n	8003b98 <memchr+0x8>
 8003baa:	bd10      	pop	{r4, pc}

08003bac <memcpy>:
 8003bac:	440a      	add	r2, r1
 8003bae:	4291      	cmp	r1, r2
 8003bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bb4:	d100      	bne.n	8003bb8 <memcpy+0xc>
 8003bb6:	4770      	bx	lr
 8003bb8:	b510      	push	{r4, lr}
 8003bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bbe:	4291      	cmp	r1, r2
 8003bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bc4:	d1f9      	bne.n	8003bba <memcpy+0xe>
 8003bc6:	bd10      	pop	{r4, pc}

08003bc8 <_realloc_r>:
 8003bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bcc:	4680      	mov	r8, r0
 8003bce:	4615      	mov	r5, r2
 8003bd0:	460c      	mov	r4, r1
 8003bd2:	b921      	cbnz	r1, 8003bde <_realloc_r+0x16>
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bda:	f7ff bc39 	b.w	8003450 <_malloc_r>
 8003bde:	b92a      	cbnz	r2, 8003bec <_realloc_r+0x24>
 8003be0:	f7ff fbcc 	bl	800337c <_free_r>
 8003be4:	2400      	movs	r4, #0
 8003be6:	4620      	mov	r0, r4
 8003be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bec:	f000 f81a 	bl	8003c24 <_malloc_usable_size_r>
 8003bf0:	4285      	cmp	r5, r0
 8003bf2:	4606      	mov	r6, r0
 8003bf4:	d802      	bhi.n	8003bfc <_realloc_r+0x34>
 8003bf6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003bfa:	d8f4      	bhi.n	8003be6 <_realloc_r+0x1e>
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	4640      	mov	r0, r8
 8003c00:	f7ff fc26 	bl	8003450 <_malloc_r>
 8003c04:	4607      	mov	r7, r0
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d0ec      	beq.n	8003be4 <_realloc_r+0x1c>
 8003c0a:	42b5      	cmp	r5, r6
 8003c0c:	462a      	mov	r2, r5
 8003c0e:	4621      	mov	r1, r4
 8003c10:	bf28      	it	cs
 8003c12:	4632      	movcs	r2, r6
 8003c14:	f7ff ffca 	bl	8003bac <memcpy>
 8003c18:	4621      	mov	r1, r4
 8003c1a:	4640      	mov	r0, r8
 8003c1c:	f7ff fbae 	bl	800337c <_free_r>
 8003c20:	463c      	mov	r4, r7
 8003c22:	e7e0      	b.n	8003be6 <_realloc_r+0x1e>

08003c24 <_malloc_usable_size_r>:
 8003c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c28:	1f18      	subs	r0, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bfbc      	itt	lt
 8003c2e:	580b      	ldrlt	r3, [r1, r0]
 8003c30:	18c0      	addlt	r0, r0, r3
 8003c32:	4770      	bx	lr

08003c34 <_init>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	bf00      	nop
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr

08003c40 <_fini>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	bf00      	nop
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr
